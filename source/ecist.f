      subroutine ecist(ecisinp,ecisout,eciscs,ecisin,ecistr,            ak000000
     +  ecisang,ecisleg,ecispot)                                        ak000000
c 19/04/07                                                      ecis06  ecis-000
c                                                                       ecis-001
c the common /inout/ is used in any subroutine with standard input or   ecis-002
c                            output and save or restart a search.       ecis-003
c for the common  /dcons/ see calc.                                     ecis-004
c                                                                       ecis-005
c significance of the quantities in common /inout/:                     ecis-006
c  mr:        standard input file (usual value 5).                      ecis-007
c  mw:        standard output file (usual value 6).                     ecis-008
c  ms:        file to save or restart a search in rest (usual value 8). ecis-009
c                                                                       ecis-010
c significance of the quantities in common /dcons/:                     ecis-011
c  cm:        atomic mass in mev.                                       ecis-012
c  chb:       planck constant x speed of light /(2*pi) in mev*fermi.    ecis-013
c  cz:        electric constant.                                        ecis-014
c   defined:  cm,chb,cz                                                 ecis-015
c                                                                       ecis-016
c constants computed from the fundamental constants, atomic mass, hbar*cecis-017
c and alpha, as given in the journal of physics g, volume 33, page 97,  ecis-018
c (july 2006) referring for these values to the 2002 codata set which   ecis-019
c may be found at http://physics.nist.gov/constants.                    ecis-020
c     cm=931.494043 +/- 0.000080 mev/c**2                               ecis-021
c     chb=197.326968 +/- 0.000017 mev fm                                ecis-022
c     cz=137.03599911 +/- 0.00000046 without dimension                  ecis-023
c                                                                       ecis-024
c***********************************************************************ecis-025
      implicit real*8 (a-h,o-z)                                         ecis-026
c     parameter (idmx=600000)                                           ecis-027
      parameter (idmx=8000000)                                          ak000000
      character*4 cw(2,idmx)                                            ecis-028
      character*13 ecisinp,ecisout,eciscs,ecisin,ecistr,                ak000000
     +  ecisang,ecisleg,ecispot                                         ak000000
      dimension nw(2,idmx),dw(idmx)                                     ecis-029
      equivalence (dw,nw,cw,w)                                          ecis-030
      common dw                                                         ecis-031
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            ecis-032
      common /inout/ mr,mw,ms                                           ecis-033
      cm=931.494043d0                                                   ecis-034
      chb=197.326968d0                                                  ecis-035
      cz=137.03599911d0                                                 ecis-036
      mr=1                                                              ak000000
      mw=2                                                              ak000000
c     mr=5                                                              ecis-037
c     mw=6                                                              ecis-038
      ms=8                                                              ecis-039
      open(unit=1,file=ecisinp,status='unknown')                        ak000000
      open(unit=2,file=ecisout,status='unknown')                        ak000000
      if (eciscs.ne.'null         ')                                    ak000000
     +  open(unit=58,file=eciscs,status='unknown')                      ak000000
      if (ecisin.ne.'null         ')                                    ak000000
     +  open(unit=59,file=ecisin,status='unknown')                      ak000000
      if (ecistr.ne.'null         ')                                    ak000000
     +  open(unit=63,file=ecistr,status='unknown')                      ak000000
      if (ecisang.ne.'null         ')                                   ak000000
     +  open(unit=66,file=ecisang,status='unknown')                     ak000000
      if (ecisleg.ne.'null         ')                                   ak000000
     +  open(unit=65,file=ecisleg,status='unknown')                     ak000000
      if (ecispot.ne.'null         ')                                   ak000000
     +  open(unit=67,file=ecispot,status='unknown')                     ak000000
      call calc(nw,cw,dw,idmx)                                          ecis-040
      close (unit=1)                                                    ak000000
      close (unit=2)                                                    ak000000
      if (eciscs.ne.'null         ') close (unit=58)                    ak000000
      if (ecisin.ne.'null         ') close (unit=59)                    ak000000
      if (ecistr.ne.'null         ') close (unit=63)                    ak000000
      if (ecisang.ne.'null         ') close (unit=66)                   ak000000
      if (ecisleg.ne.'null         ') close (unit=65)                   ak000000
      if (ecispot.ne.'null         ') close (unit=67)                   ak000000
      return                                                            ak000000
      stop                                                              ecis-041
      end                                                               ecis-042
c 19/11/05                                                      ecis06  memo-000
      subroutine memo(name,idmt,nplace)                                 memo-001
c control of memory area.                                               memo-002
c input:     name:    name of calling subroutine.                       memo-003
c            idmt:    previous space.                                   memo-004
c            nplace:  requested space.                                  memo-005
c                                                                       memo-006
c this subroutine can be replaced by a subroutine increasing the common memo-007
c if it is possible.                                                    memo-008
c***********************************************************************memo-009
      character*4 name                                                  memo-010
      common /inout/ mr,mw,ms                                           memo-011
      if (idmt.ge.nplace) return                                        memo-012
      write (mw,1000) idmt,nplace,name                                  memo-013
      stop                                                              memo-014
 1000 format (' not enough place .....   ',i10,' memories allowed',i10,'memo-015
     1 memories requested.'///' in ',a4,'  ...  stop  ...')             memo-016
      end                                                               memo-017
c 07/02/06                                                      ecis06  hora-000
      subroutine hora                                                   hora-001
c gives the time elapsed since the first call and since the last call.  hora-002
c***********************************************************************hora-003
      dimension a(2)                                                    hora-004
      common /inout/ mr,mw,ms                                           hora-005
      data m0,m2 /2*0/                                                  hora-006
      save m0,m2                                                        hora-007
      m1=int(1000.*etime(a))                                            hora-008
      n5=m1-m2                                                          hora-009
      nt=m1-m0                                                          hora-010
      m2=m1                                                             hora-011
      ns=nt/1000                                                        hora-012
      nt=nt-1000*ns                                                     hora-013
      nm=ns/60                                                          hora-014
      ns=ns-60*nm                                                       hora-015
      nh=nm/60                                                          hora-016
      nm=nm-60*nh                                                       hora-017
      write (mw,1000) nh,nm,ns,nt,n5                                    hora-018
      return                                                            hora-019
 1000 format (' *** total time ***',i3,'h',i3,'mn',i3,'s',i4,' ms',10x,'hora-020
     1difference since last call',i9,' milliseconds.')                  hora-021
      end                                                               hora-022
c 02/06/07                                                      ecis06  calc-000
      subroutine calc(nw,cw,dw,idmx)                                    calc-001
c main subroutine of the program.                                       calc-002
c input:     nw:      working area for integers.                        calc-003
c            cw:      working area for characters.                      calc-004
c            dw:      working area for double precision.                calc-005
c            idmx:    length of dw.                                     calc-006
c               nw,cw,dw are in equivalence by call.                    calc-007
c                                                                       calc-008
c the common /addre/ is used in calc, calx, cal1, vari, eval and rest.  calc-009
c the common /dcons/ is used in ecis, calc, lecl, colf, khco, conu,     calc-010
c                               cal1, pote, rotp, rotz, stdp, stbf,     calc-011
c                               mtch, scam, sche, lcsp, resu, scat      calc-012
c                               and rest.                               calc-013
c the common /integ/ is used in calc, calx, deph, lecd, cal1, vari,     calc-014
c                               eval and rest.                          calc-015
c the common /titre/ is used in calc, calx, resu, eval and rest.        calc-016
c                                                                       calc-017
c for the common  /conve/, /dchi2/ and /ncomp/ see calx.                calc-018
c for the commons /pote1/ and /pote2/ see redm.                         calc-019
c                                                                       calc-020
c significance of the quantities in common /addre/:                     calc-021
c  niph:      number of phonons for the harmonic vibrational model.     calc-022
c  njit:      data for interpolation on total spin.                     calc-023
c  nwv:       non integer values for the channels.                      calc-024
c  nipp:      dispersion parameters.                                    calc-025
c  npar:      indications for nuclear parameters.                       calc-026
c  npaa:      values of nuclear parameters.                             calc-027
c  nscn:      level density description.                                calc-028
c  nfis:      fission data for compound nucleus.                        calc-029
c  ngam:      gamma data for compound nucleus.                          calc-030
c  nniv:      addresses of reduced nuclear matrix elements and coulomb  calc-031
c             integrals in niv(ncoll,ncoll,3).                          calc-032
c  npot:      optical potential parameters.                             calc-033
c  nbeta:     deformation parameters.                                   calc-034
c  nfm:       helicities and observables (see deph,lecd and obse).      calc-035
c  ntgx:      beginning of chi2 and normalisation of data.              calc-036
c  ndonn:     experimental data.                                        calc-037
c  nnvi:      table of addresses of coupling coefficients.              calc-038
c  nde:       search accuracies.                                        calc-039
c  nise:      indexes of the variable parameters in search.             calc-040
c  nrc:       permanent working field for the search.                   calc-041
c  niw:       integer working field for the search.                     calc-042
c  nnwi:      same as nnvi for symmetrised equations.                   calc-043
c  ncc:       table of energies, l*(l+1) and l*s  (see quan).           calc-044
c  mcc:       same as ncc for symmetrised equations.                    calc-045
c  nxa:       table of coefficients of symmetrisation.                  calc-046
c  nam1:      computation of observables (see obse).                    calc-047
c  nfac:      table of log of factorials for geometric coefficients.    calc-048
c  nfg:       coulomb functions and finite integrals.                   calc-049
c  nxg:       coulomb phases and infinite integrals.                    calc-050
c  nres:      functions for the search.                                 calc-051
c  nxx:       variables for the search.                                 calc-052
c  nt:        table of reduced nuclear matrix elements.                 calc-053
c  nivq:      table of multipoles.                                      calc-054
c  nivy:      table of form factor identification ivy (for computation).calc-055
c  nivz:      table of form factor identification ivz (for use).        calc-056
c  ncoi:      address of the table for discretisation of continuum.     calc-057
c  mipi:      address of "ipim" for the discretisation of continuum.    calc-058
c  nxd:       address of weights and steps of continuum.                calc-059
c  mwv:       same as nwv for the discretisation of continuum.          calc-060
c  nixt:      transmission coefficients of uncoupled states.            calc-061
c  nty:       temporary results of compound nucleus for interpolation.  calc-062
c  nsm:       standard and helicity scattering matrix elements.         calc-063
c  ntx:       partial reaction cross sections and compound nucleus.     calc-064
c  nry:       compound nucleus coefficients.                            calc-065
c  nrco:      strength of coulomb central potentials for corrections.   calc-066
c  nrdo:      strength of coulomb transition potentials for corrections.calc-067
c  nvc1:      real potentials.                                          calc-068
c  nvc2:      imaginary potentials.                                     calc-069
c  nnc:       first free address after computation of potentials.       calc-070
c  ncx:       first free address for computation of potentials.         calc-071
c   defined:  npot,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,nty,nsm,ntx,calc-072
c             nry,,nrdo,nvc1,nvc2,nnc,ncx.                              calc-073
c   used:     niph,nwv,nipp,npar,npaa,nscn,nniv,npot,nbeta,nde,nrc,niw, calc-074
c             nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,calc-075
c             nixt,nty,nsm,ntx,nry,nrco,nrdo,nvc1,nnc,ncx.              calc-076
c   not used: njit,nfis,ngam,nfm,ntgx,ndonn,nnvi,nise,nnwi,ncc,mcc,nxa, calc-077
c             nam1.                                                     calc-078
c                                                                       calc-079
c significance of the quantities in common /conve/:                     calc-080
c  h:         step size for integration.                                calc-081
c   used:     h.                                                        calc-082
c                                                                       calc-083
c significance of the quantities in common /dchi2/:                     calc-084
c  chi2m:     minimum chi-square in the search.                         calc-085
c   defined:  chi2m.                                                    calc-086
c                                                                       calc-087
c significance of the quantities in common /dcons/:                     calc-088
c  cm:        atomic mass in mev.                                       calc-089
c  chb:       planck constant /(2*pi) in mev*fermi.                     calc-090
c  cz:        electric constant.                                        calc-091
c  cmb:       atomic mass cm divided by h-bar*c.                        calc-092
c  ccz:       coulomb alpha constant.                                   calc-093
c  ck:        h-bar*c.                                                  calc-094
c  xz:        conversion factor to millibarns.                          calc-095
c   defined:  cmb,ccz,ck.                                               calc-096
c   used:     cm,chb,cz.                                                calc-097
c   not used: xz.                                                       calc-098
c                                                                       calc-099
c significance of the quantities in common /integ/:                     calc-100
c  idmt:      total working field length as single precision.           calc-101
c  nplace:    maximum working field used.                               calc-102
c  ncoll:     number of coupled channels.                               calc-103
c  njmax:     maximum number of j-values.                               calc-104
c  iterm:     maximum number of iterations.                             calc-105
c  jdm:       minimum number of total spin.                             calc-106
c  jit:       number of rates of interpolation on total spin.           calc-107
c  kmin:      minimum number of j values for compound nucleus.          calc-108
c  kmax:      maximum number of j values for compound nucleus.          calc-109
c  ncols:     number of channels with angular distributions.            calc-110
c  ncolt:     number of channels including uncoupled states.            calc-111
c  nbet:      number of different deformations (vibrations+rotations).  calc-112
c  lmx:       difference between number of j and of coulomb functions.  calc-113
c  lmax1:     number of l-values for coulomb functions.                 calc-114
c  nlt:       memories needed for legendre polynomials.                 calc-115
c  ism:       number of integration steps.                              calc-116
c  njc:       maximum number of observables at equidistant angles.      calc-117
c  jtx:       maximum number of calculated values for a plot.           calc-118
c  kcc:       number of independent amplitudes with uncoupled states.   calc-119
c  ms1:       largest particle multiplicity.                            calc-120
c  ms2:       largest target multiplicity.                              calc-121
c  kba:       number of independent amplitudes without uncoupled states.calc-122
c  kab:       maximum number of equations.                              calc-123
c  kbc:       maximum number of solutions.                              calc-124
c  jth:       maximum number of angles for a plot.                      calc-125
c  ncolr:     number of experimental angular distributions.             calc-126
c  nrec:      number of variables in search.                            calc-127
c  ntot:      number of experimental data.                              calc-128
c  lmax2:     number of l values for coulomb phases.                    calc-129
c  ke:        control of search (see fite).                             calc-130
c  itemm:     maximum number of iterations at the beginning of a run.   calc-131
c  kxt:       number of penetrabilities for uncoupled states.           calc-132
c  lmax3:     effective number of coulomb functions.                    calc-133
c  nrz:       number of results to save for minimum chi2..              calc-134
c  ntz:       number of memories to initialise to zero for scattering   calc-135
c             matrix and compound nucleus results..                     calc-136
c  ipm:       number pf j values used for scattering matrix (in cal1).  calc-137
c  ipk:       number pf j values used for compound nucleus (in cal1).   calc-138
c  mcm(1):    maximum angular momentum for central coulomb corrections. calc-139
c  mcm(2):    maximum angular momentum for spin-orbit coulomb correct.  calc-140
c  nct(1):    number of equations for positive parity.                  calc-141
c  nct(2):    number of equations for negative parity.                  calc-142
c  nct(3):    number of solutions for positive parity.                  calc-143
c  nct(4):    number of solutions for negative parity.                  calc-144
c  nct(5):    number of compound nucleus coefficients, positive parity. calc-145
c  nct(6):    number of compound nucleus coefficients, negative parity. calc-146
c   defined:  idmt,nplace,ke,nrz,ntz.                                   calc-147
c   used:     idmt,nplace,ncoll,njmax,kmax,ncols,ncolt,nbet,lmax1,ism,  calc-148
c             kcc,kba,nrec,ntot,lmax2,ke,kxt,lmax3.                     calc-149
c   not used: iterm,jdm,jit,kmin,lmx,nlt,njc,jtx,ms1,ms2,kab,kbc,jth,   calc-150
c             ncolr,itmm,ipm,ipk,mcm,nct.                               calc-151
c                                                                       calc-152
c significance of the quantities in common /ncomp/:                     calc-153
c  nsp(1):    number of uncoupled levels for compound nucleus           calc-154
c             including discretisation of continuum.                    calc-155
c  nsp(2):    number of these levels with angular distribution.         calc-156
c  nsp(3):    number of these levels without angular distribution.      calc-157
c  nie:       number of uncoupled states added for discretisation.      calc-158
c  ncolx:     total number of levels without discretisation.            calc-159
c  ndp:       address of fission and gamma final results.               calc-160
c  ndq:       address of fission and gamma intermediate results.        calc-161
c   defined:  nsp,nie,ncolx,ndp,ndq.                                    calc-162
c   used:     nsp,nie,ncolx.                                            calc-163
c                                                                       calc-164
c significance of the quantities in common /pote1/:                     calc-165
c  itx(16):   starting address of different form factors.               calc-166
c             for schroedinger equation, itx(i)+1 is the starting       calc-167
c             address of the form factor read in extp with ityp=i       calc-168
c             (potential for i=1 to 8, transition for i=9 to 16).       calc-169
c             for dirac equations, itx(1)=0,                            calc-170
c             itx(2)+1=address off first transition form factor,        calc-171
c             itx(7)=address of last transition form factor,            calc-172
c             itx(3)=address of last temporary central potential,       calc-173
c             itx(4)=itx(7)-24,itx(5)=itx(3)-11,itx(6)=itx(2)-4.        calc-174
c             all are used for schroedinger, the first 8 for dirac.     calc-175
c  intc:      number of form factors without deformed spin-orbit        calc-176
c             including correction terms.                               calc-177
c  itxm:      total number of form factors.                             calc-178
c   used:     itx(1),itx(2),intc,itxm.                                  calc-179
c                                                                       calc-180
c significance of the quantities in common /pote2/:                     calc-181
c  ity(2):    starting address of imaginary central potential.          calc-182
c        ity(2)=14*ncoll is used for dirac equations.                   calc-183
c  intv:      same as invt, taking into account dispersion.             calc-184
c  npx:       number of potentials taking into account dispersion.      calc-185
c   used:     ity(2),intv,npx.                                          calc-186
c                                                                       calc-187
c significance of the quantities in common /titre/:                     calc-188
c  title(18): title of the run printed as heading of results.           calc-189
c   used:     title.                                                    calc-190
c                                                                       calc-191
c ******** meaning of the logical controls lo ********                  calc-192
c                                                                       calc-193
c lo(135+i)=lo(50+i) for i=1,15 during search if lo(51) to lo(65) are   calc-194
c used only for complete output.                                        calc-195
c the values of the first 100 lo are read in calx on two data cards.    calc-196
c the first data card is for 1-50,the second for 51-100.                calc-197
c only,the values listed on the input description are used.             calc-198
c *** for their meaning, see this description *****                     calc-199
c exception if lo(36)=.true.: only the first card is read, the code doescalc-200
c not take them into account but continue a search saved on tape ms.    calc-201
c                                                                       calc-202
c *** meaning of the 100 first lo used here ********                    calc-203
c               lo(7)  =.true. matrix element and form factors read.    calc-204
c               lo(10) =.true. dispersion relations for potentials.     calc-205
c               lo(32) =.true. automatic search on some parameters.     calc-206
c               lo(34) =.true. next calculation changing energy and/or  calc-207
c                              some parameters.                         calc-208
c               lo(35) =.true. search saved on tape 8 if correctly endedcalc-209
c                              or stopped by the number of evaluations. calc-210
c               lo(36) =.true. restart a search from tape 8.            calc-211
c               lo(52) =.true. reduced nuclear matrix elements output.  calc-212
c               lo(54) =.true. output length used in the working field. calc-213
c               lo(61) =.true. reduced nuclear matrix elements written  calc-214
c                              on file 61.                              calc-215
c               lo(75) =.true. no complete output at the first run of a calc-216
c                              search.                                  calc-217
c               lo(76) =.true. lo(51) to lo(65) are always used.        calc-218
c               lo(77) =.true. output of time differences during the    calc-219
c                              search.                                  calc-220
c               lo(81) =.true. hauser-feshbach corrections.             calc-221
c               lo(100)=.true. dirac equation.                          calc-222
c                                                                       calc-223
c *** meaning of lo(i) for i greater than 100 ****                      calc-224
c lo(101) is true if there is a real spin-orbit potential.              calc-225
c lo(102) is true if there is a imaginary spin-orbit potential.         calc-226
c lo(103) is true if there is a coulomb spin-orbit potential.           calc-227
c lo(104) is true if convergence is obtained in the iteration.          calc-228
c lo(105) is true if convergence is obtained for this equation.         calc-229
c lo(106) is true when the iteration is not the last one permitted.     calc-230
c lo(107) is true if all the couplings have to be calculated beforehand.calc-231
c lo(108) is true if the diagonal coulomb corrections are needed.       calc-232
c lo(109) is true for dirac potentials.                                 calc-233
c lo(110) is true if derivatives are needed.                            calc-234
c lo(111) is true if nuclear parameters are changed in search.          calc-235
c lo(112) is true if spin-orbit or compound nucleus parameters are      calc-236
c                 changed in search.                                    calc-237
c lo(113) is true if dispersion relation is changed in search.          calc-238
c lo(114) is true if compound nucleus continuum is changed in search.   calc-239
c lo(115) is true if it is the first computation for this energy.       calc-240
c lo(116) is true for no output.                                        calc-241
c lo(117) is true for all the calculations except the first.            calc-242
c lo(118) is true for last results.                                     calc-243
c lo(119) is true for results without doing the calculation again.      calc-244
c lo(120) is true for output and last calculation is the best one.      calc-245
c lo(121) is true for optical model without coupling.                   calc-246
c lo(122) is true for identical particles without spin.                 calc-247
c lo(123) is true for identical particles with spin.                    calc-248
c lo(124) is true to compute transmission coefficients.                 calc-249
c lo(125) is true in cal1 for usual coupled equations subroutines.      calc-250
c lo(126) is true if there are observables in the laboratory system.    calc-251
c lo(127) is true for coulomb corrections with pure regular functions.  calc-252
c lo(128) is true for no copy of uncoupled functions and phase-shift.   calc-253
c lo(129) is true for real spin-orbit or dirac equation.                calc-254
c lo(130) is true for imaginary spin-orbit or dirac equation.           calc-255
c lo(131) is true if the total spin is too large for compound nucleus.  calc-256
c lo(132) is true store fission and gamma transmission coefficients for calc-257
c                 interpolation.                                        calc-258
c lo(133) is true to store scalar and coulomb potential independently.  calc-259
c lo(134) and lo(135) are not used.                                     calc-260
c lo(111) to lo(120) are initialised to .false. in calx.                calc-261
c lo(116) to lo(120) are initialised to .false. in eval.                calc-262
c                                                                       calc-263
c***********************************************************************calc-264
      implicit real*8 (a-h,o-z)                                         calc-265
      logical lo(150)                                                   calc-266
      dimension nw(2,idmx),dw(idmx)                                     calc-267
      character*4 fin,title,cw(2*idmx)                                  calc-268
      common /addre/ niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npcalc-269
     1ot,nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,nxa,namcalc-270
     21,nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,ncalc-271
     3ty,nsm,ntx,nry,nrco,nrdo,nvc1,nvc2,nnc,ncx                        calc-272
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       calc-273
      common /dchi2/ chi2,chi2m,yy(3)                                   calc-274
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            calc-275
      common /inout/ mr,mw,ms                                           calc-276
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncocalc-277
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtcalc-278
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),calc-279
     3nct(6)                                                            calc-280
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqcalc-281
     1,acn1,acn2,az(18)                                                 calc-282
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              calc-283
      common /pote2/ ity(12),invt,intv,insl,npx                         calc-284
      common /titre/ title(18)                                          calc-285
      data fin /'fin '/                                                 calc-286
      idmt=idmx                                                         calc-287
      cmb=cm/chb                                                        calc-288
      ccz=chb/cz                                                        calc-289
      ck=2.d0*cm/chb**2                                                 calc-290
      do 1 i=1,150                                                      calc-291
    1 lo(i)=.false.                                                     calc-292
c main input.                                                           calc-293
    2 chi2m=1.d35                                                       calc-294
      icheck=0                                                          ak000000
      call calx(nw,cw,dw,lo)                                            calc-295
      if (icheck.eq.1) return                                           ak000000
      if (title(1).eq.fin) return                                       calc-296
      nsp1d=nsp(1)                                                      calc-297
      if (lo(36)) go to 18                                              calc-298
    3 nsp(1)=nsp1d                                                      calc-299
      nsp(3)=nsp(1)-nsp(2)                                              calc-300
      call colf(ncolx,ncoll,nw,dw(nwv),ism,lmax1,lmax2,h,idmt-nt,nw(1,nncalc-301
     1iv),lo,dw(nfg),dw(nxg),lmax3,kxt,nw(1,nt),dw(nt))                 calc-302
c computation of nuclear matrix elements and space for form factors.    calc-303
    4 if (lo(61)) write (61,1000) dw(nwv),dw(nwv+12),dw(nwv+1),nw(2,2),ncalc-304
     1coll                                                              calc-305
      call redm(nw,ncoll,nw(1,nbeta),dw(nbeta),nw(1,niph),nw(1,npar),dw(calc-306
     1npaa),dw(nfac),idmt-nt,lo,nw(1,nniv),nw(1,nt),nw(1,nt),dw(nt),it,icalc-307
     2m)                                                                calc-308
      nivq=nt+3*it                                                      calc-309
      nivy=nivq+(3*im+1)/2                                              calc-310
      nivz=nivy+(7*intc+1)/2                                            calc-311
      ncoi=nivz+2*intv                                                  calc-312
      if ((.not.lo(7)).or.lo(117)) go to 7                              calc-313
      npot=ncoi                                                         calc-314
      call extp(ncoll,ncolt,dw(nwv),nw(1,nniv),nw(1,nt),nw(1,nivy),nw(1,calc-315
     1nivq),nw,dw(nfac),dw(npot),nw(1,npot),nw(1,npot+2),nw(1,nipp),dw(ncalc-316
     2ipp),idmt-npot,lo)                                                calc-317
c permutation of potentials and informations on transitions.            calc-318
      n=npot-nt                                                         calc-319
      m=npot+nw(2,npot+1)                                               calc-320
      if (n+m.gt.idmt) call memo('calc',idmt,n+m)                       calc-321
      nn=2*n                                                            calc-322
      n1=2*nt-2                                                         calc-323
      n2=2*m-2                                                          calc-324
      do 5 i=1,nn                                                       calc-325
    5 cw(n2+i)=cw(n1+i)                                                 calc-326
      nn=nn+2*nw(2,npot+1)                                              calc-327
      n2=n2-2*nw(2,npot+1)                                              calc-328
      do 6 i=1,nn                                                       calc-329
    6 cw(n1+i)=cw(n2+i)                                                 calc-330
      npot=nt                                                           calc-331
      nt=npot+nw(2,npot+1)                                              calc-332
      nivq=nt+3*it                                                      calc-333
      nivy=nivq+(3*im+1)/2                                              calc-334
      nivz=nivy+(7*intc+1)/2                                            calc-335
    7 ncoi=nivz+2*intv                                                  calc-336
      mipi=ncoi+2*ncont                                                 calc-337
      nxd=mipi                                                          calc-338
      mwv=nxd                                                           calc-339
      nie=0                                                             calc-340
      nixt=mwv+22*nie                                                   calc-341
    8 call disp(nw,dw(nwv),nw(1,nipp),dw(nipp),nw(1,npot),dw(npot),ncolxcalc-342
     1-ncont,lo)                                                        calc-343
      if (ncont.eq.0) go to 11                                          calc-344
      if (.not.(lo(114).or.lo(115))) go to 10                           calc-345
      call conu(0,nw,dw(nwv),nw(1,mipi),dw(mwv),nw(1,ncoi),dw(nxd),dw(nscalc-346
     1cn),kxt,lo)                                                       calc-347
      nxd=mipi+(11*nie+1)/2                                             calc-348
      mwv=nxd+3*nie                                                     calc-349
      nixt=mwv+22*nie                                                   calc-350
      if (nixt.gt.idmt) call memo('calc',idmt,nixt)                     calc-351
      ncolt=ncolx+nie-ncont                                             calc-352
      nsp(1)=nsp(1)+ncolt-ncolx                                         calc-353
      nsp(3)=nsp(3)+ncolt-ncolx                                         calc-354
    9 call conu(1,nw,dw(nwv),nw(1,mipi),dw(mwv),nw(1,ncoi),dw(nxd),dw(nscalc-355
     1cn),kxt,lo)                                                       calc-356
   10 call disp(nw(1,mipi),dw(mwv),nw(1,nipp),dw(nipp),nw(1,npot),dw(npocalc-357
     1t),-nie,lo)                                                       calc-358
   11 ndp=2*ncoll+nsp(1)+1                                              calc-359
      ndq=kba+nsp(3)-nsp(1)                                             calc-360
      nty=nixt+kxt                                                      calc-361
      nsm=nty                                                           calc-362
      if (lo(81).and.lo(132)) nsm=nsm+kmax*(kcc+2+ncolt-ncols)          calc-363
      ntx=nsm+2*njmax*kba                                               calc-364
      nry=ntx+ncols+1                                                   calc-365
      if (lo(81)) nry=ntx+ncoll+ncolt+3                                 calc-366
      nrco=nry                                                          calc-367
      if (lo(81)) nrco=nrco+kmax*ncols                                  calc-368
      nrz=nrco-nsm                                                      calc-369
      ntz=nrco-nty                                                      calc-370
      if (lo(32)) nrco=2*nrco-nsm                                       calc-371
      nrdo=nrco+2*npx                                                   calc-372
      if (lo(100)) nrdo=nrco+2*ncolt                                    calc-373
      nvc1=nrdo+2*intv                                                  calc-374
      nvc2=nvc1+ity(2)*ism                                              calc-375
      nnc=nvc1+itx(1)*ism                                               calc-376
      if (lo(100)) nnc=nvc1+itx(7)*ism                                  calc-377
      ncx=nvc1+itxm*ism                                                 calc-378
      nplace=max0(nplace,ncx,nnc+((nrec+1)*(2*ntot+2+nrec)/2+1)/2)      calc-379
   12 call ggdr(nw,dw(nwv),dw(nscn),lo)                                 calc-380
      if (lo(113)) go to 13                                             calc-381
      if (lo(54)) write (mw,1001) nplace                                calc-382
      if (nplace.gt.idmt) call memo('calc',idmt,nplace)                 calc-383
c main computation.                                                     calc-384
   13 call cal1(nw,cw,dw,lo)                                            calc-385
      if (lo(77)) call hora                                             calc-386
      if (lo(118).or.(.not.lo(32))) go to 19                            calc-387
c automatic search.                                                     calc-388
      if (nw(1,niw+1).gt.1.or.lo(76).or.lo(75)) go to 15                calc-389
c change of controls if full output was not requested at the first run. calc-390
      do 14 i=51,58                                                     calc-391
      lo(i+85)=lo(i)                                                    calc-392
   14 lo(i)=.false.                                                     calc-393
      lo(116)=.true.                                                    calc-394
c identification of variables.                                          calc-395
   15 call vari(1,nw,dw,lo)                                             calc-396
c save the search on tape ms.                                           calc-397
      if (lo(35).and.nw(1,niw+1).ge.nw(2,niw)) call rest(0,nw,dw,idmt,localc-398
     1)                                                                 calc-399
c handling of variables.                                                calc-400
   16 call fite(ke,ntot,nrec,dw(nres),dw(nxx),dw(nde),dw(nrc),nw(1,nrc),calc-401
     1nw(1,niw),dw(nnc))                                                calc-402
c transformation of variables into parameters.                          calc-403
   17 call vari(0,nw,dw,lo)                                             calc-404
      if (ke.eq.1) go to 20                                             calc-405
      lo(111)=lo(52).or.lo(61).or.lo(111)                               calc-406
      lo(112)=lo(112).or.lo(10)                                         calc-407
      go to 20                                                          calc-408
c continuation of a previous search.                                    calc-409
   18 call rest(1,nw,dw,idmt,lo)                                        calc-410
      if (lo(77)) call hora                                             calc-411
      if ((ke.ne.1).and.(nw(1,niw+1).ne.1)) go to 17                    calc-412
      go to 16                                                          calc-413
   19 n=idmt-nplace                                                     calc-414
      if (.not.lo(77)) call hora                                        calc-415
      write (mw,1002) nplace,n                                          calc-416
      if (lo(35).and.lo(32).and.(ke.eq.0)) call rest(0,nw,dw,idmt,lo)   calc-417
      if (.not.lo(34)) go to 2                                          calc-418
      call eval(nw,dw,cm,lo)                                            calc-419
      ke=0                                                              calc-420
      if (lo(115)) go to 3                                              calc-421
   20 if (lo(111)) go to 4                                              calc-422
      if (lo(113)) go to 8                                              calc-423
      if (lo(114)) go to 9                                              calc-424
      if (lo(112)) go to 12                                             calc-425
      go to 13                                                          calc-426
 1000 format ('<red.mat.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 calc-427
 1001 format (10x,'required working field',i10)                         calc-428
 1002 format (//' *** workspace used in this computation',i10,'  ***',  calc-429
     110x,i10,' memories not used.')                                    calc-430
      end                                                               calc-431
c 02/06/07                                                      ecis06  calx-000
      subroutine calx(nw,cw,dw,lo)                                      calx-001
c calx and the subroutines called by it read all the input except for   calx-002
c reduced nuclear matrix elements and external form factors.            calx-003
c input:     nw:      working area for integers.                        calx-004
c            cw:      working area for characters.                      calx-005
c            dw:      working area for double precision.                calx-006
c                     nw,cw,dw are in equivalence by call.              calx-007
c            lo(i):   logical controls:                                 calx-008
c               lo(1)  =.true. rotational model-(.f.:vibrational model).calx-009
c               lo(2)  =.true. second order vibrational or constrained  calx-010
c                              asymmetric rotational model.             calx-011
c               lo(3)  =.true. anharmonic vibrational or asymmetric     calx-012
c                              rotational model.                        calx-013
c               lo(7)  =.true. matrix element and form factors read.    calx-014
c               lo(10) =.true. dispersion relations for potentials.     calx-015
c               lo(11) =.true. deformed coulomb potential.              calx-016
c               lo(12) =.true. deformed imaginary potential.            calx-017
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. calx-018
c               lo(18) =.true. projectile-target antisymmetrisation.    calx-019
c               lo(19) =.true. deformed coulomb spin-orbit potential.   calx-020
c               lo(20) =.true. dispersion relations for transition      calx-021
c                              form-factors.                            calx-022
c               lo(21) =.true. usual coupled equations.                 calx-023
c               lo(22) =.true. no use of pade approximants.             calx-024
c               lo(28) =.true. computation up to j-convergence-(f: stop calx-025
c                              when all coupling terms negligible).     calx-026
c               lo(29) =.true. no diagonal terms in second member.      calx-027
c               lo(30) =.true. pure dwba calculation.                   calx-028
c               lo(31) =.true. input of experimental data and chi2      calx-029
c                              calculation.                             calx-030
c               lo(131)=.true. total spin is too large for compound     calx-031
c                              nucleus.                                 calx-032
c               lo(36) =.true. restart a search from tape 8.            calx-033
c               lo(32) =.true. automatic search on some parameters.     calx-034
c               lo(41) =.true. factorisation of 1/(1-cos(theta)).       calx-035
c               lo(42) =.true. schmidt's orthogonalisation of solutions calx-036
c                              in usual coupled equations.              calx-037
c               lo(43) =.true. interpolation on total spin.             calx-038
c               lo(44) =.true. coulomb corrections.                     calx-039
c               lo(45) =.true. limitation on the angular momenta for    calx-040
c                              coulomb corrections.                     calx-041
c               lo(63) =.true. penetrabilities written on file 63.      calx-042
c               lo(65) =.true. print coefficients of the expansion in   calx-043
c                              legendre polynomials on file 65.         calx-044
c               lo(66) =.true. no calculation at equidistant angles.    calx-045
c               lo(71) =.true. no detailed output of logical controls.  calx-046
c               lo(74) =.true. output of time in different steps.       calx-047
c               lo(75) =.true. no complete output at the first run of a calx-048
c                              search.                                  calx-049
c               lo(76) =.true. lo(51) to lo(65) are always used.        calx-050
c               lo(81) =.true. hauser-feshbach corrections.             calx-051
c               lo(82) =.true. old simplified compound nucleus.         calx-052
c               lo(84) =.true. uncoupled levels for compound nucleus.   calx-053
c               lo(85) =.true. fission transmission coefficients.       calx-054
c               lo(86) =.true. gamma emission in compound nucleus.      calx-055
c               lo(99) =.true. schroedinger equivalent to dirac         calx-056
c                              equation.                                calx-057
c               lo(100)=.true. dirac equation.                          calx-058
c               lo(108)=.true. diagonal coulomb corrections are needed. calx-059
c               lo(109)=.true. for dirac potentials.                    calx-060
c               lo(115)=.true. first computation for this energy.       calx-061
c               lo(116)=.true. no output.                               calx-062
c               lo(123)=.true. identical particles with spin.           calx-063
c               lo(124)=.true. compute transmission coefficients.       calx-064
c               lo(128)=.true. no copy of uncoupled functions and       calx-065
c                              phase-shifts.                            calx-066
c                                                                       calx-067
c use of some parts of the working area (w,nw,dw):                      calx-068
c  1:   ipi(11,ncolx) integer values for the description of channels.   calx-069
c           first index:                                                calx-070
c       1 - parity (0 for + and 1 for -).                               calx-071
c       2 - multiplicity of incident particle.                          calx-072
c       3 - multiplicity of the target.                                 calx-073
c       4 - product of charges.                                         calx-074
c       5 - index of potential.                                         calx-075
c       6,7,8,9 - beginning and end in the two parts of table mf-fm     calx-076
c                           (see deph).                                 calx-077
c      10 - maximum angular momentum.                                   calx-078
c      11 - index of potential energy dependent by dispersion relations.calx-079
c  nipp:    ipp(2,18,npp)/pip(18,npp) dispersion parameters.            calx-080
c     1,1 - first level using this potential before input of parameters.calx-081
c           replaced by indication to use laboratory energy (1), centre calx-082
c           of mass energy (-1) or read coefficients (0).               calx-083
c     2,1 - n2 - power for large negative energy corrections.           calx-084
c     1,2 - nv - |nv| power for volume potential.                       calx-085
c     2,2 - ns - |ns| power for surface potential.                      calx-086
c             sum of two terms if nv or ns are negative,                calx-087
c             absence of volume or surface term if nv or ns are 0.      calx-088
c     1,3 - nl - |nl| power for spin-orbit potential.                   calx-089
c       4 - energy corresponding to the depths read.                    calx-090
c       5 - fermi energy ef.                                            calx-091
c       6 - threshold energy ep.                                        calx-092
c       7 - large energy starting value above fermi energy ea.          calx-093
c       8 - exponential variation of real spin-orbit.                   calx-094
c       9 - linear variation of imaginary spin-orbit.                   calx-095
c      10 - bv parameter for volume potentials.                         calx-096
c      11 - strength of large positive energy term in volume potential, calx-097
c           second bv' parameter for volume potentials if nv<0.         calx-098
c      12 - exponential decrease in sqrt|e| for large energy terms of   calx-099
c           volume potentials or fraction in the first term if nv<0.    calx-100
c      13 - bs parameter for surface potentials.                        calx-101
c      14 - exponential decrease of a surface potential or second bs'   calx-102
c           parameter for surface potentials if ns<0.                   calx-103
c      15 - non-locality range parameter of surface potential or        calx-104
c           fraction in the first term if ns<0.                         calx-105
c      16 - bl parameter for spin-orbit potentials.                     calx-106
c      17 - exponential variation of h.f. real volume potential.        calx-107
c  nwv:     wv(20,ncolx) ibm-double precision values for the channels.  calx-108
c       1 - mass of the particle.                                       calx-109
c       2 - mass of the target.                                         calx-110
c       3 - energy in the centre of mass in mev.                        calx-111
c       4 - k wave number.                                              calx-112
c       5 - coulomb parameter.                                          calx-113
c       6 - reduced mass.                                               calx-114
c       7 - reduced energy.                                             calx-115
c       8 - step size for this level.                                   calx-116
c       9 - square root of coefficient of scalar potentials.            calx-117
c      10 - square root of coefficient of coulomb potentials.           calx-118
c      11 - k wave number multiplied by ratio of step sizes.            calx-119
c      12 - reduced energy term.                                        calx-120
c      13 - energy in the laboratory system in mev.                     calx-121
c      14,15,16,17,18,19,20 - dispersion corrections (see disp).        calx-122
c                                                                       calx-123
c the common /conve/ is used in calc, calx, lect, cal1, stdp, fold,     calx-124
c                               inti, insh, insi, inrh, inri and rest.  calx-125
c the common /dchi2/ is used in calc, calx, resu, vari, eval, rest      calx-126
c                               and fite.                               calx-127
c the common /ncomp/ is used in calc, calx, lect, conu, ggdr, cal1,     calx-128
c                               quan, scam, sche, resu, vari, eval,     calx-129
c                               and rest.                               calx-130
c                                                                       calx-131
c for the common  /angul/ see lect.                                     calx-132
c for the common  /addre/, /integ/ and /titre/ see calc.                calx-133
c                                                                       calx-134
c significance of the quantities in common /addre/:                     calx-135
c  niph:      number of phonons for the harmonic vibrational model.     calx-136
c  njit:      data for interpolation on total spin.                     calx-137
c  nwv:       non integer values for the channels.                      calx-138
c  nipp:      dispersion parameters.                                    calx-139
c  npar:      indications for nuclear parameters.                       calx-140
c  npaa:      values of nuclear parameters.                             calx-141
c  nscn:      level density description.                                calx-142
c  nfis:      fission data for compound nucleus.                        calx-143
c  ngam:      gamma data for compound nucleus.                          calx-144
c  nniv:      addresses of reduced nuclear matrix elements and coulomb  calx-145
c             integrals in niv(ncoll,ncoll,3).                          calx-146
c  npot:      optical potential parameters.                             calx-147
c  nbeta:     deformation parameters.                                   calx-148
c  nfm:       helicities and observables (see deph,lecd and obse).      calx-149
c  ntgx:      beginning of chi2 and normalisation of data.              calx-150
c  ndonn:     experimental data.                                        calx-151
c  nnvi:      table of addresses of coupling coefficients.              calx-152
c  nde:       search accuracies.                                        calx-153
c  nise:      indexes of the variable parameters in search.             calx-154
c  nrc:       permanent working field for the search.                   calx-155
c  niw:       integer working field for the search.                     calx-156
c  nnwi:      same as nnvi for symmetrised equations.                   calx-157
c  ncc:       table of energies, l*(l+1) and l*s  (see quan).           calx-158
c  mcc:       same as ncc for symmetrised equations.                    calx-159
c  nxa:       table of coefficients of symmetrisation.                  calx-160
c  nam1:      computation of observables (see obse).                    calx-161
c  nfac:      table of log of factorials for geometric coefficients.    calx-162
c  nfg:       coulomb functions and finite integrals.                   calx-163
c  nxg:       coulomb phases and infinite integrals.                    calx-164
c  nres:      functions for the search.                                 calx-165
c  nxx:       variables for the search.                                 calx-166
c  nt:        table of reduced nuclear matrix elements.                 calx-167
c   defined:  niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npot,    calx-168
c             nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,  calx-169
c             nxa,nam1,nfac,nfg,nxg,nres,nxx,nt.                        calx-170
c   used:     niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npot,    calx-171
c             nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,  calx-172
c             nxa,nam1,nfac,nfg,nxg,nres,nxx,nt.                        calx-173
c                                                                       calx-174
c significance of the quantities in common /angul/:                     calx-175
c  theta1:    first angle for computation at equidistant angles.        calx-176
c  dtheta:    step for computation at equidistant angles.               calx-177
c  theta2:    last angle for computation at equidistant angles.         calx-178
c  ncj:       number of factorisations of 1/(1-cos(theta)) in amplitude.calx-179
c  nl(1):     power of (1-cos(theta)) for the expansion in legendre     calx-180
c             polynomials of the interference between coulomb and       calx-181
c             nuclear elastic scattering. power of (1-cos(theta)**2)    calx-182
c             if lo(18) is .true..                                      calx-183
c  nl(2):     number of legendre polynomials for elastic scattering of  calx-184
c             charged particles.                                        calx-185
c  nl(3):     number of legendre polynomials for elastic scattering of  calx-186
c             uncharged particles, inelastic scattering and compound    calx-187
c             nucleus.                                                  calx-188
c   defined:  ncj,nl.                                                   calx-189
c   used:     theta1,dtheta,theta2,ncj,nl.                              calx-190
c                                                                       calx-191
c significance of the quantities in common /conve/:                     calx-192
c  h:         step size for integration.                                calx-193
c  bjm:       convergence coefficient of imaginary potential.           calx-194
c  eiter:     convergence criterion for s-matrix.                       calx-195
c  aconv:     convergence criterion for potential and function.         calx-196
c  conj:      convergence criterion for the scattering amplitudes.      calx-197
c  hconv:     aconv*h*h convergence criterion for second members.       calx-198
c   defined:  h,bjm,eiter,aconv,conj,hconv.                             calx-199
c   used:     bjm,eiter,aconv,conj.                                     calx-200
c                                                                       calx-201
c significance of the quantities in common /coupl/:                     calx-202
c  iqm:       maximum l-value of deformation in rotational model.       calx-203
c  iqmax:     maximum l-expansion in rotational model.                  calx-204
c  nbt1:      number of phonons (vibrations).                           calx-205
c  nfa:       number of logarithms of factorials.                       calx-206
c  npp:       number of optical potentials.                             calx-207
c  nspin:     twice the k-value of the rotational band.                 calx-208
c  nva:       number of nuclear parameters.                             calx-209
c   defined:  nbt1,nfa,npp,nva.                                         calx-210
c   not used: iqm,iqmax,nspin,nva.                                      calx-211
c                                                                       calx-212
c significance of the quantities in common /dchi2/:                     calx-213
c  chi2:      chi-square computed in subroutine resu.                   calx-214
c  chi2m:     minimum chi-square in the search.                         calx-215
c  yy(1):     step size in the search.                                  calx-216
c  yy(2):     half of the success multiplicative factor of the step.    calx-217
c  yy(3):     various meanings.  see fite.                              calx-218
c   defined:  yy.                                                       calx-219
c   not used: chi2,chi2m.                                               calx-220
c                                                                       calx-221
c significance of the quantities in common /integ/:                     calx-222
c  idmt:      total working field length as single precision.           calx-223
c  nplace:    maximum working field used.                               calx-224
c  ncoll:     number of coupled channels.                               calx-225
c  njmax:     maximum number of j-values.                               calx-226
c  iterm:     maximum number of iterations.                             calx-227
c  jdm:       minimum number of total spin.                             calx-228
c  jit:       number of rates of interpolation on total spin.           calx-229
c  kmin:      minimum number of j values for compound nucleus.          calx-230
c  kmax:      maximum number of j values for compound nucleus.          calx-231
c  ncols:     number of channels with angular distributions.            calx-232
c  ncolt:     number of channels including uncoupled states.            calx-233
c  nbet:      number of different deformations (vibrations+rotations).  calx-234
c  lmx:       difference between number of j and of coulomb functions.  calx-235
c  lmax1:     number of l-values for coulomb functions.                 calx-236
c  nlt:       memories needed for legendre polynomials.                 calx-237
c  ism:       number of integration steps.                              calx-238
c  njc:       maximum number of observables at equidistant angles.      calx-239
c  jtx:       maximum number of calculated values for a plot.           calx-240
c  kcc:       number of independent amplitudes with uncoupled states.   calx-241
c  ms1:       largest particle multiplicity.                            calx-242
c  ms2:       largest target multiplicity.                              calx-243
c  kba:       number of independent amplitudes without uncoupled states.calx-244
c  kab:       maximum number of equations.                              calx-245
c  kbc:       maximum number of solutions.                              calx-246
c  jth:       maximum number of angles for a plot.                      calx-247
c  ncolr:     number of experimental angular distributions.             calx-248
c  nrec:      number of variables in search.                            calx-249
c  ntot:      number of experimental data.                              calx-250
c  lmax2:     number of l values for coulomb phases.                    calx-251
c  ke:        control of search (see fite).                             calx-252
c  itemm:     maximum number of iterations at the beginning of a run.   calx-253
c  mcm(1):    maximum angular momentum for central coulomb corrections. calx-254
c  mcm(2):    maximum angular momentum for spin-orbit coulomb correct.  calx-255
c  nct(1):    number of equations for positive parity.                  calx-256
c  nct(2):    number of equations for negative parity.                  calx-257
c  nct(3):    number of solutions for positive parity.                  calx-258
c  nct(4):    number of solutions for negative parity.                  calx-259
c  nct(5):    number of compound nucleus coefficients, positive parity. calx-260
c  nct(6):    number of compound nucleus coefficients, negative parity. calx-261
c   defined:  nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncols,ncolt,   calx-262
c             nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,   calx-263
c             jth,ncolr,nrec,ntot,lmax2,ke,itemm,mcm,nct.               calx-264
c   used:     idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmax,ncols,ncolt,   calx-265
c             nbet,lmx,lmax1,jtx,kcc,kab,kbc,jth,ncolr,nrec,ntot,lmax2. calx-266
c                                                                       calx-267
c significance of the quantities in common /ncomp/:                     calx-268
c  nsp(1):    number of uncoupled levels for compound nucleus           calx-269
c             including discretisation of continuum.                    calx-270
c  nsp(2):    number of these levels with angular distribution.         calx-271
c  nsp(3):    number of these levels without angular distribution.      calx-272
c  nfiss:     number of fission transmission coefficients.              calx-273
c  nrd:       number of gamma transmission coefficients.                calx-274
c  ncont:     number of continuum for compound nucleus.                 calx-275
c  ncoj:      number of spins of the target for a continuum.            calx-276
c  ncons:     number of level densities needed.                         calx-277
c  nie:       number of uncoupled states added for discretisation.      calx-278
c  ncolx:     total number of levels without discretisation.            calx-279
c  ndp:       address of fission and gamma final results.               calx-280
c  ndq:       address of fission and gamma intermediate results.        calx-281
c  acn1:      ratio size/step for discretisation of a continuum.        calx-282
c  acn2:      maximum number of steps by mev for a continuum.           calx-283
c  az(6):     deformed spin-orbit parameters. see also comment in       calx-284
c             input description and subroutine quan.                    calx-285
c  bz(5):     hauser-feshbach and moldauer's parameters described below.calx-286
c   bz(1):    square root of elastic enhancement.                       calx-287
c   bz(2):    if lo(82)=.true., spin cut-off parameter.                 calx-288
c             if lo(82)=.false., particle degrees of freedom.           calx-289
c   bz(3):    square root of level density parameter. if lo(82)=lo(87)= calx-290
c             .false., parameter bz(3) in moldauer's formula of input   calx-291
c             description.                                              calx-292
c   bz(4):    if lo(82)=lo(87)=.false., parameter bz(4) in same formula.calx-293
c   bz(5):    if lo(82)=lo(87)=.false., parameter bz(5) in same formula.calx-294
c  tg0:       slow s-wave neutron gamma width/spacing for normalisation.calx-295
c  bn:        neutron separation energy.                                calx-296
c  fnug:      radiative degrees of freedom.                             calx-297
c  egd:       energy of the giant dipole resonance.                     calx-298
c  ggd:       resonance width.                                          calx-299
c  tg1:       derived data for gamma in compound nucleus.               calx-300
c  sgsq:      derived data for gamma in compound nucleus.               calx-301
c   defined:  nsp,nfiss,nrd,ncont,ncoj,ncons,ncolx,acn1,acn2.           calx-302
c   used:     nsp,nfiss,nrd,ncont,ncoj,ncons,ncolx,acn1,acn2.           calx-303
c   not used: nie,ndp,ndq,az,bz,tg0,bn,fnug,egd,tgd,tg1,sgsq.           calx-304
c             az(6),bz(5) and following are sometimes grouped in az(18);calx-305
c             this is necessary for automatic search.                   calx-306
c                                                                       calx-307
c significance of the quantities in common /titre/:                     calx-308
c  title(18): title of the run printed as heading of results.           calx-309
c   defined:  title.                                                    calx-310
c   used:     title.                                                    calx-311
c                                                                       calx-312
c***********************************************************************calx-313
      implicit real*8 (a-h,o-z)                                         calx-314
      logical lo(150)                                                   calx-315
      dimension nw(2,*),ngr(2),npr(2),desc(3),dw(*)                     calx-316
      character*4 fin,desc,title,cw(2,1)                                calx-317
      common /addre/ niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npcalx-318
     1ot,nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,nxa,namcalx-319
     21,nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,ncalx-320
     3ty,nsm,ntx,nry,nrco,nrdo,nvc1,nvc2,nnc,ncx                        calx-321
      common /angul/ theta1,theta2,dtheta,dthe,ncj,nl(3),jmm(2)         calx-322
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       calx-323
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   calx-324
      common /dchi2/ chi2,chi2m,yy(3)                                   calx-325
      common /inout/ mr,mw,ms                                           calx-326
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncocalx-327
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtcalx-328
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),calx-329
     3nct(6)                                                            calx-330
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqcalx-331
     1,acn1,acn2,az(6),bz(5),tg0,bn,fnug,egd,ggd,tg1,sgsq               calx-332
      common /titre/ title(18)                                          calx-333
      data fin,desc /'fin ','desc','ript','ion '/                       calx-334
    1 read (mr,1000) title                                              calx-335
      do 2 j=1,3                                                        calx-336
      if (title(j).ne.desc(j)) go to 3                                  calx-337
    2 continue                                                          calx-338
      call inpa                                                         calx-339
      call inpb                                                         calx-340
      call inpc                                                         calx-341
      go to 1                                                           calx-342
    3 if (title(1).eq.fin) then                                         ak000000
        icheck=1                                                        ak000000
        return                                                          ak000000
      endif                                                             ak000000
c   3 if (title(1).eq.fin) return                                       calx-343
      do 4 i=1,100                                                      calx-344
    4 lo(i)=.false.                                                     calx-345
      read (mr,1001) (lo(i),i=1,50)                                     calx-346
c if lo(36)=.true. return to restart a search saved on tape 8.          calx-347
      if (lo(36)) return                                                calx-348
      read (mr,1001) (lo(i),i=51,100)                                   calx-349
      read (mr,1002) ncoll,njmax,iterm,npp,ncj,ngr,npr,lmz,jdm,lml,jit,mcalx-350
     1n                                                                 calx-351
c elimination of contradictions between logical controls.               calx-352
      if (ncoll.le.1) lo(28)=.true.                                     calx-353
      if (.not.lo(31)) lo(32)=.false.                                   calx-354
      if (lo(14)) lo(13)=.true.                                         calx-355
      if (lo(19)) lo(11)=.true.                                         calx-356
      if (lo(30)) iterm=1                                               calx-357
      if (lo(18)) lo(29)=.true.                                         calx-358
      if (lo(100)) lo(29)=.false.                                       calx-359
      if (lo(100).and.lo(95)) lo(94)=.false.                            calx-360
      lo(109)=lo(99).or.lo(100)                                         calx-361
      if (lo(109)) lo(8)=.true.                                         calx-362
      if (lo(82)) lo(84)=.false.                                        calx-363
      if (lo(82)) lo(85)=.false.                                        calx-364
      if (lo(82)) lo(86)=.false.                                        calx-365
      if (lo(82).or.lo(84).or.lo(85).or.lo(86)) lo(81)=.true.           calx-366
      lo(44)=lo(44).and.lo(11)                                          calx-367
      if (.not.lo(99)) go to 5                                          calx-368
      lo(11)=.false.                                                    calx-369
      lo(19)=.false.                                                    calx-370
      if (lo(1)) lo(3)=.false.                                          calx-371
      if (.not.lo(1)) lo(2)=.false.                                     calx-372
      if ((.not.lo(10)).or.(.not.lo(12))) lo(20)=.false.                calx-373
    5 lo(124)=lo(81).or.lo(63)                                          calx-374
      write (mw,1003) idmt                                              calx-375
c output of logical controls.                                           calx-376
      if (lo(71)) go to 6                                               calx-377
      write (mw,1004) (lo(i),lo(i+53),i=1,3),(lo(i+53),lo(i),i=4,5),lo(6calx-378
     1),lo(59),(lo(i),i=7,8),(lo(i),lo(51+i),i=9,10)                    calx-379
      write (mw,1005) (lo(i),lo(i+51),i=11,13),lo(14),lo(15),lo(65),lo(1calx-380
     16),(lo(i),lo(i+49),i=17,20),(lo(i),lo(i+50),i=21,22)              calx-381
      write (mw,1006) (lo(i),lo(i+50),i=23,25),lo(76),lo(26),lo(27),lo(7calx-382
     17),lo(78),lo(28),lo(29),lo(81),lo(30),lo(82),lo(83),lo(31)        calx-383
      write (mw,1007) (lo(i),lo(i+52),i=32,34),lo(87),lo(35),lo(36),lo(9calx-384
     11),(lo(i+51),lo(i),i=41,44),lo(45),lo(46),lo(96)                  calx-385
      write (mw,1008) lo(47),lo(97),(lo(i),lo(i+47),i=51,53)            calx-386
      go to 7                                                           calx-387
    6 write (mw,1009) (lo(i),i=1,100)                                   calx-388
    7 write (mw,1010) title                                             calx-389
      if (lo(109).and.(.not.lo(8))) write (mw,1011)                     calx-390
      read (mr,1012) h,rm,bjm,eiter,aconv,conj                          calx-391
c defect values of njmax,iterm,npp,ncj,npr,ngr,eiter,aconv,conj.        calx-392
c for npr and ngr, see deph.                                            calx-393
      if (njmax.eq.0) njmax=20                                          calx-394
      if (iterm.eq.0) iterm=20                                          calx-395
      if (npp.eq.0) npp=1                                               calx-396
      if (npr(1).eq.0) npr(1)=1                                         calx-397
      if (npr(2).eq.0) npr(2)=1                                         calx-398
      if (ngr(1).eq.0) ngr(1)=2                                         calx-399
      if (ngr(2).eq.0) ngr(2)=2                                         calx-400
      if (ncj.le.0) ncj=1                                               calx-401
      if (jit.eq.0) jit=1                                               calx-402
      if (.not.lo(43)) jit=0                                            calx-403
      if (mn.le.0) mn=1                                                 calx-404
      njmax=mn*njmax                                                    calx-405
      if (eiter.eq.0.d0) eiter=1.d-5                                    calx-406
      if (aconv.eq.0.d0) aconv=1.d-5                                    calx-407
      if (conj.eq.0.d0) conj=1.d-5                                      calx-408
c output of title, masses, etc...                                       calx-409
      write (mw,1013) njmax,jdm,conj,ngr,npr                            calx-410
      if (lo(41)) write (mw,1014) ncj                                   calx-411
      if (lml.ne.0) write (mw,1015) lml                                 calx-412
      if (.not.lo(21)) write (mw,1016) iterm,eiter,aconv                calx-413
      lo(128)=lo(21).or.lo(29).or.bjm.ne.0.d0                           calx-414
      if (bjm.ne.0.d0) write (mw,1017) bjm                              calx-415
      if (lo(21)) write (mw,1018)                                       calx-416
      if (lo(21).and.lo(42)) write (mw,1019) iterm                      calx-417
c initialisation of a search or a single run.                           calx-418
      do 8 i=111,120                                                    calx-419
    8 lo(i)=.false.                                                     calx-420
      lo(115)=.true.                                                    calx-421
c limitation on angular momentum for coulomb corrections.               calx-422
      mcm(1)=3                                                          calx-423
      mcm(2)=2                                                          calx-424
      if (.not.lo(45)) go to 9                                          calx-425
      read (mr,1002) mc1,mc2                                            calx-426
      if (mc1.gt.0) mcm(1)=min0(mc1,5)                                  calx-427
      if (mc2.gt.0) mcm(2)=min0(mc2,4)                                  calx-428
      if (mc1.lt.0) mcm(1)=0                                            calx-429
      if (mc2.lt.0) mcm(2)=0                                            calx-430
      write (mw,1021) mcm                                               calx-431
    9 nl2=3*njmax                                                       calx-432
      nl3=2*njmax                                                       calx-433
c legendre polynomials data.                                            calx-434
      if (.not.lo(65)) go to 10                                         calx-435
      read (mr,1002) nl                                                 calx-436
      if (nl(1).eq.0) nl(1)=2                                           calx-437
      if (nl(2).ne.0) nl2=nl(2)                                         calx-438
      if (nl(3).ne.0) nl3=nl(3)                                         calx-439
      if (lo(65)) write (mw,1022) nl                                    calx-440
c compound nucleus data.                                                calx-441
   10 nsp(1)=0                                                          calx-442
      nsp(2)=0                                                          calx-443
      nsp(3)=0                                                          calx-444
      nfiss=0                                                           calx-445
      nrd=0                                                             calx-446
      ncont=0                                                           calx-447
      ncons=0                                                           calx-448
      if (.not.(lo(84).or.lo(85).or.lo(86))) go to 11                   calx-449
      read (mr,1023) nsp(1),nsp(2),nfiss,nrd,ncont,ncoj,kmin,kmax,acn1,acalx-450
     1cn2                                                               calx-451
      if (.not.lo(84)) nsp(1)=0                                         calx-452
      nsp(2)=min0(nsp(1),nsp(2))                                        calx-453
      nsp(3)=nsp(1)-nsp(2)                                              calx-454
      if (nsp(3).lt.ncont) go to 20                                     calx-455
      if (.not.lo(85)) nfiss=0                                          calx-456
      if (.not.lo(86)) nrd=0                                            calx-457
      if (nfiss.eq.0) lo(85)=.false.                                    calx-458
      if (lo(84).or.lo(85).or.lo(86)) write (mw,1024) nsp,nfiss,nrd,nconcalx-459
     1t                                                                 calx-460
      ncons=ncont                                                       calx-461
      if (lo(86).and.nrd.eq.0) ncons=ncons+1                            calx-462
      if (ncont.eq.0) go to 11                                          calx-463
      if (ncoj.le.0) ncoj=30                                            calx-464
      if (acn1.le.1.d0) acn1=8.d0                                       calx-465
      if (acn2.le.1.d0) acn2=8.d0                                       calx-466
      write (mw,1025) ncoj,acn1,acn2                                    calx-467
   11 ncolx=ncoll+nsp(1)                                                calx-468
      ncols=ncoll+nsp(2)                                                calx-469
      ncolt=ncolx                                                       calx-470
      niph=(11*ncolx+1)/2+1                                             calx-471
      njit=niph+ncoll                                                   calx-472
      if (lo(7)) njit=niph                                              calx-473
      nwv=njit+jit                                                      calx-474
      nipp=nwv+22*ncolx                                                 calx-475
      npar=nipp+17*npp                                                  calx-476
      nplace=npar                                                       calx-477
      call memo('calx',idmt,nplace)                                     calx-478
c interpolation data.                                                   calx-479
      if (.not.lo(43)) go to 13                                         calx-480
      k=njit                                                            calx-481
      read (mr,1002) (nw(1,njit+i-1),nw(2,njit+i-1),i=1,jit)            calx-482
      write (mw,1026) (nw(1,njit+i-1),nw(2,njit+i-1),i=1,jit)           calx-483
      m=0                                                               calx-484
      l=-1                                                              calx-485
      do 12 i=1,jit                                                     calx-486
      if (nw(1,njit+i-1).lt.l) go to 21                                 calx-487
      l=nw(1,njit+i-1)                                                  calx-488
      nw(2,njit+i-1)=nw(2,njit+i-1)-m                                   calx-489
      m=m+nw(2,njit+i-1)                                                calx-490
   12 k=k+2                                                             calx-491
      write (mw,1027) (nw(2,njit+i-1),i=1,jit)                          calx-492
c input of level descriptions.                                          calx-493
   13 call lecl(ncolx,ncoll,ncont,idmt-npar,lo,nw,nw(1,niph),dw(nwv),nw(calx-494
     11,nipp),nw(1,npar),dw(npar),na,nb,nimax,nbet)                     calx-495
      npaa=npar+na                                                      calx-496
      nscn=npaa+nva+nb                                                  calx-497
      if (kmin.eq.0) kmin=iabs(nw(2,1)-nw(1,2))/2+nw(1,1)               calx-498
      if (kmax.eq.0) kmax=njmax                                         calx-499
      lo(132)=lo(43).and.((nw(1,njit).lt.kmax).or.(nw(2,njit).ne.0))    calx-500
c input of potentials, deformations ......                              calx-501
      nbt1=nbet                                                         calx-502
      lmx=nimax/2+2                                                     calx-503
      lmax1=njmax+lmx                                                   calx-504
      if (lml.eq.0) lml=lmax1                                           calx-505
      nw(2,5)=lml                                                       calx-506
      nfis=nscn+7*ncons                                                 calx-507
      ngam=nfis+2*nfiss                                                 calx-508
      nniv=ngam+nrd                                                     calx-509
      npot=nniv+(3*ncoll*ncoll+1)/2                                     calx-510
      nbeta=npot+42*npp                                                 calx-511
      if (lo(7)) nbeta=npot                                             calx-512
      if (nbeta+9*nbet.gt.idmt) call memo('calx',idmt,nbeta+9*nbet)     calx-513
      if (dw(nwv+4).eq.0.) nl2=nl3                                      calx-514
      nlt=max0(nl2,nl3)                                                 calx-515
      if (.not.lo(65)) nlt=0                                            calx-516
      call lect(nbet,nw,nw(1,nipp),dw(nwv),rm,idmt-nbeta,lo,nw(1,nbeta),calx-517
     1dw(nbeta),dw(npot),dw(nfis),dw(ngam),ism,dw(nscn))                calx-518
      hconv=aconv*h*h                                                   calx-519
      nfm=nbeta+9*nbet                                                  calx-520
      if (lo(74)) call hora                                             calx-521
c helicity amplitudes and observables.                                  calx-522
      njx=ncoll                                                         calx-523
      call deph(ncoll,dw(nwv),nw,ngr,npr,idmt-nfm,lo,nw(1,nfm),ktgr,nw(1calx-524
     1,nniv),njx,njy)                                                   calx-525
      jth=0                                                             calx-526
      if (.not.lo(66)) jth=idint((theta2-theta1)/dtheta+1.5d0)          calx-527
      jtx=jtx*jth                                                       calx-528
      ngrm=nfm+5*kcc                                                    calx-529
      nnvi=nfm+5*ktgr                                                   calx-530
      ntgx=1                                                            calx-531
      ndonn=1                                                           calx-532
      nrec=0                                                            calx-533
      ntot=0                                                            calx-534
      if (.not.lo(31)) go to 17                                         calx-535
c number of parameters in search and experimental data.                 calx-536
      read (mr,1028) ncolr,nrec,nfit,nessai,yy(1),yy(2)                 calx-537
c search conditions.                                                    calx-538
c defect values for nessai (maximum number of evaluations) and ech.     calx-539
c nfit is the number of functions stored for search beyond nrec+1.      calx-540
      if (nessai.eq.0) nessai=100                                       calx-541
      kfit=nrec+nfit+1                                                  calx-542
      if (yy(1).eq.0.d0) yy(1)=20.d0                                    calx-543
      if (yy(2).lt.1.d0) yy(2)=1.d0                                     calx-544
      yy(3)=0.d0                                                        calx-545
      write (mw,1029) ncolr                                             calx-546
      if (ncolr.le.0) go to 15                                          calx-547
      ktgr=ktgr+ncolr                                                   calx-548
      ntgx=nfm+5*ktgr                                                   calx-549
      ndonn=ntgx+7*ncolr                                                calx-550
c experimental data.                                                    calx-551
      if (ndonn.gt.idmt) call memo('calx',idmt,ndonn)                   calx-552
      call lecd(dw(nwv),ngr,kfit,nessai,yy,njy,idmt-ndonn,lo,nw(1,nnvi),calx-553
     1nw(1,ntgx),dw(ntgx),dw(ndonn),dw(ndonn),nw(1,ndonn),nmx)          calx-554
      jtx=max0(jth,jtx)                                                 calx-555
      nnvi=ndonn+6*ntot                                                 calx-556
      if (.not.lo(32)) go to 17                                         calx-557
      if (nrec.le.0) go to 16                                           calx-558
      nde=nnvi                                                          calx-559
      nise=nde+nrec                                                     calx-560
      nrc=nise+nmx/2                                                    calx-561
      niw=nrc+max0(14+nrec+kfit*(ntot+nrec+1),(nrec*(nrec+5))/2)        calx-562
      if (niw.gt.idmt) call memo('calx',idmt,niw)                       calx-563
      nw(1,niw)=kfit                                                    calx-564
      nw(2,niw)=nessai                                                  calx-565
      nw(1,niw+1)=1                                                     calx-566
      nnvi=niw+(kfit+5)/2                                               calx-567
      i1=51                                                             calx-568
      if (lo(76).or.(.not.lo(75))) i1=59                                calx-569
      do 14 i=i1,65                                                     calx-570
      lo(i+85)=lo(i)                                                    calx-571
   14 lo(i)=.false.                                                     calx-572
      lo(116)=lo(75)                                                    calx-573
      go to 17                                                          calx-574
   15 write (mw,1030)                                                   calx-575
      lo(31)=.false.                                                    calx-576
   16 if (lo(32)) write (mw,1031)                                       calx-577
      lo(32)=.false.                                                    calx-578
   17 if (lo(74)) call hora                                             calx-579
      nnwi=nnvi                                                         calx-580
      if (lo(123)) nnwi=nnwi+(3*kab*kab+1)/2                            calx-581
      ncc=nnwi+2*kab*kab                                                calx-582
      mcc=ncc                                                           calx-583
      if (lo(123)) mcc=mcc+3*kab                                        calx-584
      nxa=mcc+3*kab                                                     calx-585
      nam1=nxa                                                          calx-586
      if (lo(123)) nam1=nam1+kbc*kbc                                    calx-587
      nam2=nam1+4*(njy+16)                                              calx-588
      if (nam2.gt.idmt) call memo('calx',idmt,nam2)                     calx-589
c do loops and cg-coefficients for observables.                         calx-590
      call obse(nw(1,ngrm),cw(1,ngrm),ktgr-kcc,ncolr,nw,idmt-nam2,lo,cw(calx-591
     11,nam1),jcal,nw(1,nam1),cw(1,nam1),dw(nam2),cw(1,nam2),nw(1,nam2),calx-592
     2dw(nam2),nw(1,nam2))                                              calx-593
      nfa=4*lmax1+10-2*njmax                                            calx-594
      nfac=nam1+jcal                                                    calx-595
      nfg=nfac+nfa+1                                                    calx-596
      lmax2=lmax1                                                       calx-597
      if (.not.lo(108)) go to 18                                        calx-598
      lmax1=lmz+lmx                                                     calx-599
      if (lmz.eq.0) lmax1=lmax2-njmax/2                                 calx-600
      if (lmz.lt.0) lmax1=lmax2                                         calx-601
      write (mw,1032) lmax2,lmax1                                       calx-602
   18 nxg=nfg+4*njx*lmax1                                               calx-603
      nres=nxg+njx*lmax2                                                calx-604
      ke=0                                                              calx-605
      nxx=nres+ntot                                                     calx-606
      nt=nxx+nrec                                                       calx-607
      itemm=iterm                                                       calx-608
      nplace=nt                                                         calx-609
      if (nplace.gt.idmt) call memo('calx',idmt,nplace)                 calx-610
      dw(nfac)=0.d0                                                     calx-611
      do 19 i=1,nfa                                                     calx-612
   19 dw(nfac+i)=dw(nfac+i-1)+dlog(dfloat(i))                           calx-613
      return                                                            calx-614
   20 write (mw,1033) nsp(3),ncont                                      calx-615
      go to 22                                                          calx-616
   21 write (mw,1034) i,nw(k,1),l                                       calx-617
   22 write (mw,1035)                                                   calx-618
      stop                                                              calx-619
 1000 format (18a4)                                                     calx-620
 1001 format (50l1)                                                     calx-621
 1002 format (14i5)                                                     calx-622
 1003 format ('1',20x,'e. c. i. s. code for coupled channels calculationcalx-623
     1s ( 2006 ) working field length =',i10//24x,'to obtain the input dcalx-624
     2escription, punch ''description '' in columns 1-12 of the first cacalx-625
     3rd.'//)                                                           calx-626
 1004 format ('  1',l2,' - rotational model-(.f.: vibrational model).',9calx-627
     1x,'| 54',l2,' - output of the length used in the working field.'/'calx-628
     2  2',l2,' - second order vibrational model-(.f.: first order)  | 5calx-629
     35',l2,' - output of c-matrix elements and compound nucleus'/8x,'orcalx-630
     4 constrained asymmetric rotational model.',8x,'|',8x,'intermediatecalx-631
     5 results.'/'  3',l2,' - anharmonic vibrational model-(.f.: harmonicalx-632
     6c) or    | 56',l2,' - output of s-matrix elements.'/8x,'asymmetriccalx-633
     7 rotational model-(.f.: symmetric).',6x,'| 57',l2,' - output of phcalx-634
     8ase-shifts at each e.c.i.s. iteration.'/'  4',l2,' - parametrised calx-635
     9spin-orbit deformation-(.f.:standard) | 58',l2,' - output of the ccalx-636
     aoefficients of each form factor'/'  5',l2,' - different deformatiocalx-637
     bn for each potential(.f.: same)|',8x,'for all sets of equations.'/calx-638
     c'  6',l2,' - use of deformation lengths.',24x,'| 59',l2,' - total calx-639
     delastic reaction cross-sections written on'/'  7',l2,' - nuclear mcalx-640
     eatrix elements and form factors on cards. |',8x,'file 58 and totalcalx-641
     f inelastic reaction'/'  8',l2,' - relativistic kinematics.',27x,'|calx-642
     g',8x,'cross-sections on file 59.'/'  9',l2,' - symmetrised woods-scalx-643
     haxon form for negative radii.   | 60',l2,' - s-matrix elements wricalx-644
     itten on file 60.'/' 10',l2,' - dispersion relations for potentialscalx-645
     j.',15x,'|'/59x,'| 61',l2,' - reduced nuclear matrix elements writtcalx-646
     ken on file 61.')                                                  calx-647
 1005 format (' 11',l2,' - deformed coulomb potential.',24x,'| 62',l2,' calx-648
     1- potentials written on file 62.'/' 12',l2,' - deformed imaginary calx-649
     2potential.',22x,'| 63',l2,' - penetrabilities written on file 63.'calx-650
     3/' 13',l2,' - deformed real spin-orbit/tensor potential. ',8x,'| 6calx-651
     44',l2,' - results for experimental data on file 64'/' 14',l2,' - dcalx-652
     5eformed imaginary spin-orbit/tensor potential.    |',8x,'and at eqcalx-653
     6uidistant angles written on file 66.'/' 15',l2,' - reduced nuclearcalx-654
     7 matrix elements read from cards.   | 65',l2,' - legendre expansiocalx-655
     8n for cross-sections written on'/' 16',l2,' - heavy-ion definitioncalx-656
     9 of radii and deformations.    |',8x,'file 65.'/' 17',l2,' - foldicalx-657
     ang model.',37x,'| 66',l2,' - no calculation at equidistant angles.calx-658
     b'/' 18',l2,' - projectile-target antisymmetrisation.',14x,'| 67',lcalx-659
     c2,' - no plot of experimental data.'/' 19',l2,' - deformed coulombcalx-660
     d spin-orbit potential.',13x,'| 68',l2,' - no plot of cross-sectioncalx-661
     es at equidistant angles.'/' 20',l2,' - dispersion relations for trcalx-662
     fansition form-factors.  | 69',l2,' - no plot of polarisations at ecalx-663
     gquidistant angles.'/59x,'|'/' 21',l2,' - usual coupled equations-(calx-664
     h.f.: iterations).',9x,'| 71',l2,' - no detailed output of logical calx-665
     icontrols.'/' 22',l2,' - no use of pade for convergence of the itercalx-666
     jations.  | 72',l2,' - no output of experimental data as they are rcalx-667
     kead.')                                                            calx-668
 1006 format (' 23',l2,' - no use of pade without convergence.',16x,'| 7calx-669
     13',l2,' - no output of external potentials as they are read.'/' 24calx-670
     2',l2,' - coupling potentials computed at each iteration.    | 74',calx-671
     3l2,' - output of time in different steps.'/' 25',l2,' - complete ccalx-672
     4alculation up to the end-(.f.: one ite-  | 75',l2,' - no complete calx-673
     5output at the first run of a search.'/8x,'ration only as soon as tcalx-674
     6wo iterations are enough). | 76',l2,' - lo(51) to lo(65) are alwaycalx-675
     7s used-(.f.: only for'/' 26',l2,' - integration stabilised for loncalx-676
     8g range potential.   |',8x,'complete output)'/' 27',l2,' - numerovcalx-677
     9''s method for single equations-(.f.: modi-  | 77',l2,' - output ocalx-678
     af time differences during the search.'/8x,'fied numerov''s method)calx-679
     b.',28x,'| 78',l2,' - output of differences between experimental'/'calx-680
     c 28',l2,' - computation up to j-convergence-(.f.: stop when    |',calx-681
     d8x,'and calculated values.'/8x,'all the inhomogeneous terms are necalx-682
     egligible).',7x,'|'/' 29',l2,' - no diagonal term in second memberscalx-683
     f.',16x,'| 81',l2,' - hauser-feshbach corrections to cross-sectionscalx-684
     g.'/' 30',l2,' - pure dwba calculation.',29x,'| 82',l2,' - simplestcalx-685
     h compound nucleus formalism.'/59x,'| 83',l2,' - no engelbretch-weicalx-686
     idenmuller transformation in'/' 31',l2,' - input of experimental dacalx-687
     jta and chi2 calculation.   |',8x,'in compound nucleus.')          calx-688
 1007 format (' 32',l2,' - automatic search on some parameters.',15x,'| calx-689
     184',l2,' - uncoupled levels for compound nucleus.'/' 33',l2,' - sycalx-690
     2mmetrised chi2 for cross-sections.',15x,'| 85',l2,' - fission datacalx-691
     3 in compound nucleus.'/' 34',l2,' - next calculation changing enercalx-692
     4gy and/or some',7x,'| 86',l2,' - gamma emission data in compound ncalx-693
     5ucleus.'/8x,'parameters.',40x,'| 87',l2,' - no width fluctuations.calx-694
     6'/' 35',l2,' - search saved on tape 8 if ended or lack of time.   calx-695
     7|'/' 36',l2,' - restart a search from tape 8.',22x,'| 91',l2,' - ecalx-696
     8quidistant angles in the laboratory system.'/59x,'| 92',l2,' - noncalx-697
     9 standard observables at equidistant angles.'/' 41',l2,' - factoricalx-698
     asation of 1/(1-cos(theta)) in amplitudes.   | 93',l2,' - no recoilcalx-699
     b correction for reactions.'/' 42',l2,' - schmidt''s orthogonal. incalx-700
     c usual coupled equations.  | 94',l2,' - non relativistic "reduced calx-701
     dmass" for dirac equation.'/' 43',l2,' - interpolation on total spicalx-702
     en.',23x,'| 95',l2,' - "reduced energy" for non coulomb interactioncalx-703
     f in'/' 44',l2,' - coulomb corrections.',31x,'|',8x,'relativistic scalx-704
     gchroedinger equation or use of rest'/' 45',l2,' - angular momentumcalx-705
     h limit for coulomb corrections.    |',8x,'mass in dirac equation.'calx-706
     i/' 46',l2,' - restricted coulomb corrections.',20x,'| 96',l2,' - "calx-707
     jreduced mass" for coulomb interaction in')                        calx-708
 1008 format (' 47',l2,' - no recoil correction for bound states.',13x,'calx-709
     1|',8x,'relativistic schroedinger equation.'/59x,'| 97',l2,' - samecalx-710
     2 reduced mass for all the states.'/' 51',l2,' - output of potentiacalx-711
     3ls.',30x,'| 98',l2,' - q added to the mass of residual nucleus.'/'calx-712
     4 52',l2,' - output of reduced nuclear matrix elements.',9x,'| 99',calx-713
     5l2,' - schroedinger equivalent to dirac equation.'/' 53',l2,' - oucalx-714
     6tput of the number of iterations.',16x,'|100',l2,' - complete diracalx-715
     7c equation.'/'1')                                                 calx-716
 1009 format (//' **** first control card ****',2x,'1 ',9(' 1'),' 2 ',9(calx-717
     1' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/ 11x,5('  1 2 3 4 5 6 7 8 9calx-718
     2 0')/11x,5(1x,10l2)//' *** second control card ****',2x,'1 ',9(' 1calx-719
     3'),' 2 ',9(' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/11x,5('  1 2 3 4calx-720
     4 5 6 7 8 9 0')/11x,5(1x,10l2)/)                                   calx-721
 1010 format (10x,82('*')/10x,'*',80x,'*'/10x,'*',4x,18a4,4x,'*'/10x,'*'calx-722
     1,80x,'*'/10x,82('*')/)                                            calx-723
 1011 format (//' ******** you are using dirac equation without relativicalx-724
     1stic kinematics ********'//)                                      calx-725
 1012 format (7f10.5)                                                   calx-726
 1013 format (' maximum number of j',i6,'  (min',i3,') stop when maximumcalx-727
     1 s-matrix element is less than',d18.4//' plot conditions for crosscalx-728
     2-sections',2i5,5x,'for polarisations',2i5/)                       calx-729
 1014 format (4x,i3,' factorisation of 1/(1-cos(theta)) in the amplitudecalx-730
     1s.')                                                              calx-731
 1015 format (' angular momenta limited to',i5)                         calx-732
 1016 format (10x,'iteration method:  maximum number of iterations',i10/calx-733
     110x,'convergence criterion:',1p,d15.4,' for s-matrix',d15.4,' for calx-734
     2potentials and functions.'/)                                      calx-735
 1017 format (' imaginary potential increased with a factor',f10.5,' forcalx-736
     1 better convergence.')                                            calx-737
 1018 format (' usual coupled equations.')                              calx-738
 1019 format (' schmidt''s orthogonalisation every',i5,'  steps.')      calx-739
 1021 format (' coulomb corrections limited to angular momenta',i2,' forcalx-740
     1 central term and',i2,' for spin-orbit term')                     calx-741
 1022 format (/' indications for expansion of cross-sections in legendrecalx-742
     1 polynomials:',3i5)                                               calx-743
 1023 format (8i5,2f10.5)                                               calx-744
 1024 format (/' compound nucleus input:',i5,' uncoupled states',i4,' wicalx-745
     1th angular distribution and',i4,' without angular distribution'/24calx-746
     2x,i5,' fission transm. coeff.'/24x,i5,' gamma transm. coeff.'/24x,calx-747
     3i5,' continua')                                                   calx-748
 1025 format (' maximum number of spin values in the continuum:',i5/' dicalx-749
     1scretisation with:',2f10.5)                                       calx-750
 1026 format (' interpolation of s-matrix',3(2x,'from',i6,'  by steps ofcalx-751
     1',i4,'+1')/(26x,3(2x,'from',i6,'  by steps of',i4,'+1')))         calx-752
 1027 format (' uncumulated increases  ',3(27x,i4)/(24x,3(27x,i4)))     calx-753
 1028 format (4i5,2f10.5)                                               calx-754
 1029 format (//5x,i5,'  experimental angular distributions.'/)         calx-755
 1030 format (' there are no experimental data   ...  no search.')      calx-756
 1031 format (' no parameter in search.')                               calx-757
 1032 format (2x,i10,' coulomb phases and indefinite integrals'/2x,i10,'calx-758
     1 coulomb functions and finite integrals.')                        calx-759
 1033 format (' number of uncoupled states without angular distribution'calx-760
     1,i5,' less than the number of continua:',i5)                      calx-761
 1034 format (2x,i3,'th limit of interpolation',i6,' smaller than previocalx-762
     1us one',i6)                                                       calx-763
 1035 format (//' in calx  ...  stop  ...')                             calx-764
      end                                                               calx-765
c c 05/03/                                                      ecis06  inpa-000
      subroutine inpa                                                   inpa-001
      common /inout/ mr,mw,ms                                           inpa-002
      write (mw,1000)                                                   inpa-003
 1000 format ('c 05/03/07',62x,'ecis-000'/15x,'description of input of einpa-004
     1cis06',27x,'ecis-001'/15x,'******************************',27x,'ecinpa-005
     2is-002'/72x,'ecis-003'/72x,'ecis-004'/72x,'ecis-005'/'cards read iinpa-006
     3n subroutine calx',43x,'ecis-006'/'*****************************',inpa-007
     443x,'ecis-007'/72x,'ecis-008'/'card 1',34x,'format (18a4)',19x,'ecinpa-008
     5is-009'/'******',66x,'ecis-010'/6x,'title of the run which will beinpa-009
     6 printed as heading of results.',5x,'ecis-011'/72x,'ecis-012'/6x,'inpa-010
     7if title="description " this input description is listed.',9x,'eciinpa-011
     8s-013'/9x,'(1958 lines correctly printed in 32 pages)',21x,'ecis-0inpa-012
     914'/10x,'after this listing, go back to card 1.',24x,'ecis-015'/72inpa-013
     ax,'ecis-016'/6x,'if title="fin " the calculation is stopped.',23x,inpa-014
     b'ecis-017'/72x,'ecis-018'/11x,'these control words must be punchedinpa-015
     c from column 1.',11x,'ecis-019'/72x,'ecis-020'/'card 2',34x,'formainpa-016
     dt (50l1)',19x,'ecis-021'/'******',66x,'ecis-022'/6x,'50 first logiinpa-017
     ecal controls lo. enter "t" in the corresponding',6x,'ecis-023'/6x,inpa-018
     f'column for .true. and nothing for .false. unless "f" is needed.  inpa-019
     g ecis-024'/72x,'ecis-025'/' model',66x,'ecis-026'/7x,'1- lo(1)  roinpa-020
     htational model-(inverse: vibrational model).',9x,'ecis-027'/7x,'2-inpa-021
     i lo(2)  second order vibrational model-(inverse: first order). eciinpa-022
     js-028'/17x,'or constrained asymmetric rotational model (band mixininpa-023
     kgecis-029')                                                       inpa-024
      write (mw,1001)                                                   inpa-025
 1001 format (17x,'parameters of the first two 2+ computed from the',7x,inpa-026
     1'ecis-030'/17x,'quadrupole "gamma" in the davydov-filippov model).inpa-027
     2',5x,'ecis-031'/7x,'3- lo(3)  anharmonic vibrational model-(inversinpa-028
     3e: harmonic) or',4x,'ecis-032'/17x,'asymmetric rotational model-(iinpa-029
     4nverse: symmetric).',6x,'ecis-033'/7x,'4- lo(4)  parametrised spininpa-030
     5-orbit deformation-(inverse: standard)ecis-034'/7x,'5- lo(5)  diffinpa-031
     6erent deformation for each potential-(inverse: sameecis-035'/17x,'inpa-032
     7deformation).',42x,'ecis-036'/7x,'6- lo(6)  deformation lengths reinpa-033
     8ad instead of deformations for   ecis-037'/17x,'woods-saxon form finpa-034
     9actors.',30x,'ecis-038'/7x,'7- lo(7)  nuclear matrix element and finpa-035
     aorm factors read on cards. ecis-039'/17x,'this is not allowed for inpa-036
     bschroedinger equivalent of',5x,'ecis-040'/17x,'dirac equation.',40inpa-037
     cx,'ecis-041'/7x,'8- lo(8)  relativistic kinematics. for the reduceinpa-038
     dd mass, see',5x,'ecis-042'/17x,'lo(94) to lo(97).',38x,'ecis-043'/inpa-039
     e7x,'9- lo(9)  symmetrised woods-saxon form factors when the radiusinpa-040
     f isecis-044'/17x,'negative.',46x,'ecis-045'/6x,'10- lo(10) energy inpa-041
     gdependent potentials by dispersion relations.   ecis-046'/17x,'nowinpa-042
     h allowed with external potentials (lo(7)=.true.).   ecis-047'/72x,inpa-043
     i'ecis-048'/' interaction',60x,'ecis-049'/6x,'11- lo(11) deformed cinpa-044
     joulomb potential. with lo(7)=.false., it is  ecis-050'/17x,'set .finpa-045
     kalse. by the code if no charge is read.',10x,'ecis-051')          inpa-046
      write (mw,1002)                                                   inpa-047
 1002 format (6x,'12- lo(12) deformed imaginary potential (volume and suinpa-048
     1rface or',4x,'ecis-052'/17x,'scalar and vector).',36x,'ecis-053'/6inpa-049
     2x,'13- lo(13) deformed real spin-orbit or tensor potential. with',inpa-050
     35x,'ecis-054'/17x,'lo(7)=.false., it is set .false. by the code ifinpa-051
     4 no',5x,'ecis-055'/17x,'non zero spin and no related potential areinpa-052
     5 read.',7x,'ecis-056'/6x,'14- lo(14) deformed imaginary spin-orbitinpa-053
     6 or tensor potential. if  ecis-057'/17x,'.true., lo(13) is set .trinpa-054
     7ue.. with lo(7)=.false., it isecis-058'/17x,'set .false. by the coinpa-055
     8de as for lo(13).',17x,'ecis-059'/6x,'15- lo(15) reduced nuclear minpa-056
     9atrix elements read from cards.',7x,'ecis-060'/17x,'it is necessarinpa-057
     ay for the anharmonic vibrational model.  ecis-061'/''/6x,'16- lo(inpa-058
     b16) heavy-ion definition of reduced radii and deformations.ecis-06inpa-059
     c2'/17x,'when there are different masses in different channels, eciinpa-060
     ds-063'/17x,'the masses to be used can be indicated by the first',4inpa-061
     ex,'ecis-064'/17x,'input, but only the masses of the first level cainpa-062
     fn be   ecis-065'/17x,'used for the back transformation of the resuinpa-063
     glts of a   ecis-066'/17x,'search or in the subroutine eval (lo(34)inpa-064
     h=.true.).',6x,'ecis-067'/17x,'if lo(6)=.true., only coulomb deforminpa-065
     iation lengths are  ecis-068'/17x,'changed.',47x,'ecis-069'/6x,'17-inpa-066
     j lo(17) folding model. with external form factors the folding  eciinpa-067
     ks-070')                                                           inpa-068
      write (mw,1003)                                                   inpa-069
 1003 format (17x,'parameters are used independently of this logical.',5inpa-070
     1x,'ecis-071'/6x,'18- lo(18) projectile-target antisymmetrisation, inpa-071
     2valid only for   ecis-072'/17x,'same spin of the particle and the inpa-072
     3target and positive  ecis-073'/17x,'parity in the schroedinger forinpa-073
     4malism. for spin 0,',6x,'ecis-074'/17x,'the s-matrix is computed oinpa-074
     5nly for even total spins.',4x,'ecis-075'/17x,'for spin non 0., theinpa-075
     6 amplitudes are symmetrised but',4x,'ecis-076'/17x,'this do not coinpa-076
     7rrect the lack of symmetry of the',8x,'ecis-077'/17x,'interaction inpa-077
     8between particle and target.',15x,'ecis-078'/6x,'19- lo(19) deforminpa-078
     9ed coulomb spin-orbit potential. if .true.,',6x,'ecis-079'/17x,'loinpa-079
     a(11) is set .true.. with lo(7)=.false., it is set',4x,'ecis-080'/1inpa-080
     b7x,'.false. by the code as for lo(13). (needs lo(13)=.true.ecis-08inpa-081
     c1'/17x,'with a real spin-orbit potential, even very small)',5x,'ecinpa-082
     dis-082'/6x,'20- lo(20) energy dependence of transition form-factorinpa-083
     es when',6x,'ecis-083'/17x,'lo(10)=.true. . this dependence is the inpa-084
     farithmetic mean ecis-084'/17x,'value of the dependence of the leveinpa-085
     gls between which',4x,'ecis-085'/17x,'the transition form-factor ocinpa-086
     hcurs. it cannot be used   ecis-086'/17x,'with lo(12)=.false. .',34inpa-087
     ix,'ecis-087'/'  note:  in the rotational models, the optical poteninpa-088
     jtials (for elastic  ecis-088'/'  ****  scattering) are always defoinpa-089
     krmed. to avoid this, when lo(11),',4x,'ecis-089')                 inpa-090
      write (mw,1004)                                                   inpa-091
 1004 format (8x,'lo(12),lo(13),lo(14) or lo(19) is .false., use lo(5)=.inpa-092
     1true.',5x,'ecis-090'/8x,'and enter 0. for the corresponding deforminpa-093
     2ations.',16x,'ecis-091'/8x,'if lo(14)=.true., lo(13) is set .true.inpa-094
     3; if lo(19)=.true.,',7x,'ecis-092'/8x,'lo(11) is set .true.; this inpa-095
     4can be avoided with lo(5)=.true.',5x,'ecis-093'/72x,'ecis-094'/' iinpa-096
     5ntegration',60x,'ecis-095'/6x,'21- lo(21) usual coupled equations-inpa-097
     6(inverse: iterations).',9x,'ecis-096'/17x,'not allowed with dirac inpa-098
     7equation. when it is used with  ecis-097'/17x,'deformed spin-orbitinpa-099
     8, the derivative terms are not takenecis-098'/17x,'into account aninpa-100
     9d the computation is incorrect.',9x,'ecis-099'/6x,'22- lo(22) no uinpa-101
     ase of pade approximants for convergence of the',5x,'ecis-100'/17x,inpa-102
     b'iterations.',44x,'ecis-101'/6x,'23- lo(23) no use of pade approxiinpa-103
     cmant results and shift to usual  ecis-102'/17x,'coupled equations inpa-104
     dwhen convergence is not obtained.',4x,'ecis-103'/6x,'24- lo(24) coinpa-105
     emputation of coupling potentials at each iteration.  ecis-104'/17xinpa-106
     f,'(saves space but loses time, chiefly in rotational',5x,'ecis-105inpa-107
     g'/17x,'model).',48x,'ecis-106'/6x,'25- lo(25) complete calculationinpa-108
     h up to the end-(inverse: one',7x,'ecis-107'/17x,'iteration only asinpa-109
     i soon as two iterations are enough).  ecis-108'/6x,'26- lo(26) stainpa-110
     jbilisation of integration for long range constant   ecis-109'/17x,inpa-111
     k'potentials. an additional term in h**6 is introduced inecis-110')inpa-112
      write (mw,1005)                                                   inpa-113
 1005 format (17x,'the truncation in such a way that the term in h**6 ofinpa-114
     1  ecis-111'/17x,'the total truncation error cancels out for a consinpa-115
     2tant  ecis-112'/17x,'potential. this term is -h**6*v**3/240 for nuinpa-116
     3merov''s   ecis-113'/17x,'method and +h**6*v**3/360 for modified ninpa-117
     4umerov''s methodecis-114'/17x,'with the real potential v.',29x,'ecinpa-118
     5is-115'/6x,'27- lo(27) numerov''s method for single equations-(invinpa-119
     6erse:',8x,'ecis-116'/17x,'modified numerov''s method). for single inpa-120
     7equation and',4x,'ecis-117'/17x,'constant potential, truncation erinpa-121
     8rors are of opposite  ecis-118'/17x,'sign.',50x,'ecis-119'/6x,'28-inpa-122
     9 lo(28) computation up to j-convergence-(inverse: stop when alleciinpa-123
     as-120'/17x,'the inhomogeneous terms are negligible). for elastic  inpa-124
     b ecis-121'/17x,'scattering (only one channel) lo(21) or lo(28) musinpa-125
     ct be ecis-122'/17x,'.true.. in this case lo(28) is set .true. by tinpa-126
     dhe code. ecis-123'/''/6x,'29- lo(29) no diagonal terms in second inpa-127
     emembers for iterations of  ecis-124'/17x,'schroedinger equations. inpa-128
     f(inverse: all couplings are in ecis-125'/17x,'second members. the inpa-129
     guncoupled solutions do not depend  ecis-126'/17x,'on the channel sinpa-130
     hpin but convergence can be slower in   ecis-127'/17x,'some probleminpa-131
     is. no effect in first order vibrational',4x,'ecis-128'/17x,'model,inpa-132
     j no use in dirac equations: if lo(100)=.true.,   ecis-129'/17x,'loinpa-133
     k(29) is set .false.). for convenience, lo(29) is set ecis-130')   inpa-134
      write (mw,1006)                                                   inpa-135
 1006 format (17x,'.false. if lo(18)=.true. .',29x,'ecis-131'/6x,'30- loinpa-136
     1(30) pure dwba calculation.',33x,'ecis-132'/72x,'ecis-133'/' searcinpa-137
     2h',65x,'ecis-134'/6x,'31- lo(31) input of experimental data and cainpa-138
     3lculation of a chi2.  ecis-135'/17x,'it is set .false. if no experinpa-139
     4imental data are read.',4x,'ecis-136'/6x,'32- lo(32) automatic seainpa-140
     5rch on some parameters. it is set .false. ecis-137'/17x,'if no parinpa-141
     6ameters are in search.',24x,'ecis-138'/6x,'33- lo(33) symmetrised inpa-142
     7chi2 for cross-sections with fixed',9x,'ecis-139'/17x,'normalisatiinpa-143
     8on-(inverse: usual chi2). the chi2',10x,'ecis-140'/17x,'contributiinpa-144
     9on is multiplied by the ratio of',13x,'ecis-141'/17x,'experimentalinpa-145
     a to calculated value.',22x,'ecis-142'/6x,'34- lo(34) next calculatinpa-146
     bion changing only energy and some optical ecis-143'/17x,'parameterinpa-147
     cs.',44x,'ecis-144'/6x,'35- lo(35) search saved on tape 8 if correcinpa-148
     dtly ended or stopped byecis-145'/17x,'the number of evaluations.',inpa-149
     e29x,'ecis-146'/6x,'36- lo(36) restart a search from tape 8.',26x,'inpa-150
     fecis-147'/72x,'ecis-148'/' long range interaction',49x,'ecis-149'/inpa-151
     g6x,'41- lo(41) factorisation of 1/(1-cos(theta)) in the amplitudesinpa-152
     h. itecis-150'/17x,'is needed for dirac equation or with spin-orbitinpa-153
     i coulombecis-151'/17x,'potential.',45x,'ecis-152'/6x,'42- lo(42) sinpa-154
     jchmidt''s orthogonalisation of solutions in usual',6x,'ecis-153'/1inpa-155
     k7x,'coupled equations.',37x,'ecis-154')                           inpa-156
      write (mw,1007)                                                   inpa-157
 1007 format (6x,'43- lo(43) interpolation on total spin.',27x,'ecis-155inpa-158
     1'/6x,'44- lo(44) coulomb corrections. lo(44) is set .false. if lo(inpa-159
     211) isecis-156'/17x,'.false. . outside the dirac formalism it is binpa-160
     3etter to  ecis-157'/17x,'use also lo(29)=.true..',32x,'ecis-158'/6inpa-161
     4x,'45- lo(45) limitation on the angular momenta for coulomb',10x,'inpa-162
     5ecis-159'/17x,'corrections. default values are 3 for central term'inpa-163
     6,5x,'ecis-160'/17x,'and 2 for spin-orbit term. maximum values are'inpa-164
     7,10x,'ecis-161'/17x,'respectively 5 and 4.',34x,'ecis-162'/6x,'46-inpa-165
     8 lo(46) restricted coulomb corrections. (saves storage).',7x,'ecisinpa-166
     9-163'/17x,'if lo(44)=.false. the diagonal corrections used in',5x,inpa-167
     a'ecis-164'/17x,'dirac formalism or for the coulomb spin-orbit are'inpa-168
     b,6x,'ecis-165'/17x,'suppressed. if lo(44)=.true. indications for tinpa-169
     chese',5x,'ecis-166'/17x,'restrictions between channels will be reainpa-170
     dd.',12x,'ecis-167'/6x,'47- lo(47) no recoil correction for bound sinpa-171
     etates.',17x,'ecis-168'/'  note:  if lo(36)=.true. a search saved oinpa-172
     fn tape 8 is restarted;',8x,'ecis-169'/'  ****  no other logical coinpa-173
     gntrol from this card is taken into account.  ecis-170'/8x,'insteadinpa-174
     h of the following cards, go to "restart input: cards',5x,'ecis-171inpa-175
     i'/8x,'read in subroutine rest".',39x,'ecis-172'/72x,'ecis-173'/'cainpa-176
     jrd 3',34x,'format (50l1)',19x,'ecis-174'/'******',66x,'ecis-175') inpa-177
      write (mw,1008)                                                   inpa-178
 1008 format (6x,'logical controls from 51 to 100 (as for previous card)inpa-179
     1.',11x,'ecis-176'/72x,'ecis-177'/' printing in complete output',44inpa-180
     2x,'ecis-178'/7x,'1- lo(51) output of potentials.',34x,'ecis-179'/7inpa-181
     3x,'2- lo(52) output of reduced nuclear matrix elements.',13x,'ecisinpa-182
     4-180'/7x,'3- lo(53) output of the number of iterations.',20x,'ecisinpa-183
     5-181'/7x,'4- lo(54) output of the length used in the working fieldinpa-184
     6.',8x,'ecis-182'/7x,'5- lo(55) output of c-matrix elements and of inpa-185
     7compound nucleus',4x,'ecis-183'/17x,'intermediate results.',34x,'einpa-186
     8cis-184'/7x,'6- lo(56) output of s-matrix elements.',27x,'ecis-185inpa-187
     9'/7x,'7- lo(57) output of phase-shifts at each e.c.i.s. iteration.inpa-188
     a',5x,'ecis-186'/7x,'8- lo(58) output of the coefficients of each finpa-189
     borm factor for all ecis-187'/17x,'sets of equations.',37x,'ecis-18inpa-190
     c8'/'  note:  in a search, lo(51) to lo(58) are used for the compleinpa-191
     dte resultsecis-189'/'  ****  (at the first calculation if lo(75)=.inpa-192
     efalse. and always at the   ecis-190'/8x,'end of the search).',45x,inpa-193
     f'ecis-191'/72x,'ecis-192'/' punch and results in last output',39x,inpa-194
     g'ecis-193'/7x,'9- lo(59) total cross section, total reaction crossinpa-195
     h section',6x,'ecis-194'/17x,'(including compound elastic), total sinpa-196
     ium of compound',4x,'ecis-195'/17x,'contributions and total elasticinpa-197
     j cross section written  ecis-196'/17x,'on file 58 if they are defiinpa-198
     kned.',24x,'ecis-197')                                             inpa-199
      write (mw,1009)                                                   inpa-200
 1009 format (17x,'inelastic cross-sections written on file 59.',11x,'ecinpa-201
     1is-198'/6x,'10- lo(60) s-matrix elements written on file 60.',18x,inpa-202
     2'ecis-199'/6x,'11- lo(61) reduced nuclear matrix elements written inpa-203
     3on file 61.',4x,'ecis-200'/6x,'12- lo(62) potentials written on fiinpa-204
     4le 62.',25x,'ecis-201'/6x,'13- lo(63) penetrabilities written on finpa-205
     5ile 63. with iterations,   ecis-202'/17x,'the code computes all thinpa-206
     6e solutions.',19x,'ecis-203'/6x,'14- lo(64) results for experimentinpa-207
     7al data written on file 64',7x,'ecis-204'/17x,'and at equidistant inpa-208
     8angles written on file 66.',10x,'ecis-205'/6x,'15- lo(65) coefficiinpa-209
     9ents of the expansion in legendre polynomials  ecis-206'/17x,'writinpa-210
     aten on file 65.',36x,'ecis-207'/'  note:  in a search, lo(59) to linpa-211
     bo(65) are used only in the last result.ecis-208'/'  ****  there arinpa-212
     ce introduced for neutron scattering, in peculiar, on theecis-209'/inpa-213
     d8x,'suggestion of e. bauge, r. capote and a. koning. for each run,inpa-214
     e  ecis-210'/8x,'the first line (format a10,f10.2,1p,d20.8,0p,f10.2inpa-215
     f,2i5) with theecis-211'/4x,'1-10  identification <cross-s.>, <ine.inpa-216
     gc.s.>, <s-matrix>, <red.mat.>,ecis-212'/10x,'<potenti.>, <tlj',5x,inpa-217
     h'>, <exp.dat.>, <legendre>, <ang.dis.> forecis-213'/10x,'files 58 inpa-218
     ito 66.',47x,'ecis-214'/3x,'11-20 the mass of the incident particleinpa-219
     j.',29x,'ecis-215'/3x,'21-40 the energy in the laboratory system.',inpa-220
     k27x,'ecis-216'/3x,'41-50 the mass of the target.',40x,'ecis-217') inpa-221
      write (mw,1010)                                                   inpa-222
 1010 format (3x,'51-55 the product of charges.',40x,'ecis-218'/3x,'56-6inpa-223
     10 the number of lines or the number of subsets which are headed  einpa-224
     2cis-219'/9x,'by some indications including their own number of lininpa-225
     3es, exceptecis-220'/9x,'for 61 and 62. for 61, it is the number ofinpa-226
     4 coupled states and  ecis-221'/9x,'the remaining of the output caninpa-227
     5 be used by the program.',8x,'ecis-222'/9x,'for 62, it is the numbinpa-228
     6er of form-factors and the remaining of  ecis-223'/9x,'the output inpa-229
     7can also be used by the program, replacing the',6x,'ecis-224'/9x,'inpa-230
     8identifications by the suitable input.',25x,'ecis-225'/72x,'ecis-2inpa-231
     926'/' printing in the last result',44x,'ecis-227'/6x,'16- lo(66) ninpa-232
     ao calculation at equidistant angles.',18x,'ecis-228'/6x,'17- lo(67inpa-233
     b) no plot of experimental data.',26x,'ecis-229'/6x,'18- lo(68) no inpa-234
     cplot of cross-sections at equidistant angles.',7x,'ecis-230'/6x,'1inpa-235
     d9- lo(69) no plot of polarisations at equidistant angles.',8x,'eciinpa-236
     es-231'/72x,'ecis-232'/' printing at the beginning and in a search'inpa-237
     f,30x,'ecis-233'/6x,'21- lo(71) no detailed output of logical contrinpa-238
     gols.',16x,'ecis-234'/6x,'22- lo(72) no output of experimental datainpa-239
     h when they are read.',5x,'ecis-235'/6x,'23- lo(73) no output of exinpa-240
     iternal potentials when they are read.   ecis-236'/6x,'24- lo(74) oinpa-241
     jutput of time in different steps of computation.',6x,'ecis-237')  inpa-242
      write (mw,1011)                                                   inpa-243
 1011 format (6x,'25- lo(75) no complete output at the first run of a seinpa-244
     1arch.',7x,'ecis-238'/6x,'26- lo(76) lo(51) to lo(65) are always usinpa-245
     2ed-(inverse: only for',4x,'ecis-239'/17x,'complete output).',38x,'inpa-246
     3ecis-240'/6x,'27- lo(77) output of time differences during the seainpa-247
     4rch.',10x,'ecis-241'/6x,'28- lo(78) no output of differences betweinpa-248
     5en experimental and',6x,'ecis-242'/17x,'calculated values.',37x,'einpa-249
     6cis-243'/72x,'ecis-244'/' compound nucleus',55x,'ecis-245'/6x,'31-inpa-250
     7 lo(81) hauser-feshbach corrections to cross-sections.',9x,'ecis-2inpa-251
     846'/17x,'with iterations, the code computes all the solutions.  ecinpa-252
     9is-247'/17x,'if lo(82), lo(84), lo(85) or lo(86) is .true., lo(81)inpa-253
     a  ecis-248'/17x,'is set .true..',41x,'ecis-249'/''/6x,'32- lo(82)inpa-254
     b old simplified compound nucleus (excludes uncoupled',4x,'ecis-250inpa-255
     c'/17x,'states, fission and gammas; lo(84), lo(85), lo(86) are ecisinpa-256
     d-251'/17x,'set .false.).',42x,'ecis-252'/6x,'33- lo(83) no engelbrinpa-257
     eetch-weidenmuller transformation in compound ecis-253'/17x,'nucleuinpa-258
     fs.',47x,'ecis-254'/6x,'34- lo(84) uncoupled levels for compound nuinpa-259
     gcleus. it is set',7x,'ecis-255'/17x,'.false. if none are read.',30inpa-260
     hx,'ecis-256'/6x,'35- lo(85) fission transmission coefficients (to inpa-261
     ibe read from',5x,'ecis-257'/17x,'cards) for compound nucleus. it iinpa-262
     js set .false. if none ecis-258'/17x,'are read.',46x,'ecis-259'/6x,inpa-263
     k'36- lo(86) gamma emission in compound nucleus.',20x,'ecis-260')  inpa-264
      write (mw,1012)                                                   inpa-265
 1012 format (6x,'37- lo(87) no width fluctuations.',33x,'ecis-261'/72x,inpa-266
     1'ecis-262'/' miscellaneous',58x,'ecis-263'/6x,'41- lo(91) angular inpa-267
     2distribution at equidistant angles in the',6x,'ecis-264'/17x,'laboinpa-268
     3ratory system.',37x,'ecis-265'/6x,'42- lo(92) non standard observainpa-269
     4bles at equidistant angles.',8x,'ecis-266'/6x,'43- lo(93) no recoiinpa-270
     5l correction for reactions with small',10x,'ecis-267'/17x,'differeinpa-271
     6nces (less than .5) of target masses.',11x,'ecis-268'/6x,'44- lo(9inpa-272
     74) non relativistic "reduced mass" for dirac equation.',4x,'ecis-2inpa-273
     869'/6x,'45- lo(95) "reduced energy" for non coulomb interaction ininpa-274
     9',8x,'ecis-270'/17x,'relativistic schroedinger equation or use of inpa-275
     arest mass ecis-271'/17x,'in dirac equation (exclude lo(94)=.true.)inpa-276
     b.',13x,'ecis-272'/6x,'46- lo(96) "reduced mass" for coulomb interainpa-277
     cction in relativistic ecis-273'/17x,'schroedinger equation.',33x,'inpa-278
     decis-274'/6x,'47- lo(97) same reduced mass for all the states withinpa-279
     e small',8x,'ecis-275'/17x,'differences (less than .5) of target mainpa-280
     fsses.',11x,'ecis-276'/6x,'48- lo(98) q added to the mass of residuinpa-281
     gal nucleus or outgoing',4x,'ecis-277'/17x,'particle. q can be takeinpa-282
     hn into account only if',10x,'ecis-278'/17x,'lo(8)=.true. for relatinpa-283
     iivistic kinematics. not to be',4x,'ecis-279'/17x,'used if this effinpa-284
     ject is included in the masses when',5x,'ecis-280'/17x,'they are reinpa-285
     kad.',41x,'ecis-281')                                              inpa-286
      write (mw,1013)                                                   inpa-287
 1013 format (6x,'49- lo(99) schroedinger equivalent to dirac equation.'inpa-288
     1,13x,'ecis-282'/17x,'diffuseness of coulomb potentials must be 0 ainpa-289
     2nd they   ecis-283'/17x,'cannot be deformed. diffuseness are set tinpa-290
     3o 0.',10x,'ecis-284'/17x,'no asymmetric rotational model and no seinpa-291
     4cond order',5x,'ecis-285'/17x,'vibrational model: the correspondininpa-292
     5g logicals are set  ecis-286'/17x,'.false. as are also lo(11) and inpa-293
     6lo(19).',17x,'ecis-287'/6x,'50- lo(100) complete dirac equation.',inpa-294
     730x,'ecis-288'/'  note:  if lo(99)=.true. or lo(100)=.true., lo(8)inpa-295
     8 is set .true.; the   ecis-289'/'  ****  with relativistic kinematinpa-296
     9ics (lo(8)=.true.), the "reduced mass" ecis-290'/8x,'and the "reduinpa-297
     aced energy" are the product of masses or energies  ecis-291'/8x,'dinpa-298
     bivided by the total energy in the centre of mass.',14x,'ecis-292'/inpa-299
     c72x,'ecis-293'/'card 4',34x,'format (14i5)',19x,'ecis-294'/'******inpa-300
     d',66x,'ecis-295'/7x,'1- 5   ncoll  number of nuclear states. it doinpa-301
     ees not include the  ecis-296'/21x,'number of uncoupled states for inpa-302
     fcompound nucleus.   ecis-297'/7x,'6-10   njmax  maximum number of inpa-303
     gchannel spin. (default value 20) ecis-298'/21x,'the maximum value inpa-304
     hof the total angular momentum j  ecis-299'/21x,'will be njmax-1 whinpa-305
     ien it is integer or njmax-.5 whenecis-300'/21x,'it is half-integerinpa-306
     j.',32x,'ecis-301'/6x,'11-15   iterm  maximum number of ecis iteratinpa-307
     kions. (default value  ecis-302')                                  inpa-308
      write (mw,1014)                                                   inpa-309
 1014 format (21x,'20). must be 1 for dwba calculations.',14x,'ecis-303'inpa-310
     1/21x,'if lo(21)=lo(42)=.true., perodicity of schmidt''s   ecis-304inpa-311
     2'/21x,'orthogonalisation in usual coupled equations.',6x,'ecis-305inpa-312
     3'/6x,'16-20   npp',4x,'number of optical potentials. (default valuinpa-313
     4e 1).   ecis-306'/21x,'only the first one is deformed when the forinpa-314
     5m',7x,'ecis-307'/21x,'factors are not read on cards.',21x,'ecis-30inpa-315
     68'/6x,'21-25   ncj',4x,'number of factorisations of 1/(1-cos(thetainpa-316
     7)) in',4x,'ecis-309'/21x,'the amplitudes. (default value 1).',17x,inpa-317
     8'ecis-310'/''/6x,'26-30   ngr(1) number of decades in logarithmicinpa-318
     9 scale in plots of ecis-311'/21x,'elastic cross-sections in the stinpa-319
     aandard option',6x,'ecis-312'/21x,'(default value 2). for charged pinpa-320
     barticles, the',6x,'ecis-313'/21x,'cross-section divided by rutherfinpa-321
     cord''s cross-sectionecis-314'/21x,'is plotted.',40x,'ecis-315'/6x,inpa-322
     d'31-35   ngr(2) as ngr(1),for inelastic channels.(default value 2)inpa-323
     e ecis-316'/6x,'36-40   npr(1) plot indications for elastic polarisinpa-324
     fations at',6x,'ecis-317'/21x,'equidistant angles. if there are n dinpa-325
     gifferent',7x,'ecis-318'/21x,'angular distributions of polarisationinpa-326
     hs, npr(1) is  ecis-319'/21x,'the sum for i=1 to n of k(i)*(2**(i-1inpa-327
     i)) where',6x,'ecis-320'/21x,'k(i)=1 for a plot and 0 for no plot oinpa-328
     jf the i-th',4x,'ecis-321'/21x,'distribution.(default value 1)',21xinpa-329
     k,'ecis-322')                                                      inpa-330
      write (mw,1015)                                                   inpa-331
 1015 format (17x,'standard options: spin 0 - no polarisation.',12x,'eciinpa-332
     1s-323'/35x,'spin 1/2 - vector polarisation.',6x,'ecis-324'/35x,'spinpa-333
     2in >1/2 - it11, t20, t21, t22.',5x,'ecis-325'/6x,'41-45   npr(2) ainpa-334
     3s npr(1),for inelastic channels.(default value 1) ecis-326'/17x,'sinpa-335
     4tandard options: spin 0 - no polarisation.',12x,'ecis-327'/22x,'spinpa-336
     5in 1/2 - vect. ana. power, vect. pol., spin-flipecis-328'/22x,'spiinpa-337
     6n >1/2 - it11, vect. pol., t20, t21, t22.',6x,'ecis-329'/6x,'46-50inpa-338
     7   lmz',4x,'number of j values for which the radial equations  eciinpa-339
     8s-330'/21x,'are solved when coulomb corrections are used. this eciinpa-340
     9s-331'/21x,'number can be automatically decreased if the',7x,'ecisinpa-341
     a-332'/21x,'irregular functions are too large. the asymptotic  ecisinpa-342
     b-333'/21x,'region where the phase-shifts are computed',9x,'ecis-33inpa-343
     c4'/21x,'analytically is above this value. the best value ofecis-33inpa-344
     d5'/21x,'lmz is the maximum value of j needed by the same   ecis-33inpa-345
     e6'/21x,'computation without charge and without anomalous   ecis-33inpa-346
     f7'/21x,'magnetic moment. (default value njmax/2, but enter ecis-33inpa-347
     g8'/21x,'a negative value if you want to use njmax).',8x,'ecis-339'inpa-348
     h/6x,'51-55   jdm',4x,'total spin above which stop or reduction to inpa-349
     ione',4x,'ecis-340'/21x,'iteration can occur. (limits lo(25),lo(28)inpa-350
     j=.false.)ecis-341'/21x,'necessary for heavy-ion scattering becauseinpa-351
     k the',5x,'ecis-342')                                              inpa-352
      write (mw,1016)                                                   inpa-353
 1016 format (21x,'cross-section for small total angular momenta are  ecinpa-354
     1is-343'/21x,'very small.',40x,'ecis-344'/6x,'56-60   lml',4x,'maxiinpa-355
     2mum angular momentum (default value maximum).  ecis-345'/21x,'withinpa-356
     3out long range interaction, a limit is given   ecis-346'/21x,'for inpa-357
     4each level such that the regular coulomb',7x,'ecis-347'/21x,'functinpa-358
     5ion is larger than 1.d-30 at matching radius. ecis-348'/6x,'61-65 inpa-359
     6  jit',4x,'number of rates of interpolation for total spin.   ecisinpa-360
     7-349'/21x,'(default value 1).',33x,'ecis-350'/6x,'66-70   mn',5x,'inpa-361
     8multiplicative factor for njmax read in columns',4x,'ecis-351'/21xinpa-362
     9,'6-10 allowing to use more than njmax>10**5.',8x,'ecis-352'/21x,'inpa-363
     a(default value 1)',34x,'ecis-353'/'  note:  if lo(93)=.true. ngr ainpa-364
     bnd npr are not taken into account in',5x,'ecis-354'/'  ****  compuinpa-365
     ctations at equidistant angles because such indications willecis-35inpa-366
     d5'/8x,'be read again in subroutine deph, but ngr is always used foinpa-367
     er',4x,'ecis-356'/8x,'plots of experimental cross-sections.',27x,'einpa-368
     fcis-357'/72x,'ecis-358'/'card 5',34x,'format (7f10.5)',17x,'ecis-3inpa-369
     g59'/'******',66x,'ecis-360'/7x,'1-10   h',6x,'integration step sizinpa-370
     he in fermis. (default value',4x,'ecis-361'/21x,'min(0.5/wave numbeinpa-371
     ir, 0.5*min(diffusenesses)),',6x,'ecis-362'/21x,'without the diffusinpa-372
     jenesses if lo(7)=.true.).',8x,'ecis-363'/6x,'11-20   rm',5x,'matchinpa-373
     king radius.(if lo(7)=.true. default value 20. ecis-364')          inpa-374
      write (mw,1017)                                                   inpa-375
 1017 format (21x,'if lo(7)=.false., for each non zero potential, the ecinpa-376
     1is-365'/21x,'radius where its absolute value is (aconv*ecm/wave ecinpa-377
     2is-366'/21x,'number) is computed and rm is the largest of them. ecinpa-378
     3is-367'/21x,'for coulomb form factors, radius+10*diffuseness is ecinpa-379
     4is-368'/21x,'used)',46x,'ecis-369'/6x,'21-30   bjm',4x,'coefficieninpa-380
     5t of the imaginary potential to be added ecis-370'/21x,'to the uncinpa-381
     6oupled equations and removed in the',6x,'ecis-371'/''/21x,'secondinpa-382
     7 member to accelerate convergence for',8x,'ecis-372'/21x,'schroediinpa-383
     8nger equations.',28x,'ecis-373'/6x,'31-40   eiter  convergence criinpa-384
     9terion for s-matrix in the iterationecis-374'/21x,'(default value inpa-385
     a1.d-5).',29x,'ecis-375'/6x,'41-50   aconv  value below which functinpa-386
     bions and potentials are',5x,'ecis-376'/21x,'neglected in iterationinpa-387
     cs.(default value 1.d-5).',5x,'ecis-377'/21x,'aconv is also used ininpa-388
     d the default value of rm.',5x,'ecis-378'/6x,'51-60   conj   converinpa-389
     egence criterion for j values.',16x,'ecis-379'/21x,'(default value inpa-390
     f1.d-5).',29x,'ecis-380'/72x,'ecis-381'/'limitation to coulomb corrinpa-391
     gections',7x,'format (14i5)',19x,'ecis-382'/'**********************inpa-392
     h***********',39x,'ecis-383'/' if lo(45) is .true., otherwise go toinpa-393
     i "legendre expansion data"',9x,'ecis-384'/7x,'1- 5   mcm(1) maximuinpa-394
     jm angular momentum for the computation of',4x,'ecis-385'/21x,'the inpa-395
     kcorrections due to the coulomb potential.',6x,'ecis-386')         inpa-396
      write (mw,1018)                                                   inpa-397
 1018 format (21x,'(default value 3, value limited to 5).',13x,'ecis-387inpa-398
     1'/7x,'6-10   mcm(2) same for the spin-orbit coulomb potential.',9xinpa-399
     2,'ecis-388'/21x,'(default value 2, value limited to 4).',13x,'ecisinpa-400
     3-389'/'  note:  enter a negative value to use 0. a blank or 0 is rinpa-401
     4eplaced by   ecis-390'/'  ****  the default values described aboveinpa-402
     5.',29x,'ecis-391'/72x,'ecis-392'/'legendre expansion data',17x,'foinpa-403
     6rmat (14i5)',19x,'ecis-393'/'***********************',49x,'ecis-39inpa-404
     74'/' if lo(65) is .true., otherwise go to "compound nucleus data".inpa-405
     8',10x,'ecis-395'/7x,'1- 5   nl(1)  power of (1-cos(theta)) for theinpa-406
     9 expansion in',7x,'ecis-396'/21x,'legendre polynomials of the inteinpa-407
     arference between   ecis-397'/21x,'coulomb and nuclear elastic scatinpa-408
     btering. power of   ecis-398'/21x,'(1-cos(theta)**2) if lo(18) is .inpa-409
     ctrue..',13x,'ecis-399'/21x,'(default value 2).',33x,'ecis-400'/7x,inpa-410
     d'6-10   nl(2)  number of legendre polynomials for elastic',9x,'eciinpa-411
     es-401'/21x,'scattering of charged particles. (default value',4x,'einpa-412
     fcis-402'/21x,'1.5 number obtained without coulomb amplitude).',4x,inpa-413
     g'ecis-403'/6x,'11-15   nl(3)  number of legendre polynomials for einpa-414
     hlastic',9x,'ecis-404'/21x,'scattering of uncharged particles, inelinpa-415
     iastic',7x,'ecis-405'/21x,'scattering and compound nucleus. (defaulinpa-416
     jt value',4x,'ecis-406'/21x,'maximum number).',35x,'ecis-407'/72x,'inpa-417
     kecis-408')                                                        inpa-418
      write (mw,1019)                                                   inpa-419
 1019 format ('compound nucleus data',19x,'format (8i5,2f10.5)',13x,'eciinpa-420
     1s-409'/'*********************',51x,'ecis-410'/' if lo(84) or lo(85inpa-421
     2) or lo(86) is .true., otherwise go to',15x,'ecis-411'/' "interpolinpa-422
     3ation on total spin".',41x,'ecis-412'/7x,'1- 5   nsp(1) number of inpa-423
     4uncoupled states and continua. if it is  ecis-413'/21x,'zero, lo(8inpa-424
     54)=.false.',31x,'ecis-414'/7x,'6-10   nsp(2) number of uncoupled sinpa-425
     6tates with angular',12x,'ecis-415'/21x,'distribution. they must beinpa-426
     7 the first given.',8x,'ecis-416'/21x,'it is replaced by min(nsp(1)inpa-427
     8,nsp(2)).',14x,'ecis-417'/6x,'11-15   nfiss  number of fission datinpa-428
     9a. if nfiss=0, lo(85)=.false. ecis-418'/6x,'16-20   nrd',4x,'numbeinpa-429
     ar of gamma transmission factors. if it is 0,  ecis-419'/21x,'theseinpa-430
     b coefficients are computed.',19x,'ecis-420'/6x,'21-25   ncont  numinpa-431
     cber of continua. they must be the last given,   ecis-421'/21x,'no inpa-432
     dangular distribution can be requested for them. ecis-422'/6x,'26-3inpa-433
     e0   ncoj   number of values of the spin of the residual',7x,'ecis-inpa-434
     f423'/21x,'nucleus for the continua. (default value 30).',6x,'ecis-inpa-435
     g424'/6x,'31-35   kmin   minimum number of j values for compound nuinpa-436
     hcleus',4x,'ecis-425'/21x,'(default value: minimum value for s waveinpa-437
     is in',7x,'ecis-426'/21x,'entrance channel).',33x,'ecis-427'/6x,'36inpa-438
     j-40   kmax   maximum number of j values for compound nucleus',4x,'inpa-439
     kecis-428'/21x,'(default value njmax).',29x,'ecis-429')            inpa-440
      write (mw,1020)                                                   inpa-441
 1020 format (6x,'41-50   acn1   ratio energy/step for the discretisatioinpa-442
     1n of the',4x,'ecis-430'/21x,'continua at large energy . (default vinpa-443
     2alue 8.).',5x,'ecis-431'/6x,'51-60   acn2   number of steps per meinpa-444
     3v for the discretisation of  ecis-432'/21x,'the continua at low eninpa-445
     4ergy. (default value 8.).',4x,'ecis-433'/''/'  note:  the shift finpa-446
     5rom the use of acn1 to acn2 occurs below the energy ecis-434'/'  *inpa-447
     6***  acn1/acn2. below this energy, the interval is divided in equainpa-448
     7l  ecis-435'/8x,'steps with a minimum of two steps. calculations ainpa-449
     8re done with   ecis-436'/8x,'the energy of the middle of the step.inpa-450
     9',27x,'ecis-437'/9x,'without kmin the calculation can stop before inpa-451
     aany significant   ecis-438'/8x,'result. with interpolation on totainpa-452
     bl spin below kmax, a huge',5x,'ecis-439'/8x,'storage array, proporinpa-453
     ctional to kmax, is needed for uncoupled',4x,'ecis-440'/8x,'states inpa-454
     dwith angular distribution.',31x,'ecis-441'/9x,'compound nucleus cainpa-455
     elculation is stopped at the j value larger  ecis-442'/8x,'than kmiinpa-456
     fn one for which the largest compound nucleus',12x,'ecis-443'/8x,'cinpa-457
     gontribution is less than conj**2. the code cannot deal with',4x,'einpa-458
     hcis-444'/8x,'very large j values.',44x,'ecis-445'/72x,'ecis-446'/'inpa-459
     iinterpolation on total spin',13x,'format (14i5)',19x,'ecis-447'/'*inpa-460
     j**************************',45x,'ecis-448'/' if lo(43) is .true., inpa-461
     kotherwise go to  "cards read in subroutine lect". ecis-449')      inpa-462
      write (mw,1021)                                                   inpa-463
 1021 format (7x,'1- 5   ls(1)  first limit.',39x,'ecis-450'/7x,'6-10   inpa-464
     1ld(1)  number of values skipped.',26x,'ecis-451'/6x,'11-15   ls(2)inpa-465
     2  second limit.',38x,'ecis-452'/6x,'16-20   ld(2)  number of valueinpa-466
     3s skipped.',26x,'ecis-453'/3x,'....................  up to ls(jit)inpa-467
     4 and ld(jit)   ...................ecis-454'/7x,'the calculation isinpa-468
     5 stopped if values ls decrease. the values ld  ecis-455'/' are chainpa-469
     6nged to be used cumulatively in the program. if lo(18)=.true.,  ecinpa-470
     7is-456'/' and the spins in the ground state are both zero, the valinpa-471
     8ues ld read areecis-457'/' multiplied by 2.',55x,'ecis-458'/72x,'einpa-472
     9cis-459'/72x,'ecis-460'/'cards read in subroutine lecl',43x,'ecis-inpa-473
     a461'/'*****************************',43x,'ecis-462'/72x,'ecis-463'inpa-474
     b/'for each nuclear state:',49x,'ecis-464'/'***********************inpa-475
     c',49x,'ecis-465'/' beginning with the ground state and including uinpa-476
     dncoupled states for',5x,'ecis-466'/' compound nucleus calculation inpa-477
     ewhich must be at the end.',17x,'ecis-467'/' the best order is the inpa-478
     fone of decreasing coupling strength.',13x,'ecis-468'/72x,'ecis-469inpa-479
     g'/'nuclear states -spins and masses -',6x,'format (f5.2,2i2,a1,6f1inpa-480
     h0.5)',5x,'ecis-470'/'***********************************',37x,'eciinpa-481
     is-471'/7x,'1- 5   sp2:   spin of the target (2*sp2+1 kept in ipi(3inpa-482
     j,i)).',5x,'ecis-472'/7x,'6- 7   n:',5x,'further description of theinpa-483
     k state.',18x,'ecis-473')                                          inpa-484
      write (mw,1022)                                                   inpa-485
 1022 format (21x,'in the rotational model, must be non-zero for the  ecinpa-486
     1is-474'/27x,'member of a vibrational band.',16x,'ecis-475'/21x,'ininpa-487
     2 the vibrational model, can be non-zero for the  ecis-476'/27x,'grinpa-488
     3ound state to avoid the input of next card.ecis-477'/21x,'not usedinpa-489
     4 if lo(3)=.true. (anharmonic vibrational   ecis-478'/27x,'model orinpa-490
     5 asymmetric rotational model).',7x,'ecis-479'/21x,'not used if lo(inpa-491
     67)=.true. (external potentials).',4x,'ecis-480'/21x,'not used for inpa-492
     7uncoupled states.',21x,'ecis-481'/7x,'8- 9   k:',5x,'optical poteninpa-493
     8tial. (default value,1 for ground',5x,'ecis-482'/21x,'state and sainpa-494
     9me as last one for excited state).',5x,'ecis-483'/9x,'10   spi:   inpa-495
     aparity of the nuclear state: "+" or "-" but only   ecis-484'/21x,'inpa-496
     b"-" is needed ("+" for a blank or any character).  ecis-485'/21x,'inpa-497
     cthis data is kept as 0 or 1 in ipi(1,i).',11x,'ecis-486'/6x,'11-20inpa-498
     d   energy of the projectile in the laboratory system in mev  ecis-inpa-499
     e487'/14x,'for the ground state. excitation energy for the others. inpa-500
     f  ecis-488'/6x,'21-30   sp1: spin of the particle (2*sp1+1 kept ininpa-501
     g ipi(2,i)).',5x,'ecis-489'/6x,'31-40   wv(1,i):   mass of the projinpa-502
     hectile in a.m.u.  .',12x,'ecis-490'/19x,'if this value is not zeroinpa-503
     i for an excited state, the  ecis-491'/19x,'spin of the projectile,inpa-504
     j its mass and the product of  ecis-492'/19x,'charges read on this inpa-505
     kcard are taken into account. if ecis-493')                        inpa-506
      write (mw,1023)                                                   inpa-507
 1023 format (19x,'this mass is zero, values of sp1, sp3, wv(1,i) and   inpa-508
     1ecis-494'/19x,'wv(2,i) are taken from the preceding level.',10x,'einpa-509
     2cis-495'/''/6x,'41-50   wv(2,i):   mass of the target in a.m.u.  inpa-510
     3.',16x,'ecis-496'/6x,'51-60   sp3: product of the charges of the tinpa-511
     4arget and of the',6x,'ecis-497'/19x,'particle (sp3 kept in ipi(4,iinpa-512
     5)).',21x,'ecis-498'/6x,'61-70   wv(4,i):   repartition of excitatiinpa-513
     6on energy between the   ecis-499'/25x,'particle and the target: 0.inpa-514
     7 for excitation of  ecis-500'/25x,'the target, 1. for excitation oinpa-515
     8f the particle, ecis-501'/25x,'ratio for two-body excitation.',17xinpa-516
     9,'ecis-502'/'  note:  only this card is read for uncoupled states inpa-517
     aand continua',7x,'ecis-503'/'  ****  used for compound nucleus calinpa-518
     bculation.',26x,'ecis-504'/9x,'wv(4,i) is not taken into account foinpa-519
     cr the ground state and usedecis-505'/8x,'for the excited states oninpa-520
     dly if lo(98)=.true. and if relativisticecis-506'/8x,'kinematics arinpa-521
     ee used (schroedinger or dirac equation).',11x,'ecis-507'/72x,'ecisinpa-522
     f-508'/'description of vibrations  (if n is not 0 in rotational modinpa-523
     gel or n is 0 ecis-509'/'*************************  in vibrational inpa-524
     hmodel and lo(3)=lo(7)=.false.)ecis-510'/72x,'ecis-511'/'number of inpa-525
     iphonons',23x,'format (14i5)',19x,'ecis-512'/'*****************',55inpa-526
     jx,'ecis-513'/7x,'1- 5   iph(i)  description of the state.',25x,'ecinpa-527
     kis-514')                                                          inpa-528
      write (mw,1024)                                                   inpa-529
 1024 format (14x,'in the vibrational model: 0 for ground state',14x,'ecinpa-530
     1is-515'/22x,'1 or 2 for pure 1 or 2-phonons state',14x,'ecis-516'/inpa-531
     222x,'3 for a mixture of 1 and 2-phonons states.',8x,'ecis-517'/14xinpa-532
     3,'in the rotational model: 0 for ground state band',10x,'ecis-518'inpa-533
     4/39x,'1 for vibrational band',11x,'ecis-519'/39x,'2 for a mixture inpa-534
     5of them.',9x,'ecis-520'/7x,'6-10   vibrational model: number of thinpa-535
     6e phonon of the one-phonon ecis-521'/14x,'state or of the first phinpa-536
     7onon of the two-phonons state.',4x,'ecis-522'/14x,'rotational modeinpa-537
     8l: number of the vibration in the order of ecis-523'/14x,'input. (inpa-538
     9see "cards read in lect")',25x,'ecis-524'/6x,'11-15   vibrational inpa-539
     amodel: number of the second phonon of the',5x,'ecis-525'/14x,'two-inpa-540
     bphonons state.',40x,'ecis-526'/6x,'16-20   vibrational model: numbinpa-541
     cer of the one-phonon component of  ecis-527'/14x,'a mixed state.',inpa-542
     d44x,'ecis-528'/'  note:  the total number of phonons will be the linpa-543
     eargest number read',4x,'ecis-529'/'  ****  in the columns 6 to 20.inpa-544
     f',41x,'ecis-530'/72x,'ecis-531'/'phonons mixing parameter',16x,'foinpa-545
     grmat (7f10.5)',17x,'ecis-532'/'************************',48x,'ecisinpa-546
     h-533'/' if iph is 3 (vibrational model) or iph is 2 (rotational moinpa-547
     idel)',9x,'ecis-534'/7x,'1-10   bt in degrees.',44x,'ecis-535'/6x,'inpa-548
     jthe nuclear state is:  cos(bt)*(1 phonon) + sin(bt)*(2 phonons).  inpa-549
     kecis-536')                                                        inpa-550
      write (mw,1025)                                                   inpa-551
 1025 format (14x,'or:  cos(bt)*(vibr. band) + sin(bt)*(ground band).',8inpa-552
     1x,'ecis-537'/72x,'ecis-538'/'for asymmetric rotational model',41x,inpa-553
     2'ecis-539'/'*******************************',41x,'ecis-540'/' if linpa-554
     3o(1)=lo(3)=.true.',50x,'ecis-541'/4x,'for a state of spin "j" therinpa-555
     4e are n=("j"+1)/2 band mixing',11x,'ecis-542'/' parameters betweeninpa-556
     5 the n+1 bands defined as atan(a(2*i)/a(2*i-2))',6x,'ecis-543'/' winpa-557
     6here a(i) is the amplitude of band i. if n is not 0:',18x,'ecis-54inpa-558
     74'/72x,'ecis-545'/'mixing parameters',23x,'format (7f10.5)',17x,'einpa-559
     8cis-546'/'*****************',55x,'ecis-547'/7x,'1-10   bt(1)  in dinpa-560
     9egrees.',40x,'ecis-548'/6x,'11-20   bt(2)  in degrees.',40x,'ecis-inpa-561
     a549'/6x,'21-30   bt(3)  in degrees.',40x,'ecis-550'/6x,'31-40   btinpa-562
     b(4)  in degrees.',40x,'ecis-551'/6x,'41-50   bt(5)  in degrees.',4inpa-563
     c0x,'ecis-552'/6x,'51-60   .................',41x,'ecis-553'/6x,'thinpa-564
     de nuclear state is:   cos(bt(1))*y(ai,0) + sin(bt(1))*cos(bt(2))ecinpa-565
     eis-554'/6x,'*(y(ai,2)+s*y(ai,-2))*sqrt(0.5) + sin(bt(1))*sin(bt(2)inpa-566
     f)*cos(bt(3))ecis-555'/6x,'*(y(ai,4)+s*y(ai,-4))*sqrt(0.5) + ......inpa-567
     g. where s=(-)**(ai+spi).  ecis-556'/''/'  note:  for unnatural painpa-568
     hrity states (spi=-), bt(1) will be ignored in  ecis-557'/'  **** tinpa-569
     ihe calculation and replaced by 90. degrees.',21x,'ecis-558'/8x,'ifinpa-570
     j lo(15)=.true., all the nuclear parameters (quantities given  ecisinpa-571
     k-559')                                                            inpa-572
      write (mw,1026)                                                   inpa-573
 1026 format (7x,'in degrees) have to be read in order to avoid a changeinpa-574
     1 in this   ecis-560'/7x,'part of input when shifting lo(15) from .inpa-575
     2false. to .true..  they ecis-561'/7x,'are not used and cannot be iinpa-576
     3n search.',28x,'ecis-562'/72x,'ecis-563'/72x,'ecis-564'/'cards reainpa-577
     4d in subroutine lect',43x,'ecis-565'/'****************************inpa-578
     5*',43x,'ecis-566'/72x,'ecis-567'/'phonon descriptions',21x,'formatinpa-579
     6 (2i5,f10.5,i5)',11x,'ecis-568'/'*******************',53x,'ecis-56inpa-580
     79'/' for every phonon involved:',45x,'ecis-570'/7x,'1- 5   nbta(9,inpa-581
     8*)  = l angular momentum used also for heavy ion.  ecis-571'/21x,'inpa-582
     9value used for heavy-ion coulomb deformations.',5x,'ecis-572'/7x,'inpa-583
     a6-10   nbta(10,*) = k magnetic quantum number of the vibration ineinpa-584
     bcis-573'/21x,'rotational model. in the vibrational model, must beeinpa-585
     ccis-574'/21x,'zero to use this phonon in l=0 second order terms. einpa-586
     dcis-575'/6x,'11-20   beta(1,*)   phonon amplitude for the real potinpa-587
     eential.',6x,'ecis-576'/6x,'21-25   ik   level of which the masses inpa-588
     fare used for heavy-ion',5x,'ecis-577'/21x,'corrections. (default vinpa-589
     galue ik=1).',17x,'ecis-578'/72x,'ecis-579'/'phonon amplitudes of oinpa-590
     hther potentials   format (7f10.5)',17x,'ecis-580'/'***************inpa-591
     i**********************',35x,'ecis-581'/' if deformations are not tinpa-592
     jhe same for all potentials (lo(5)=.true.):',4x,'ecis-582'/7x,'1-10inpa-593
     k   beta(2,*) for volume imaginary potential.',17x,'ecis-583')     inpa-594
      write (mw,1027)                                                   inpa-595
 1027 format (6x,'11-20   beta(3,*) for surface real potential.',21x,'ecinpa-596
     1is-584'/6x,'21-30   beta(4,*) for surface imaginary potential.',16inpa-597
     2x,'ecis-585'/6x,'31-40   beta(5,*) for real spin-orbit.',28x,'ecisinpa-598
     3-586'/6x,'41-50   beta(6,*) for imaginary spin-orbit.',23x,'ecis-5inpa-599
     487'/6x,'51-60   beta(7,*) for coulomb potential.',26x,'ecis-588'/6inpa-600
     5x,'61-70   beta(8,*) for coulomb spin-orbit potential.',15x,'ecis-inpa-601
     6589'/'  note:  if lo(5)=.false., beta(i,*)=beta(1,*) for i=2,8.',1inpa-602
     75x,'ecis-590'/'  ****',66x,'ecis-591'/72x,'ecis-592'/'deformationsinpa-603
     8 of rotational model',8x,'format (2i5,f10.5,i5)',11x,'ecis-593'/'*inpa-604
     9*******************************',40x,'ecis-594'/' only if lo(1)=.tinpa-605
     arue. and lo(7)=.false., otherwise go to "optical model ecis-595'/'inpa-606
     b parameters".',59x,'ecis-596'/7x,'1- 5   iqm',4x,'largest order ofinpa-607
     c deformation.',22x,'ecis-597'/7x,'6-10   iqmax  maximum l-value ofinpa-608
     d multipole expansion.',12x,'ecis-598'/6x,'11-20   aspin, the k-valinpa-609
     eue of the band, used only in symmetric',4x,'ecis-599'/21x,'rotatioinpa-610
     fnal model.',34x,'ecis-600'/6x,'21-25   ik',5x,'level of which the inpa-611
     gmasses are used for heavy-ion   ecis-601'/21x,'corrections. (defauinpa-612
     hlt value ik=1).',17x,'ecis-602'/'  note:  in the asymmetric rotatiinpa-613
     ional model iqm is limited to 35',8x,'ecis-603'/'  ****  and iqmax inpa-614
     jis limited to 8.',38x,'ecis-604'/72x,'ecis-605'/'deformations of rinpa-615
     keal volume potential   format (7f10.5)',17x,'ecis-606')           inpa-616
      write (mw,1028)                                                   inpa-617
 1028 format ('*************************************',35x,'ecis-607'/' iinpa-618
     1q=iqm/2 values for symmetric rotational model,',24x,'ecis-608'/' iinpa-619
     2q=iqm-1 values for asymmetric rotational model:',23x,'ecis-609'/7xinpa-620
     3,'1-10   beta(1,1)  deformation of the real potential.',13x,'ecis-inpa-621
     4610'/6x,'11-20   beta(1,2)  deformation of the real potential.',13inpa-622
     5x,'ecis-611'/6x,'21-30   beta(1,3)  deformation of the real potentinpa-623
     6ial.',13x,'ecis-612'/6x,'31-40   beta(1,4)  deformation of the reainpa-624
     7l potential.',13x,'ecis-613'/6x,'41-50   beta(1,5)  deformation ofinpa-625
     8 the real potential.',13x,'ecis-614'/'............................inpa-626
     9...',41x,'ecis-615'/6x,'eventually, on next card:',9x,'format (7f1inpa-627
     a0.5)',17x,'ecis-616'/7x,'1-10   beta(1,8)  deformation of the realinpa-628
     b potential.',13x,'ecis-617'/''/6x,'11-20   beta(1,9)  deformationinpa-629
     c of the real potential. ....',8x,'ecis-618'/6x,'..... and so on upinpa-630
     d to beta(1,iq).',33x,'ecis-619'/72x,'ecis-620'/'deformations for oinpa-631
     ether potentials',7x,'format (7f10.5)',17x,'ecis-621'/'************inpa-632
     f*********************',39x,'ecis-622'/' if deformations are not thinpa-633
     ge same for all potentials (lo(5)=.true.):',4x,'ecis-623'/7x,'1-10 inpa-634
     h  beta(2,i) deformation of the volume imaginary potential.  ecis-6inpa-635
     i24'/6x,'11-20   beta(3,i) deformation of the surface real potentiainpa-636
     jl.',6x,'ecis-625'/6x,'21-30   beta(4,i) deformation of the surfaceinpa-637
     k imaginary potential. ecis-626')                                  inpa-638
      write (mw,1029)                                                   inpa-639
 1029 format (6x,'31-40   beta(5,i) deformation for the real spin-orbit.inpa-640
     1',12x,'ecis-627'/6x,'41-50   beta(6,i) deformation for the imaginainpa-641
     2ry spin-orbit.',7x,'ecis-628'/6x,'51-60   beta(7,i) deformation foinpa-642
     3r the coulomb potential.',10x,'ecis-629'/6x,'61-70   beta(8,i) definpa-643
     4ormation for the coulomb spin-orbit.',9x,'ecis-630'/' there are iqinpa-644
     5 such cards',48x,'ecis-631'/'  note:  if lo(5)=.false., beta(i,j)=inpa-645
     6beta(1,j) for i=2,8 and j=1,iq.',4x,'ecis-632'/'  ****',66x,'ecis-inpa-646
     7633'/72x,'ecis-634'/'explanation of deformations of the rotationalinpa-647
     8 model:',20x,'ecis-635'/'*****************************************inpa-648
     9***********',20x,'ecis-636'/'for symmetric rotational model (lo(3)inpa-649
     a=.false.):',25x,'ecis-637'/7x,'the order of deformation is l=2, 4,inpa-650
     b 6, ... and so on.',12x,'ecis-638'/7x,'the radial dependence of poinpa-651
     ctentials is:',26x,'ecis-639'/10x,'r = r0*(1 + beta(*,1)*y(2,0).+ binpa-652
     deta(*,2)*y(4,0) + .....)',6x,'ecis-640'/10x,'odd order deformationinpa-653
     es are not read.',26x,'ecis-641'/72x,'ecis-642'/'for the asymmetricinpa-654
     f rotational model (lo(3)=.true.):',21x,'ecis-643'/7x,'the order ofinpa-655
     g deformations are (l,k)=(2,0), (2,2), (4,0), (4,2),  ecis-644'/10xinpa-656
     h,'(4,4), (6,0) .... and so on. there are limited to (8,8).',6x,'ecinpa-657
     iis-645'/7x,'the radial dependence of potentials is:',26x,'ecis-646inpa-658
     j'/10x,'r = r0*(1 + beta(*,1)*(cos(beta(*,2))*y(2,0)+sin(beta(*,2))inpa-659
     k*  ecis-647')                                                     inpa-660
      return                                                            inpa-661
      end                                                               inpa-662
c c 05/03/                                                      ecis06  inpb-000
      subroutine inpb                                                   inpb-001
      common /inout/ mr,mw,ms                                           inpb-002
      write (mw,1030)                                                   inpb-003
 1030 format (10x,'(y(2,2)+y(2,-2))*sqrt(0.5)) + beta(*,3)*(cos(beta(*,4inpb-004
     1))*y(4,0)ecis-648'/10x,'+sin(beta(*,4)*(cos(beta(*,5))*(y(4,2)+y(4inpb-005
     2,-2))*sqrt(0.5))',4x,'ecis-649'/10x,'+sin(beta(*,5))*(y(4,4)+y(4,-inpb-006
     34))*sqrt(0.5)) + ..............  ecis-650'/3x,'the "gamma" type beinpb-007
     4tas as beta(*,i) for i=2,4,5,7... are in degrees. ecis-651'/3x,'**inpb-008
     5******************************************************************inpb-009
     6 ecis-652'/'for the constrained asymmetric rotational model, when inpb-010
     7lo(2)=.true., the ecis-653'/7x,'band mixing coefficients are calcuinpb-011
     8lated from "gamma"=beta(*,2)   ecis-654'/7x,'in the davydov-filippinpb-012
     9ov model. the sequence of states must be',4x,'ecis-655'/7x,'the grinpb-013
     aound state, the first 2+, the second 2+,the other states   ecis-65inpb-014
     b6'/7x,'described as in the general case (there can be only the groinpb-015
     cund   ecis-657'/7x,'state and the first 2+). the mixing parameter inpb-016
     dof the first 2+',4x,'ecis-658'/7x,'state is used as "gamma" value inpb-017
     einstead of beta(1,2), but the',5x,'ecis-659'/7x,'differences betweinpb-018
     fen beta(i,3) are kept. the mixing parameter',5x,'ecis-660'/7x,'of inpb-019
     gthe second 2+ state is ignored. in a search, the index 4001   ecisinpb-020
     h-661'/7x,'should be used instead of 2002 or 3011 for "gamma".',14xinpb-021
     i,'ecis-662'/72x,'ecis-663'/'deformations of anharmonic vibrationalinpb-022
     j model',28x,'ecis-664'/'******************************************inpb-023
     k**',28x,'ecis-665')                                               inpb-024
      write (mw,1031)                                                   inpb-025
 1031 format ('  note:  in this model, there is an unique ratio 1/sqrt(4inpb-026
     1*pi) for any   ecis-666'/'  ****  order of deformation. to be consinpb-027
     2istent with the harmonic',8x,'ecis-667'/8x,'vibrational model, theinpb-028
     3 deformations indicated below should be   ecis-668'/8x,'beta, betainpb-029
     4**2/sqrt(4*pi) and beta**3/(4*pi) respectively.',7x,'ecis-669'/72xinpb-030
     5,'ecis-670'/'deformations',28x,'format (7f10.5)',17x,'ecis-671'/'*inpb-031
     6***********',60x,'ecis-672'/' only if lo(1)=.false. and .lo(3)=.trinpb-032
     7ue., lo(5) or lo(16)=.true.,',7x,'ecis-673'/' otherwise go to "optinpb-033
     8ical model parameters".',28x,'ecis-674'/7x,'1-10   beta(1,*) for cinpb-034
     9entral potential.',26x,'ecis-675'/6x,'11-20   beta(2,*) for volumeinpb-035
     a imaginary potential.',17x,'ecis-676'/6x,'21-30   beta(3,*) for suinpb-036
     brface real potential.',21x,'ecis-677'/6x,'31-40   beta(4,*) for suinpb-037
     crface imaginary potential.',16x,'ecis-678'/6x,'41-50   beta(5,*) finpb-038
     dor real spin-orbit.',28x,'ecis-679'/''/6x,'51-60   beta(6,*) for inpb-039
     eimaginary spin-orbit.',23x,'ecis-680'/6x,'61-70   beta(7,*) for coinpb-040
     fulomb potential.',26x,'ecis-681'/72x,'ecis-682'/'  next card:',28xinpb-041
     g,'format (7f10.5)',17x,'ecis-683'/'  **********',60x,'ecis-684'/7xinpb-042
     h,'1-10   beta(8,*) for coulomb spin-orbit potential.',15x,'ecis-68inpb-043
     i5'/'there are four sets of such cards, one for each order of deforinpb-044
     jmation.   ecis-686'/72x,'ecis-687'/'angular momenta',25x,'format (inpb-045
     k14i5)',19x,'ecis-688'/'***************',57x,'ecis-689')           inpb-046
      write (mw,1032)                                                   inpb-047
 1032 format (' if lo(16)=.true., otherwise go to "deformations".(if lo(inpb-048
     16)=.true.,',5x,'ecis-690'/' heavy-ion definition do not change noninpb-049
     2 coulomb deformation lengths).   ecis-691'/7x,'1- 5   for zeroth oinpb-050
     3rder (default value 2). (not used)',12x,'ecis-692'/7x,'6-10   for inpb-051
     4first order (default value 2).',24x,'ecis-693'/6x,'11-15   for secinpb-052
     5ond order (default value 2).',23x,'ecis-694'/6x,'16-20   for thirdinpb-053
     6 order (default value 2).',24x,'ecis-695'/6x,'21-25   ik   level oinpb-054
     7f which the masses are used for heavy-ion',5x,'ecis-696'/14x,'corrinpb-055
     8ections. (default value ik=1).',24x,'ecis-697'/9x,'enter a negativinpb-056
     9e value if you want 0.',26x,'ecis-698'/72x,'ecis-699'/'optical potinpb-057
     aential parameters',44x,'ecis-700'/'****************************',4inpb-058
     b4x,'ecis-701'/'if lo(7)=.false., npp loops to "equidistant angles"inpb-059
     c. each loop includes ecis-702'/'eight cards giving the depth, the inpb-060
     dreduced radius, the diffuseness and   ecis-703'/'an exponent for ainpb-061
     e woods-saxon form-factor (at the power 1+this exponent)ecis-704'/'inpb-062
     ffollowed, if lo(17)=.true., by the folding parameters.',18x,'ecis-inpb-063
     g705'/' the program searches to which nuclear level the potential binpb-064
     helongs. if  ecis-706'/'none is found, a warning is printed and theinpb-065
     i first one is chosen.',8x,'ecis-707'/72x,'ecis-708'/'volume or scainpb-066
     jlar real potential',9x,'format (4f10.5)',17x,'ecis-709'/'*********inpb-067
     k**********************',41x,'ecis-710')                           inpb-068
      write (mw,1033)                                                   inpb-069
 1033 format (7x,'1-10   val(1)   depth in mev.',36x,'ecis-711'/6x,'11-2inpb-070
     10   val(2)   reduced radius in fermis.',24x,'ecis-712'/6x,'21-30  inpb-071
     2 val(3)   diffuseness in fermis.',27x,'ecis-713'/6x,'31-40   val(4inpb-072
     3)   extra exponentiation factor.',21x,'ecis-714'/72x,'ecis-715'/'vinpb-073
     4olume or scalar imaginary potential',4x,'format (4f10.5)',17x,'eciinpb-074
     5s-716'/'************************************',36x,'ecis-717'/7x,'1inpb-075
     6-10   val(5)   depth in mev.',36x,'ecis-718'/6x,'11-20   val(6)   inpb-076
     7reduced radius in fermis.',24x,'ecis-719'/6x,'21-30   val(7)   difinpb-077
     8fuseness in fermis.',27x,'ecis-720'/6x,'31-40   val(8)   extra expinpb-078
     9onentiation factor.',21x,'ecis-721'/72x,'ecis-722'/'surface or vecinpb-079
     ator real potential',8x,'format (4f10.5)',17x,'ecis-723'/'*********inpb-080
     b***********************',40x,'ecis-724'/7x,'1-10   val(9)   depth inpb-081
     cin mev.',36x,'ecis-725'/6x,'11-20   val(10)  reduced radius in ferinpb-082
     dmis.',24x,'ecis-726'/6x,'21-30   val(11)  diffuseness in fermis.',inpb-083
     e27x,'ecis-727'/6x,'31-40   val(12)  extra exponentiation factor.',inpb-084
     f21x,'ecis-728'/72x,'ecis-729'/'surface or vector imaginary potentiinpb-085
     gal   format (4f10.5)',17x,'ecis-730'/'****************************inpb-086
     h*********',35x,'ecis-731'/7x,'1-10   val(13)  depth in mev.',36x,'inpb-087
     iecis-732'/6x,'11-20   val(14)  reduced radius in fermis.',24x,'eciinpb-088
     js-733'/6x,'21-30   val(15)  diffuseness in fermis.',27x,'ecis-734'inpb-089
     k)                                                                 inpb-090
      write (mw,1034)                                                   inpb-091
 1034 format (6x,'31-40   val(16)  extra exponentiation factor.',21x,'ecinpb-092
     1is-735'/72x,'ecis-736'/'spin-orbit or tensor real potential',5x,'finpb-093
     2ormat (4f10.5)',17x,'ecis-737'/'**********************************inpb-094
     3*',37x,'ecis-738'/7x,'1-10   val(17)  depth in mev.',36x,'ecis-739inpb-095
     4'/6x,'11-20   val(19)  reduced radius in fermis.',24x,'ecis-740'/6inpb-096
     5x,'21-30   val(19)  diffuseness in fermis.',27x,'ecis-741'/''/6x,inpb-097
     6'31-40   val(20)  extra exponentiation factor.',21x,'ecis-742'/72xinpb-098
     7,'ecis-743'/'spin-orbit/tensor imaginary potential   format (4f10.inpb-099
     85)',17x,'ecis-744'/'*************************************',35x,'ecinpb-100
     9is-745'/7x,'1-10   val(21)  depth in mev.',36x,'ecis-746'/6x,'11-2inpb-101
     a0   val(22)  reduced radius in fermis.',24x,'ecis-747'/6x,'21-30  inpb-102
     b val(23)  diffuseness in fermis.',27x,'ecis-748'/6x,'31-40   val(2inpb-103
     c4)  extra exponentiation factor.',21x,'ecis-749'/'  note:  the spiinpb-104
     dn-orbit operator is always 2*(l.s)',22x,'ecis-750'/'  ****  for spinpb-105
     ein 1/2 particle, the depth is the usual value.',12x,'ecis-751'/8x,inpb-106
     f'for spin 1 particle, the depth is the half of the usual value.  einpb-107
     gcis-752'/72x,'ecis-753'/'coulomb potential',23x,'format (4f10.5)',inpb-108
     h17x,'ecis-754'/'*****************',55x,'ecis-755'/7x,'1-10   val(2inpb-109
     i6)  reduced coulomb radius in fermis.',16x,'ecis-756'/6x,'11-20   inpb-110
     jval(27)  diffuseness of a woods-saxon charge distribution.ecis-757inpb-111
     k')                                                                inpb-112
      write (mw,1035)                                                   inpb-113
 1035 format (6x,'21-30   val(33)  third parameter of a fermi charge disinpb-114
     1tribution.  ecis-758'/6x,'31-40   val(28)  extra exponentiation fainpb-115
     2ctor.',21x,'ecis-759'/72x,'ecis-760'/'spin-orbit coulomb potentialinpb-116
     3',12x,'format (4f10.5)',17x,'ecis-761'/'**************************inpb-117
     4**',44x,'ecis-762'/7x,'1-10   val(29)  anomalous magnetic moment (inpb-118
     5less half charge in   ecis-763'/14x,'dirac formalism) multiplied binpb-119
     6y the charge of the target.  ecis-764'/6x,'11-20   val(30)  reduceinpb-120
     7d radius in fermis.',24x,'ecis-765'/6x,'21-30   val(31)  diffuseneinpb-121
     8ss in fermis.',27x,'ecis-766'/6x,'31-40   val(32)  extra exponentiinpb-122
     9ation factor.',21x,'ecis-767'/'  note:  if val(27)=0. or val(31)=0inpb-123
     a. a homogeneous charge distribution  ecis-768'/'  ****  is used. tinpb-124
     bhe product of charges is copied into val(25).',9x,'ecis-769'/9x,'winpb-125
     chen the diffuseness of the charge is not zero, the woods-saxonecisinpb-126
     d-770'/8x,'form factor is multiplied by 1+val(33)*r**2. the same painpb-127
     erameter ecis-771'/8x,'val(25) is used for these two last potentialinpb-128
     fs, if their',9x,'ecis-772'/8x,'diffuseness is not zero.',40x,'ecisinpb-129
     g-773'/9x,'if lo(9)=.true., enter a negative radius to use a symmetinpb-130
     hric',4x,'ecis-774'/8x,'woods-saxon form factor.',40x,'ecis-775'/9xinpb-131
     i,'if a diffuseness or the radius of a coulomb potential without  einpb-132
     jcis-776'/8x,'diffuseness is negative, its absolute value is taken inpb-133
     kinto',7x,'ecis-777')                                              inpb-134
      write (mw,1036)                                                   inpb-135
 1036 format (8x,'account in subroutine rotp and a message printed.',15xinpb-136
     1,'ecis-778'/72x,'ecis-779'/'*** end of do-loop for potentials withinpb-137
     2out folding (lo(17)=.false.) ***  ecis-780'/72x,'ecis-781'/'foldininpb-138
     3g for real potentials',13x,'format (3f10.5)',17x,'ecis-782'/'*****inpb-139
     4**********************',45x,'ecis-783'/' only if lo(17)=.true., otinpb-140
     5herwise go to "end of do-loop for potentials".ecis-784'/7x,'1-10  inpb-141
     6 val(34) "v" parameter',37x,'ecis-785'/6x,'11-20   val(35) "r" parinpb-142
     7ameter',37x,'ecis-786'/6x,'21-30   val(36) "a" parameter',37x,'eciinpb-143
     8s-787'/72x,'ecis-788'/'folding for imaginary potentials',8x,'formainpb-144
     9t (3f10.5)',17x,'ecis-789'/'********************************',40x,inpb-145
     a'ecis-790'/7x,'1-10   val(37) "v" parameter.',36x,'ecis-791'/6x,'1inpb-146
     b1-20   val(38) "r" parameter.',36x,'ecis-792'/6x,'21-30   val(39) inpb-147
     c"a" parameter.',36x,'ecis-793'/72x,'ecis-794'/'folding for coulombinpb-148
     d potentials',10x,'format (3f10.5)',17x,'ecis-795'/'***************inpb-149
     e***************',42x,'ecis-796'/7x,'1-10   val(40) "v" parameter.'inpb-150
     f,36x,'ecis-797'/6x,'11-20   val(41) "r" parameter.',36x,'ecis-798'inpb-151
     g/6x,'21-30   val(42) "a" parameter.',36x,'ecis-799'/72x,'ecis-800'inpb-152
     h/'explanation of folding parameters:  the folding functions are noinpb-153
     irmalisedecis-801'/'**********************************  to 1.  to finpb-154
     jold an optical potential,ecis-802'/4x,'enter the true charge, the inpb-155
     kdepth of central potential equal to the  ecis-803')               inpb-156
      write (mw,1037)                                                   inpb-157
 1037 format (''/4x,'depth of the nucleon potential multiplied by the ninpb-158
     1umber of nucleons ecis-804'/4x,'in the projectile, and the depth oinpb-159
     2f of spin-orbit potential equal toecis-805'/4x,'the depth of the ninpb-160
     3ucleon spin-orbit potential divided by the number ecis-806'/4x,'ofinpb-161
     4 nucleons in the projectile.',38x,'ecis-807'/6x,'"v"=0',4x,'no folinpb-162
     5ding.',46x,'ecis-808'/6x,'"a"=0',4x,'gaussian form factor with theinpb-163
     6 range "r".',17x,'ecis-809'/6x,'"r"=0',4x,'hulthen form factor (exinpb-164
     7p(-x/"v")-exp(-x/"a"))/x.',9x,'ecis-810'/15x,'reduced to yukawa foinpb-165
     8rm factor exp(-x/"v")/x if "a"=0.',4x,'ecis-811'/4x,'otherwise  sainpb-166
     9xon form factor 1/(1+exp((x-"r")/"a").',17x,'ecis-812'/6x,'if a foinpb-167
     alding parameter is negative, the absolute value is taken   ecis-81inpb-168
     b3'/4x,'into account in subroutine fold and a message printed.',14xinpb-169
     c,'ecis-814'/6x,'all the derivatives of potentials needed are obtaiinpb-170
     dned by numericalecis-815'/4x,'derivation after folding.',43x,'ecisinpb-171
     e-816'/72x,'ecis-817'/6x,'******  end of do-loop for potentials ***inpb-172
     f***',22x,'ecis-818'/72x,'ecis-819'/'equidistant angles',22x,'formainpb-173
     gt (7f10.5)',17x,'ecis-820'/'******************',54x,'ecis-821'/'  inpb-174
     honly if lo(66)=.false., otherwise go to "spin-orbit parametrisatioinpb-175
     in". ecis-822'/7x,'1-10   theta1   first angle.',37x,'ecis-823'/6x,inpb-176
     j'11-20   dtheta   step. (default value 1.)',25x,'ecis-824'/6x,'21-inpb-177
     k30   theta2   last angle.',38x,'ecis-825')                        inpb-178
      write (mw,1038)                                                   inpb-179
 1038 format (6x,'31-40   dthe',5x,'averaging angle. values listed are 1inpb-180
     1/3 of the sumecis-826'/23x,'of values at theta and theta+/-dthe.',inpb-181
     213x,'ecis-827'/72x,'ecis-828'/'spin-orbit parametrisation',14x,'foinpb-182
     3rmat (7f10.5)',17x,'ecis-829'/'**************************',46x,'ecinpb-183
     4is-830'/' only if lo(4)=.true., otherwise go to "hauser-feshbach cinpb-184
     5orrections".   ecis-831'/7x,'1-10   az1.',54x,'ecis-832'/6x,'11-20inpb-185
     6   az2.',8x,'(these parameters are in an array',13x,'ecis-833'/6x,inpb-186
     7'21-30   az3.',54x,'ecis-834'/6x,'31-40   az4.',8x,'az(16) from azinpb-187
     8(1) to az(6) for the search)',4x,'ecis-835'/6x,'41-50   az5.',54x,inpb-188
     9'ecis-836'/6x,'51-60   az6.',54x,'ecis-837'/'  note:  the unparameinpb-189
     atrised spin-orbit deformation is:',18x,'ecis-838'/'  ****',8x,'az1inpb-190
     b=az4=0.,  az2=az3=az5=az6=1.',27x,'ecis-839'/8x,'the spin-orbit deinpb-191
     cformation multiplied by x is:',18x,'ecis-840'/14x,'az1=az4=0., az2inpb-192
     d=1., az3=az5=az6=x .',23x,'ecis-841'/8x,'the "incorrect" spin-orbiinpb-193
     et deformation is:',22x,'ecis-842'/14x,'az1=az2=az5=az6=0., az3=az4inpb-194
     f=0.5 .',25x,'ecis-843'/8x,'for the most general parametrisation ofinpb-195
     g deformed spin-orbit see ecis-844'/8x,'comment cards in subroutineinpb-196
     h quan.',31x,'ecis-845'/72x,'ecis-846'/'hauser-feshbach correctionsinpb-197
     i',13x,'format (7f10.5)',17x,'ecis-847'/'**************************inpb-198
     j*',45x,'ecis-848'/' only if lo(81)=.true., otherwise go to "cards inpb-199
     kread in subroutine deph".ecis-849')                               inpb-200
      write (mw,1039)                                                   inpb-201
 1039 format (7x,'1-10   bz1.   square root of elastic enhancement.',16xinpb-202
     1,'ecis-850'/21x,'(default value 1.4142).',28x,'ecis-851'/6x,'11-20inpb-203
     2   bz2.   if lo(82)=.true., spin cut-off parameter (default  ecis-inpb-204
     3852'/21x,'value 3.5). if lo(82)=.false., particle degrees of ecis-inpb-205
     4853'/21x,'freedom.',43x,'ecis-854'/6x,'21-30   bz3.   square root inpb-206
     5of level density parameter.',12x,'ecis-855'/21x,'(default value 10inpb-207
     60.). if lo(82)=lo(87)=.false.,',4x,'ecis-856'/21x,'parameter bz3 iinpb-208
     7n moldauer''s formula given below.   ecis-857'/21x,'(default valueinpb-209
     8 1.212).',29x,'ecis-858'/6x,'31-40   bz4.   if lo(82)=lo(87)=.falsinpb-210
     9e., parameter bz4 in mol-',4x,'ecis-859'/21x,'dauer''s formula givinpb-211
     aen below. (default value 0.78). ecis-860'/6x,'41-50   bz5.   if loinpb-212
     b(82)=lo(87)=.false., parameter bz5 in mol-',4x,'ecis-861'/20x,'dauinpb-213
     cer''s formula given below. (default value 0.228). ecis-862'/'  notinpb-214
     de:  the penetrabilities, which are probabilities of compound',7x,'inpb-215
     eecis-863'/'  ****  nucleus formation, are related to partial crossinpb-216
     f-sections minus  ecis-864'/8x,'the reaction cross-section to the cinpb-217
     ghannels taken into account.  ecis-865'/''/9x,'if lo(82)=.true., dinpb-218
     henoting by ti and tf the penetrabilities',4x,'ecis-866'/8x,'defineinpb-219
     id above for the incoming and the outgoing channels, the   ecis-867inpb-220
     j'/8x,'hauser-feshbach correction is: ti*tf/(4*(sum on all the t)+'inpb-221
     k,5x,'ecis-868')                                                   inpb-222
      write (mw,1040)                                                   inpb-223
 1040 format (8x,'+bz3**2*(2*j+1)*exp(-(j*j+j)/(2*bz2**2)) for inelasticinpb-224
     1 channels,ecis-869'/8x,'multiplied by bz1**2 for the elastic one.'inpb-225
     2,23x,'ecis-870'/8x,'for the search, these quantities are in az froinpb-226
     3m az(7) to az(9). ecis-871'/9x,'for lo(82)=.false.: without fluctuinpb-227
     4ations (lo(87)=.true.), bz1  ecis-872'/8x,'is used and can be in sinpb-228
     5earch; with fluctuations (lo(87)=.false.)ecis-873'/8x,'the given vinpb-229
     6alue of bz2 is used if bz2 is not 0; if bz2=0., the  ecis-874'/8x,inpb-230
     7'channel degree of freedom parameter, formula (1) in p.a.',8x,'eciinpb-231
     8s-875'/8x,'moldauer, nuclear physics a344 (1980), page 185-195, whinpb-232
     9ich is:  ecis-876'/12x,'1.78d0+(tl**1.212d0-0.78d0)*dexp(-0.228d0*inpb-233
     asum on tl)',8x,'ecis-877'/8x,'is generalised by the expression:',3inpb-234
     b1x,'ecis-878'/12x,'1.d0+bz4+(tl**bz3-bz4)*dexp(-bz5*sum on tl)',17inpb-235
     cx,'ecis-879'/8x,'if lo(82)=.true. bz1 and bz2 can be in search; ifinpb-236
     d lo(82)=.false.ecis-880'/8x,'and lo(87)=.true. bz3 can be in searcinpb-237
     eh; if lo(82)=lo(87)=.false.ecis-881'/8x,'bz2 can be in search, butinpb-238
     f if bz2=0., bz3, bz4 and bz5 can also  ecis-882'/8x,'be in search.inpb-239
     g',51x,'ecis-883'/72x,'ecis-884'/'fission data',28x,'format (7f10.5inpb-240
     h)',17x,'ecis-885'/'************',60x,'ecis-886'/' if lo(82)=.true.inpb-241
     i, go to "cards read in subroutine deph".',15x,'ecis-887'/' if lo(8inpb-242
     j5)=.false., go to "giant dipole resonance description".',9x,'ecis-inpb-243
     k888')                                                             inpb-244
      write (mw,1041)                                                   inpb-245
 1041 format (7x,'1-10   fiss(1,*)  transmission coefficient',23x,'ecis-inpb-246
     1889'/6x,'11-20   fiss(2,*)  degree of freedom. if <.5, it is replainpb-247
     2ced by 0.ecis-890'/'  there are nfiss such cards. the first coeffiinpb-248
     3cient is for the smallest ecis-891'/'total j value of the system ainpb-249
     4nd the same parity of the ground state. theecis-892'/'second one iinpb-250
     5s for the opposite parity. the following ones are for higherecis-8inpb-251
     693'/'j values, with the same order for parities.',29x,'ecis-894'/7inpb-252
     72x,'ecis-895'/'giant dipole resonance description',6x,'format (7f1inpb-253
     80.5)',17x,'ecis-896'/'**********************************',38x,'eciinpb-254
     9s-897'/' only if lo(86)=.true., otherwise go to "level density forinpb-255
     a continuum".  ecis-898'/' if nrd is not 0, go to "gamma transmissiinpb-256
     bon factors".',19x,'ecis-899'/' data to compute the (neutron, gammainpb-257
     c) cross-section when the giant',6x,'ecis-900'/' dipole resonance minpb-258
     dodel is used (see e. lynn, "the theory of neutron',4x,'ecis-901'/'inpb-259
     e resonance reactions", pages 321/326 and a. gilbert and a.g.w.',10inpb-260
     fx,'ecis-902'/' cameron, can. jour. of physics 43, 1446, 1965, pageinpb-261
     gs 1475/1476).',7x,'ecis-903'/7x,'1-10   tgo   slow s-wave neutron inpb-262
     hgamma widths/spacing for',8x,'ecis-904'/20x,'normalisation. if tgoinpb-263
     i=0, lo(86) is set .false.',6x,'ecis-905'/6x,'11-20   bn',4x,'neutrinpb-264
     jon separation energy.(default value 8.).',7x,'ecis-906'/6x,'21-30 inpb-265
     k  fnug  radiative degrees of freedom.',23x,'ecis-907')            inpb-266
      write (mw,1042)                                                   inpb-267
 1042 format (20x,'if less than 1., it is replaced by fnug=20.',9x,'ecisinpb-268
     1-908'/6x,'31-40   egd   energy of the giant dipole resonance.',15xinpb-269
     2,'ecis-909'/20x,'(default value 163*(n*z)**2/(n+z)**(4/3).).',9x,'inpb-270
     3ecis-910'/20x,'the strong absorption model id used if egd < 0.',5xinpb-271
     4,'ecis-911'/20x,'(simple behaviour as e**3 instead of resonance',6inpb-272
     5x,'ecis-912'/20x,'with a factor e**4)',33x,'ecis-913'/6x,'41-50   inpb-273
     6ggd   resonance width. (default value 5.).',16x,'ecis-914'/4x,'forinpb-274
     7 the search, these quantities are in az from az(12) to az(16).   einpb-275
     8cis-915'/72x,'ecis-916'/'gamma transmission factors',14x,'format (inpb-276
     97f10.5)',17x,'ecis-917'/'**************************',46x,'ecis-918inpb-277
     a'/' only if lo(86)=.true. and nrd is not 0.',32x,'ecis-919'/7x,'1-inpb-278
     b10   gam(1) for l=0.',43x,'ecis-920'/6x,'11-20   gam(2) for l=1.',inpb-279
     c43x,'ecis-921'/6x,'.......................',43x,'ecis-922'/6x,'61-inpb-280
     d70   gam(7) for l=6.',43x,'ecis-923'/'  up to gam(nrd), eventuallyinpb-281
     e on others cards.',27x,'ecis-924'/72x,'ecis-925'/''/'level densitinpb-282
     fy of compound nucleus',7x,'format (7f10.5)',17x,'ecis-926'/'******inpb-283
     g***************************',39x,'ecis-927'/' if there are gamma tinpb-284
     hransmission parameters computed with the giant',5x,'ecis-928'/' diinpb-285
     ipole resonance model (lo(86)=.true. and nrd=0 in "compound nucleusinpb-286
     j   ecis-929'/' data"),  or continua (ncont not 0 in "compound nuclinpb-287
     keus data"),',9x,'ecis-930')                                       inpb-288
      write (mw,1043)                                                   inpb-289
 1043 format (' otherwise go to "cards read in subroutine deph".',23x,'einpb-290
     1cis-931'/' for the total residual nucleus needed for the gamma giainpb-291
     2nt resonance,   ecis-932'/' followed by the residual nucleus of eainpb-292
     3ch continuum:',20x,'ecis-933'/7x,'1-10   scn(7,i) z:   charge of tinpb-293
     4he compound nucleus',14x,'ecis-934'/6x,'11-20   scn(1,i) sa:  leveinpb-294
     5l density parameter for s-wave resonanceecis-935'/28x,'spacing. (dinpb-295
     6efault value (.0091*(shell corr. ecis-936'/28x,'-.23*nd)+.143)*na inpb-296
     7where na is the total',5x,'ecis-937'/28x,'number of nucleons, nd tinpb-297
     8he minimum distance ecis-938'/28x,'to a magic number for protons oinpb-298
     9r neutrons   ecis-939'/28x,'and shell corrections are given by cooinpb-299
     ak: seeecis-940'/28x,'tables and references in subroutine lden).  einpb-300
     bcis-941'/6x,'21-30   scn(2,i) ux:  matching energy for the two deninpb-301
     csity formula ecis-942'/28x,'shifted by pairing energy. (default vainpb-302
     dlue   ecis-943'/28x,'2.5+150/na).',32x,'ecis-944'/6x,'31-40   scn(inpb-303
     e3,i) tau: nuclear temperature. (default value',9x,'ecis-945'/28x,'inpb-304
     f1/tau=sqrt(sa/ux)-1.5/ux).',18x,'ecis-946'/6x,'41-50   scn(4,i) sginpb-305
     g:  spin cut off parameter. (default value',6x,'ecis-947'/28x,'forminpb-306
     hula (11) of gilbert and cameron).',7x,'ecis-948'/6x,'51-60   scn(5inpb-307
     i,i) e0:  energy shift. (default value formula (28) ofecis-949'/28xinpb-308
     j,'gilbert and cameron).',23x,'ecis-950'/6x,'61-70   scn(6,i) ex:  inpb-309
     kmatching energy between the two density',5x,'ecis-951')           inpb-310
      write (mw,1044)                                                   inpb-311
 1044 format (28x,'formulae. (default value ux+pairing with',4x,'ecis-95inpb-312
     12'/28x,'pairing given by cook)',22x,'ecis-953'/'  note:  the dimeninpb-313
     2sions of the array scn are 7 and ncons. scn(j,i)',6x,'ecis-954'/' inpb-314
     3 ****  can be searched for j=1 to 6. if scn(j,i) is 0., it is replinpb-315
     4aced ecis-955'/8x,'by the default value computed with the scn(j,k)inpb-316
     5 for k<i. if',5x,'ecis-956'/8x,'scn(3,i) is negative, it is replacinpb-317
     6ed by the default value',7x,'ecis-957'/8x,'computed with default vinpb-318
     7alues for sa and ux. after replacement,  ecis-958'/8x,'density parinpb-319
     8ameters used, which must be taken into account for a ecis-959'/8x,inpb-320
     9'search or a change using lo(37)=.true. are listed at the end.   einpb-321
     acis-960'/72x,'ecis-961'/72x,'ecis-962'/'cards read in subroutine dinpb-322
     beph',43x,'ecis-963'/'*****************************',43x,'ecis-964'inpb-323
     c/72x,'ecis-965'/'number of observables by channel',8x,'format (14iinpb-324
     d5)',19x,'ecis-966'/'********************************',40x,'ecis-96inpb-325
     e7'/' (non-standard observables) only if lo(94)=.true. and lo(66)=.inpb-326
     ffalse.,   ecis-968'/' otherwise go to "restricted coulomb correctiinpb-327
     gons".',22x,'ecis-969'/7x,'1- 5   number of observables for the elainpb-328
     hstic scattering.',9x,'ecis-970'/7x,'6-10   number of observables finpb-329
     ior the first excited state.',8x,'ecis-971'/6x,'11-15   number of oinpb-330
     jbservables for the second excited state.',7x,'ecis-972')          inpb-331
      write (mw,1045)                                                   inpb-332
 1045 format (6x,'16-20   number of observables for the third excited stinpb-333
     1ate.',8x,'ecis-973'/6x,'21-25   ...........',47x,'ecis-974'/14x,'uinpb-334
     2p to the last coupled channel (ncoll values).',12x,'ecis-975'/72x,inpb-335
     3'ecis-976'/'for each coupled state',50x,'ecis-977'/'**************inpb-336
     4********',50x,'ecis-978'/72x,'ecis-979'/'observable identificationinpb-337
     5s',14x,'format (14i5)',19x,'ecis-980'/'**************************'inpb-338
     6,46x,'ecis-981'/7x,'1- 5   first observable which must be the crosinpb-339
     7s-section (enter a ecis-982'/14x,'blank or 0) .',45x,'ecis-983'/7xinpb-340
     8,'6-10   second observable.',40x,'ecis-984'/6x,'11-15   third obseinpb-341
     9rvable.',41x,'ecis-985'/6x,'16-20   fourth observable.',40x,'ecis-inpb-342
     a986'/''/6x,'21-25   fifth observable.',41x,'ecis-987'/6x,'26-30  inpb-343
     b ...........',47x,'ecis-988'/14x,'up to the last observable.',32x,inpb-344
     c'ecis-989'/72x,'ecis-990'/3x,'standard description  0   cross-sectinpb-345
     dion.',29x,'ecis-991'/3x,'********************  1   cross-section /inpb-346
     e rutherford''s cross-section.ecis-992'/25x,'2   vector analysing pinpb-347
     fower.',20x,'ecis-993'/6x,'3',5x,'vector polarisation.',40x,'ecis-9inpb-348
     g94'/12x,'(note a ratio sqrt(2.) with it11 for spin 1/2 for 2 and 3inpb-349
     h). ecis-995'/6x,'4',5x,'t20 .',55x,'ecis-996'/6x,'5',5x,'t21 .',55inpb-350
     ix,'ecis-997'/6x,'6',5x,'t22 .',55x,'ecis-998'/6x,'7',5x,'kyy or d inpb-351
     j defined as -a(1100 1100)-a(1100 1-100)',12x,'ecis-999'/6x,'8',5x,inpb-352
     k'kxx or r  defined as  a(1100 1100)-a(1100 1-100)',12x,'ecis1000')inpb-353
      write (mw,1046)                                                   inpb-354
 1046 format (6x,'9',5x,'kzz or a'' defined as  a(1000 1000)',26x,'ecis1inpb-355
     1001'/5x,'10',5x,'kxz or r'' defined as -sqrt(2.) a(1100 1000)',17xinpb-356
     2,'ecis1002'/5x,'11',5x,'kzx or a  defined as -sqrt(2.) a(1000 1100inpb-357
     3)',17x,'ecis1003'/5x,'12',5x,'spin-flip :  (a(0000,0000)+a(1100,11inpb-358
     400)+a(1100,1-100))/2',4x,'ecis1004'/5x,'13',5x,'vector analysing pinpb-359
     5ower of the target',24x,'ecis1005'/10x,'(note a ratio sqrt(2.) witinpb-360
     6h it11 for spin 1/2 for 2, 3 and 13)ecis1006'/5x,'14',5x,'ayy  definpb-361
     7ined as -a(1111 0000)-a(111-1 0000)',17x,'ecis1007'/5x,'15',5x,'axinpb-362
     8x  defined as  a(1111 0000)-a(111-1 0000)',17x,'ecis1008'/5x,'16',inpb-363
     95x,'azz  defined as  a(1010 0000)',31x,'ecis1009'/5x,'17',5x,'axz inpb-364
     a defined as -sqrt(2.) a(1110 0000)',22x,'ecis1010'/5x,'18',5x,'azxinpb-365
     b  defined as -sqrt(2.) a(1011 0000)',22x,'ecis1011'/5x,'19',5x,'reinpb-366
     cserved for a set of experimental data which are reaction  ecis1012inpb-367
     d'/17x,'cross-sections. see "cards read in subroutine lecd''',4x,'einpb-368
     ecis1013'/12x,'note that 12 and 19 were previously 7 and 8.',16x,'einpb-369
     fcis1014'/72x,'ecis1015'/4x,'non standard description',4x,'enter a inpb-370
     gnegative value, different for   ecis1016'/4x,'********************inpb-371
     h****',4x,'different observables. the description  ecis1017'/32x,'winpb-372
     iill be read in subroutine obse.',8x,'ecis1018'/10x,'cross-sectionsinpb-373
     j must be before polarisations.',18x,'ecis1019'/72x,'ecis1020'/'ploinpb-374
     kt indications',24x,'format (14i5)',19x,'ecis1021')                inpb-375
      write (mw,1047)                                                   inpb-376
 1047 format ('****************',56x,'ecis1022'/7x,'1- 5   number of decinpb-377
     1ades in logarithmic scales for cross-section.ecis1023'/7x,'6-10   inpb-378
     2indication for second observable.',25x,'ecis1024'/6x,'11-15   indiinpb-379
     3cation for third observable.',26x,'ecis1025'/6x,'16-20   .........inpb-380
     4..........',39x,'ecis1026'/14x,'up to the last observable.',32x,'einpb-381
     5cis1027'/6x,'indications for polarisations are "1" for plot and "0inpb-382
     6" for no plotecis1028'/72x,'ecis1029'/6x,'******  end of do-loop finpb-383
     7or nuclear states ******',18x,'ecis1030'/72x,'ecis1031'/'restricteinpb-384
     8d coulomb corrections',10x,'format (14i5)',19x,'ecis1032'/'*******inpb-385
     9***********************',42x,'ecis1033'/' if lo(44) and lo(46)=.trinpb-386
     aue., otherwise go to "cards read in',12x,'ecis1034'/' subroutine cinpb-387
     balx".  for each nuclear level:',29x,'ecis1035'/7x,'1- 5   niv(i,j,inpb-388
     c3) between level i and level j for j=1.',11x,'ecis1036'/7x,'6-10  inpb-389
     d niv(i,j,3) between level i and level j for j=2.',11x,'ecis1037'/6inpb-390
     ex,'11-15   .........................',33x,'ecis1038'/14x,'enter "1inpb-391
     f" for coulomb correction and "0" for none.',8x,'ecis1039'/4x,'onlyinpb-392
     g values for j smaller than or equal to i are taken into account.ecinpb-393
     his1040'/9x,'there are ncoll such cards.',36x,'ecis1041'/72x,'ecis1inpb-394
     i042'/72x,'ecis1043'/'cards read in subroutine calx',43x,'ecis1044'inpb-395
     j/'*****************************',43x,'ecis1045'/' only if lo(31)=.inpb-396
     ktrue., otherwise go to "cards read in subroutine obse".ecis1046') inpb-397
      write (mw,1048)                                                   inpb-398
 1048 format (72x,'ecis1047'/''/'chi2 conditions',25x,'format (4i5,2f10inpb-399
     1.5)',13x,'ecis1048'/'***************',57x,'ecis1049'/7x,'1- 5   ncinpb-400
     2olr  number of angular distributions. if some of them   ecis1050'/inpb-401
     321x,'are sums on several levels, they account for their ecis1051'/inpb-402
     421x,'number of levels in ncolr.',25x,'ecis1052'/7x,'6-10   nrec   inpb-403
     5number of parameters in search.',20x,'ecis1053'/6x,'11-15   nfit  inpb-404
     6 number of functions kept in the search beyond the  ecis1054'/21x,inpb-405
     7'minimum number which is nrec+1 .',19x,'ecis1055'/6x,'16-20   nessinpb-406
     8ai maximum number of evaluations. (default value 100) ecis1056'/21inpb-407
     9x,'this value is not used when lo(34)=.true..',9x,'ecis1057'/6x,'2inpb-408
     a1-30   ech',4x,'search scale. (default value 20.).',17x,'ecis1058'inpb-409
     b/21x,'in the preliminary runs, variables are changed by  ecis1059'inpb-410
     c/21x,'the product of this number with their accuracy. in ecis1060'inpb-411
     d/21x,'the others runs, the change of any variable is',5x,'ecis1061inpb-412
     e'/21x,'limited by twice this value.',23x,'ecis1062'/6x,'31-40   rainpb-413
     fp',4x,'ratio of increase for the search scale after a run ecis1063inpb-414
     g'/21x,'for which the chi2 decreased. (default value 1.)   ecis1064inpb-415
     h'/21x,'the value of ech is the product by rap of the last ecis1065inpb-416
     i'/21x,'maximum change of parameter which gave a lower chi2ecis1066inpb-417
     j'/21x,'the value 1 leads safely to the minimum. a value   ecis1067inpb-418
     k')                                                                inpb-419
      write (mw,1049)                                                   inpb-420
 1049 format (21x,'larger than 1. leads quicker towards the minimum.  ecinpb-421
     1is1068'/21x,'a value less than 1. is replaced by 1.',13x,'ecis1069inpb-422
     2'/72x,'ecis1070'/72x,'ecis1071'/'cards read in subroutine lecd',43inpb-423
     3x,'ecis1072'/'*****************************',43x,'ecis1073'/' onlyinpb-424
     4 if ncolr is not 0, otherwise go to "cards read in subroutine obseinpb-425
     5"ecis1074'/' the angular distributions can be read in any order.',inpb-426
     620x,'ecis1075'/72x,'ecis1076'/'for each angular distribution',43x,inpb-427
     7'ecis1077'/'*****************************',43x,'ecis1078'/72x,'eciinpb-428
     8s1079'/'identification',26x,'format (l1,i1,i3,2i5,5x,3f10.5) ecis1inpb-429
     9080'/'**************',58x,'ecis1081'/10x,'1   lx logical. if lx=.tinpb-430
     arue. the experimental errors are',6x,'ecis1082'/14x,'percentages. inpb-431
     blx is set .false. if the observable',10x,'ecis1083'/14x,'identificinpb-432
     cation is not 0, 1 or 19.',25x,'ecis1084'/10x,'2   1 if the angles inpb-433
     dare in the laboratory system, 0 otherwise.ecis1085'/7x,'3- 5   nt inpb-434
     e  number of angles.',36x,'ecis1086'/7x,'6-10   number of the nucleinpb-435
     far state.',30x,'ecis1087'/6x,'11-15   observable identification. (inpb-436
     gsee comments on "observable   ecis1088'/14x,'identification" in "cinpb-437
     hards read in subroutine deph").',6x,'ecis1089'/6x,'21-30   weight inpb-438
     iof this observable in chi2. (default value 1.)',5x,'ecis1090'/6x,'inpb-439
     j31-40   experimental normalisation of data. (default value 1.)',4xinpb-440
     k,'ecis1091')                                                      inpb-441
      write (mw,1050)                                                   inpb-442
 1050 format (6x,'41-50   error on experimental normalisation. (if 0., tinpb-443
     1he',10x,'ecis1092'/14x,'normalisation is fixed).',34x,'ecis1093'/1inpb-444
     26x,'the experimental values and their errors are divided by ecis10inpb-445
     394'/14x,'the "renormalisation parameter". if the normalisation is inpb-446
     4 ecis1095'/14x,'fixed, this parameter is the "experimental normaliinpb-447
     5sation".ecis1096'/14x,'if the normalisation is not fixed, the squainpb-448
     6re of the',6x,'ecis1097'/14x,'difference between the "experimentalinpb-449
     7 normalisation" and   ecis1098'/14x,'this parameter divided by theinpb-450
     8 "error on experimental',6x,'ecis1099'/14x,'normalisation" is addeinpb-451
     9d to the chi2 for this observable   ecis1100'/14x,'following the dinpb-452
     aefinition of the chi2. the "calculated',5x,'ecis1101'/14x,'normaliinpb-453
     bsation" is the value of the "renormalisation',7x,'ecis1102'/14x,'pinpb-454
     carameter" which minimises the chi2. experimental values  ecis1103'inpb-455
     d/14x,'and errors are divided by it.',29x,'ecis1104'/16x,'if for twinpb-456
     eo successive angular distributions, both',7x,'ecis1105'/14x,'crossinpb-457
     f-sections or polarisations, the "errors on',11x,'ecis1106'/14x,'exinpb-458
     gperimental normalisations" are non-0 and the same and   ecis1107'/inpb-459
     h14x,'the two "experimental normalisation" are identical, the   eciinpb-460
     is1108'/''/14x,'renormalisation parameters are the same for these inpb-461
     jtwo',5x,'ecis1109'/14x,'angular distributions and one value is addinpb-462
     ked to the chi2  ecis1110'/14x,'for each one.',45x,'ecis1111')     inpb-463
      write (mw,1051)                                                   inpb-464
 1051 format ('  note:  if nt=0, the angular distribution described hereinpb-465
     1 is not',8x,'ecis1112'/'  ****  experimentally separated from the inpb-466
     2following one. it cannot',6x,'ecis1113'/8x,'happen for the last aninpb-467
     3gular distribution and the observables',4x,'ecis1114'/8x,'must be inpb-468
     4of the same kind (if not, the program stops).',11x,'ecis1115'/8x,'inpb-469
     5angular distribution is attributed to the level read without',4x,'inpb-470
     6ecis1116'/8x,'nt=0 which can be any of them.',34x,'ecis1117'/12x,'inpb-471
     7the program stops also if the channel number is too large   ecis11inpb-472
     818'/8x,'or if the observable identification is larger than 19.',10inpb-473
     9x,'ecis1119'/72x,'ecis1120'/'data card for each angle',16x,'formatinpb-474
     a (6f10.5)',17x,'ecis1121'/'************************',48x,'ecis1122inpb-475
     b'/7x,'1-10   angle in degrees.',41x,'ecis1123'/6x,'11-20   experiminpb-476
     cental value.',39x,'ecis1124'/6x,'21-30   experimental error.',39x,inpb-477
     d'ecis1125'/6x,'31-40   width of detector. (if non 0.,three calculainpb-478
     etions are done ecis1126'/14x,'at the experimental angle and at pluinpb-479
     fs and minus this',6x,'ecis1127'/14x,'width, the calculated value winpb-480
     gill be the mean value).',6x,'ecis1128'/6x,'41-50   angular error. inpb-481
     h(if non 0. and the width of detector non 0.ecis1129'/14x,'the expeinpb-482
     irimental error is increased to take into account  ecis1130'/14x,'tinpb-483
     jhe slope of the calculated curve).',23x,'ecis1131')               inpb-484
      write (mw,1052)                                                   inpb-485
 1052 format ('  note:  if the observable identification is 19, the set inpb-486
     1of experimentalecis1132'/'  ****  values are total cross-sections inpb-487
     2of which the channel is read in ecis1133'/8x,'floating value insteinpb-488
     3ad of the angle. for channel 0., it is the  ecis1134'/8x,'total reinpb-489
     4action cross-section, not taking into account the',7x,'ecis1135'/8inpb-490
     5x,'coulomb scattering. for channel -1., it is the total',12x,'ecisinpb-491
     61136'/8x,'cross-section as defined for neutrons. weight and experiinpb-492
     7mental  ecis1137'/8x,'normalisation are taken into account. for coinpb-493
     8mpound nucleus,',5x,'ecis1138'/8x,'uncoupled levels, continua, fisinpb-494
     9sion and gamma cross-sections',4x,'ecis1139'/8x,'follow the coupleinpb-495
     ad states.',38x,'ecis1140'/72x,'ecis1141'/72x,'ecis1142'/'cards reainpb-496
     bd in subroutine calx',43x,'ecis1143'/'****************************inpb-497
     c*',43x,'ecis1144'/' only if lo(31)=.true., otherwise go to "cards inpb-498
     dread in subroutine obse".ecis1145'/72x,'ecis1146'/'search accuraciinpb-499
     ees',23x,'format (7f10.3)',17x,'ecis1147'/'*****************',55x,'inpb-500
     fecis1148'/' only if lo(32)=.true. and neither ncolr and nrec is 0,inpb-501
     g otherwise go to ecis1149'/' "cards read in subroutine obse".',39xinpb-502
     h,'ecis1150'/7x,'1-10   search accuracy for the first variable.',19inpb-503
     ix,'ecis1151'/6x,'11-20   search accuracy for the second variable.'inpb-504
     j,18x,'ecis1152'/6x,'21-30   search accuracy for the third variableinpb-505
     k.',19x,'ecis1153')                                                inpb-506
      write (mw,1053)                                                   inpb-507
 1053 format (6x,'31-40   ....................',38x,'ecis1154'/14x,'up tinpb-508
     1o nrec values.',40x,'ecis1155'/6x,'the search accuracies cannot beinpb-509
     2 0..there is no default value.',5x,'ecis1156'/'  they refer to valinpb-510
     3ues used in the program as real radii or',13x,'ecis1157'/'  deforminpb-511
     4ations changed for heavy ions.',34x,'ecis1158'/72x,'ecis1159'/'indinpb-512
     5ices of variables',20x,'format (14i5)',19x,'ecis1160'/'***********inpb-513
     6*********',52x,'ecis1161'/7x,'1- 5   index of the first variable.'inpb-514
     7,30x,'ecis1162'/7x,'6-10   index of the second variable.',29x,'eciinpb-515
     8s1163'/6x,'11-15   index of the third variable.',30x,'ecis1164'/6xinpb-516
     9,'16-20   ....................',38x,'ecis1165'/14x,'up to nrec valinpb-517
     aues.',40x,'ecis1166'/72x,'ecis1167'/''/4x,'index specifications:'inpb-518
     b,47x,'ecis1168'/4x,'*********************',47x,'ecis1169'/7x,'1-10inpb-519
     c00   optical model and folding parameters val(i).(see, above,ecis1inpb-520
     d170'/16x,'optical potential parameters). possible values 1 to',5x,inpb-521
     e'ecis1171'/16x,'42*npp. parameters of external form factors in theinpb-522
     f orderecis1172'/16x,'defined when they are read. only floating valinpb-523
     gues which  ecis1173'/16x,'are not potentials read by point can be inpb-524
     hin search.',6x,'ecis1174'/16x,'possible values: 1 to 1000. above, inpb-525
     iadd 9000.',12x,'ecis1175'/16x,'choosing search accuracies, note thinpb-526
     jat reduced radii are ecis1176'/16x,'not used but only radii. couloinpb-527
     kmb charges are excluded.  ecis1177')                              inpb-528
      write (mw,1054)                                                   inpb-529
 1054 format (4x,'1001-2000   deformations for a given potential. possibinpb-530
     1le values 1001ecis1178'/16x,'to 1008.(not the angles of asymmetricinpb-531
     2 rotational model) ecis1179'/4x,'2001-3000   deformations for a giinpb-532
     3ven multipole. possible values 2001ecis1180'/16x,'to 2000+nbet wheinpb-533
     4re nbet is the total number of phonons  ecis1181'/16x,'and deformainpb-534
     5tions as listed in the output.',15x,'ecis1182'/4x,'3001-4000   indinpb-535
     6ividual deformation. (the unit of the index is the   ecis1183'/16xinpb-536
     7,'potential, the tenth is the deformation). to simplify   ecis1184inpb-537
     8'/16x,'notations, possible value are 3001 to 3000+10*nbet with eciinpb-538
     9s1185'/16x,'nbet defined above. values 3xx9 and 3xx0 are excluded.inpb-539
     a  ecis1186'/16x,'note that deformation lengths are used in the seainpb-540
     brch if ecis1187'/16x,'lo(6)=.true..',43x,'ecis1188'/4x,'4001-5000 inpb-541
     c  nuclear model parameters. (in the order of input).',6x,'ecis1189inpb-542
     d'/4x,'5001-6000   reduced nuclear matrix elements. (order of inputinpb-543
     e if theyecis1190'/16x,'are read on cards, or order of computation inpb-544
     fas listed).  ecis1191'/4x,'6001-7000   spin-orbit parametrisation,inpb-545
     g hauser-feshbach corrections.ecis1192'/16x,'and compound nucleus pinpb-546
     harameters. possible values are:   ecis1193'/16x,'6001-6006 for spiinpb-547
     in-orbit parametrisation,',15x,'ecis1194'/16x,'6007-6011 for hauserinpb-548
     j-feshbach corrections,',14x,'ecis1195'/16x,'6012-6016 for giant diinpb-549
     kpole resonance parameters,',8x,'ecis1196')                        inpb-550
      write (mw,1055)                                                   inpb-551
 1055 format (16x,'(in a test, 6015 was useless for lo(87)=.false., 6014inpb-552
     1   ecis1197'/16x,'and 6015 if lo(87=.true.)',31x,'ecis1198'/16x,'6inpb-553
     2017-6016+6*ncons for level density parameters in order ecis1199'/1inpb-554
     36x,'given by scn(6,ncons), skipping the charge. only values ecis12inpb-555
     400'/16x,'printed as used values can be changed.',18x,'ecis1201'/16inpb-556
     5x,'(in a test, scn(5,i) was useless for gamma, scn(1,i),   ecis120inpb-557
     62'/16x,'scn(2,i) and scn(6,i) for a continuum)',18x,'ecis1203'/16xinpb-558
     7,'6016+6*ncons-6016+6*ncons+nrd gamma transmission coeff. ecis1204inpb-559
     8'/16x,'6016+6*ncons+nrd-6016+6*ncons+nrd+2*nfiss fission',7x,'ecisinpb-560
     91205'/16x,'transmission coefficients.',30x,'ecis1206'/4x,'7001-800inpb-561
     a0   dispersion parameter from pip(5,*) to pip(17,*) without ecis12inpb-562
     b07'/16x,'possibility to change the description induced by the',4x,inpb-563
     c'ecis1208'/16x,'integer values ipp(*,1,*), ipp(*,2,*), ipi(*,3,*) inpb-564
     dand   ecis1209'/16x,'energy reference pip(4,*). possible values frinpb-565
     eom 7001 to ecis1210'/16x,'7000+13*npp.',44x,'ecis1211'/3x,'10001-9inpb-566
     f9999  to continue 1-1000 when there are more than 1000 values ecisinpb-567
     g1212'/16x,'with external form factors. use the number of the',7x,'inpb-568
     hecis1213'/16x,'listing increased by 9000.',30x,'ecis1214'/'  note:inpb-569
     i  any negative number -k in the card above means that k variableseinpb-570
     jcis1215'/'  ****  will be kept proportional in the search. this vainpb-571
     klue is replaced ecis1216')                                        inpb-572
      write (mw,1056)                                                   inpb-573
 1056 format (8x,'by -*address where k followed by k indices of parameteinpb-574
     1rs is',5x,'ecis1217'/8x,'stored',58x,'ecis1218'/72x,'ecis1219'/'liinpb-575
     2nks between variables',17x,'format (14i5)',19x,'ecis1220'/'*******inpb-576
     3****************',49x,'ecis1221'/4x,'for every negative value -k iinpb-577
     4n the preceding card:',18x,'ecis1222'/7x,'1- 5   index of the firsinpb-578
     5t variable.',30x,'ecis1223'/7x,'6-10   index of the second variablinpb-579
     6e.',29x,'ecis1224'/6x,'11-15   index of the third variable.',30x,'inpb-580
     7ecis1225'/6x,'16-20   ..................',40x,'ecis1226'/14x,'up tinpb-581
     8o k indices.',42x,'ecis1227'/72x,'ecis1228'/72x,'ecis1229'/''/'cainpb-582
     9rds read in subroutine obse',43x,'ecis1230'/'*********************inpb-583
     a********',43x,'ecis1231'/' only if there is any non standard obserinpb-584
     bvable (identified by a negative ecis1232'/' number), otherwise go inpb-585
     cto "cards read in subroutine redm".',14x,'ecis1233'/72x,'ecis1234'inpb-586
     d/'for each non standard observable',40x,'ecis1235'/'**************inpb-587
     e******************',40x,'ecis1236'/72x,'ecis1237'/'definition and inpb-588
     fname',21x,'format (2l1,i1,i2,i5,5a4)',7x,'ecis1238'/'*************inpb-589
     g******',53x,'ecis1239'/10x,'1   lt1  "t" for an observable definedinpb-590
     h with an axis',11x,'ecis1240'/19x,'perpendicular to the reaction pinpb-591
     ilane. the description ecis1241'/19x,'is changed by a rotation r(piinpb-592
     j/2,pi/2,pi/2) to the',4x,'ecis1242'/19x,'definition with respect tinpb-593
     ko the direction of particle ecis1243')                            inpb-594
      write (mw,1057)                                                   inpb-595
 1057 format (19x,'(helicity). use a blank for the usual helicity',7x,'einpb-596
     1cis1244'/19x,'description.',41x,'ecis1245'/10x,'2   lt2  "t" if thinpb-597
     2e observable is not completely defined by   ecis1246'/19x,'tensorsinpb-598
     3. see note below "quantum numbers".',11x,'ecis1247'/10x,'3   blankinpb-599
     4 or 0 for observable in the centre of mass system.   ecis1248'/14xinpb-600
     5,'1',10x,'for observable in the laboratory system.',7x,'ecis1249'/inpb-601
     614x,'2',10x,'for observable defined with respect to the',5x,'ecis1inpb-602
     7250'/30x,'incident beam.',28x,'ecis1251'/7x,'4- 5   kx   positive inpb-603
     8number, identification of the observable',4x,'ecis1252'/19x,'read inpb-604
     9with -kx.',39x,'ecis1253'/7x,'6-10   k',4x,'number of components oinpb-605
     af the description.',13x,'ecis1254'/6x,'11-30   name of the observainpb-606
     bble which will be used in the output.  ecis1255'/72x,'ecis1256'/'qinpb-607
     cuantum numbers',25x,'format (8i5)',20x,'ecis1257'/'***************inpb-608
     d',57x,'ecis1258'/7x,'1- 5   tensor order of the incoming particle.inpb-609
     e',20x,'ecis1259'/7x,'6-10   related magnetic quantum number.',26x,inpb-610
     f'ecis1260'/6x,'11-15   tensor order of the initial nucleus.',22x,'inpb-611
     gecis1261'/6x,'16-20   related magnetic quantum number.',26x,'ecis1inpb-612
     h262'/6x,'21-25   tensor order of the outgoing particle.',20x,'ecisinpb-613
     i1263'/6x,'26-30   related quantum number.',35x,'ecis1264'/6x,'31-3inpb-614
     j5   tensor order of the final nucleus.',24x,'ecis1265'/6x,'36-40  inpb-615
     k related quantum number.',35x,'ecis1266')                         inpb-616
      write (mw,1058)                                                   inpb-617
 1058 format (4x,'there are k such cards.',45x,'ecis1267'/'  note:  if linpb-618
     1t2=.true., some couples (tensor order, magnetic quantum',4x,'ecis1inpb-619
     2268'/'  ****  number) can be replaced by non tensor notation (mi, inpb-620
     3mf). in thisecis1269'/8x,'case, use (mi-s-1) and (mf-s-1) where s inpb-621
     4is the spin of particle ecis1270'/8x,'or target.',54x,'ecis1271'/7inpb-622
     52x,'ecis1272'/'coefficients of components',14x,'format (6f10.5)',1inpb-623
     67x,'ecis1273'/'**************************',46x,'ecis1274'/7x,'1-10inpb-624
     7   coefficient of the first component.',23x,'ecis1275'/6x,'11-20  inpb-625
     8 coefficient of the second component.',22x,'ecis1276'/6x,'21-30   inpb-626
     9...................',39x,'ecis1277'/14x,'up to k values.',43x,'eciinpb-627
     as1278'/72x,'ecis1279'/'imaginary part of coefficients',10x,'formatinpb-628
     b (6f10.5)',17x,'ecis1280'/'******************************',42x,'ecinpb-629
     cis1281'/' only if lt1=.true. or lt2=.true., otherwise go to next oinpb-630
     dbservable.',5x,'ecis1282'/7x,'1-10   imaginary part for the first inpb-631
     ecomponent.',19x,'ecis1283'/6x,'11-20   imaginary part for the secoinpb-632
     fnd component.',18x,'ecis1284'/6x,'21-30   ....................',38inpb-633
     gx,'ecis1285'/14x,'up to k values.',43x,'ecis1286'/'  note:  the quinpb-634
     hantum numbers are checked and errors can stop the',8x,'ecis1287'/'inpb-635
     i  ****  program (too large magnetic quantum numbers, negative tensinpb-636
     jor',4x,'ecis1288'/8x,'order, odd sum of magnetic quantum numbers finpb-637
     kor observable',7x,'ecis1289')                                     inpb-638
      write (mw,1059)                                                   inpb-639
 1059 format (8x,'defined with the axis perpendicular to the reaction plinpb-640
     1ane).',5x,'ecis1290'/9x,'the observables can be read in any order.inpb-641
     2',22x,'ecis1291'/''/9x,'polarisation of the target is described iinpb-642
     3n the system of the   ecis1292'/8x,'particle.',55x,'ecis1293'/72x,inpb-643
     4'ecis1294'/72x,'ecis1295'/'cards read in subroutine redm',43x,'eciinpb-644
     5s1296'/'******************************',42x,'ecis1297'/' if lo(7)=inpb-645
     6.true. or lo(15)=.true.. otherwise go to "cards read in',7x,'ecis1inpb-646
     7298'/' subroutine extp".',54x,'ecis1299'/72x,'ecis1300'/6x,'in theinpb-647
     8 subroutine redm, there is the following do loop:',11x,'ecis1301'/inpb-648
     910x,'do 16 i1=1,ncoll',46x,'ecis1302'/10x,'do 15 i2=i1,ncoll',45x,inpb-649
     a'ecis1303'/10x,'.........',53x,'ecis1304'/7x,'15 continue',54x,'ecinpb-650
     bis1305'/7x,'16 continue',54x,'ecis1306'/6x,'inside which must be rinpb-651
     cead:',40x,'ecis1307'/72x,'ecis1308'/'loop control and number card'inpb-652
     d,12x,'format (3i5)',20x,'ecis1309'/'****************************',inpb-653
     e44x,'ecis1310'/7x,'1- 5   j1 which must be equal to i1. (if not thinpb-654
     fe run is stopped).ecis1311'/7x,'6-10   j2 which must be equal to iinpb-655
     g2. (if not the run is stopped).ecis1312'/6x,'11-15   k  number of inpb-656
     hreduced nuclear matrix elements.',13x,'ecis1313'/72x,'ecis1314'/'rinpb-657
     ieduced nuclear matrix elements',9x,'format (4i5,f20.12)',13x,'ecisinpb-658
     j1315'/'*******************************',41x,'ecis1316'/'if k is noinpb-659
     kt 0:',58x,'ecis1317')                                             inpb-660
      return                                                            inpb-661
      end                                                               inpb-662
c c 05/03/                                                      ecis06  inpc-000
      subroutine inpc                                                   inpc-001
      common /inout/ mr,mw,ms                                           inpc-002
      write (mw,1060)                                                   inpc-003
 1060 format (7x,'1- 5   form factor identification.',31x,'ecis1318'/7x,inpc-004
     1'6-10   multipolarity. (if triangular relation  or parity is',6x,'inpc-005
     2ecis1319'/18x,'transgressed the run is stopped). enter l for a',7xinpc-006
     3,'ecis1320'/18x,'magnetic multipole transition bm(l-1).',16x,'ecisinpc-007
     41321'/6x,'11-15   2*s where s is the transfer of spin. s can be noinpc-008
     5t 0 even  ecis1322'/18x,'if lo(7)=.false. (if lo(7)=.true. the runinpc-009
     6 is stopped  ecis1323'/18x,'when triangular relation is not fulfilinpc-010
     7led).',11x,'ecis1324'/14x,'indication for existence of magnetic muinpc-011
     8ltipole coulomb',4x,'ecis1325'/18x,'form factor for the target, wiinpc-012
     9th s=0: enter "-1".',5x,'ecis1326'/18x,'this form factor includes inpc-013
     ano central and no',11x,'ecis1327'/18x,'spin-orbit contribution.',3inpc-014
     b0x,'ecis1328'/6x,'16-20   2*j where j is the transfer of total spiinpc-015
     cn if the value',4x,'ecis1329'/18x,'given for 2*s is not "0" or "-1inpc-016
     d". in this case the',4x,'ecis1330'/18x,'calculation is stopped if inpc-017
     ethere is not a triangular   ecis1331'/18x,'relation between l, s ainpc-018
     fnd j.',26x,'ecis1332'/14x,'indication for existence of an associatinpc-019
     ged spin-orbit form ecis1333'/18x,'factor when 2*s is "0": enter "1inpc-020
     h" if there is one,',4x,'ecis1334'/18x,'"0" or a blank if there is inpc-021
     inone.',22x,'ecis1335'/6x,'21-40   value. the ratio between a magneinpc-022
     jtic multipole coulomb',5x,'ecis1336'/18x,'excitation bm(l-1) and ainpc-023
     kn electric one be(l) is',7x,'ecis1337')                           inpc-024
      write (mw,1061)                                                   inpc-025
 1061 format (18x,'sqrt(bm(l-1)/be(l)) (sqrt(.01106*bm(l-1)/be(l)) if',4inpc-026
     1x,'ecis1338'/18x,'bm(l-1) is expressed in nuclear magnetons squareinpc-027
     2s.',4x,'ecis1339'/8x,'there are k such cards.',41x,'ecis1340'/72x,inpc-028
     3'ecis1341'/4x,'form factor identification',42x,'ecis1342'/4x,'****inpc-029
     4**********************',42x,'ecis1343'/6x,'for anharmonic vibratioinpc-030
     5nal model: the order of derivative.',8x,'ecis1344'/13x,'(from 0 toinpc-031
     6 3).',45x,'ecis1345'/6x,'for harmonic vibrational model:',35x,'eciinpc-032
     7s1346'/13x,'first order:  k1, number of the phonon is order of inpinpc-033
     8ut.  ecis1347'/13x,'second order: k1+k2*(nbt1+1)  where k1 and k2 inpc-034
     9are the',6x,'ecis1348'/17x,'number of the phonons in the order of inpc-035
     ainput, with k2   ecis1349'/17x,'larger than k1 and nbt1 the total inpc-036
     bnumber of phonons.   ecis1350'/72x,'ecis1351'/6x,'for symmetric roinpc-037
     ctational model: 1+l where l is the multipolarity  ecis1352'/13x,'minpc-038
     dultiplied by 1000 plus the identification of the',10x,'ecis1353'/'inpc-039
     e'/13x,'vibrational band as in harmonic vibrational model.',9x,'ecinpc-040
     fis1354'/13x,'a l=0 or l=1 vibration term generate a monopole or diinpc-041
     gpole  ecis1355'/13x,'correction term.',43x,'ecis1356'/6x,'for asyminpc-042
     hmetric rotational model: defined as 1000* the "order of   ecis1357inpc-043
     i'/13x,'deformation". (see "deformations of rotational models").   inpc-044
     jecis1358'/72x,'ecis1359'/6x,'for external form factor model: if thinpc-045
     ke form factor identification ecis1360')                           inpc-046
      write (mw,1062)                                                   inpc-047
 1062 format (13x,'is blank or zero, an identification is defined in seqinpc-048
     1uence ecis1361'/13x,'a negative value indicates that there is a coinpc-049
     2rrection term ecis1362'/13x,'to be added in such a way that the ininpc-050
     3tegral of the sum withecis1363'/13x,'r**(l+2) vanishes (l being thinpc-051
     4e angular momentum related to ecis1364'/13x,'this form factor). ifinpc-052
     5 the form factor identification is nonecis1365'/13x,'zero, its absinpc-053
     6olute value must be in sequence or refer to a ecis1366'/13x,'form inpc-054
     7factor already defined with the same sign.',12x,'ecis1367'/72x,'ecinpc-055
     8is1368'/'  note on reduced matrix elements:  the spin angular descinpc-056
     9ription for a  ecis1369'/'  ********************************  partinpc-057
     aial wave with total spin jj and ecis1370'/'  with quantum numbers inpc-058
     bl1 and j1 for the particle, i1 for the target is ecis1371'/'  ((i*inpc-059
     c*l1*y(l1) , s1)j1 ,i1)jj. the interaction for the transfer of',5x,inpc-060
     d'ecis1372'/'  angular momentum l, of spin s and of total spin j, iinpc-061
     es the scalar',6x,'ecis1373'/'  product of a tensor operator q(j)nuinpc-062
     fclear for the target by the tensor ecis1374'/'  product of (i**l*yinpc-063
     g(l) , q(s)par)j for the particle.',19x,'ecis1375'/4x,'(((l2,s2)j2,inpc-064
     hi2)jj|(q(l),q(s))j.q(j)|((l1,s1)j1,i1)jj) =',13x,'ecis1376'/'  (-)inpc-065
     i**(jj+i2+j1+(l1+l2+l)/2)) * c9j(l2,l1,l,s2,s1,s,j2,j1,j) *',9x,'ecinpc-066
     jis1377'/'  c6j(j2,j,j1,i1,jj,i2) * c3j(l1,l,l2,0,0,0) * sqrt((2j+1inpc-067
     k)*(2l+1)*',6x,'ecis1378')                                         inpc-068
      write (mw,1063)                                                   inpc-069
 1063 format ('  (2s+1)(2l1+1)*(2l2+1)*(2j1+1)*(2j2+1)) /computed in subinpc-070
     1routine quan/  ecis1379'/'  * (s2||q(s)||s1)/(2s+1) * (i2||q(j)||iinpc-071
     21) * (4*pi)**(-1/2) /which is   ecis1380'/'  the reduced nuclear minpc-072
     3atrix element read here, except for the square   ecis1381'/'  rootinpc-073
     4 which is included in form factors/.',30x,'ecis1382'/72x,'ecis1383inpc-074
     5'/4x,'this matrix element is real and symmetric when the "reduced inpc-075
     6nuclear ecis1384'/'  matrix element" is such that  (s2,i2 || q(s) inpc-076
     7q(j) ||s1,i1) =',10x,'ecis1385'/'  (-)**(i2+s2-i1-s1+s+j) * (s1,i1inpc-077
     8 || q(s) q(j) ||s2,i2). in macroscopic ecis1386'/'  models, s=0 aninpc-078
     9d the phase becomes (-)**(i2-i1)*(product of parities). ecis1387'/inpc-079
     a4x,'a factor i**(-l) must be taken into account in the definition inpc-080
     bof',4x,'ecis1388'/'  q(j)nuclear and a phase i introduced for negainpc-081
     ctive parity states.',6x,'ecis1389'/4x,'when s=0, (s2|| ||s1) = sqrinpc-082
     dt(2*s1+1) is computed in subroutine quan ecis1390'/4x,'the factor inpc-083
     e(2s+1) introduced in quan to use the same reduced matrix ecis1391'inpc-084
     f/'  element when target and particle are exchanged.',23x,'ecis1392inpc-085
     g'/4x,'for a magnetic multipole coulomb transition bm(l-1), the forinpc-086
     hm factorecis1393'/'  is the one of an electric multipole transitioinpc-087
     in be(l) divided by',7x,'ecis1394'/'  mr(m*c/hbar)**2, where m and inpc-088
     jmr and mp are atomic and reduced masses  ecis1395'/'  respectivelyinpc-089
     k.',57x,'ecis1396'/72x,'ecis1397'/72x,'ecis1398')                  inpc-090
      write (mw,1064)                                                   inpc-091
 1064 format ('cards read in subroutine extp',43x,'ecis1399'/'**********inpc-092
     1*******************',43x,'ecis1400'/' if (lo(7)=.true., otherwise inpc-093
     2go to "cards read in subroutine ldis".',5x,'ecis1401'/72x,'ecis140inpc-094
     32'/'identification',26x,'format (12i5)',19x,'ecis1403'/'**********inpc-095
     4****',58x,'ecis1404'/7x,'1- 5   l1',4x,'level i.',44x,'ecis1405'/7inpc-096
     5x,'6-10   l2',4x,'level ip.',43x,'ecis1406'/6x,'11-15   ml',4x,'seinpc-097
     6quence number of the form factor in the table of  ecis1407'/20x,'rinpc-098
     7educed nuclear matrix elements between level i and ecis1408'/20x,'inpc-099
     8level ip. it must be 0 for potentials. use the',6x,'ecis1409'/20x,inpc-100
     9'value -ml to enter the correction term to the form  ecis1410'/20xinpc-101
     a,'factor read with ml.',32x,'ecis1411'/6x,'16-20   ityp =  1 real inpc-102
     bvolume or scalar potential',17x,'ecis1412'/22x,'2 imaginary volumeinpc-103
     c or scalar potential',12x,'ecis1413'/22x,'3 real surface or vectorinpc-104
     d potential',16x,'ecis1414'/22x,'4 imaginary surface or vector poteinpc-105
     ential',11x,'ecis1415'/''/22x,'5 real spin-orbit or tensor potentiinpc-106
     fal',13x,'ecis1416'/22x,'6 imaginary spin-orbit or tensor potentialinpc-107
     g',8x,'ecis1417'/22x,'7 coulomb potential',31x,'ecis1418'/22x,'8 coinpc-108
     hulomb spin-orbit potential',20x,'ecis1419'/6x,'21-25   l1x   non pinpc-109
     iositive or l1 of the form factor to be copied  ecis1420'/20x,'intoinpc-110
     j the new one.',35x,'ecis1421'/6x,'26-30   l2x   l2 of the form facinpc-111
     ktor to be copied if l1x is not',4x,'ecis1422')                    inpc-112
      write (mw,1065)                                                   inpc-113
 1065 format (20x,'positive.',43x,'ecis1423'/6x,'31-35   mlx   same for inpc-114
     1ml if l1x is not positive.',17x,'ecis1424'/6x,'36-40   itypx same inpc-115
     2for ityp if l1x is not positive, must be equal ecis1425'/20x,'to iinpc-116
     3typ.',44x,'ecis1426'/20x,'negative number for standard form factorinpc-117
     4s with non  ecis1427'/20x,'positive value of l1x in columns 21-30:inpc-118
     5',13x,'ecis1428'/24x,'-1  woods-saxon potential.',22x,'ecis1429'/2inpc-119
     64x,'-2  first derivative of woods-saxon potential.  ecis1430'/24x,inpc-120
     7'-3  second derivative of woods-saxon potential. ecis1431'/24x,'-4inpc-121
     8  third derivative of woods-saxon potential.  ecis1432'/12x,'(the inpc-122
     9n th derivative is always divided by fact(n)*sqrt(4*pi)ecis1433'/1inpc-123
     a7x,'and multiplied by r**n only if lo(6)=.false.)',10x,'ecis1434'/inpc-124
     b24x,'-5  deformed woods-saxon potential.',13x,'ecis1435'/24x,'-6  inpc-125
     cderivative of deformed woods-saxon potentialecis1436'/24x,'-7  laginpc-126
     duerre polynomial.',24x,'ecis1437'/24x,'-8  solution in real woods-inpc-127
     esaxon potential.',5x,'ecis1438'/24x,'-9  bessel expansion.',27x,'einpc-128
     fcis1439'/24x,'-10 expansion with laguerre polynomials.',8x,'ecis14inpc-129
     g40'/20x,'(see below "special meaning of l1x, l2x and mlx ..")ecis1inpc-130
     h441'/6x,'41-45   nst   channel of which the step size is used (definpc-131
     iault',5x,'ecis1442'/20x,'value: the channel which uses it for a ceinpc-132
     jntral',6x,'ecis1443'/20x,'potential, 1 for a transition potential)inpc-133
     k. if nst is ecis1444')                                            inpc-134
      write (mw,1066)                                                   inpc-135
 1066 format (20x,'negative for a standard form factor with itypx=-1 toeinpc-136
     1cis1445'/20x,'itypx=-6, use of a reduced radius, taking into',6x,'inpc-137
     2ecis1446'/20x,'account lo(16) (heavy-ion definition) and lo(6)',5xinpc-138
     3,'ecis1447'/20x,'(use of deformation lengths).',23x,'ecis1448'/6x,inpc-139
     4'46-50   nfold 0 for no folding or address of folding parameters  inpc-140
     5 ecis1449'/20x,'in their list read below. nfold can be different finpc-141
     6orecis1450'/20x,'a copied form factor and allows the folding with inpc-142
     7a  ecis1451'/20x,'different multipolarity. it can be used with a',inpc-143
     86x,'ecis1452'/20x,'form factor given by points.',24x,'ecis1453'/6xinpc-144
     9,'51-55   nint  if not 0, the strength is the integral of this forinpc-145
     am ecis1454'/20x,'factor with r**(l+2) where l is the relevant anguinpc-146
     blarecis1455'/20x,'momentum. when nint, is a positive number, the',inpc-147
     c6x,'ecis1456'/20x,'integral with r**(l+1) has to be given; with a'inpc-148
     d,6x,'ecis1457'/20x,'negative integer, the usual strength has to beinpc-149
     e givenecis1458'/20x,'and is replaced by this integral at its firstinpc-150
     f',7x,'ecis1459'/20x,'calculation. for spin-orbit potentials, it isinpc-151
     g the   ecis1460'/20x,'integral of the form factor without derivatiinpc-152
     hon. thisecis1461'/20x,'strength is of the same sign as the depth oinpc-153
     if the',4x,'ecis1462'/20x,'standard description. for coulomb potentinpc-154
     jials, this  ecis1463'/20x,'strength is the last value multiplied binpc-155
     ky',12x,'ecis1464')                                                inpc-156
      write (mw,1067)                                                   inpc-157
 1067 format (20x,'(2*l+1)*r**(l+1)/1.43998 . if nst is negative for a einpc-158
     1cis1465'/20x,'form factor copied, input of a multiplication factorinpc-159
     2ecis1466'/20x,'in next card.',39x,'ecis1467'/72x,'ecis1468'/'meaniinpc-160
     3ng of l1x, l2x and mlx for negative values of itypx (columns 36-40inpc-161
     4)ecis1469'/'******************************************************inpc-162
     5******************ecis1470'/6x,'21-25   l1x   -l1x is the magneticinpc-163
     6 quantum number of the vibrationecis1471'/20x,'when itypx=-6.',38xinpc-164
     7,'ecis1472'/20x,'-l1x is the number of nodes when itypx=-7 or -8',inpc-165
     85x,'ecis1473'/20x,'(used only when mlx=0 or mlx=1).',20x,'ecis1474inpc-166
     9'/20x,'-l1x is the order of derivation of bessel functions ecis147inpc-167
     a5'/20x,'or laguerre polynomials when itypx=-9 or -10.',7x,'ecis147inpc-168
     b6'/''/6x,'26-30   l2x   number of deformations when itypx=-5 or -inpc-169
     c6.',9x,'ecis1477'/20x,'a division factor for the steps in computininpc-170
     dg bound  ecis1478'/20x,'function (default value 4) when itypx=-8.'inpc-171
     e,11x,'ecis1479'/20x,'number of bessel functions or laguerre polynoinpc-172
     fmials  ecis1480'/20x,'when itypx=-9 or -10.',31x,'ecis1481'/6x,'31inpc-173
     g-35   mlx   angular momentum of the vibration when itypx=-6.',4x,'inpc-174
     hecis1482'/20x,'number of bound functions when itypx=-7 or -8:',6x,inpc-175
     i'ecis1483'/20x,'=0 or 1 for one function with the quantum numbers inpc-176
     jofecis1484'/31x,'the transition,',26x,'ecis1485'/20x,'=2 for two finpc-177
     kunctions with the same itypx,',11x,'ecis1486')                    inpc-178
      write (mw,1068)                                                   inpc-179
 1068 format (20x,'=3 when itypx=-8 for a laguerre polynomial for the  einpc-180
     1cis1487'/31x,'second function.',25x,'ecis1488'/20x,'l-value of besinpc-181
     2sel functions or laguerre polynomials ecis1489'/20x,'when itypx=-9inpc-182
     3 or -10 (default value: angular',8x,'ecis1490'/20x,'momentum of thinpc-183
     4e form factor, enter a negative value ecis1491'/20x,'to use 0).',4inpc-184
     52x,'ecis1492'/'  errors in this card stop the program.',33x,'ecis1inpc-185
     6493'/72x,'ecis1494'/'  note:  if there is no spin for the particleinpc-186
     7 in all the channels, the  ecis1495'/'  ****  spin-orbit potentialinpc-187
     8s (ityp = 5 , 6 and 8) are not read, but',4x,'ecis1496'/8x,'they ainpc-188
     9re required as soon as there is at least a non spin-0',5x,'ecis149inpc-189
     a7'/8x,'particle at least for one level. for the transitions with ainpc-190
     b',5x,'ecis1498'/8x,'transfer of spin s which is not zero there areinpc-191
     c no spin-orbit',4x,'ecis1499'/8x,'potentials (no tensor term in diinpc-192
     drac formalism). there is a',6x,'ecis1500'/8x,'coulomb potential foinpc-193
     er integral spin transfer even for l=0.',6x,'ecis1501'/9x,'volume ainpc-194
     fnd surface potentials are read separately except for   ecis1502'/8inpc-195
     gx,'itypx=-7 and -8. in the dirac formalism itypx=-7 and itypx=-8  inpc-196
     h ecis1503'/8x,'cannot be used. for magnetic coulomb interaction, oinpc-197
     inly the',6x,'ecis1504'/8x,'coulomb potential is read. the form facinpc-198
     jtors with itypx=-5 to -9 ecis1505'/8x,'can be copied only if they inpc-199
     kinvolve the same multipolarity. thereecis1506')                   inpc-200
      write (mw,1069)                                                   inpc-201
 1069 format (8x,'is no limitation for itypx=-7 and -8 if they involve tinpc-202
     1wo bound  ecis1507'/8x,'functions. the copied form factors can be inpc-203
     2folded differently.   ecis1508'/72x,'ecis1509'/' allowed values ofinpc-204
     3 itypx for standard potentials',24x,'ecis1510'/' *****************inpc-205
     4******************************',24x,'ecis1511'/' *** ml = 0 ******inpc-206
     5',54x,'ecis1512'/' itypx =',4x,'-1',4x,'-2',4x,'-3',4x,'-4',4x,'-5inpc-207
     6',4x,'-6',4x,'-7',4x,'-8  -9,-10',8x,'ecis1513'/' ityp = 1   yes  inpc-208
     7 no',4x,'no',4x,'no',4x,'yes   no',4x,'no',4x,'no   yes',10x,'ecisinpc-209
     81514'/' ityp = 2   yes   no',4x,'no',4x,'no',4x,'yes   no',4x,'no'inpc-210
     9,4x,'no   yes',10x,'ecis1515'/' ityp = 3   yes   no',4x,'no',4x,'ninpc-211
     ao',4x,'yes   no',4x,'no',4x,'no   yes',10x,'ecis1516'/' ityp = 4  inpc-212
     b yes   no',4x,'no',4x,'no',4x,'yes   no',4x,'no',4x,'no   yes',10xinpc-213
     c,'ecis1517'/' ityp = 5   yes   no',4x,'no',4x,'no',4x,'yes   no',4inpc-214
     dx,'no',4x,'no   yes',10x,'ecis1518'/' ityp = 6   yes   no',4x,'no'inpc-215
     e,4x,'no',4x,'yes   no',4x,'no',4x,'no   yes',10x,'ecis1519'/' itypinpc-216
     f = 7   yes   no',4x,'no',4x,'no',4x,'yes   no',4x,'no',4x,'no   yeinpc-217
     gs',10x,'ecis1520'/' ityp = 8   yes   no',4x,'no',4x,'no',4x,'yes  inpc-218
     h no',4x,'no',4x,'no   yes',10x,'ecis1521'/' **** ml is not 0 ****'inpc-219
     i,50x,'ecis1522'/' itypx =',4x,'-1',4x,'-2',4x,'-3',4x,'-4',4x,'-5'inpc-220
     j,4x,'-6',4x,'-7',4x,'-8  -9,-10',8x,'ecis1523'/' ityp = 1   yes   inpc-221
     kyes   yes   yes   yes   yes   yes   yes  yes',10x,'ecis1524')     inpc-222
      write (mw,1070)                                                   inpc-223
 1070 format (' ityp = 2   yes   yes   yes   yes   yes   yes   yes   yesinpc-224
     1  yes',10x,'ecis1525'/' ityp = 3   yes   yes   yes   yes   yes   yinpc-225
     2es   no',4x,'no   yes',10x,'ecis1526'/' ityp = 4   yes   yes   yesinpc-226
     3   yes   yes   yes   no',4x,'no   yes',10x,'ecis1527'/' ityp = 5  inpc-227
     4 yes   yes   yes   yes   yes   yes   no',4x,'no   yes',10x,'ecis15inpc-228
     528'/' ityp = 6   yes   yes   yes   yes   yes   yes   no',4x,'no   inpc-229
     6yes',10x,'ecis1529'/' ityp = 7   no',4x,'yes   yes   yes   yes   yinpc-230
     7es   no',4x,'no   yes',10x,'ecis1530'/' ityp = 8   no',4x,'yes   yinpc-231
     8es   yes   yes   yes   no',4x,'no   yes',10x,'ecis1531'/72x,'ecis1inpc-232
     9532'/' number of parameters to store:',41x,'ecis1533'/12x,'10',4x,inpc-233
     a'10',4x,'10',4x,'10  11+l2x 13+l2x 11',4x,'22   13+l2x',7x,'ecis15inpc-234
     b34'/' there is one more for coulomb potentials and itypx=-1 to -6.inpc-235
     c',11x,'ecis1535'/' there are 5 more parameters for itypx=-7 and mlinpc-236
     dx=2.',20x,'ecis1536'/' there are 16 or 6 more parameters for itypxinpc-237
     e=-8 and mlx=2 or mlx=3.',5x,'ecis1537'/72x,'ecis1538'/''/'strengtinpc-238
     fh and scaling factor',13x,'format (7f10.5)',17x,'ecis1539'/'******inpc-239
     g*********************',45x,'ecis1540'/' if itypx is negative go toinpc-240
     h "parameters of standard form factors".',6x,'ecis1541'/' then if linpc-241
     i1x is positive go back to "identification" card.',14x,'ecis1542'/1inpc-242
     j0x,'1   .true. to allow extrapolation beyond the last point. if itinpc-243
     kecis1543')                                                        inpc-244
      write (mw,1071)                                                   inpc-245
 1071 format (14x,'is .false., values beyond the last point will be 0.',inpc-246
     17x,'ecis1544'/7x,'2-10   multiplicative factor for the strength (dinpc-247
     2efault value 1.).ecis1545'/6x,'11-20   multiplicative factor for tinpc-248
     3he step size (default value 1.)ecis1546'/72x,'ecis1547'/'numericalinpc-249
     4 values of the potentials',6x,'format (2(f10.5,f20.10),a4)',5x,'ecinpc-250
     5is1548'/'**********************************',38x,'ecis1549'/7x,'1-inpc-251
     610   rext  radius.',45x,'ecis1550'/6x,'11-30   fext  value at rextinpc-252
     7.',38x,'ecis1551'/6x,'31-40   rext  radius.',45x,'ecis1552'/6x,'41inpc-253
     8-60   fext  value at rext.',38x,'ecis1553'/6x,'61-64   last  contrinpc-254
     9ol word which must be "last" for the last pointecis1554'/7x,'if thinpc-255
     ais control word is not "last" go to next such card.',9x,'ecis1555'inpc-256
     b/'  note:  the number of radii and values must be at least 4. if iinpc-257
     ct is',4x,'ecis1556'/'  ***** the computation is stopped.',37x,'eciinpc-258
     ds1557'/9x,'the given radii must be in increasing order and their ninpc-259
     eumber   ecis1558'/8x,'even. many points are needed for coulomb potinpc-260
     fential for which theecis1559'/8x,'extrapolation does not work wellinpc-261
     g. if its depth is given by the  ecis1560'/8x,'integral, (nint not inpc-262
     h0), these values describe the charge',8x,'ecis1561'/8x,'distributiinpc-263
     ion.',51x,'ecis1562'/9x,'the sign of the potentials is the one of tinpc-264
     jheir depth when',6x,'ecis1563'/8x,'woods-saxon form factors are usinpc-265
     ked for schroedinger equations andecis1564')                       inpc-266
      write (mw,1072)                                                   inpc-267
 1072 format (8x,'for dirac equation.',45x,'ecis1565'/9x,'the spin-orbitinpc-268
     1 "central" have to be given as 1/r d/dr(v(r))',4x,'ecis1566'/8x,'einpc-269
     2xcept if its strength is defined by its integral or is folded. eciinpc-270
     3s1567'/9x,'the spin-orbit transition potentials have to be given ainpc-271
     4s v(r), ecis1568'/8x,'from which 1/r d/dr(v(r)) and v(r)/r**2 are inpc-272
     5internally computed.ecis1569'/9x,'the two multiplicative factors oinpc-273
     6nly can be in search or changedecis1570'/8x,'if lo(34) was .true. inpc-274
     7in a previous computation.',17x,'ecis1571'/72x,'ecis1572'/'multiplinpc-275
     8icative factor',19x,'format (7f10.5)',17x,'ecis1573'/'************inpc-276
     9*********',51x,'ecis1574'/' if nint is not negative for a copied finpc-277
     aorm factor go back to',12x,'ecis1575'/' "identification" card.',49inpc-278
     bx,'ecis1576'/7x,'1-10   multiplicative factor for the strength (muinpc-279
     cst not be 0.).  ecis1577'/72x,'ecis1578'/'parameters of standard finpc-280
     dorm factors',37x,'ecis1579'/'***********************************',inpc-281
     e37x,'ecis1580'/' only if l1x is not positive and itypx is negativeinpc-282
     f, otherwise go to',5x,'ecis1581'/' next "identification card".',44inpc-283
     gx,'ecis1582'/72x,'ecis1583'/'if itypx=-1 to -6:',54x,'ecis1584'/'*inpc-284
     h*****************',54x,'ecis1585'/72x,'ecis1586'/'parameters of thinpc-285
     ie potential',13x,'format (7f10.5)',17x,'ecis1587'/'***************inpc-286
     j************',45x,'ecis1588'/7x,'1-10   depth of potential.',39x,'inpc-287
     kecis1589')                                                        inpc-288
      write (mw,1073)                                                   inpc-289
 1073 format (14x,'product of depth and deformation for a transition forinpc-290
     1m',4x,'ecis1590'/18x,'factor.',47x,'ecis1591'/14x,'product of charinpc-291
     2ges for coulomb potential.',17x,'ecis1592'/14x,'product of chargesinpc-292
     3 and deformation for coulomb transition ecis1593'/18x,'form factorinpc-293
     4.',42x,'ecis1594'/6x,'11-20   radius of volume potential.',31x,'ecinpc-294
     5is1595'/6x,'21-30   diffuseness of volume potential.',26x,'ecis159inpc-295
     66'/6x,'31-40   exponentiation factor (the form factor is at the poinpc-296
     7wer',4x,'ecis1597'/18x,'1+this value).',40x,'ecis1598'/''/6x,'41-inpc-297
     850   third parameter of a fermi charge distribution for a',6x,'eciinpc-298
     9s1599'/14x,'coulomb potential.',40x,'ecis1600'/72x,'ecis1601'/'definpc-299
     aormations for itypx=-5 or -6',9x,'format (7f10.5)',17x,'ecis1602'/inpc-300
     b'*******************************',41x,'ecis1603'/7x,'1-10   deforminpc-301
     cation for l=1.',38x,'ecis1604'/6x,'11-20   deformation for l=2.',3inpc-302
     d8x,'ecis1605'/6x,'21-30   deformation for l=3.',38x,'ecis1606'/6x,inpc-303
     e'31-40   deformation for l=4.',38x,'ecis1607'/6x,'41-50   ........inpc-304
     f.. and so on up to l2x ....',23x,'ecis1608'/'  note:  odd and eveninpc-305
     g deformations are used, starting by l=1.',11x,'ecis1609'/'  ****  inpc-306
     hthe radii must be values already multiplied by a**(1/3).',8x,'ecisinpc-307
     i1610'/8x,'no check is done on product of charges when they are reainpc-308
     jd or to ecis1611'/8x,'prevent a search on them.',39x,'ecis1612'/72inpc-309
     kx,'ecis1613'/'if itypx=-7 or -8:',54x,'ecis1614')                 inpc-310
      write (mw,1074)                                                   inpc-311
 1074 format ('******************',54x,'ecis1615'/72x,'ecis1616'/'quantuinpc-312
     1m numbers',25x,'format (12i5)',19x,'ecis1617'/'***************',57inpc-313
     2x,'ecis1618'/'if mlx=0 or mlx=1, the number of nodes is l2x and thinpc-314
     3e quantum numbers   ecis1619'/'are those of the transition. in thiinpc-315
     4s case, go to next card.',13x,'ecis1620'/'if mlx=2 or mlx=3:',54x,inpc-316
     5'ecis1621'/7x,'1- 5   np: number of nodes of the first bound functinpc-317
     6ion.',10x,'ecis1622'/7x,'6-10   lp: angular momentum of the first inpc-318
     7bound function.',9x,'ecis1623'/6x,'11-15   sp: value of 2*s for thinpc-319
     8e first bound function.',12x,'ecis1624'/6x,'16-20   jp: value of 2inpc-320
     9*j for the first bound function.',12x,'ecis1625'/6x,'21-25   nh: ninpc-321
     aumber of nodes of the second bound function.',9x,'ecis1626'/6x,'26inpc-322
     b-30   lh: angular momentum of the second bound function.',8x,'ecisinpc-323
     c1627'/6x,'31-35   sh: value of 2*s for the second bound function.'inpc-324
     d,11x,'ecis1628'/6x,'36-40   jh: value of 2*j for the second bound inpc-325
     efunction.',11x,'ecis1629'/6x,'41-45   nvc not 0 to take into accouinpc-326
     fnt particle-hole coupling',5x,'ecis1630'/18x,'(used only with sp=1inpc-327
     g and sh=1).',23x,'ecis1631'/72x,'ecis1632'/'for itypx=-7:',27x,'foinpc-328
     hrmat (7f10.5)',17x,'ecis1633'/'*************',59x,'ecis1634'/7x,'1inpc-329
     i-10   oscillator parameter for the first bound function.',8x,'ecisinpc-330
     j1635'/6x,'11-20   total mass (default value: target mass of first inpc-331
     klevel).   ecis1636')                                              inpc-332
      write (mw,1075)                                                   inpc-333
 1075 format (6x,'21-30   mass of bound particle (default value 1.).',16inpc-334
     1x,'ecis1637'/6x,'31-40   oscillator parameter for the second boundinpc-335
     2 function.',7x,'ecis1638'/6x,'41-50   total mass (default value: tinpc-336
     3arget mass of first level).   ecis1639'/6x,'51-60   mass of bound inpc-337
     4particle (default value 1.).',16x,'ecis1640'/'for mlx=0 or 1 or itinpc-338
     5ypx=-8 with mlx=3, only the three first parameters  ecis1641'/'areinpc-339
     6 read. for mlx=2, if the second oscillator parameter is 0., the fiinpc-340
     7rstecis1642'/'one is copied.',58x,'ecis1643'/'only, oscillator parinpc-341
     8ameters can be in search or changed if lo(34) was   ecis1644'/'.trinpc-342
     9ue. in a previous computation.',39x,'ecis1645'/72x,'ecis1646'/'forinpc-343
     a itypx=-8:',27x,'format (7f10.5)',17x,'ecis1647'/'*************',5inpc-344
     b9x,'ecis1648'/7x,'1-10   binding energy. if this value is negativeinpc-345
     c, the bound stateecis1649'/14x,'is replaced by a scattering state inpc-346
     dnormalised to',11x,'ecis1650'/14x,'sin(kr+delta) at infinity.',32xinpc-347
     e,'ecis1651'/6x,'11-20   total mass (default value: target mass of inpc-348
     ffirst level).   ecis1652'/6x,'21-30   mass of bound particle (defainpc-349
     gult value 1.).',16x,'ecis1653'/6x,'31-40   product of charges.',39inpc-350
     hx,'ecis1654'/6x,'41-50   real potential for unbound states or starinpc-351
     iting value for   ecis1655'/14x,'the search on bound state (defaultinpc-352
     j values 35 mev).',8x,'ecis1656'/''/6x,'51-60   reduced radius of inpc-353
     kreal potential.',25x,'ecis1657')                                  inpc-354
      write (mw,1076)                                                   inpc-355
 1076 format (6x,'61-70   diffuseness of real potential.',28x,'ecis1658'inpc-356
     1/72x,'ecis1659'/'on next card:',27x,'format (7f10.5)',17x,'ecis166inpc-357
     20'/'*************',59x,'ecis1661'/7x,'1-10   depth of spin-orbit pinpc-358
     3otential.',28x,'ecis1662'/6x,'11-20   reduced radius of spin-orbitinpc-359
     4 potential.',19x,'ecis1663'/6x,'21-30   diffuseness of spin-orbit inpc-360
     5potential.',22x,'ecis1664'/6x,'31-40   reduced radius of coulomb pinpc-361
     6otential.',22x,'ecis1665'/'for mlx=2, go back to "for itypx=-8:".'inpc-362
     7,34x,'ecis1666'/'for mlx=3, go back to "for itypx=-7:" to read oneinpc-363
     8 oscillator parameter. ecis1667'/'  note:  reduced radii are used inpc-364
     9for itypx=-8.',27x,'ecis1668'/'  ****  using the product of two boinpc-365
     aund functions, their coupling to the ecis1669'/8x,'angular momentuinpc-366
     bm of the transition is computed by the code only ecis1670'/8x,'if inpc-367
     ctheir spins are both 1/2 and the nuclear matrix element',6x,'ecis1inpc-368
     d671'/8x,'should be the strength of the interaction. for spins not inpc-369
     e1/2,   ecis1672'/8x,'this coupling should be included in the nucleinpc-370
     far matrix element. ecis1673'/72x,'ecis1674'/'if itypx=-9 or -10:',inpc-371
     g53x,'ecis1675'/'*******************',53x,'ecis1676'/72x,'ecis1677'inpc-372
     h/'strengths',31x,'format (7f10.5)',17x,'ecis1678'/'*********',63x,inpc-373
     i'ecis1679'/7x,'1-10   strength of the integral with r**(l+2). (forinpc-374
     j coulomb',6x,'ecis1680'/14x,'potentials and couplings, give the deinpc-375
     kscription of',9x,'ecis1681')                                      inpc-376
      write (mw,1077)                                                   inpc-377
 1077 format (14x,'charge density or transition. the strength must be',8inpc-378
     1x,'ecis1682'/14x,'given. for potentials, it is the product of charinpc-379
     2ges).',5x,'ecis1683'/6x,'11-20   for itypx=-9, radial extension ofinpc-380
     3 bessel function',9x,'ecis1684'/14x,'(default value matching radiuinpc-381
     4s).',26x,'ecis1685'/14x,'for itypx=-10, parameter b of laguerre poinpc-382
     5lynomial',9x,'ecis1686'/14x,'(default value 1). the potential is sinpc-383
     6um on n of',11x,'ecis1687'/14x,'x**l l(l+1/2,n,x**2) exp(-x**2/2) inpc-384
     7where x=r/b.',12x,'ecis1688'/6x,'21-30   strength of first bessel inpc-385
     8function/laguerre polynomial.',4x,'ecis1689'/6x,'31-40   strength inpc-386
     9of second bessel function/laguerre polynomial.   ecis1690'/6x,'41-inpc-387
     a50   strength of third bessel function/laguerre polynomial.',4x,'einpc-388
     bcis1691'/6x,'51-60   strength of fourth bessel function/laguerre pinpc-389
     colynomial.   ecis1692'/6x,'61-70   strength of fifth bessel functiinpc-390
     don/laguerre polynomial.',4x,'ecis1693'/72x,'ecis1694'/' eventuallyinpc-391
     e, on next card:',14x,'format (7f10.5)',17x,'ecis1695'/' **********inpc-392
     f***************',46x,'ecis1696'/7x,'1-10   strength of sixth besseinpc-393
     gl function/laguerre polynomial.',4x,'ecis1697'/6x,'11-20   strengtinpc-394
     hh of seventh bessel function/laguerre polynomial.  ecis1698'/6x,'2inpc-395
     i1-30   .......... and so on up to l2x ....',23x,'ecis1699'/'  noteinpc-396
     j:  with bessel function or laguerre polynomial or laguerre, give  inpc-397
     kecis1700')                                                        inpc-398
      write (mw,1078)                                                   inpc-399
 1078 format ('  ****  the spin-orbit v(r) and never 1/r d/dr v(r). the inpc-400
     1laguerre',7x,'ecis1701'/8x,'polynomials are x**l exp(-x**2) l^(l+1inpc-401
     2/2)_n(2x**2) where x=r/b  ecis1702'/8x,'(unnormalised polynomials inpc-402
     3as defined in bateman or abramowitz,  ecis1703'/8x,'with a parametinpc-403
     4er b inverse of the harmonic oscillator parameter)ecis1704'/9x,'thinpc-404
     5e program stops if form factors are missing.',17x,'ecis1705'/72x,'inpc-405
     6ecis1706'/'folding parameters',22x,'format (7e10.5)',17x,'ecis1707inpc-406
     7'/'******************',54x,'ecis1708'/' if the maximum positive vainpc-407
     8lue of "nfold" read in columns 46-50 of the  ecis1709'/' identificinpc-408
     9ation cards is n, read n times:',31x,'ecis1710'/7x,'1-10   "v"',6xinpc-409
     a,'parameter',40x,'ecis1711'/6x,'11-20   "r"',6x,'parameter',40x,'einpc-410
     bcis1712'/6x,'21-30   "a"',6x,'parameter',40x,'ecis1713'/'for explainpc-411
     cnations, see "cards read in subroutine lect".',18x,'ecis1714'/72x,inpc-412
     d'ecis1715'/72x,'ecis1716'/''/'cards read in subroutine ldis',43x,inpc-413
     e'ecis1717'/'*****************************',43x,'ecis1718'/' only iinpc-414
     ff lo(10)=.true., otherwise go to "cards read in subroutine disp".einpc-415
     gcis1719'/72x,'ecis1720'/'for each potential:',53x,'ecis1721'/72x,'inpc-416
     hecis1722'/'dispersion parameters (integer)',9x,'format (14i5)',19xinpc-417
     i,'ecis1723'/'*******************************',41x,'ecis1724'/7x,'1inpc-418
     j- 5   ipp(1)   1 energies in laboratory system, anything for',4x,'inpc-419
     kecis1725'/23x,'centre of mass energy.',27x,'ecis1726')            inpc-420
      write (mw,1079)                                                   inpc-421
 1079 format (7x,'6-10   ipp(2)   n2 with |n2| power in large negative einpc-422
     1nergy',6x,'ecis1727'/23x,'correction term. for negative value, an'inpc-423
     2,10x,'ecis1728'/23x,'approximation described below is used',12x,'einpc-424
     3cis1729'/23x,'(see positive values of nv).',21x,'ecis1730'/6x,'11-inpc-425
     415   ipp(3)   nv with |nv| power for volume/scalar potential.  eciinpc-426
     5s1731'/6x,'16-20   ipp(4)   ns with |ns| power for surface/vector inpc-427
     6potential. ecis1732'/6x,'21-25   ipp(5)   nl with |nl| power for sinpc-428
     7pin-orbit or tensor',6x,'ecis1733'/23x,'potential. n2, nv, ns and inpc-429
     8nl must be even.',7x,'ecis1734'/6x,'26-30   ipp(6)   0: coefficieninpc-430
     9ts computed.',24x,'ecis1735'/23x,'any other value: coefficients giinpc-431
     aven by the user. ecis1736'/14x,'ipp(1) to ipp(6) are equivalent toinpc-432
     b pip(1) to pip(3).',6x,'ecis1737'/72x,'ecis1738'/'dispersion paraminpc-433
     ceters (floating)',8x,'format (7f10.5)',17x,'ecis1739'/'***********inpc-434
     d*********************',40x,'ecis1740'/' if ipp(6) is 0 in previousinpc-435
     e card, otherwise go to "end of do-loop',7x,'ecis1741'/' for potentinpc-436
     fials".',55x,'ecis1742'/7x,'1-10   pip(4)   energy for which the iminpc-437
     gaginary depths are read   ecis1743'/23x,'(default value: energy ofinpc-438
     h the first level using  ecis1744'/23x,'this potential).',33x,'ecisinpc-439
     i1745'/6x,'11-20   pip(5)   ef fermi energy. (default value -6.8 meinpc-440
     jv).',7x,'ecis1746'/6x,'21-30   pip(6)   ep threshold energy (defauinpc-441
     klt value pip(5)=ef).   ecis1747')                                 inpc-442
      write (mw,1080)                                                   inpc-443
 1080 format (6x,'31-40   pip(7)   ea large energy starting value above inpc-444
     1pip(5)=ef)  ecis1748'/6x,'41-50   pip(8)   avso exponential decreainpc-445
     2se of real spin-orbit.',4x,'ecis1749'/6x,'51-60   pip(9)   awso liinpc-446
     3near decrease of imaginary spin-orbit.',4x,'ecis1750'/6x,'61-70   inpc-447
     4pip(10)  bv constant for volume or scalar potential.',6x,'ecis1751inpc-448
     5'/72x,'ecis1752'/'next card',31x,'format (7f10.5)',17x,'ecis1753'/inpc-449
     6'*********',63x,'ecis1754'/7x,'1-10   pip(11)   alp coefficient ofinpc-450
     7 large positive energy term   ecis1755'/24x,'in volume potential.'inpc-451
     8,28x,'ecis1756'/24x,'second bv'' parameter for volume potentials iinpc-452
     9f   ecis1757'/24x,'nv<0 (default value 2*bv).',22x,'ecis1758'/6x,'inpc-453
     a11-20   pip(12)   cv exponential decrease (in |e| for positive',4xinpc-454
     b,'ecis1759'/24x,'values of cv or in sqrt|e| for negative values) einpc-455
     ccis1760'/24x,'for large energy terms of volume potentials or  ecisinpc-456
     d1761'/24x,'fv fraction of the first term if nv<0.',10x,'ecis1762'/inpc-457
     e6x,'21-30   pip(13)   bs constant for surface or vector potential.inpc-458
     f',4x,'ecis1763'/6x,'31-40   pip(14)   cs exponential decrease of ainpc-459
     g surface potential. ecis1764'/24x,'second bs'' parameter for surfainpc-460
     hce potentials if  ecis1765'/24x,'ns<0 (default value 2*bw).',22x,'inpc-461
     iecis1766'/6x,'41-50   pip(15)   cr non-locality range parameter ofinpc-462
     j surface',6x,'ecis1767'/24x,'potential or fraction in the first teinpc-463
     krm if ns<0.ecis1768')                                             inpc-464
      write (mw,1081)                                                   inpc-465
 1081 format (6x,'51-60   pip(16)   bl constant for spin-orbit or tensorinpc-466
     1 potential. ecis1769'/6x,'61-70   pip(17)   ahf exponential decreainpc-467
     2se of h.f. real volume',4x,'ecis1770'/24x,'potential.',38x,'ecis17inpc-468
     371'/72x,'ecis1772'/'  note:  there are nine coefficients for dispeinpc-469
     4rsion, ww(1) to ww(9),',4x,'ecis1773'/'  **** computed in subroutiinpc-470
     5ne disp and store from wv(14) to wv(22). the ecis1774'/7x,'potentiinpc-471
     6als given been vvr(r), vvi(r), vsr(r), vsi(r), vlr(r) and ecis1775inpc-472
     7'/7x,'vli(r), the potentials used are:',33x,'ecis1776'/''/8x,'wvrinpc-473
     8(r)=vrr(r)*(1+ww(3))+ww(2)*vri(r)',5x,'wvi(r)=vvi(r)*(1+ww(1))ecisinpc-474
     91777'/8x,'wsr(r)=vsr(r)*(1+ww(6))+ww(5)*vsi(r)',5x,'wsi(r)=vsi(r)*inpc-475
     a(1+ww(4))ecis1778'/8x,'wlr(r)=vlr(r)*(1+ww(9))+ww(8)*vli(r)',5x,'winpc-476
     bli(r)=vli(r)*(1+ww(7))ecis1779'/7x,'note that ww(6) is zero in theinpc-477
     c models used in the code.',10x,'ecis1780'/7x,'note also that the dinpc-478
     depths read for the real potentials must be   ecis1781'/7x,'the oneinpc-479
     es needed at the reference energy, without the dispersive  ecis1782inpc-480
     f'/7x,'contributions involving the addition of the imaginary form',inpc-481
     g7x,'ecis1783'/7x,'factors and the depths of imaginary potential thinpc-482
     hose needed at',4x,'ecis1784'/7x,'the reference energy.',44x,'ecis1inpc-483
     i785'/72x,'ecis1786'/'explanation of dispersion parameters:',35x,'einpc-484
     jcis1787'/'*************************************',35x,'ecis1788')  inpc-485
      write (mw,1082)                                                   inpc-486
 1082 format ('for positive values of nv: the volume imaginary potentialinpc-487
     1 at the energy ecis1789'/'************************** e is assumed inpc-488
     2to be such that "v(2*ef-e)=v(e)"ecis1790'/4x,'with "v(e)=v*(e-ef)*inpc-489
     3*nv/((e-ef)**nv+bv**nv)" with addition for',6x,'ecis1791'/4x,'e>efinpc-490
     4+ea of "alp*[sqrt(e)+.5*sqrt(ef+ea)*(ef+ea-3*e)/e" (usually',5x,'einpc-491
     5cis1792'/4x,'written "alp*[sqrt(e)+.5*(ef+ea)**(3/2)/e-1.5*sqrt(efinpc-492
     6+ea)]") and',4x,'ecis1793'/4x,'for e<ef-ea of "-v(e)*(ef-e-ea)**n2inpc-493
     7/((ef-e-ea)**n2+ea**n2)" where   ecis1794'/4x,'v(e) was given abovinpc-494
     8e; for negative values of n2, v(e) is replaced   ecis1795'/4x,'by inpc-495
     9v(ef-ea) but note that this expression is very different and',5x,'inpc-496
     aecis1796'/4x,'v(e) should be replaced by v(-infinity) to give a goinpc-497
     bod',14x,'ecis1797'/4x,'approximation. these expression can be dampinpc-498
     ced by a factor',11x,'ecis1798'/4x,'"exp[-|cv|*sqrt(e-ef-ea)]" if "inpc-499
     dcv"<0 and "exp[-cv*sqrt(ef-ea-e)]"   ecis1799'/4x,'if "cv">0. the inpc-500
     evalue of "v" is such that this gives the strength',4x,'ecis1800'/4inpc-501
     fx,'of v(e) read (including large positive energy term) at the enerinpc-502
     ggy   ecis1801'/4x,'pip(4). the real volume potential with the sameinpc-503
     h geometry, obtained  ecis1802'/4x,'by dispersion relation (as descinpc-504
     iribed by c. mahaux and r. sartor in  ecis1803'/4x,'nucl. phys a528inpc-505
     j (1991) 253), is added to the real potential.',8x,'ecis1804')     inpc-506
      write (mw,1083)                                                   inpc-507
 1083 format ('for positive values of ns: the surface imaginary potentiainpc-508
     1l "w(e)" in theecis1805'/'************************** schroedinger inpc-509
     2formalism is assumed to have theecis1806'/4x,'same energy dependeninpc-510
     3ce as "v(e)" given above multiplied by',10x,'ecis1807'/4x,'"exp[-cinpc-511
     4s*|e-ef|-cr*(e-ef)]". the non-locality range parameter "cr"  ecis1inpc-512
     5808'/4x,'is the inverse of "eb" given by equations (3.17) and (3.1inpc-513
     68) of',6x,'ecis1809'/4x,'c. mahaux and r. sartor in nucl. phys a45inpc-514
     78 (1986) 25. the real',6x,'ecis1810'/4x,'surface potential with thinpc-515
     8e same geometry, obtained by dispersion',4x,'ecis1811'/4x,'relatioinpc-516
     9n is added to the real potential. there is not the default   ecis1inpc-517
     a812'/4x,'value cr=.0125 to allow to use 0.',35x,'ecis1813'/'for poinpc-518
     bsitive values of nl: the spin-orbit imaginary potential is',8x,'ecinpc-519
     cis1814'/'************************** "ls(e)=ls*(e-ef)**nl/((e-ef)**inpc-520
     dnl+bl**nl)"',4x,'ecis1815'/4x,'with the constant "ls" such that "linpc-521
     es(e)" be equal to the strength   ecis1816'/4x,'of the imaginary spinpc-522
     fin-orbit at the energy pip(4). the real',10x,'ecis1817'/4x,'spin-oinpc-523
     grbit potential with the same geometry, obtained by dispersion ecisinpc-524
     h1818'/4x,'relation is added to the real potential which is damped inpc-525
     iby a factor ecis1819'/4x,'"exp[-avso*(e-ef)]".',48x,'ecis1820'/'foinpc-526
     jr negative values of nv: the volume imaginary potential is assumedinpc-527
     k to ecis1821')                                                    inpc-528
      write (mw,1084)                                                   inpc-529
 1084 format ('************************** be the sum of two terms similainpc-530
     1r to "v(e)"',4x,'ecis1822'/4x,'used for positive values, with the inpc-531
     2power |nv| and the parameters bv ecis1823'/4x,'and bv'' respectiveinpc-532
     3ly. the strengths are such that the first term is ecis1824'/4x,'fvinpc-533
     4 times the value read at the energy pip(3).',23x,'ecis1825'/'for ninpc-534
     5egative values of ns: the surface imaginary potential is the',7x,'inpc-535
     6ecis1826'/'************************** difference of two terms simiinpc-536
     7lar to those usedecis1827'/4x,'for positive values of nv, with theinpc-537
     8 power |ns|, the parameters bs,  ecis1828'/4x,'bs'' respectively ainpc-538
     9nd the same strength.',29x,'ecis1829'/'for negative values of nl: inpc-539
     athe spin-orbit imaginary potential is the',4x,'ecis1830'/'********inpc-540
     b****************** same as for positive values of nl. the real  ecinpc-541
     cis1831'/4x,'potential is damped by a factor "exp[-avso*(e-ef)]" buinpc-542
     dt no',10x,'ecis1832'/4x,'dispersive contribution is added.',35x,'einpc-543
     ecis1833'/'for zero values of nl: the spin-orbit real potential is inpc-544
     fas for negative ecis1834'/'********************** values of nl. thinpc-545
     ge imaginary potential is linear  ecis1835'/4x,'in energy with the inpc-546
     hcoefficient "awso".',30x,'ecis1836'/''/6x,'the vector dispersive inpc-547
     ipotential of the dirac formalism is treated ecis1837'/4x,'as the sinpc-548
     jcalar one without large energy terms.',23x,'ecis1838')            inpc-549
      write (mw,1085)                                                   inpc-550
 1085 format (6x,'the powers nv, ns, nl and n2 must be even. input of 0 inpc-551
     1suppresses  ecis1839'/4x,'the use of dispersion relation for the cinpc-552
     2orresponding potential.',5x,'ecis1840'/72x,'ecis1841'/72x,'ecis184inpc-553
     32'/'cards read in subroutine disp',43x,'ecis1843'/'***************inpc-554
     4**************',43x,'ecis1844'/' only if lo(10)=.true. and if for inpc-555
     5a level for which the dispersion',6x,'ecis1845'/'parameters were rinpc-556
     6ead with ipp(6) not 0, otherwise go to "cards read in  ecis1846'/'inpc-557
     7subroutine eval". for each level:',39x,'ecis1847'/72x,'ecis1848'/'inpc-558
     8dispersion coefficients',17x,'format (6f10.5)',17x,'ecis1849'/'***inpc-559
     9********************',49x,'ecis1850'/7x,'1-10   ww(1)',5x,'increasinpc-560
     ae of volume/scalar imaginary potential,  ecis1851'/6x,'11-20   ww(inpc-561
     b2)',5x,'correction to volume/scalar real potential,',5x,'ecis1852'inpc-562
     c/6x,'21-30   ww(3)',5x,'increase of volume/scalar real potential,'inpc-563
     d,7x,'ecis1853'/6x,'31-40   ww(4)',5x,'increase of surface/vector iinpc-564
     emaginary potential, ecis1854'/6x,'41-50   ww(5)',5x,'correction toinpc-565
     f surface/vector real potential,',4x,'ecis1855'/6x,'51-60   ww(6)',inpc-566
     g5x,'increase of surface/vector real potential,',6x,'ecis1856'/72x,inpc-567
     h'ecis1857'/'on next card:',27x,'format (3f10.5)',17x,'ecis1858'/'*inpc-568
     i************',59x,'ecis1859'/7x,'1-10   ww(7)',5x,'increase of sp-inpc-569
     jo/tensor imaginary potential,',4x,'ecis1860'/6x,'11-20   ww(8)',5xinpc-570
     k,'increase of sp-o/tensor real potential.',9x,'ecis1861')         inpc-571
      write (mw,1086)                                                   inpc-572
 1086 format (6x,'21-30   ww(9)',5x,'correction to sp-o/tensor real poteinpc-573
     1ntial.',7x,'ecis1862'/72x,'ecis1863'/'  note:  such sets of coeffiinpc-574
     2cients have to be given for all levels usingecis1864'/'  ****  a pinpc-575
     3otential for which ipp(6) is not 0. for a compound continuum ecis1inpc-576
     4865'/8x,'four such sets for different energies have to be given foinpc-577
     5r',6x,'ecis1866'/8x,'interpolation after the following card:',25x,inpc-578
     6'ecis1867'/72x,'ecis1868'/'energies for interpolation',14x,'formatinpc-579
     7 (4f10.5)',17x,'ecis1869'/'**************************',46x,'ecis18inpc-580
     870'/' energies for which the four following sets of coefficients ainpc-581
     9pply.',6x,'ecis1871'/7x,'1-10   en(1)',5x,'energy of the first setinpc-582
     a.',24x,'ecis1872'/6x,'11-20   en(2)',5x,'energy of the second set.inpc-583
     b',23x,'ecis1873'/6x,'21-30   en(3)',5x,'energy of the third set.',inpc-584
     c24x,'ecis1874'/6x,'31-40   en(4)',5x,'energy of the fourth set.',2inpc-585
     d3x,'ecis1875'/72x,'ecis1876'/'for a computation changing only enerinpc-586
     egy and some parameters, these data  ecis1877'/'must be read again.inpc-587
     f these data cannot be in search.',21x,'ecis1878'/72x,'ecis1879'/72inpc-588
     gx,'ecis1880'/'cards read in subroutine eval',43x,'ecis1881'/'*****inpc-589
     h************************',43x,'ecis1882'/3x,'if lo(34)=.true., othinpc-590
     ierwise go to the beginning of another data set. ecis1883'/72x,'eciinpc-591
     js1884'/'number of changes',23x,'format (2l1,i3,i5,f10.5)',8x,'ecisinpc-592
     k1885'/'*****************',55x,'ecis1886')                         inpc-593
      write (mw,1087)                                                   inpc-594
 1087 format (10x,'1   lo(34)',5x,'.true. for other calls to this subrouinpc-595
     1tine',6x,'ecis1887'/25x,'.false. for the last call.',21x,'ecis1888inpc-596
     2'/10x,'2   lx',9x,'.true. to read another title',19x,'ecis1889'/7xinpc-597
     3,'3- 5   nin',8x,'number of parameters to change.',16x,'ecis1890'/inpc-598
     47x,'6-10   nex',8x,'indication for the use of the values to be reainpc-599
     5decis1891'/27x,'>0  increments',31x,'ecis1892'/27x,'=0  new valuesinpc-600
     6',31x,'ecis1893'/27x,'<0  percentage of increase',19x,'ecis1894'/6inpc-601
     7x,'11-20   ech',8x,'new search scale. (default value 20.)',10x,'ecinpc-602
     8is1895'/72x,'ecis1896'/''/'card 1',34x,'format (18a4)',19x,'ecis1inpc-603
     9897'/'******',66x,'ecis1898'/'if lx=.true.  new title which will binpc-604
     ae printed as heading of results.',4x,'ecis1899'/72x,'ecis1900'/'idinpc-605
     bentifications',25x,'format (14i5)',19x,'ecis1901'/'***************inpc-606
     c',57x,'ecis1902'/7x,'1- 5   index of first parameter.',33x,'ecis19inpc-607
     d03'/7x,'6-10   index of second parameter.',32x,'ecis1904'/6x,'11-1inpc-608
     e5   ........................',34x,'ecis1905'/10x,'up to nin valuesinpc-609
     f, eventually on other cards, starting in 1-5. ecis1906'/'  note:  inpc-610
     ga negative value is replaced by zero.',26x,'ecis1907'/'  ****  indinpc-611
     hex zero is the total energy.',33x,'ecis1908'/9x,'the other indicesinpc-612
     i are the same as the ones used for search,',4x,'ecis1909'/8x,'withinpc-613
     j the limitations already described.',25x,'ecis1910'/72x,'ecis1911'inpc-614
     k/'new values',30x,'format (7f10.5)',17x,'ecis1912')               inpc-615
      write (mw,1088)                                                   inpc-616
 1088 format ('**********',62x,'ecis1913'/7x,'1-10   first new parameterinpc-617
     1.',38x,'ecis1914'/6x,'11-20   second new parameter.',37x,'ecis1915inpc-618
     2'/6x,'21-30   ....................',38x,'ecis1916'/'  if lo(34)=.tinpc-619
     3rue. go again to "cards read in subroutine eval".',9x,'ecis1917'/'inpc-620
     4  if lo(34)=.false. go to the beginning of next data set.',15x,'ecinpc-621
     5is1918'/'  note:  there are different uses of this possibility:',1inpc-622
     68x,'ecis1919'/'  *****  1) as a search stops usually before the miinpc-623
     7nimum, it can be',5x,'ecis1920'/8x,'refined by using nex positive inpc-624
     8and introducing an increment "0." ecis1921'/8x,'for any parameter,inpc-625
     9 in search or not in search.',18x,'ecis1922'/9x,'2) when searchinginpc-626
     a the minimum of the chi2 as a function of someecis1923'/8x,'fixed inpc-627
     bparameter. the next search starts with the values of the  ecis1924inpc-628
     c'/8x,'parameters in search obtained in the last search.',15x,'ecisinpc-629
     d1925'/9x,'3) when some result must be obtained for different valueinpc-630
     es of   ecis1926'/8x,'the parameters.',49x,'ecis1927'/72x,'ecis1928inpc-631
     f'/72x,'ecis1929'/'restart input: cards read in subroutine rest',28inpc-632
     gx,'ecis1930'/'********************************************',28x,'einpc-633
     hcis1931'/72x,'ecis1932'/'restart conditions',22x,'format (l1,i4,5xinpc-634
     i,2f10.5)',8x,'ecis1933'/'******************',54x,'ecis1934'/10x,'1inpc-635
     j   lo(35)  the only control which can be changed, all the',4x,'eciinpc-636
     ks1935'/14x,'others being those of last run.',27x,'ecis1936')      inpc-637
      write (mw,1089)                                                   inpc-638
 1089 format (7x,'2- 5   new maximum number of evaluations.',24x,'ecis19inpc-639
     137'/6x,'11-20   new value of ech.',41x,'ecis1938'/6x,'11-20   new inpc-640
     2value of rap.',41x,'ecis1939'/14x,'if they are less than 1., ech oinpc-641
     3r rap are not changed.',5x,'ecis1940'/72x,'ecis1941'/72x,'ecis1942inpc-642
     4'/'***************************************************************inpc-643
     5*********ecis1943'/72x,'ecis1944'/30x,'*******************',23x,'einpc-644
     6cis1945'/30x,'*  next data set  *',23x,'ecis1946'/30x,'***********inpc-645
     7********',23x,'ecis1947'/72x,'ecis1948'/6x,'"fin" in columns 1-3 tinpc-646
     8o stop the job without diagnostic.',10x,'ecis1949'/72x,'ecis1950'/inpc-647
     97x,'for any trouble, write (and even send listings) to',15x,'ecis1inpc-648
     a951'/5x,'jacques raynal/service de physique theorique/c.e.-saclay'inpc-649
     b,11x,'ecis1952'/15x,'91191 gif-sur-yvette cedex/france',24x,'ecis1inpc-650
     c953'/72x,'ecis1954'/5x,'fax: (33)(1) 69.08-81-20',43x,'ecis1955'/5inpc-651
     dx,'e-mail: raynal@dsm-mail.saclay.cea.fr',30x,'ecis1956'/72x,'ecisinpc-652
     e1957')                                                            inpc-653
      return                                                            inpc-654
      end                                                               inpc-655
c 02/06/07                                                      ecis06  lecl-000
      subroutine lecl(ncolx,ncoll,ncont,idt,lo,ipi,iph,wv,ipp,npa,pa,na,lecl-001
     1nb,nimax,nbet)                                                    lecl-002
c input of level descriptions.                                          lecl-003
c input:     ncolx:   total number of nuclear states                    lecl-004
c            ncoll:   number of coupled nuclear states                  lecl-005
c            ncont:   number of continuum for compound nucleus          lecl-006
c            idt:     free space in npa,pa                              lecl-007
c            lo(i):   logical controls:                                 lecl-008
c               lo(1)  =.true. rotational model-(.f.:vibrational model).lecl-009
c               lo(2)  =.true. second order vibrational or constrained  lecl-010
c                              asymmetric rotational model.             lecl-011
c               lo(3)  =.true. anharmonic vibrational or asymmetric     lecl-012
c                              rotational model.                        lecl-013
c               lo(7)  =.true. matrix element and form factors read.    lecl-014
c               lo(8)  =.true. relativistic kinematics.                 lecl-015
c               lo(10) =.true. dispersion relations for potentials.     lecl-016
c               lo(15) =.true. reduced nuclear matrix elements read.    lecl-017
c               lo(18) =.true. projectile-target antisymmetrisation.    lecl-018
c               lo(98) =.true. q added to the mass of residual nucleus  lecl-019
c                              or outgoing particle.                    lecl-020
c               lo(100)=.true. dirac equation.                          lecl-021
c               lo(109)=.true. for dirac potentials.                    lecl-022
c               lo(122)=.true. identical particles without spin.        lecl-023
c               lo(123)=.true. identical particles with spin.           lecl-024
c output:    ipi:     description of levels in ipi(j,*):                lecl-025
c                     parity (0 for + and 1 for -) for j=1.             lecl-026
c                     multiplicity of incident particle for j=2.        lecl-027
c                     multiplicity of the target for j=3.               lecl-028
c                     product of charges for j=4.                       lecl-029
c                     index of potential for j=5.                       lecl-030
c            iph:     description of vibrational levels. for vibrationallecl-031
c                     model, iph(i,j) is the number of phonons for      lecl-032
c                     i=1, j=1,ncoll. if iph(1,j) is 3, the state       lecl-033
c                     is a mixture of 1 and 2-phonons states.           lecl-034
c                     for rotational model, iph(1,j) is 1 for a         lecl-035
c                     vibrational band and 2 for a mixture with the     lecl-036
c                     ground state band. single phonon or address of    lecl-037
c                     the description of mixed states in iph(2,j).      lecl-038
c            wv:      description of the levels in wv(j,*):             lecl-039
c                     mass of incident particle for j=1.                lecl-040
c                     mass of the target for j=2.                       lecl-041
c                     energy in the centre of mass in mev for j=3.      lecl-042
c                     (temporary) particle excitation fraction for j=4. lecl-043
c                     energy in the laboratory system in mev for j=13.  lecl-044
c            ipp(i,j):first level using potential j for i=1 (temporary).lecl-045
c                     -1 to read dispersion parameters for i=2.         lecl-046
c            npa,pa:  storage of nuclear parameters equivalent by call. lecl-047
c            na:      number of integer parameter informations.         lecl-048
c            nb:      storage in roam for asymmetric rotation.          lecl-049
c            nimax:   twice maximum sum of spins target+particle.       lecl-050
c            nbet:    number of different phonons.                      lecl-051
c            lo:      logical controls, defined here:                   lecl-052
c                     lo(122) and lo(123).                              lecl-053
c                                                                       lecl-054
c for the common  /coupl/ see calx.                                     lecl-055
c for the common  /dcons/ see calc.                                     lecl-056
c for the common  /pote2/ see redm.                                     lecl-057
c                                                                       lecl-058
c significance of the quantities in common /dcons/:                     lecl-059
c  cm:        atomic mass in mev.                                       lecl-060
c   used:     cm.                                                       lecl-061
c                                                                       lecl-062
c significance of the quantities in common /coupl/:                     lecl-063
c  npp:       number of optical potentials.                             lecl-064
c  nva:       number of nuclear parameters.                             lecl-065
c   defined:  nva.                                                      lecl-066
c   used:     npp.                                                      lecl-067
c                                                                       lecl-068
c significance of the quantities in common /pote2/:                     lecl-069
c  npx:       number of potentials taking into account dispersion.      lecl-070
c   defined:  ntx.                                                      lecl-071
c                                                                       lecl-072
c***********************************************************************lecl-073
      implicit real*8 (a-h,o-z)                                         lecl-074
      logical lo(150)                                                   lecl-075
      character*1 sigm,spi                                              lecl-076
      dimension ipi(11,*),iph(2,*),wv(22,*),ipp(34,*),npa(2,*),pa(*)    lecl-077
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   lecl-078
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            lecl-079
      common /pote2/ ity(12),invt,intv,insl,npx                         lecl-080
      common /inout/ mr,mw,ms                                           lecl-081
      data sigm /'-'/                                                   lecl-082
c output of nuclear model.                                              lecl-083
      if (lo(7)) go to 3                                                lecl-084
      if (lo(1)) go to 2                                                lecl-085
      if (lo(3)) go to 1                                                lecl-086
      if (.not.lo(2)) write (mw,1000)                                   lecl-087
      if (lo(2)) write (mw,1001)                                        lecl-088
      go to 4                                                           lecl-089
    1 write (mw,1002)                                                   lecl-090
      if (.not.lo(15)) go to 29                                         lecl-091
      go to 4                                                           lecl-092
    2 if (.not.lo(3)) write (mw,1003)                                   lecl-093
      if (lo(3)) write (mw,1004)                                        lecl-094
      go to 4                                                           lecl-095
    3 write (mw,1005)                                                   lecl-096
c input of level description.                                           lecl-097
    4 nva=0                                                             lecl-098
      na=0                                                              lecl-099
      nb=0                                                              lecl-100
      nbet=0                                                            lecl-101
      nimax=0                                                           lecl-102
      do 5 iv=1,npp                                                     lecl-103
      ipp(1,iv)=-1                                                      lecl-104
    5 ipp(2,iv)=-1                                                      lecl-105
      if (lo(98).and.lo(8)) write (mw,1006)                             lecl-106
      do 27 iv=1,ncolx                                                  lecl-107
      read (mr,1007) sp2,n,k,spi,e,sp1,wv(1,iv),wv(2,iv),sp3,wv(4,iv)   lecl-108
      ipi(2,iv)=1+idint(2.00001d0*sp1)                                  lecl-109
      ipi(3,iv)=1+idint(2.00001d0*sp2)                                  lecl-110
      ipi(4,iv)=idint(sp3)                                              lecl-111
      if (iv.ne.1) go to 8                                              lecl-112
      wv(13,1)=e                                                        lecl-113
      if (k.eq.0) k=1                                                   lecl-114
      if (lo(18).and.((ipi(3,1).ne.ipi(2,1)).or.(spi.eq.sigm).or.lo(100)lecl-115
     1)) go to 30                                                       lecl-116
      lo(122)=lo(18).and.ipi(2,1)*ipi(3,1).eq.1                         lecl-117
      lo(123)=lo(18).and.ipi(2,1)*ipi(3,1).ne.1                         lecl-118
      if (lo(8)) go to 6                                                lecl-119
      wv(3,1)=e*wv(2,1)/(wv(1,1)+wv(2,1))                               lecl-120
      wv(4,1)=dsqrt(ck*wv(3,1)*wv(1,1)*wv(2,1)/(wv(1,1)+wv(2,1)))       lecl-121
      go to 7                                                           lecl-122
c relativistic c.-m. energy ecm=sqrt((m1+m2)**2+2*m2*elab))-m1-m2.      lecl-123
    6 wv(3,1)=cm*(dsqrt((wv(1,1)+wv(2,1))**2+2.d0*wv(2,1)*e/cm)-wv(1,1)-lecl-124
     1wv(2,1))                                                          lecl-125
      wv(4,1)=dsqrt(0.125d0*ck*wv(3,1)*(wv(3,1)/cm+2.d0*wv(1,1)+2.d0*wv(lecl-126
     12,1))*(wv(3,1)/cm+2.d0*wv(1,1))*(wv(3,1)/cm+2.d0*wv(2,1)))/(wv(3,1lecl-127
     2)/cm+wv(1,1)+wv(2,1))                                             lecl-128
    7 am3=wv(2,1)**.33333333333333d0                                    lecl-129
      bm3=wv(1,1)**.33333333333333d0                                    lecl-130
      write (mw,1008) wv(2,1),sp3,am3,wv(1,1),sp1,bm3                   lecl-131
      write (mw,1009) e,wv(3,1)                                         lecl-132
      e=0.d0                                                            lecl-133
      go to 13                                                          lecl-134
    8 if (wv(1,iv).eq.0.d0) go to 9                                     lecl-135
      am3=wv(2,iv)**.33333333333333d0                                   lecl-136
      bm3=wv(1,iv)**.33333333333333d0                                   lecl-137
      write (mw,1008) wv(2,iv),sp3,am3,wv(1,iv),sp1,bm3                 lecl-138
      go to 10                                                          lecl-139
    9 wv(1,iv)=wv(1,iv-1)                                               lecl-140
      wv(2,iv)=wv(2,iv-1)                                               lecl-141
      ipi(2,iv)=ipi(2,iv-1)                                             lecl-142
      ipi(4,iv)=ipi(4,iv-1)                                             lecl-143
      sp2=0.5d0*dfloat(ipi(3,iv)-1)                                     lecl-144
      sp3=ipi(4,iv)                                                     lecl-145
   10 wv(3,iv)=wv(3,1)-e                                                lecl-146
      if (.not.(lo(98).and.lo(8))) go to 11                             lecl-147
      ep=e*wv(13,iv)                                                    lecl-148
      et=e-ep                                                           lecl-149
      wv(1,iv)=wv(1,1)+(wv(2,1)-wv(2,iv))+ep/cm                         lecl-150
      wv(2,iv)=wv(2,1)+(wv(1,1)-wv(1,iv))+et/cm                         lecl-151
   11 if (k.eq.0) k=ipi(5,iv-1)                                         lecl-152
      if (lo(8)) go to 12                                               lecl-153
      wv(13,iv)=wv(3,iv)*(wv(1,iv)+wv(2,iv))/wv(2,iv)                   lecl-154
      go to 13                                                          lecl-155
   12 wv(13,iv)=wv(3,iv)*(wv(3,iv)/(2.d0*cm)+wv(1,iv)+wv(2,iv))/wv(2,iv)lecl-156
   13 if (lo(109).and.ipi(2,iv).ne.2) go to 31                          lecl-157
      if (k.gt.npp.or.k.le.0) go to 32                                  lecl-158
      ipi(5,iv)=k                                                       lecl-159
      if (ipp(1,k).eq.-1) ipp(1,k)=iv                                   lecl-160
      nimax=max0(nimax,ipi(2,iv)+ipi(3,iv))                             lecl-161
      ipi(1,iv)=0                                                       lecl-162
      if (spi.eq.sigm) ipi(1,iv)=1                                      lecl-163
      if (iv.le.ncoll) go to 15                                         lecl-164
c uncoupled states for compound nucleus.                                lecl-165
      if (ncont+iv.gt.ncolx) go to 14                                   lecl-166
      write (mw,1010) iv,sp2,spi,e,k                                    lecl-167
      go to 27                                                          lecl-168
c continuum for compound nucleus.                                       lecl-169
   14 write (mw,1011) iv,sp2,spi,e,k                                    lecl-170
      go to 27                                                          lecl-171
   15 if (lo(7)) go to 17                                               lecl-172
      nnpa=0                                                            lecl-173
      nnva=0                                                            lecl-174
      if ((lo(1).eqv.(n.eq.0)).or.(lo(3).and.(.not.lo(1)))) go to 16    lecl-175
c input of phonons in harmonic vibrational or symmetric rotational modellecl-176
      read (mr,1012) iph(1,iv),iph(2,iv),i2,i3                          lecl-177
      nbet=max0(nbet,iph(2,iv),i2,i3)                                   lecl-178
      m=iph(1,iv)+1                                                     lecl-179
      go to ( 17 , 19 , 20 , 20 ) , m                                   lecl-180
c ground state.                                                         lecl-181
   16 iph(1,iv)=0                                                       lecl-182
      if (lo(1)) go to 18                                               lecl-183
   17 write (mw,1013) iv,sp2,spi,e,k                                    lecl-184
      go to 27                                                          lecl-185
   18 write (mw,1014) iv,sp2,spi,e,k                                    lecl-186
      if (.not.lo(3)) go to 27                                          lecl-187
      nnva=(ipi(3,iv)-1)/4                                              lecl-188
      go to 21                                                          lecl-189
c 1 phonon state.                                                       lecl-190
   19 if (.not.lo(1)) write (mw,1015) iv,sp2,spi,e,k,iph(2,iv)          lecl-191
      if (lo(1)) write (mw,1016) iv,sp2,spi,e,k,iph(2,iv)               lecl-192
      go to 27                                                          lecl-193
   20 nnpa=iph(1,iv)-1                                                  lecl-194
      nnva=m-2                                                          lecl-195
      if (.not.lo(3)) nnva=nnva+1                                       lecl-196
   21 if (na+nva+nnpa+2.gt.idt) call memo('lecl',na+nva+nnpa+2,idt)     lecl-197
      if ((nva.eq.0).or.(nnpa.eq.0)) go to 23                           lecl-198
      do 22 i=nva,1,-1                                                  lecl-199
   22 pa(nnpa+na+i)=pa(na+i)                                            lecl-200
   23 if (lo(3)) go to 26                                               lecl-201
      write (mw,1013) iv,sp2,spi,e,k                                    lecl-202
c 2 phonon state.                                                       lecl-203
      na=na+1                                                           lecl-204
      npa(1,na)=iph(2,iv)                                               lecl-205
      if (lo(1)) go to 25                                               lecl-206
      iph(2,iv)=na                                                      lecl-207
      npa(2,na)=i2                                                      lecl-208
      if (m.eq.4) go to 24                                              lecl-209
      write (mw,1017) npa(1,na),npa(2,na)                               lecl-210
      go to 27                                                          lecl-211
c mixture of 1 phonon and 2 phonon state - input of mixing parameter.   lecl-212
   24 na=na+1                                                           lecl-213
      npa(1,na)=i3                                                      lecl-214
   25 nva=nva+1                                                         lecl-215
      npa(2,na)=nva                                                     lecl-216
      read (mr,1018) pa(na+nva)                                         lecl-217
      b1=0.0174532925199433d0*pa(na+nva)                                lecl-218
      c1=dcos(b1)                                                       lecl-219
      c3=dsin(b1)                                                       lecl-220
      if (.not.lo(1)) write (mw,1019) pa(na+nva),c3,npa(1,na-1),i2,c1,i3lecl-221
      if (lo(1)) write (mw,1020) pa(na+nva),c3,npa(1,na),c1             lecl-222
      go to 27                                                          lecl-223
c asymmetric rotational model - input of mixing parameters.             lecl-224
   26 if (.not.lo(1)) go to 27                                          lecl-225
      iph(1,iv)=nnva                                                    lecl-226
      iph(2,iv)=nva                                                     lecl-227
      nb=nb+nnva+1                                                      lecl-228
      if (nnva.eq.0) go to 27                                           lecl-229
      read (mr,1018) (pa(na+nva+j),j=1,nnva)                            lecl-230
      write (mw,1021) (pa(na+nva+j),j=1,nnva)                           lecl-231
      nva=nva+nnva                                                      lecl-232
   27 if (lo(1).and.lo(2).and.lo(3)) nva=max0(nva,5)                    lecl-233
      npx=0                                                             lecl-234
      do 28 i=1,ncoll                                                   lecl-235
      ipi(11,i)=ipi(5,i)                                                lecl-236
      if (lo(10)) ipi(11,i)=i                                           lecl-237
   28 npx=max0(npx,ipi(11,i))                                           lecl-238
      return                                                            lecl-239
   29 write (mw,1022)                                                   lecl-240
      go to 33                                                          lecl-241
   30 write (mw,1023)                                                   lecl-242
      go to 33                                                          lecl-243
   31 sp1=0.5d0*dfloat(ipi(2,iv)-1)                                     lecl-244
      write (mw,1024) sp1                                               lecl-245
      go to 33                                                          lecl-246
   32 write (mw,1025) k,npp                                             lecl-247
   33 write (mw,1026)                                                   lecl-248
      stop                                                              lecl-249
 1000 format (/' first order vibrational model.'/)                      lecl-250
 1001 format (/' second order vibrational model.'/)                     lecl-251
 1002 format (/' anharmonic vibrational model.'/)                       lecl-252
 1003 format (/' symmetric rotational model.'/)                         lecl-253
 1004 format (/' asymmetric rotational model.'/)                        lecl-254
 1005 format (/' external form factor model.'/)                         lecl-255
 1006 format (/' masses of input for excited states modified by "q" valulecl-256
     1e.'/)                                                             lecl-257
 1007 format (f5.2,2i2,a1,6f10.5)                                       lecl-258
 1008 format (/' target',14x,'mass =',f10.5,11x,'product of charges =',flecl-259
     16.0,11x,'at**1/3 =',1p,d15.6,0p/' incident particle',3x,'mass =',flecl-260
     210.5,3x,3x,'spin =',f4.1,3x,'ap**1/3 =',1p,d15.6)                 lecl-261
 1009 format (10x,'energy(lab) =',1p,d15.6,' mev',10x,'energy(c. m.) =',lecl-262
     1d15.6,' mev.'/)                                                   lecl-263
 1010 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-264
     14,' mev',10x,'potential',i5,6x,'***** uncoupled state *****')     lecl-265
 1011 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-266
     14,' mev',10x,'potential',i5,6x,'***** start of a continuum *****')lecl-267
 1012 format (14i5)                                                     lecl-268
 1013 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-269
     14,' mev',10x,'potential',i5)                                      lecl-270
 1014 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-271
     14,' mev',10x,'potential',i5,6x,'ground state band.')              lecl-272
 1015 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-273
     14,' mev',10x,'potential',i5,6x,' phonon state with phonon',i3)    lecl-274
 1016 format (' n =',i3,' -   spin =',f4.1,a1,' excitation energy =',f8.lecl-275
     14,' mev',10x,'potential',i5,6x,'vibrational band of phonon',i3)   lecl-276
 1017 format (23x,'2 phonons state, with phonons',i3,' and',i3)         lecl-277
 1018 format (7f10.5)                                                   lecl-278
 1019 format (23x,'mixing of 1 and 2 phonon states with',f9.3,' degrees'lecl-279
     1/23x,f10.5,' 2 phonons state, with phonons',i3,' and',i3,'  + ',f1lecl-280
     20.5,' 1 phonon state with phonon',i3)                             lecl-281
 1020 format (23x,'mixing of vibrational and ground bands with',f9.3,' dlecl-282
     1egrees'/23x,f10.5,' vibrational band of phonon',i3,' and',f10.5,' lecl-283
     2ground state band.')                                              lecl-284
 1021 format (23x,'band mixing coeff.',5f10.5)                          lecl-285
 1022 format (' the nuclear reduced matrix elements must be read in thislecl-286
     1 model.')                                                         lecl-287
 1023 format (' projectile-target antisymmetrisation valid only for spinlecl-288
     1 of particle equal to spin of target and positive parity'/49x,'andlecl-289
     2 schroedinger formalism.')                                        lecl-290
 1024 format (' particle spin',f5.1,' not allowed for dirac equation.') lecl-291
 1025 format (' potential',i3,' will not be read.total number is:',i3)  lecl-292
 1026 format (//' in lecl  ...  stop  ...')                             lecl-293
      end                                                               lecl-294
c 02/06/07                                                      ecis06  lect-000
      subroutine lect(nbet,ipi,ipp,wv,rm,idt,lo,nbeta,beta,val,fiss,gam,lect-001
     1ism,scn)                                                          lect-002
c lect reads all input except the 5 first data cards,the levels, the    lect-003
c experimental data,the search conditions,the nuclear reduced matrix    lect-004
c elements and the form factors.                                        lect-005
c input:     nbet:    number of phonons.                                lect-006
c            ipi(j,*):multiplicity of particle for j=2.                 lect-007
c                     product of charges for j=4.                       lect-008
c            ipi(1,j):first level using potential j.                    lect-009
c            wv(j,*): mass of the particle for j=1.                     lect-010
c                     mass of the target for j=2.                       lect-011
c                     energy in the centre of mass in mev for j=3.      lect-012
c                     energy in the laboratory system in mev for j=13.  lect-013
c            rm:      matching radius (value read).                     lect-014
c            idt:     length free for beta.                             lect-015
c            lo(i):   logical controls:                                 lect-016
c               lo(1)  =.true. rotational model-(.f.:vibrational model).lect-017
c               lo(3)  =.true. anharmonic vibrational or asymmetric     lect-018
c                              rotational model.                        lect-019
c               lo(4)  =.true. parametrised spin-orbit deformation.     lect-020
c               lo(5)  =.true  different deformation for each potential.lect-021
c               lo(6)  =.true. use deformation lengths.                 lect-022
c               lo(7)  =.true. matrix element and form factors read.    lect-023
c               lo(8)  =.true. relativistic kinematics.                 lect-024
c               lo(11) =.true. deformed coulomb potential.              lect-025
c               lo(12) =.true. deformed imaginary potential.            lect-026
c               lo(13) =.true. deformed real spin-orbit or tensor.      lect-027
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. lect-028
c               lo(16) =.true. heavy-ion definition of reduced radii andlect-029
c                              deformations.                            lect-030
c               lo(17) =.true. folding model.                           lect-031
c               lo(19) =.true. deformed coulomb spin-orbit potential.   lect-032
c               lo(44) =.true. coulomb corrections.                     lect-033
c               lo(46) =.true. restricted coulomb corrections.          lect-034
c               lo(66) =.true. no calculation at equidistant angles.    lect-035
c               lo(81) =.true. hauser-feshbach corrections.             lect-036
c               lo(82) =.true. old simplified compound nucleus.         lect-037
c               lo(85) =.true. fission transmission coefficients.       lect-038
c               lo(86) =.true. gamma emission in compound nucleus.      lect-039
c               lo(99) =.true. schroedinger equivalent to dirac         lect-040
c                              equation.                                lect-041
c               lo(109)=.true. for dirac potentials.                    lect-042
c output:    nbet:    number of phonons plus deformations.              lect-043
c            rm:      matching radius (actual value).                   lect-044
c            nbeta:   quantum numbers of deformations in nbeta(j,*) for lect-045
c                     j=17,18.                                          lect-046
c            beta:    in equivalence by call with nbeta: nuclear        lect-047
c                     deformation for potentials in beta(j,*) for j=1,8.lect-048
c            val:     (25 optical +9 folding parameters)* npp           lect-049
c            fiss:    fission data for compound nucleus                 lect-050
c            gam:     gamma data for compound nucleus                   lect-051
c            ism:     number of integration steps                       lect-052
c            scn:     descriptions of level densities                   lect-053
c            lo:      logical controls:                                 lect-054
c               lo(11) =.true. deformed coulomb potential.              lect-055
c               lo(13) =.true. deformed real spin-orbit or tensor.      lect-056
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. lect-057
c               lo(19) =.true. deformed coulomb spin-orbit potential.   lect-058
c               lo(86) =.true. gamma emission in compound nucleus.      lect-059
c               lo(101)=.true. there is a real spin-orbit potential.    lect-060
c               lo(102)=.true. there is an imaginary spin-orbit         lect-061
c                              potential.                               lect-062
c               lo(103)=.true. there is a coulomb spin-orbit potential. lect-063
c               lo(108)=.true. diagonal coulomb corrections are needed. lect-064
c               lo(129)=.true. real spin-orbit or dirac equation.       lect-065
c               lo(130)=.true. imaginary spin-orbit or dirac equation.  lect-066
c                                                                       lect-067
c the common /angul/ is used in calx, lect, sche, lcsp, resu and rest.  lect-068
c                                                                       lect-069
c for the commons /conve/ and /coupl/ see calx.                         lect-070
c for the common  /ncomp/ see calc.                                     lect-071
c                                                                       lect-072
c significance of the quantities in common /angul/:                     lect-073
c  theta1:    first angle for computation at equidistant angles.        lect-074
c  dtheta:    step for computation at equidistant angles.               lect-075
c  theta2:    last angle for computation at equidistant angles.         lect-076
c  dthe:      averaging angle.                                          lect-077
c  ncj:       number of factorisations of 1/(1-cos(theta)) in amplitude.lect-078
c  nl(1):     power of (1-cos(theta)) for the expansion in legendre     lect-079
c             polynomials of the interference between coulomb and       lect-080
c             nuclear elastic scattering. power of (1-cos(theta)**2)    lect-081
c             if lo(18) is .true..                                      lect-082
c  nl(2):     number of legendre polynomials for elastic scattering of  lect-083
c             charged particles.                                        lect-084
c  nl(3):     number of legendre polynomials for elastic scattering of  lect-085
c             uncharged particles, inelastic scattering and compound    lect-086
c             nucleus.                                                  lect-087
c  jmm(1):    number of channel spins used for minimum chi2.            lect-088
c  jmm(2):    number of l for compound nucleus for minimum chi2.        lect-089
c   defined:  theta1,dtheta,theta2,dthe                                 lect-090
c   used:     theta1,dtheta,theta2,dthe                                 lect-091
c   not used: ncj,nl,jmm.                                               lect-092
c                                                                       lect-093
c significance of the quantities in common /conve/:                     lect-094
c  h:         step size for integration.                                lect-095
c  aconv:     convergence criterion for potential and function.         lect-096
c   defined:  h,aconv.                                                  lect-097
c   used:     h,aconv.                                                  lect-098
c                                                                       lect-099
c significance of the quantities in common /coupl/:                     lect-100
c  iqm:       maximum l-value of deformation in rotational model.       lect-101
c  iqmax:     maximum l-expansion in rotational model.                  lect-102
c  npp:       number of optical potentials.                             lect-103
c  nspin:     twice the k-value of the rotational band.                 lect-104
c   defined:  iqm,iqmax,nspin.                                          lect-105
c   used:     npp.                                                      lect-106
c                                                                       lect-107
c significance of the quantities in common /ncomp/:                     lect-108
c  nfiss:     number of fission transmission coefficients.              lect-109
c  nrd:       number of gamma transmission coefficients.                lect-110
c  ncont:     number of continuum for compound nucleus.                 lect-111
c  ncons:     number of level densities needed.                         lect-112
c  ncolx:     total number of levels without discretisation.            lect-113
c  az(6):     deformed spin-orbit parameters. see also comment in       lect-114
c             input description and subroutine quan.                    lect-115
c  bz(6)      hauser-feshbach and moldauer's parameters described below.lect-116
c   bz(1):    square root of elastic enhancement.                       lect-117
c   bz(2):    if lo(82)=.true., spin cut-off parameter.                 lect-118
c             if lo(82)=.false., particle degrees of freedom.           lect-119
c   bz(3):    square root of level density parameter. if lo(82)=lo(87)= lect-120
c             .false., parameter bz(3) in moldauer's formula of input   lect-121
c             description.                                              lect-122
c   bz(4):    if lo(82)=lo(87)=.false., parameter bz(4) in same formula.lect-123
c   bz(5):    if lo(82)=lo(87)=.false., parameter bz(5) in same formula.lect-124
c  tg0:       slow s-wave neutron gamma width/spacing for normalisation.lect-125
c  bn:        neutron separation energy.                                lect-126
c  fnug:      radiative degrees of freedom.                             lect-127
c  egd:       energy of the giant dipole resonance.                     lect-128
c  ggd:       resonance width.                                          lect-129
c   defined:  az,bz,tg0,bn,fnug,egd,ggd.                                lect-130
c   used:     nfiss,nrd,ncont,ncons,ncolx,az,bz,tg0,bn,fnug,egd,ggd.    lect-131
c                                                                       lect-132
c***********************************************************************lect-133
      implicit real*8 (a-h,o-z)                                         lect-134
      dimension ipi(11,*),ipp(34,*),wv(22,*),nbeta(18,*),beta(9,*),val(4lect-135
     12,*),fiss(2,*),gam(*),scn(7,*),ro(6)                              lect-136
      character*4 aleg(6),bleg(2)                                       lect-137
      logical lo(150),lt(6)                                             lect-138
      common /angul/ theta1,theta2,dtheta,dthe,ncj,nl(3),jmm(2)         lect-139
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       lect-140
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   lect-141
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqlect-142
     1,acn1,acn2,az(6),bz(5),tg0,bn,fnug,egd,ggd,tg1,sgsq               lect-143
      common /inout/ mr,mw,ms                                           lect-144
      data bleg /'not ','    '/                                         lect-145
      iqm=0                                                             lect-146
      if (nbet.eq.0) go to 4                                            lect-147
c input of phonon deformations in vibrational and rotational models     lect-148
      do 3 i=1,nbet                                                     lect-149
      read (mr,1000) nbeta(17,i),nbeta(18,i),beta(1,i),k                lect-150
      do 1 j=2,8                                                        lect-151
    1 beta(j,i)=beta(1,i)                                               lect-152
      if (lo(5)) read (mr,1001) (beta(j,i),j=2,8)                       lect-153
      write (mw,1002) i,nbeta(17,i),nbeta(18,i),(beta(j,i),j=1,8)       lect-154
      if (.not.lo(16)) go to 3                                          lect-155
      if (k.eq.0) k=1                                                   lect-156
      k=min0(k,ncolx)                                                   lect-157
      am3=wv(2,k)**.33333333333333d0                                    lect-158
      bm3=wv(1,k)**.33333333333333d0                                    lect-159
      cm3=am3/(am3+bm3)                                                 lect-160
      dm3=1.d0                                                          lect-161
      if (lo(6)) dm3=cm3                                                lect-162
      do 2 j=1,6                                                        lect-163
    2 beta(j,i)=beta(j,i)*cm3/dm3                                       lect-164
      beta(7,i)=beta(7,i)*cm3**nbeta(17,i)/dm3                          lect-165
      beta(8,i)=beta(8,i)*cm3**nbeta(17,i)/dm3                          lect-166
      write (mw,1003) k,(beta(j,i),j=1,8)                               lect-167
    3 continue                                                          lect-168
    4 if (lo(7)) go to 18                                               lect-169
      if (.not.lo(1)) go to 13                                          lect-170
c input of deformations for the rotational model                        lect-171
      read (mr,1000) iqm,iqmax,aspin,k                                  lect-172
      nspin=idint(2.d0*aspin+0.1d0)                                     lect-173
      iq=nbet+1                                                         lect-174
      jq=nbet+iqm/2                                                     lect-175
      if (.not.lo(3)) go to 5                                           lect-176
      jq=nbet+iqm                                                       lect-177
      if ((iqm.gt.35).or.(iqmax.gt.8)) go to 33                         lect-178
    5 if (9*jq.gt.idt) call memo('lect',idt,9*jq)                       lect-179
      read (mr,1001) (beta(1,i),i=iq,jq)                                lect-180
      m=0                                                               lect-181
      l=0                                                               lect-182
      do 9 i=iq,jq                                                      lect-183
      if (lo(3)) go to 6                                                lect-184
      l=2*(i-nbet)                                                      lect-185
      go to 7                                                           lect-186
    6 m=m+2                                                             lect-187
      if (m.le.l) go to 7                                               lect-188
      l=l+2                                                             lect-189
      m=0                                                               lect-190
    7 nbeta(17,i)=l                                                     lect-191
      nbeta(18,i)=m                                                     lect-192
      do 8 j=2,8                                                        lect-193
    8 beta(j,i)=beta(1,i)                                               lect-194
    9 continue                                                          lect-195
      if (lo(5)) read (mr,1001) ((beta(j,i),j=2,8),i=iq,jq)             lect-196
      write (mw,1004) iqmax,aspin                                       lect-197
      write (mw,1005) (i,nbeta(17,i),nbeta(18,i),(beta(j,i),j=1,8),i=iq,lect-198
     1jq)                                                               lect-199
      if (.not.lo(16)) go to 12                                         lect-200
      if (k.eq.0) k=1                                                   lect-201
      k=min0(k,ncolx)                                                   lect-202
      am3=wv(2,k)**.33333333333333d0                                    lect-203
      bm3=wv(1,k)**.33333333333333d0                                    lect-204
      cm3=am3/(am3+bm3)                                                 lect-205
      dm3=1.d0                                                          lect-206
      if (lo(6)) dm3=cm3                                                lect-207
      do 11 i=iq,jq                                                     lect-208
      if (nbeta(18,i).ne.0) go to 11                                    lect-209
      do 10 k=1,6                                                       lect-210
   10 beta(k,i)=beta(k,i)*cm3/dm3                                       lect-211
      beta(7,i)=beta(7,i)*cm3**nbeta(17,i)/dm3                          lect-212
      beta(8,i)=beta(8,i)*cm3**nbeta(17,i)/dm3                          lect-213
   11 continue                                                          lect-214
      write (mw,1006) k                                                 lect-215
      write (mw,1005) (i,nbeta(17,i),nbeta(18,i),(beta(j,i),j=1,8),i=iq,lect-216
     1jq)                                                               lect-217
   12 nbet=jq                                                           lect-218
      go to 18                                                          lect-219
c anharmonic vibrational model with different deformations.             lect-220
   13 if (.not.lo(3)) go to 18                                          lect-221
      if (36.gt.idt) call memo('lect',idt,36)                           lect-222
      write (mw,1007)                                                   lect-223
      do 15 i=1,4                                                       lect-224
      do 14 j=1,8                                                       lect-225
   14 beta(j,i)=1.d0                                                    lect-226
      nbeta(17,i)=0                                                     lect-227
      nbeta(18,i)=0                                                     lect-228
      if (lo(5)) read (mr,1001) (beta(j,i),j=1,8)                       lect-229
   15 write (mw,1008) i,nbeta(17,i),(beta(j,i),j=1,8)                   lect-230
      nbet=4                                                            lect-231
      if (.not.lo(16)) go to 18                                         lect-232
      read (mr,1009) (nbeta(17,j),j=1,4),k                              lect-233
      if (k.eq.0) k=1                                                   lect-234
      k=min0(k,ncolx)                                                   lect-235
      am3=wv(2,k)**.33333333333333d0                                    lect-236
      bm3=wv(1,k)**.33333333333333d0                                    lect-237
      cm3=am3/(am3+bm3)                                                 lect-238
      dm3=1.d0                                                          lect-239
      if (lo(6)) dm3=cm3                                                lect-240
      write (mw,1006) k                                                 lect-241
      do 17 i=2,4                                                       lect-242
      if (nbeta(17,i).eq.0) nbeta(17,i)=2                               lect-243
      if (nbeta(17,i).lt.0) nbeta(17,i)=0                               lect-244
      do 16 j=1,6                                                       lect-245
   16 beta(j,i)=beta(j,i)*(cm3/dm3)**(i-1)                              lect-246
      beta(7,i)=beta(7,i)*(cm3**nbeta(17,i)/dm3)**(i-1)                 lect-247
      beta(8,i)=beta(8,i)*(cm3**nbeta(17,i)/dm3)**(i-1)                 lect-248
   17 write (mw,1010) i,nbeta(17,i),(beta(j,i),j=1,8)                   lect-249
c input of optical model parameters.                                    lect-250
   18 w2=10.d20                                                         lect-251
      lo(101)=.false.                                                   lect-252
      lo(102)=.false.                                                   lect-253
      lo(103)=.false.                                                   lect-254
      lo(108)=.false.                                                   lect-255
      lt(4)=.true.                                                      lect-256
      lt(6)=.true.                                                      lect-257
      w1=0.d0                                                           lect-258
      w3=wv(4,1)/(aconv*wv(3,1))                                        lect-259
      do 21 ip=1,npp                                                    lect-260
      ij=ipp(1,ip)                                                      lect-261
      if (ij.ne.-1) go to 19                                            lect-262
      ipp(1,ip)=1                                                       lect-263
      write (mw,1011) ip                                                lect-264
      ij=1                                                              lect-265
   19 if (lo(7)) go to 21                                               lect-266
      am3=wv(2,ij)**.33333333333333d0                                   lect-267
      if (lo(16)) am3=am3+wv(1,ij)**.33333333333333d0                   lect-268
      write (mw,1012) ip,am3                                            lect-269
      do 20 i=1,6                                                       lect-270
      aleg(i)=bleg(2)                                                   lect-271
      read (mr,1013) val(4*i-3,ip),ro(i),val(4*i-1,ip),val(4*i,ip)      lect-272
      val(4*i-2,ip)=am3*ro(i)                                           lect-273
      if (val(4*i-3,ip).eq.0.d0) go to 20                               lect-274
      w1=dmax1(w1,val(4*i-2,ip)+dlog(w3*dabs(val(4*i-3,ip)))*val(4*i-1,ilect-275
     1p))                                                               lect-276
      w2=dmin1(w2,val(4*i-1,ip))                                        lect-277
   20 continue                                                          lect-278
      lt(1)=ipi(2,ij).eq.1.or.val(17,ip).eq.0.d0                        lect-279
      lt(2)=ipi(2,ij).eq.1.or.val(21,ip).eq.0.d0                        lect-280
      lo(101)=lo(101).or.(.not.lt(1))                                   lect-281
      lo(102)=lo(102).or.(.not.lt(2))                                   lect-282
c output of optical parameters.                                         lect-283
      if (.not.lo(12)) aleg(2)=bleg(1)                                  lect-284
      if (lt(1).or.(.not.lo(13))) aleg(5)=bleg(1)                       lect-285
      if (lt(2).or.(.not.lo(14))) aleg(6)=bleg(1)                       lect-286
      aleg(4)=aleg(2)                                                   lect-287
      write (mw,1014) (aleg(i),val(4*i-3,ip),val(4*i-2,ip),ro(i),val(4*ilect-288
     1-1,ip),val(4*i,ip),i=1,6)                                         lect-289
      read (mr,1013) ro(1),val(27,ip),val(33,ip),val(28,ip)             lect-290
      read (mr,1013) val(29,ip),ro(2),val(31,ip),val(32,ip)             lect-291
      if (lo(99)) val(27,ip)=0.d0                                       lect-292
      if (lo(99)) val(31,ip)=0.d0                                       lect-293
      val(25,ip)=ipi(4,ij)                                              lect-294
      val(26,ip)=am3*ro(1)                                              lect-295
      lt(3)=val(25,ip).eq.0.d0                                          lect-296
      lt(4)=lt(3).and.lt(4)                                             lect-297
      aleg(1)=bleg(2)                                                   lect-298
      if (lt(3).or.(.not.lo(11))) aleg(1)=bleg(1)                       lect-299
      val(30,ip)=am3*ro(2)                                              lect-300
      lt(5)=val(29,ip).eq.0.or.ipi(2,ij).eq.1                           lect-301
      lo(103)=lo(103).or.(.not.lt(5))                                   lect-302
      lt(6)=lt(5).and.lt(6)                                             lect-303
      aleg(2)=bleg(2)                                                   lect-304
      if (lt(5).or.(.not.lo(19))) aleg(2)=bleg(1)                       lect-305
      write (mw,1015) (aleg(i),val(4*i+21,ip),val(4*i+22,ip),ro(i),val(4lect-306
     1*i+23,ip),val(4*i+24,ip),i=1,2),val(33,ip)                        lect-307
      lo(108)=lo(108).or.val(29,ip).ne.0.d0.or.(lo(109).and.val(19,ip).nlect-308
     1e.0.d0)                                                           lect-309
      w1=dmax1(w1,val(26,ip)+10.d0*val(27,ip),val(30,ip)+10.d0*val(31,iplect-310
     1))                                                                lect-311
      if (val(27,ip).ne.0.d0) w2=dmin1(w2,val(27,ip))                   lect-312
      if (val(33,ip).ne.0.d0) w2=dmin1(w2,val(33,ip))                   lect-313
      if (.not.lo(17)) go to 21                                         lect-314
c input of folding parameters.                                          lect-315
      read (mr,1016) (val(i,ip),i=34,42)                                lect-316
      write (mw,1017) (val(i,ip),i=34,42)                               lect-317
   21 continue                                                          lect-318
      if (lo(99)) lo(102)=.true.                                        lect-319
      if (.not.lo(7)) go to 23                                          lect-320
      do 22 ij=1,ncolx                                                  lect-321
      lt(4)=lt(4).and.ipi(4,ij).eq.0                                    lect-322
      lt(6)=lt(6).and.ipi(2,ij).eq.1                                    lect-323
   22 lo(102)=lo(102).or.ipi(2,ij).ne.1                                 lect-324
      w1=20.d0                                                          lect-325
      lo(101)=lo(102)                                                   lect-326
      lo(103)=lo(102).and.(.not.lt(6))                                  lect-327
      lo(108)=lo(109).or.lo(103)                                        lect-328
   23 lo(101)=lo(101).or.lo(102).or.lo(103)                             lect-329
      lo(129)=lo(101).or.lo(109)                                        lect-330
      lo(130)=lo(102).or.lo(109)                                        lect-331
      lo(13)=lo(13).and.lo(101)                                         lect-332
      lo(14)=lo(14).and.lo(102)                                         lect-333
      lo(11)=lo(11).and.(.not.lt(4))                                    lect-334
      lo(19)=lo(19).and.(.not.lt(6))                                    lect-335
      if (lo(19)) lo(11)=.true.                                         lect-336
      lo(108)=lo(108).or.lo(44)                                         lect-337
      if ((.not.lo(44)).and.lo(46)) lo(108)=.false.                     lect-338
c default value of matching radius: max(r*a**1/3+10*a).                 lect-339
c default value for integration step: min(min(a)/2,1/(2*k)).            lect-340
      if (rm.le.0.d0) rm=w1                                             lect-341
      if (h.le.0.d0) h=dmin1(w2/2.d0,0.5d0/wv(4,1))                     lect-342
      ism=idint(rm/h+0.5d0)                                             lect-343
      h=dfloat(ism)                                                     lect-344
      h=rm/h                                                            lect-345
      rm=h*ism                                                          lect-346
      write (mw,1018) h,rm                                              lect-347
      if (lo(51)) write (67,1018) h,rm                                  ak000000
      if (lo(66)) go to 24                                              lect-348
c input of limits for calculation at equidistant angles.                lect-349
      read (mr,1001) theta1,dtheta,theta2,dthe                          lect-350
      if (dtheta.eq.0.d0) dtheta=1.d0                                   lect-351
      if ((theta2-theta1)*dtheta.lt.0.d0) dtheta=-dtheta                lect-352
      write (mw,1019) theta1,dtheta,theta2,dthe                         lect-353
c input of deformed spin-orbit parameters.                              lect-354
   24 az(1)=0.d0                                                        lect-355
      az(2)=1.d0                                                        lect-356
      az(3)=1.d0                                                        lect-357
      az(4)=0.d0                                                        lect-358
      az(5)=1.d0                                                        lect-359
      az(6)=1.d0                                                        lect-360
      if (.not.lo(4)) go to 25                                          lect-361
      read (mr,1001) az                                                 lect-362
      write (mw,1020) az                                                lect-363
   25 if (.not.lo(81)) go to 32                                         lect-364
      read (mr,1001) bz                                                 lect-365
      if (bz(1).eq.0.d0) bz(1)=1.4142d0                                 lect-366
      if (.not.lo(82)) go to 26                                         lect-367
      if (bz(2).eq.0.d0) bz(2)=3.5d0                                    lect-368
      if (bz(3).eq.0.d0) bz(3)=100.d0                                   lect-369
      write (mw,1021) (bz(i),i=1,3)                                     lect-370
      go to 32                                                          lect-371
   26 if (bz(3).eq.0.d0) bz(3)=1.212d0                                  lect-372
      if (bz(4).eq.0.d0) bz(4)=0.78d0                                   lect-373
      if (bz(5).eq.0.d0) bz(5)=0.228d0                                  lect-374
      write (mw,1022) (bz(i),i=1,5)                                     lect-375
      if (.not.lo(85)) go to 28                                         lect-376
      write (mw,1023) nfiss                                             lect-377
      do 27 i=1,nfiss                                                   lect-378
      read (mr,1001) fiss(1,i),fiss(2,i)                                lect-379
      if (fiss(2,i).lt.0.5d0) fiss(2,i)=0.d0                            lect-380
   27 write (mw,1024) fiss(1,i),fiss(2,i)                               lect-381
   28 if (.not.lo(86)) go to 30                                         lect-382
      write (mw,1025)                                                   lect-383
      if (nrd.gt.0) go to 29                                            lect-384
      read (mr,1001) tg0,bn,fnug,egd,ggd                                lect-385
      read (mr,1001) scn(7,1),(scn(i,1),i=1,6)                          lect-386
      if (bn.eq.0.d0) bn=8.d0                                           lect-387
      if (fnug.lt.1.d0) fnug=20.d0                                      lect-388
      if (tg0.eq.0.d0) lo(86)=.false.                                   lect-389
      write (mw,1026) tg0,bn,fnug,egd,ggd                               lect-390
      j=1                                                               lect-391
      write (mw,1027) j,(scn(i,j),i=1,7)                                lect-392
      na=idint(wv(2,1)+wv(1,1)+.5d0)                                    lect-393
      call lden(na,scn(1,1))                                            lect-394
      go to 30                                                          lect-395
   29 read (mr,1001) (gam(i),i=1,nrd)                                   lect-396
      write (mw,1028) (gam(i),i=1,nrd)                                  lect-397
   30 if (ncont.eq.0) go to 32                                          lect-398
      write (mw,1029)                                                   lect-399
      j1=1+ncons-ncont                                                  lect-400
      do 31 j=j1,ncons                                                  lect-401
      read (mr,1001) scn(7,j),(scn(i,j),i=1,6)                          lect-402
      write (mw,1027) j,(scn(i,j),i=1,7)                                lect-403
      na=idint(wv(2,ncolx+j-ncons)+.5d0)                                lect-404
   31 call lden(na,scn(1,j))                                            lect-405
   32 return                                                            lect-406
   33 write (mw,1030) iqm,iqmax                                         lect-407
      stop                                                              lect-408
 1000 format (2i5,f10.5,i5)                                             lect-409
 1001 format (7f10.5)                                                   lect-410
 1002 format (10x,'phonon',i3,5x,'l =',i3,5x,'k =',i3,5x,'beta =',8f8.5)lect-411
 1003 format (12x,'after heavy ion correction i =',i2,'  beta =',8f8.5) lect-412
 1004 format (/10x,'multipole expansion up to iqmax =',i3,20x,'k =',f7.2lect-413
     1,' band.')                                                        lect-414
 1005 format (/' beta(i,j) for  l   k ',8x,'v',9x,'w',8x,'vs',8x,'ws',7xlect-415
     1,'vso',7x,'wso',6x,'coul s.o. coul'/(5x,i5,5x,i2,2x,i2,2x,8f10.5))lect-416
 1006 format (/10x,'after heavy ion correction i =',i3/)                lect-417
 1007 format (/10x,'ratios of anharmonic deformations'/25x,'v',9x,'w',8xlect-418
     1,'vs',8x,'ws',7x,'vso',7x,'wso',6x,'coul s.o. coul')              lect-419
 1008 format (' order',i3,6x,i3,2x,8f10.5)                              lect-420
 1009 format (14i5)                                                     lect-421
 1010 format (' order',i3,'  iq =',i3,2x,8f10.5)                        lect-422
 1011 format (/' ***** no state for the potential',i3,' *** we use the glect-423
     1round state'/)                                                    lect-424
 1012 format (//' optical potentials  **',i3,' **     reduced radius mullect-425
     1tiplied by  ',1p,d15.6/)                                          lect-426
 1013 format (4f10.5)                                                   lect-427
 1014 format (2x,a4,'deformed  volume/scalar real potential'/' depth',f1lect-428
     12.6,' mev   radius',f10.6,' fermi (reduced value',f9.6,')   diffuslect-429
     2eness',f9.6,' fermi at the power (1+',f9.6,')'//2x,a4,'deformed  vlect-430
     3olume/scalar imaginary potential'/' depth',f12.6,' mev   radius',flect-431
     410.6,' fermi (reduced value',f9.6,')   diffuseness',f9.6,' fermi alect-432
     5t the power (1+',f9.6,')'//2x,a4,'deformed  surface/vector real polect-433
     6tential'/' depth',f12.6,' mev   radius',f10.6,' fermi (reduced vallect-434
     7ue',f9.6,')   diffuseness',f9.6,' fermi at the power (1+',f9.6,')'lect-435
     8//2x,a4,'deformed  surface/vector imaginary potential'/' depth',f1lect-436
     92.6,' mev   radius',f10.6,' fermi (reduced value',f9.6,')   diffuslect-437
     aeness',f9.6,' fermi at the power (1+',f9.6,')'//2x,a4,'deformed  rlect-438
     beal spin-orbit/tensor potential'/' depth',f12.6,' mev   radius',f1lect-439
     c0.6,' fermi (reduced value',f9.6,')   diffuseness',f9.6,' fermi atlect-440
     d the power (1+',f9.6,')'//2x,a4,'deformed  imaginary spin-orbit/telect-441
     ensor potential'/' depth',f12.6,' mev   radius',f10.6,' fermi (redulect-442
     fced value',f9.6,')   diffuseness',f9.6,' fermi at the power (1+',flect-443
     h9.6,')')                                                          lect-444
 1015 format (/2x,a4,'deformed  coulomb potential'/'  charge product',f7lect-445
     1.0,'  radius',f10.6,' fermi (reduced value',f9.6,')   diffuseness'lect-446
     2,f9.6,' fermi at the power (1+',f9.6,')'//2x,a4,'deformed  spin-orlect-447
     3bit coulomb potential'/' depth',f12.6,' mev   radius',f10.6,' fermlect-448
     4i (reduced value',f9.6,')   diffuseness',f9.6,' fermi at the powerlect-449
     5 (1+',f9.6,')'/14x,'third charge parameter',f9.6)                 lect-450
 1016 format (3f10.5)                                                   lect-451
 1017 format (/' *** folding model ***'/' real part      v =',f10.4,6x,'lect-452
     1r =',f10.4,6x,'a =',f10.4/' imaginary part v =',f10.4,6x,'r =',f10lect-453
     2.4,6x,'a =',f10.4/' coulomb part   v =',f10.4,6x,'r =',f10.4,6x,'alect-454
     3 =',f10.4/)                                                       lect-455
 1018 format (/' integration step size =',f8.5,10x,'matching radius =',flect-456
     18.3,' fermi')                                                     lect-457
 1019 format (/' scattering angles from',f7.3,' in steps of',f7.3,' up tlect-458
     1o',f8.3,' degrees   averaged with +/-',f8.3,' degrees.'/)         lect-459
 1020 format (10x,'****** az ******',1p,d15.8)                          lect-460
 1021 format (/' square root of elastic enhancement factor',8x,1p,d15.8/lect-461
     1' spin cut-off parameter',27x,d15.8/' square root of level densitylect-462
     2 parameter',11x,d15.8)                                            lect-463
 1022 format (/' square root of elastic enhancement factor without fluctlect-464
     1uations',7x,1p,d15.8/' particle width fluctuation degree of freedolect-465
     2m',25x,d15.8/' parameters of moldauer''s formula',22x,3d15.8)     lect-466
 1023 format (/i5,' fission data:')                                     lect-467
 1024 format (10x,1p,2d15.8)                                            lect-468
 1025 format (/' gamma data:')                                          lect-469
 1026 format (5x,'tg0:',1p,d13.6,6x,'bn:',d13.6,4x,'fnug:',d13.6,5x,'egdlect-470
     1:',d13.6,5x,'ggd:',d13.6/' density of states given by')           lect-471
 1027 format (' read values'/(1x,i3,'  sa:',1p,d13.6,6x,'ux:',d13.6,5x,'lect-472
     1tau:',d13.6,6x,'sg:',d13.6/28x,'e0:',d13.6,6x,'ex:',d13.6,7x,'z:',lect-473
     20p,f5.0))                                                         lect-474
 1028 format (1p,8d15.8)                                                lect-475
 1029 format (' density of states for continuum given by')              lect-476
 1030 format (' iqm =',i3,' or iqmax =',i3,' are larger than the maximumlect-477
     1 values 35 or 8 of the asymmetric rotational model'///' in lect  .lect-478
     2..  stop  ...')                                                   lect-479
      end                                                               lect-480
c 31/08/06                                                      ecis06  lden-000
      subroutine lden(na,scn)                                           lden-001
c compound nucleus preparatory computations added by moldauer with prsl lden-002
c input:     na:      total mass of the compound nucleus.               lden-003
c            scn:     descriptions of level densities.                  lden-004
c output:    scn:     descriptions of level densities.                  lden-005
c in scn:  1-sa  2-ux   3-tau  4-sg   5-e0   6-ex   7-z                 lden-006
c          as described in the 3description of inout".                  lden-007
c data pz, pn, sz and sn are the one used by the code gnash             lden-008
c***********************************************************************lden-009
      implicit real*8 (a-h,o-z)                                         lden-010
      dimension scn(7)                                                  lden-011
      real*4 pz(100),pn(150),sz(100),sn(150)                            lden-012
      common /inout/ mr,mw,ms                                           lden-013
      data pz /0.,5.05,0.,4.50,0.,3.95,0.,3.40,0.,2.90,0.,2.46,0.,2.09,0lden-014
     1.,1.62,0.,1.62,0.,1.83,0.,1.73,0.,1.35,0.,1.54,0.,1.28,0.26,0.88,0lden-015
     2.19,1.35,-.05,1.52,-.09,1.17,.04,1.24,0.29,1.09,.26,1.17,.23,1.15,lden-016
     3-.08,1.35,0.34,1.05,.28,1.27,0.,1.05,0.,1.,.09,1.2,.2,1.4,.93,1.,-lden-017
     4.2,1.19,.09,.97,0.,.92,.11,.68,.05,.68,-.22,.79,.09,.69,.01,.72,0.lden-018
     5,.4,.16,.73,0.,.46,.17,.89,0.,.79,0.,.89,0.,.81,-.06,.69,-.2,.71,-lden-019
     6.12,.72,0.,.77,2*0./                                              lden-020
      data pn /0.,5.25,0.,4.70,0.,4.15,0.,3.58,0.,3.05,0.,2.67,0.,1.8,0.lden-021
     1,1.67,0.,1.86,0.,2.04,0.,1.64,0.,1.44,0.,1.54,0.,1.3,0.,1.27,0.,1.lden-022
     229,.08,1.41,-.08,1.5,-.05,2.24,-.47,1.43,-.15,1.44,.06,1.56,.25,1.lden-023
     357,-.16,1.46,0.,.93,.01,.62,-.5,1.42,.13,1.52,-.65,.8,-.08,1.29,-.lden-024
     447,1.25,-.44,.97,.08,1.65,-.11,1.26,-.46,1.06,0.22,1.55,-.07,1.37,lden-025
     50.1,1.2,-.27,.92,-.35,1.19,0.,1.05,-.25,1.61,-.21,.9,-.21,.74,-.38lden-026
     6,.72,-.34,.92,-.26,.94,.01,.65,-.36,.83,.11,.67,.05,1.,.51,1.04,.3lden-027
     73,.68,-.27,.81,.09,.75,.17,.86,.14,1.1,-.22,.84,-.47,.48,.02,.88,.lden-028
     824,.52,.27,.41,-.05,.38,.15,.67,0.,.61,0.,.78,0.,.67,0.,.67,0.,.79lden-029
     9,0.,.6,.04,.64,-.06,.45,.05,.26,-.22,.39,0.,.39/                  lden-030
      data sz /.19,.38,.57,.75,.94,1.13,1.32,1.51,1.70,2.10,2.91,4.17,5.lden-031
     172,7.8,8.97,9.7,10.1,10.7,11.38,12.07,12.55,13.24,13.93,14.71,15.5lden-032
     23,16.37,17.36,18.6,18.7,18.01,17.87,17.08,16.6,16.75,16.5,16.35,16lden-033
     3.22,16.41,16.89,16.43,16.68,16.73,17.45,17.29,17.44,17.82,18.62,18lden-034
     4.27,19.39,19.91,19.14,18.26,17.4,16.42,15.77,14.37,13.91,13.1,13.1lden-035
     51,11.43,10.89,10.75,10.62,10.41,10.21,9.85,9.47,9.03,8.61,8.13,7.4lden-036
     66,7.48,7.2,7.13,7.06,6.78,6.64,6.64,7.68,7.89,8.41,8.49,7.88,6.3,5lden-037
     7.47,4.78,4.37,4.17,4.13,4.32,4.55,5.04,5.28,6.06,6.28,6.87,7.20,7.lden-038
     874,2*0./                                                          lden-039
      data sn /0.62,1.24,1.85,2.47,3.09,3.71,4.33,4.95,5.56,6.18,6.8,7.5lden-040
     13,7.55,7.21,7.44,8.07,8.94,9.81,10.6,11.39,12.54,13.68,14.34,14.19lden-041
     2,13.83,13.5,13.,12.13,12.6,13.26,14.13,14.92,15.52,16.38,17.16,17.lden-042
     355,18.03,17.59,19.03,18.71,18.8,18.99,18.46,18.25,17.76,17.38,16.7lden-043
     42,15.62,14.38,12.88,13.23,13.81,14.9,14.86,15.76,16.2,17.62,17.73,lden-044
     518.16,18.67,19.69,19.51,20.17,19.48,19.98,19.83,20.2,19.72,19.87,1lden-045
     69.24,18.44,17.61,17.1,16.16,15.9,15.33,14.76,13.54,12.63,10.65,10.lden-046
     71,8.89,10.25,9.79,11.39,11.72,12.43,12.96,13.43,13.37,12.96,12.11,lden-047
     811.92,11.,10.8,10.42,10.39,9.69,9.27,8.93,8.57,8.02,7.59,7.33,7.23lden-048
     9,7.05,7.42,6.75,6.6,6.38,6.36,6.49,6.25,5.85,5.48,4.53,4.3,3.39,2.lden-049
     a35,1.66,.81,0.46,-.96,-1.69,-2.53,-3.16,-1.87,-.41,.71,1.66,2.62,3lden-050
     b.22,3.76,4.1,4.46,4.83,5.09,5.18,5.17,5.1,5.01,4.97,5.09,5.03,4.93lden-051
     c,5.28,5.49,5.50,5.37,5.30/                                        lden-052
      nz=idint(scn(7)+.1d0)                                             lden-053
      if (nz.le.0) nz=na/2                                              lden-054
      nn=na-nz                                                          lden-055
      aa=na                                                             lden-056
      sc=0.d0                                                           lden-057
      pr=0.d0                                                           lden-058
c sa given by p. j. brancazio and a. g. w. cameron, canadian journal of lden-059
c physics 47 (1969) 1029.                                               lden-060
      if (nz.gt.100.or.nn.gt.150) go to 1                               lden-061
      sc=dble(sn(nn)-sz(nz))                                            lden-062
      pr=dble(pn(nn)+pz(nz))                                            lden-063
      nd=min0(iabs(nz-2),iabs(nz-8),iabs(nz-20),iabs(nz-28),iabs(nz-50),lden-064
     1iabs(nz-82),iabs(nz-126),iabs(nn-2),iabs(nn-8),iabs(nn-20),iabs(nnlden-065
     2-28),iabs(nn-50),iabs(nn-82),iabs(nn-126),iabs(nn-184))           lden-066
    1 sa=dabs((.0091d0*(sc-.23d0*dfloat(nd))+.143d0)*aa)                lden-067
      if (scn(1).eq.0.d0) scn(1)=sa                                     lden-068
      ux=2.5d0+150.d0/aa                                                lden-069
      if (scn(2).eq.0.d0) scn(2)=ux                                     lden-070
      tau=1.d0/(dsqrt(scn(1)/scn(2))-1.5d0/scn(2))                      lden-071
      if (tau.gt.0.d0) go to 2                                          lden-072
      scn(3)=1.d0/(dsqrt(sa/ux)-1.5d0/ux)                               lden-073
      write (mw,1000) tau,scn(3)                                        lden-074
    2 if (scn(3).eq.0.d0) scn(3)=tau                                    lden-075
      sg=dsqrt(0.0888d0*dsqrt(scn(1)*scn(2))*aa**0.666666667d0)         lden-076
      if (scn(4).eq.0.d0) scn(4)=sg                                     lden-077
      ex=dabs(scn(2)+pr)                                                lden-078
      e0=ex-scn(3)*(2.d0*dsqrt(scn(1)*scn(2))+dlog(scn(3)/(16.9705627d0*lden-079
     1scn(1)**.25d0*scn(2)**1.25d0*scn(4))))                            lden-080
      if (scn(5).eq.0.d0) scn(5)=e0                                     lden-081
      if (scn(6).eq.0.d0) scn(6)=ex                                     lden-082
      write (mw,1001) (scn(j),j=1,7)                                    lden-083
      return                                                            lden-084
 1000 format (5x,'temperature',f10.5,' replaced by',f10.5)              lden-085
 1001 format (' used values'/(4x,'  sa:',1p,d13.6,6x,'ux:',d13.6,5x,'taulden-086
     1:',d13.6,6x,'sg:',d13.6/28x,'e0:',d13.6,6x,'ex:',d13.6,0p,7x,'z:',lden-087
     2f5.0))                                                            lden-088
      end                                                               lden-089
c 31/08/06                                                      ecis06  deph-000
      subroutine deph(ncol,wv,ipi,ngr,npr,nmax,lo,mf,ktgr,niv,njx,njy)  deph-001
c helicity quantum numbers and choice of observables for the output.    deph-002
c input:     ncol:    number of coupled nuclear levels for dimension of deph-003
c                     array niv, equal to ncoll.                        deph-004
c            wv(i,*): mass of the incident particle for j=1,            deph-005
c                     energy in the centre of mass system for j=3.      deph-006
c            ipi(i,*):parity (0 for + and 1 for -) for j=1,             deph-007
c                     multiplicity of incident particle for j=2,        deph-008
c                     multiplicity of the target for j=3,               deph-009
c                     product of charges for j=4.                       deph-010
c            ngr:     indication for plots of cross-section: number     deph-011
c                     of powers of 10 by 100 points.                    deph-012
c            npr:     indications for plots of polarisations:           deph-013
c                     1 first one,2 second,3 first and second ..etc     deph-014
c                     on a binary basis. the first value of ngr and npr deph-015
c                     is for the ground state and the second one for thedeph-016
c                     excited states                                    deph-017
c            nmax:    maximum number of amplitudes.                     deph-018
c            lo(i):   logical controls:                                 deph-019
c               lo(44) =.true. coulomb corrections.                     deph-020
c               lo(46) =.true. restricted coulomb corrections.          deph-021
c               lo(66) =.true. no calculation at equidistant angles.    deph-022
c               lo(81) =.true. hauser-feshbach corrections.             deph-023
c               lo(92) =.true. non standard observables at equidistant  deph-024
c                              angles.                                  deph-025
c               lo(100)=.true. dirac equation.                          deph-026
c output:    ipi(i,*):beginning and end for each level in the two parts deph-027
c                     of the table mf for j=5 to 8.                     deph-028
c            mf:      table of quantum numbers and observables.         deph-029
c            ktgr:    length of the table mf.                           deph-030
c            niv:     address of coulomb integrals in niv(*,*,3).       deph-031
c            njx:     number of sets of coulomb functions and integrals.deph-032
c            njy:     maximum label of non standard observable.         deph-033
c                                                                       deph-034
c for the common  /integ/ see calc.                                     deph-035
c                                                                       deph-036
c significance of the quantities in common /integ/:                     deph-037
c  ncols:     number of channels with angular distributions.            deph-038
c  njc:       maximum number of observables at equidistant angles.      deph-039
c  jtx:       maximum number of calculated values for a plot.           deph-040
c  kcc:       number of independent amplitudes with uncoupled states.   deph-041
c  ms1:       largest particle multiplicity.                            deph-042
c  ms2:       largest target multiplicity.                              deph-043
c  kba:       number of independent amplitudes without uncoupled states.deph-044
c  kab:       maximum number of equations.                              deph-045
c  kbc:       maximum number of solutions.                              deph-046
c  nct(1):    number of equations for positive parity.                  deph-047
c  nct(2):    number of equations for negative parity.                  deph-048
c  nct(3):    number of solutions for positive parity.                  deph-049
c  nct(4):    number of solutions for negative parity.                  deph-050
c  nct(5):    number of compound nucleus coefficients, positive parity. deph-051
c  nct(6):    number of compound nucleus coefficients, negative parity. deph-052
c   defined:  njc,jtx,kcc,ms1,ms2,kba,kab,kbc,nct.                      deph-053
c   used:     ncols.                                                    deph-054
c                                                                       deph-055
c   **** table mf **** first part                                       deph-056
c for each independent amplitude (with respect to parity only):         deph-057
c  mf(1,*)  helicity of the outgoing particle,                          deph-058
c  mf(2,*)  helicity of the residual target,                            deph-059
c  mf(3,*)  helicity of the incoming particle,                          deph-060
c  mf(4,*)  helicity of the target,                                     deph-061
c    (these helicities are numbered from the lowest value)              deph-062
c  mf(5,*)  twice the magnetic quantum number of the rotation matrix    deph-063
c    elements related to the initial state,                             deph-064
c  mf(6,*)  twice the magnetic quantum number of the rotation matrix    deph-065
c    elements for the final state,                                      deph-066
c    (however, with absolute value 99999 it indicates that the last     deph-067
c    computed matrix elements can be used with the sign of mf(10,*).    deph-068
c    a re-ordering of the helicities has been done to be able to do so) deph-069
c  mf(7,*)  direct address of the amplitude in an one-row matrix,       deph-070
c  mf(8,*)  direct address of parity related amplitude or 0 if there is deph-071
c    none,                                                              deph-072
c  mf(9,*)  relative sign between the amplitudes mf(7,*) and mf(8,*),   deph-073
c  mf(10,*) relative sign for rotation matrix elements if mf(6,*)=99999.deph-074
c***********************************************************************deph-075
      implicit real*8 (a-h,o-z)                                         deph-076
      logical lo(150)                                                   deph-077
      dimension wv(22,*),ipi(11,*),mf(10,*),ngr(2),npr(2),niv(ncol,ncol,deph-078
     13)                                                                deph-079
      common /inout/ mr,mw,ms                                           deph-080
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncodeph-081
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtdeph-082
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),deph-083
     3nct(6)                                                            deph-084
      njc=2                                                             deph-085
      njy=0                                                             deph-086
      jtx=0                                                             deph-087
      nct(5)=0                                                          deph-088
      nct(6)=0                                                          deph-089
      kcc=0                                                             deph-090
      ms1=0                                                             deph-091
      ms2=0                                                             deph-092
      ni=ipi(2,1)                                                       deph-093
      mi=ipi(3,1)                                                       deph-094
c loop on the nuclear levels.                                           deph-095
      do 13 i=1,ncols                                                   deph-096
      ip=mod(ipi(1,i)+ipi(1,1),2)                                       deph-097
      ki=kcc+1                                                          deph-098
      ipi(6,i)=ki                                                       deph-099
      nj=ipi(2,i)                                                       deph-100
      mj=ipi(3,i)                                                       deph-101
      ms1=max0(ms1,nj)                                                  deph-102
      ms2=max0(ms2,mj)                                                  deph-103
      do 10 i1=1,nj                                                     deph-104
      j1=nj+1-i1                                                        deph-105
      do 9 i2=1,mj                                                      deph-106
      j2=mj+1-i2                                                        deph-107
      do 8 i3=1,ni                                                      deph-108
      j3=ni+1-i3                                                        deph-109
      do 7 i4=1,mi                                                      deph-110
      j4=mi+1-i4                                                        deph-111
      if (kcc.lt.ki) go to 3                                            deph-112
c search for parity conjugate among the amplitudes already obtained.    deph-113
      do 1 j=ki,kcc                                                     deph-114
      if ((mf(1,j).eq.j1).and.(mf(2,j).eq.j2).and.(mf(3,j).eq.j3).and.(mdeph-115
     1f(4,j).eq.j4)) go to 2                                            deph-116
    1 continue                                                          deph-117
      go to 3                                                           deph-118
    2 mf(8,j)=i1+nj*(i2-1+mj*(i4-1+mi*(i3-1)))                          deph-119
      mf(9,j)=1-2*mod(ip+j1+i2+j3+i4,2)                                 deph-120
      go to 7                                                           deph-121
c new amplitude.                                                        deph-122
    3 kcc=kcc+1                                                         deph-123
      if (5*kcc.ge.nmax) call memo('deph',nmax,5*kcc)                   deph-124
      mf(1,kcc)=i1                                                      deph-125
      mf(2,kcc)=i2                                                      deph-126
      mf(3,kcc)=i3                                                      deph-127
      mf(4,kcc)=i4                                                      deph-128
      mf(5,kcc)=2*(mf(3,kcc)-mf(4,kcc))-ipi(2,1)+ipi(3,1)               deph-129
      mf(6,kcc)=2*(mf(1,kcc)-mf(2,kcc))-ipi(2,i)+ipi(3,i)               deph-130
      mf(7,kcc)=i1+nj*(i2-1+mj*(i4-1+mi*(i3-1)))                        deph-131
      mf(8,kcc)=0                                                       deph-132
      mf(9,kcc)=0                                                       deph-133
      mf(10,kcc)=0                                                      deph-134
      if (kcc.le.ki) go to 7                                            deph-135
c search for related rotation matrix elements.                          deph-136
      kk=kcc-1                                                          deph-137
      m1=iabs(mf(5,kcc)+mf(6,kcc))/2                                    deph-138
      m2=iabs(mf(5,kcc)-mf(6,kcc))/2                                    deph-139
      do 6 j=ki,kk                                                      deph-140
      if (mf(6,j).eq.99999) go to 6                                     deph-141
      m3=iabs(mf(5,j)+mf(6,j))/2                                        deph-142
      m4=iabs(mf(5,j)-mf(6,j))/2                                        deph-143
      if (m1.ne.m3.or.m2.ne.m4) go to 6                                 deph-144
      mf(10,kcc)=1-mod(iabs(mf(5,j)-mf(5,kcc)+mf(6,kcc)-mf(6,j))/2,4)   deph-145
      mf(6,kcc)=99999                                                   deph-146
      ja=j+1                                                            deph-147
      if (ja.eq.kcc) go to 7                                            deph-148
c permutation of amplitudes.                                            deph-149
      do 5 m1=1,10                                                      deph-150
      m2=mf(m1,kcc)                                                     deph-151
      do 4 m3=ja,kcc                                                    deph-152
      m4=kcc+ja-m3                                                      deph-153
    4 mf(m1,m4)=mf(m1,m4-1)                                             deph-154
    5 mf(m1,ja)=m2                                                      deph-155
      go to 7                                                           deph-156
    6 continue                                                          deph-157
    7 continue                                                          deph-158
    8 continue                                                          deph-159
    9 continue                                                          deph-160
   10 continue                                                          deph-161
      ipi(7,i)=kcc                                                      deph-162
c computation of the number of coupled equations.                       deph-163
      l=nj*mj                                                           deph-164
      kk1=l/2                                                           deph-165
      kk2=l-kk1                                                         deph-166
      if (kk1.eq.kk2) go to 11                                          deph-167
      n=mj/2+nj/2+ipi(1,i)                                              deph-168
      if (2*(n/2).eq.n) go to 11                                        deph-169
      kk1=kk1+1                                                         deph-170
      kk2=kk1-1                                                         deph-171
   11 nct(5)=nct(5)+kk2                                                 deph-172
      nct(6)=nct(6)+kk1                                                 deph-173
      if (i.ne.1) go to 12                                              deph-174
      nct(3)=nct(5)                                                     deph-175
      nct(4)=nct(6)                                                     deph-176
   12 if (i.ne.ncoll) go to 13                                          deph-177
      nct(1)=nct(5)                                                     deph-178
      nct(2)=nct(6)                                                     deph-179
      kab=max0(nct(1),nct(2))                                           deph-180
      kbc=max0(nct(3),nct(4))                                           deph-181
      if (nct(4).eq.0) kab=nct(1)                                       deph-182
      if (nct(3).eq.0) kab=nct(2)                                       deph-183
      kba=kcc                                                           deph-184
   13 continue                                                          deph-185
      if (kba.eq.kcc) write (mw,1000) kbc,kab,kba                       deph-186
      if (kba.ne.kcc) write (mw,1001) kbc,kab,kba,kcc                   deph-187
      ktgr=kcc                                                          deph-188
      ipi(9,ncols)=ipi(7,ncols)                                         deph-189
      if (lo(66)) go to 25                                              deph-190
c***********************************************************************deph-191
c   **** table mf-fm **** second part                                   deph-192
c  this part of the table is prolongated in lecd for each angular       deph-193
c  distribution and will be updated by obse. mf(1,*), mf(2,*) and       deph-194
c  mf(5,*) only are defined here.                                       deph-195
c                                                                       deph-196
c  - for each observable:                                               deph-197
c  mf(1,*)             level.                                           deph-198
c  mf(2,*)             kind: see below **** standard descriptions ****  deph-199
c  mf(3,i), mf(4,i)    beginning and end of the description in the arraydeph-200
c                      am defined in subroutine obse,                   deph-201
c  mf(5,*)             indication for plots,                            deph-202
c  mf(6,*) to m(10,*)  contains the legend (added in subroutine obse).  deph-203
c                                                                       deph-204
c  ****standard options****                                             deph-205
c for all states : cross section.                                       deph-206
c for ground state with charged particles: cross section divided by     deph-207
c       rutherford's cross-section.                                     deph-208
c for spin 1/2 - ground state  polarisation.                            deph-209
c for spin 1/2 excited states  vector analysing power, polarisation     deph-210
c       and spin-flip.                                                  deph-211
c for spin larger than 1/2  ground state it11, t20, t21 and t22.        deph-212
c for excited states, it11, vector polarisation, t20, t21 and t22.      deph-213
c                                                                       deph-214
c  *** non-standard options ***                                         deph-215
c  the first one must be the cross-section.                             deph-216
c any observable not described below is identified by a negative number deph-217
c  of which the positive value must be found by the subroutine obse     deph-218
c  followed by the description of the observable.                       deph-219
c                                                                       deph-220
c **** standard descriptions ****                                       deph-221
c  0  cross section.                                                    deph-222
c  1  cross section divided by rutherford's cross section.              deph-223
c  2  vector analysing power.                                           deph-224
c  3  vector polarisation.                                              deph-225
c  4  t20.                                                              deph-226
c  5  t21.                                                              deph-227
c  6  t22.                                                              deph-228
c  7  kyy or d  defined as -a(1100 1100)-a(1100 1-100).                 deph-229
c  8  kxx or r  defined as  a(1100 1100)-a(1100 1-100).                 deph-230
c  9  kzz or a' defined as  a(1000 1000).                               deph-231
c 10  kxz or r' defined as -sqrt(2.) a(1100 1000).                      deph-232
c 11  kzx or a  defined as -sqrt(2.) a(1000 1100).                      deph-233
c 12  spin-flip :  (a(0000,0000)+a(1100,1100)+a(1100,1-100))/2.         deph-234
c 13  vector analysing power of the target.                             deph-235
c   (note a ratio sqrt(2.) with it11 for spin 1/2 for 2, 3 and 13).     deph-236
c 14  ayy  defined as -a(1111 0000)-a(111-1 0000).                      deph-237
c 15  axx  defined as  a(1111 0000)-a(111-1 0000).                      deph-238
c 16  azz  defined as  a(1010 0000).                                    deph-239
c 17  axz  defined as -sqrt(2.) a(1110 0000).                           deph-240
c 18  azx  defined as -sqrt(2.) a(1011 0000).                           deph-241
c 19  reserved for a set of experimental data which are reaction        deph-242
c          cross-sections.                                              deph-243
c***********************************************************************deph-244
      kx=kcc                                                            deph-245
      iy=1                                                              deph-246
      if (.not.lo(92)) go to 14                                         deph-247
      read (mr,1002) (ipi(9,i),i=1,ncoll)                               deph-248
      write (mw,1003) (i,ipi(9,i),i=1,ncoll)                            deph-249
   14 do 24 i=1,ncoll                                                   deph-250
      if (lo(92)) go to 19                                              deph-251
c there must be at least place to store six observables                 deph-252
      if (5*kx+30.ge.nmax) call memo('deph',nmax,5*kx+30)               deph-253
      kx=kx+1                                                           deph-254
      ipi(9,i)=1                                                        deph-255
      mf(2,kx)=0                                                        deph-256
      if ((i.ne.1).or.(ipi(4,1).eq.0)) go to 15                         deph-257
      ipi(9,1)=2                                                        deph-258
      kx=kx+1                                                           deph-259
      mf(2,kx)=1                                                        deph-260
   15 mf(5,kx)=ngr(iy)                                                  deph-261
      if (ni.eq.1) go to 19                                             deph-262
      ipi(9,i)=ipi(9,i)+1                                               deph-263
      kx=kx+1                                                           deph-264
      mf(2,kx)=2                                                        deph-265
      ix=npr(iy)/2                                                      deph-266
      mf(5,kx)=npr(1)-2*ix                                              deph-267
      if (ni.gt.2) go to 17                                             deph-268
      if (i.eq.1) go to 19                                              deph-269
      if (ipi(2,i).gt.3) go to 16                                       deph-270
      if (ipi(2,i).eq.1) go to 19                                       deph-271
      ipi(9,i)=ipi(9,i)+1                                               deph-272
      kx=kx+1                                                           deph-273
      mf(2,kx)=3                                                        deph-274
      mf(5,kx)=mod(ix,2)                                                deph-275
      ix=ix/2                                                           deph-276
   16 kx=kx+1                                                           deph-277
      mf(2,kx)=12                                                       deph-278
      mf(5,kx)=mod(ix,2)                                                deph-279
      ipi(9,i)=ipi(9,i)+1                                               deph-280
      go to 19                                                          deph-281
   17 ipi(9,i)=ipi(9,i)+3                                               deph-282
      do 18 l=4,6                                                       deph-283
      kx=kx+1                                                           deph-284
      mf(2,kx)=l                                                        deph-285
      mf(5,kx)=mod(ix,2)                                                deph-286
   18 ix=ix/2                                                           deph-287
   19 k1=ktgr+1                                                         deph-288
      ipi(8,i)=k1                                                       deph-289
      ktgr=ktgr+ipi(9,i)                                                deph-290
      ipi(9,i)=ktgr                                                     deph-291
      if (5*ktgr.ge.nmax) call memo('deph',nmax,5*ktgr)                 deph-292
      do 20 j=k1,ktgr                                                   deph-293
   20 mf(1,j)=i                                                         deph-294
      if (.not.lo(92)) go to 22                                         deph-295
      read (mr,1002) (mf(2,j),j=k1,ktgr)                                deph-296
      if (mf(2,k1).ne.0) write (mw,1004)                                deph-297
      read (mr,1002) (mf(5,j),j=k1,ktgr)                                deph-298
      mf(2,k1)=0                                                        deph-299
      write (mw,1005) i,(mf(2,j),j=k1,ktgr)                             deph-300
      write (mw,1006) (mf(5,j),j=k1,ktgr)                               deph-301
      do 21 j=k1,ktgr                                                   deph-302
      if (mf(2,j).gt.18) go to 32                                       deph-303
   21 continue                                                          deph-304
   22 jt=0                                                              deph-305
      do 23 j=k1,ktgr                                                   deph-306
      njy=max0(njy,-mf(2,j))                                            deph-307
      if (mf(2,j).eq.0.or.mf(2,j).eq.1) go to 23                        deph-308
      jt=jt+1                                                           deph-309
   23 continue                                                          deph-310
      jtx=max0(jtx,jt)                                                  deph-311
      njc=max0(njc,ktgr-k1+2)                                           deph-312
   24 iy=2                                                              deph-313
      if (lo(81)) njc=max0(njc+2,6)                                     deph-314
   25 iy=0                                                              deph-315
      if (lo(44)) iy=1                                                  deph-316
      if (lo(46).and.lo(44)) write (mw,1007)                            deph-317
      do 28 i=1,ncoll                                                   deph-318
      if (lo(46).and.lo(44)) go to 27                                   deph-319
      do 26 j=1,ncoll                                                   deph-320
   26 niv(i,j,3)=iy                                                     deph-321
      if (lo(108)) niv(i,i,3)=1                                         deph-322
      go to 28                                                          deph-323
   27 read (mr,1002) (niv(i,j,3),j=1,ncoll)                             deph-324
      write (mw,1008) i,(j,niv(i,j,3),j=1,ncoll)                        deph-325
   28 continue                                                          deph-326
      nj=njx                                                            deph-327
      do 30 i=1,ncoll                                                   deph-328
      do 29 j=1,i                                                       deph-329
      l=niv(i,j,3)                                                      deph-330
      niv(i,j,3)=0                                                      deph-331
c no coul. corr. with diff. particle mass, charges or a closed channel  deph-332
      if (l.eq.0.or.ipi(4,i).ne.ipi(4,j).or.(dabs(wv(1,i)-wv(1,j)).gt.1ddeph-333
     10).or.wv(3,i).lt.0.d0.or.wv(3,j).lt.0.d0) go to 29                deph-334
      njx=njx+1                                                         deph-335
      niv(i,j,3)=njx                                                    deph-336
   29 niv(j,i,3)=niv(i,j,3)                                             deph-337
   30 continue                                                          deph-338
      if (nj.eq.njx) return                                             deph-339
      write (mw,1009)                                                   deph-340
      do 31 i=1,ncoll                                                   deph-341
   31 write (mw,1010) i,(niv(i,j,3),j,j=1,ncoll)                        deph-342
      return                                                            deph-343
   32 write (mw,1011)                                                   deph-344
      stop                                                              deph-345
 1000 format (/5x,i3,' solutions',i10,' coupled equations',i10,' independeph-346
     1dent amplitudes.'/)                                               deph-347
 1001 format (/5x,i3,' solutions',i10,' coupled equations',i10,' independeph-348
     1dent amplitudes',i10,' sets of compound coefficients.'/)          deph-349
 1002 format (14i5)                                                     deph-350
 1003 format (/' equidistant angles output:'//(10x,'channel',i3,5x,i3,' deph-351
     1observables.'))                                                   deph-352
 1004 format (' the first observable must be the cross section: label 0.deph-353
     1')                                                                deph-354
 1005 format (' observables for channel',i3,'  : ',18i5/(24x,18i5))     deph-355
 1006 format (12x,'graph information: ',18i5/(24x,18i5))                deph-356
 1007 format (/' coulomb corrections ( 1=yes, 0=no):')                  deph-357
 1008 format (' i =',i2,4x,10(' j =',i2,':',i1,2x)/(10x,10(' j =',i2,':'deph-358
     1,i1,2x)))                                                         deph-359
 1009 format (/' storage of coulomb corrections:')                      deph-360
 1010 format (' i =',i2,2x,6(i6,' for j =',i2)/(10x,6(i6,' for j =',i2))deph-361
     1)                                                                 deph-362
 1011 format (//' the standard observables are only 19 for any other givdeph-363
     1e a negative integer'///' in deph  ...  stop  ...')               deph-364
      end                                                               deph-365
c 28/02/07                                                      ecis06  lecd-000
      subroutine lecd(wv,np,kfit,nessai,yy,njy,nmax,lo,mf,mfm,fm,donn,dwlecd-001
     1,nw,nmx)                                                          lecd-002
c input of experimental data and search informations.                   lecd-003
c input:     wv(j,*): energy in the centre of mass in mev for j=3.      lecd-004
c            np:      indications for plots of cross-section            lecd-005
c            kfit:    number of fits stored in a search.                lecd-006
c            nessai:  maximum number of evaluations in the search.      lecd-007
c            yy(3):   parameters for the search.                        lecd-008
c            njy:     maximum index of non standard observable.         lecd-009
c            nmax:    maximum number of data for the working space.     lecd-010
c            lo(i):   logical controls:                                 lecd-011
c               lo(32) =.true. automatic search on some parameters.     lecd-012
c               lo(81) =.true. hauser-feshbach corrections.             lecd-013
c               lo(72) =.true. no output of experimental data when they lecd-014
c                              are read.                                lecd-015
c               lo(85) =.true. fission transmission coefficients.       lecd-016
c               lo(86) =.true. gamma emission in compound nucleus.      lecd-017
c output:    nmx:     number of indexes.                                lecd-018
c            mf:      continuation of the second part of mf as describedlecd-019
c                     in subroutine deph.                               lecd-020
c            mfm,fm:  in equivalence by call:                           lecd-021
c                     mfm(1,*) channel,                                 lecd-022
c                     mfm(2,*), mfm(3,*) beginning and end of data,     lecd-023
c                     mfm(4,*) indication centre of mass or laboratory  lecd-024
c                              system by 0 or 1,                        lecd-025
c                     fm(3,*) weight,                                   lecd-026
c                     fm(4,*) and fm(5,*) norm and its error,           lecd-027
c                     fm(6,*) place for calculated normalisation,       lecd-028
c                     fm(7,*) place for calculated chi2.                lecd-029
c            donn:    experimental data: angle, value, error,           lecd-030
c                     angular width and place for corrected error.      lecd-031
c            dw:      accuracy of parameters in search.                 lecd-032
c            nw:      indexes of parameters in search.                  lecd-033
c            njy:     maximum index of non standard observable.         lecd-034
c                                                                       lecd-035
c      if the number of data for an observable is 0, it is summed       lecd-036
c      with the next observable which must be of the same kind.         lecd-037
c                                                                       lecd-038
c for the common  /integ/ see calc.                                     lecd-039
c                                                                       lecd-040
c significance of the quantities in common /integ/:                     lecd-041
c  ncols:     number of channels with angular distributions.            lecd-042
c  ncolt:     number of channels including uncoupled states.            lecd-043
c  jth:       maximum number of angles for a plot.                      lecd-044
c  ncolr:     number of experimental angular distributions.             lecd-045
c  nrec:      number of variables in search.                            lecd-046
c  ntot:      number of experimental data.                              lecd-047
c   defined:  ntot.                                                     lecd-048
c   used:                                                               lecd-049
c                                                                       lecd-050
c***********************************************************************lecd-051
      implicit real*8 (a-h,o-z)                                         lecd-052
      logical lo(150),lt,lx                                             lecd-053
      dimension wv(22,*),mf(10,*),mfm(14,*),fm(7,*),donn(6,*),np(2),dw(*lecd-054
     1),nw(*),yy(3)                                                     lecd-055
      common /inout/ mr,mw,ms                                           lecd-056
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncolecd-057
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtlecd-058
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),lecd-059
     3nct(6)                                                            lecd-060
      lt=.true.                                                         lecd-061
      ntot=0                                                            lecd-062
      nclr=0                                                            lecd-063
      nmx=nrec+1                                                        lecd-064
      do 5 iv=1,ncolr                                                   lecd-065
c input of the definition of the angular distribution.                  lecd-066
      lx=.false.                                                        lecd-067
      read (mr,1000) lx,mfm(4,iv),nt,mfm(1,iv),mf(2,iv),(fm(j,iv),j=3,5)lecd-068
      if (mfm(1,iv).gt.ncols) go to 8                                   lecd-069
      if (wv(3,mfm(1,iv)).le.0.d0) go to 9                              lecd-070
      if (mf(2,iv).gt.19) go to 10                                      lecd-071
      if (fm(3,iv).eq.0.d0) fm(3,iv)=1.d0                               lecd-072
      if (fm(4,iv).eq.0.d0) fm(4,iv)=1.d0                               lecd-073
      fm(6,iv)=1.d0                                                     lecd-074
      fm(7,iv)=0.d0                                                     lecd-075
      mf(1,iv)=mfm(1,iv)                                                lecd-076
      jth=max0(jth,nt)                                                  lecd-077
      njy=max0(njy,-mf(2,iv))                                           lecd-078
      mf(5,iv)=1                                                        lecd-079
      mf2=min0(2,mfm(1,iv))                                             lecd-080
      if (mf(2,iv).eq.0.or.mf(2,iv).eq.1) mf(5,iv)=np(mf2)              lecd-081
      if (.not.lo(72).and.nt.eq.0) write (mw,1001) iv,nt,mfm(1,iv),mf(2,lecd-082
     1iv)                                                               lecd-083
      if (iv.eq.1) go to 1                                              lecd-084
      if ((.not.lt).and.(mf(2,iv).ne.mf(2,iv-1))) go to 11              lecd-085
    1 lt=nt.ne.0                                                        lecd-086
      ns=ntot+1                                                         lecd-087
      ntot=ntot+nt                                                      lecd-088
      mfm(2,iv)=ns                                                      lecd-089
      mfm(3,iv)=ntot                                                    lecd-090
      if (.not.lt) go to 5                                              lecd-091
      nclr=nclr+1                                                       lecd-092
      if (.not.lo(72)) write (mw,1002) iv,nt,mfm(1,iv),mf(2,iv),(fm(i,ivlecd-093
     1),i=3,5)                                                          lecd-094
      if (.not.lo(72).and.(mf(2,iv).eq.19)) write (mw,1003)             lecd-095
      lx=lx.and.(mf(2,iv).eq.0.or.mf(2,iv).eq.1.or.mf(2,iv).eq.19)      lecd-096
      if (.not.lo(72).and.lx) write (mw,1004)                           lecd-097
      if (.not.lo(72).and.mfm(4,iv).eq.1) write (mw,1005)               lecd-098
      if (3*ntot+3.ge.nmax) call memo('lecd',nmax,3*ntot+3)             lecd-099
c input of the angular distribution data.                               lecd-100
      do 2 i=ns,ntot                                                    lecd-101
      read (mr,1006) (donn(j,i),j=1,5)                                  lecd-102
      if (lx) donn(3,i)=donn(2,i)*donn(3,i)*.01d0                       lecd-103
      donn(6,i)=donn(3,i)                                               lecd-104
      if (.not.lo(72)) write (mw,1007) i,(donn(j,i),j=1,5)              lecd-105
    2 continue                                                          lecd-106
      if (mf(2,iv).lt.19) go to 4                                       lecd-107
c check of total cross-section data.                                    lecd-108
      do 3 i=ns,ntot                                                    lecd-109
      j=idint(donn(1,i)+.1d0)                                           lecd-110
      if (j.lt.0.or.j.gt.ncolt+2) go to 12                              lecd-111
      if (j.gt.0.and.j.le.ncolt.and.wv(3,j).le.0.d0) go to 13           lecd-112
      if (lo(81).and.j.gt.ncols) go to 12                               lecd-113
      if ((.not.lo(85)).and.j.eq.ncolt+1) go to 12                      lecd-114
      if ((.not.lo(86)).and.j.eq.ncolt+2) go to 12                      lecd-115
    3 continue                                                          lecd-116
    4 if (fm(5,iv).eq.0.d0) go to 5                                     lecd-117
      ntot=ntot+1                                                       lecd-118
c normalisation as a data for the search.                               lecd-119
      donn(2,ntot)=fm(4,iv)                                             lecd-120
      donn(3,ntot)=fm(5,iv)                                             lecd-121
      if (.not.lo(72)) write (mw,1008) ntot,donn(2,ntot),donn(3,ntot)   lecd-122
    5 continue                                                          lecd-123
      if ((.not.lo(72)).and.(ncolr.ne.nclr)) write (mw,1009) nclr,ncolr lecd-124
      if ((.not.lo(32)).or.(nrec.eq.0)) go to 7                         lecd-125
      write (mw,1010) nrec,kfit,nessai,yy(1),yy(2)                      lecd-126
      nise=12*ntot+2*nrec                                               lecd-127
      if (nise+nmx.ge.2*nmax) call memo('lecd',nmax,(nise+nmx)/2)       lecd-128
      read (mr,1006) (dw(6*ntot+i),i=1,nrec)                            lecd-129
      read (mr,1011) (nw(nise+i),i=1,nrec)                              lecd-130
      write (mw,1012) (i,nw(nise+i),dw(6*ntot+i),i=1,nrec)              lecd-131
      do 6 i=1,nrec                                                     lecd-132
c a negative value -k instead of indexes of parameters means that k     lecd-133
c parameters will be kept proportional - input of their indexes.        lecd-134
      k=-nw(nise+i)                                                     lecd-135
      if (k.lt.0) go to 6                                               lecd-136
      nw(nise+nmx)=k                                                    lecd-137
      if (nise+nmx+k.ge.2*nmax) call memo('lecd',nmax,(nise+nmx+k)/2)   lecd-138
      read (mr,1011) (nw(nise+nmx+j),j=1,k)                             lecd-139
      write (mw,1013) i,(nw(nise+nmx+j),j=1,k)                          lecd-140
      nw(nise+i)=-nmx                                                   lecd-141
      nmx=nmx+k+1                                                       lecd-142
    6 continue                                                          lecd-143
    7 if (lt) return                                                    lecd-144
      write (mw,1014)                                                   lecd-145
      go to 14                                                          lecd-146
    8 write (mw,1015) mfm(1,iv)                                         lecd-147
      go to 14                                                          lecd-148
    9 write (mw,1016) mfm(1,iv)                                         lecd-149
      go to 14                                                          lecd-150
   10 write (mw,1017)                                                   lecd-151
      go to 14                                                          lecd-152
   11 write (mw,1018) mf(2,iv),mf(2,iv-1)                               lecd-153
      go to 14                                                          lecd-154
   12 write (mw,1019) donn(1,i),i                                       lecd-155
      go to 14                                                          lecd-156
   13 write (mw,1020) donn(1,i),i                                       lecd-157
   14 write (mw,1021)                                                   lecd-158
      stop                                                              lecd-159
 1000 format (l1,i1,i3,2i5,5x,3f10.5)                                   lecd-160
 1001 format (/'  ang. distr.',i3,i9,' data   level =',i3,5x,'kind =',i3lecd-161
     1,' unresolved with the following one.'/)                          lecd-162
 1002 format (/'  ang. distr.',i3,i9,' data   level =',i3,5x,'kind =',i3lecd-163
     1//5x,'weight',1p,d12.4,5x,'norm',d12.4,'  with error',d12.4//23x,'lecd-164
     2angle',14x,'value',15x,'error',12x,'ang. width',10x,'ang. error'/)lecd-165
 1003 format (' these data are total cross-sections.')                  lecd-166
 1004 format (' input of percentage errors.')                           lecd-167
 1005 format (' angles in the laboratory system.')                      lecd-168
 1006 format (7f10.5)                                                   lecd-169
 1007 format (5x,i5,1p,5d20.6)                                          lecd-170
 1008 format (5x,i5,' data which is a normalisation',1p,d20.6,' with errlecd-171
     1or',d20.6)                                                        lecd-172
 1009 format (/5x,i5,' different angular distributions instead of',i5/) lecd-173
 1010 format (//5x,i5,' parameters in search'/5x,i5,' results stored'/5xlecd-174
     1,i5,' runs    starting scale',f10.2/12x,'multiplication factor',f1lecd-175
     20.2/)                                                             lecd-176
 1011 format (14i5)                                                     lecd-177
 1012 format (5x,i5,5x,i5,5x,f15.8)                                     lecd-178
 1013 format (5x,i5,' variable defined as',20i5/(18x,20i5))             lecd-179
 1014 format (//'  the last angular distribution include no data.')     lecd-180
 1015 format (//' level number',i4,' too large.')                       lecd-181
 1016 format (//' level',i4,' closed.')                                 lecd-182
 1017 format (//' there are only 20 kind of programmed observables'//'  lecd-183
     1for other kinds, introduce a negative number and, later, their deslecd-184
     2cription.')                                                       lecd-185
 1018 format (//' the kind =',i3,' of this observable is not the same aslecd-186
     1 the kind =',i3,' of the previous one which was empty.')          lecd-187
 1019 format (' angular data',f10.5,' for',i4,' data not allowed for totlecd-188
     1al cross-section.')                                               lecd-189
 1020 format (' angular data',f10.5,' for',i4,' data not allowed for clolecd-190
     1sed channel.')                                                    lecd-191
 1021 format (//' in lecd  ...  stop  ...')                             lecd-192
      end                                                               lecd-193
c 21/02/07                                                      ecis06  obse-000
      subroutine obse(mf,cmf,nt,ncolr,ipi,jtn,lo,am,jcal,itx,itz,bm,cbm,obse-001
     1nx,dm,ny)                                                         obse-002
c computes for each observable all the indications for do loops and the obse-003
c geometrical coefficients needed in subroutine scat.                   obse-004
c input:     mf,cmf:  equivalent by call, informations coming from      obse-005
c                     subroutines deph and lecd.                        obse-006
c            nt:      number of rows of mf.                             obse-007
c            ncolr :  number of experimental angular distributions.     obse-008
c            ipi(j,*):multiplicity of particle and target for j+2 and 3.obse-009
c            jtn:     length available in am.                           obse-010
c            lo(i):   logical controls:                                 obse-011
c               lo(31) =.true. input of experimental data and chi2      obse-012
c                              calculation.                             obse-013
c               lo(92) =.true. non standard observables at equidistant  obse-014
c                              angles.                                  obse-015
c               lo(126)=.true. some observables in laboratory system.   obse-016
c output:    mf,cmf:  second part described in subroutine deph updated. obse-017
c            am:      character*4 for transfer, see description below.  obse-018
c            jcal:    length of am.                                     obse-019
c            lo(i):   logical controls: lo(126) is defined here.        obse-020
c working areas:                                                        obse-021
c            itx:     equivalent with am by call, to store quantum      obse-022
c                     numbers of observables.                           obse-023
c            itz:     equivalent with am by call, to store legends of   obse-024
c                     observables.                                      obse-025
c            bm(9,*): in equivalence with am shifted of 4 times the     obse-026
c                     number of standard and non standard observables.  obse-027
c                     used for computation of clebsch-gordan            obse-028
c                     coefficients by recurrence.                       obse-029
c            cbm:     in equivalence by call with bm. used for transfer obse-030
c                     of data to am.                                    obse-031
c            nx(18,*):in equivalence by call with bm. used for          obse-032
c                     manipulation of quantum numbers.                  obse-033
c            ny(*):   in equivalence by call with nx.                   obse-034
c                                                                       obse-035
c***********************************************************************obse-036
c  all the observables (as given for some of them in subroutine deph forobse-037
c     the description of the second part of table mf) are defined as a  obse-038
c     sum of operators "a(l1,m1,l2,m2 l1,m1,l2,m2)" with some numerical obse-039
c     coefficient. with scattering amplitude b(i1,i2,i3,i4) for a given obse-040
c     angle, the contribution of "a" is given by a quadruple sum on     obse-041
c     i1, i2, i3 and i4 from im1 to ip1, im2 to ip2, im3 to ip3, im4 to obse-042
c     ip4 respectively of:                                              obse-043
c     b(i1,i2,i3,i4)(complex conjugate)*b(i1-nm1,i2-nm2,i3-nm3,i4-nm4)* obse-044
c     am(il1+i1)*am(il2-i2)*am(il3+i3)*am(il4-i4)                       obse-045
c     with am(il1+i1), am(il2-i2),... clebsch-gordan coefficients storedobse-046
c     in the second part of table am assumed to be double precision.    obse-047
c        due to frequent reduction of these clebsch-gordan coefficients obse-048
c     to unity, there is a logical for each do loop which are .true. if obse-049
c     there is a tensor operator for the related do loop,.false. for    obse-050
c     identity operator; a fifth logical is .true. for no tensor        obse-051
c     operator at all and a sixth is .true. for pure imaginary          obse-052
c     coefficient. these six logicals are stored on a binary basis      obse-053
c     in "jq".                                                          obse-054
c        indication for change of frame, n1 for the particle and n2 the obse-055
c     target:                                                           obse-056
c            1 for laboratory system,                                   obse-057
c            2 for axis along the incident direction,                   obse-058
c     are stored under the form "jt"=n1+1000*n2.                        obse-059
c                                                                       obse-060
c  **** the first part of the am table is sets of 20 integers, each of  obse-061
c     them related to a single "a" - the 16 first are indications for   obse-062
c     the 4 do loops: im1, ip1, nm1, il1, im2, ip2, nm2, il2, im3, ip3, obse-063
c     nm3, il3, im4, ip4, nm4 and il4. there are followed by "jq" and   obse-064
c     "jt" and the coefficient of this "a" in double precision.         obse-065
c  **** the second part are tensor operator matrix elements which are   obse-066
c     quite purely clebsch-gordan coefficients.                         obse-067
c                                                                       obse-068
c***********************************************************************obse-069
      implicit real*8 (a-h,o-z)                                         obse-070
      logical lt1,lt2,lz(6),lo(150)                                     obse-071
      dimension mf(10,*),ipi(11,*),itx(7,*),bm(9,*),iy(2,20),mt(4),nx(18obse-072
     1,*),mx(8,24),nz(2),cx(24),dm(*),ny(*)                             obse-073
      character*4 cmf(10,*),am(*),itz(7,* ),cbm(*),iz(5,20)             obse-074
      common /inout/ mr,mw,ms                                           obse-075
      data iy /4*1,2*2,2*3,2*4,2*5,2*6,7,8,9,10,2*11,2*12,2*13,14,16,2*1obse-076
     17,18,19,20,21,2*22,2*23,2*24,2*1/                                 obse-077
      data cx /6*1.d0,2*-1.d0,1.d0,-1.d0,1.d0,2*-1.4142136573791504d0,3*obse-078
     1.5d0,1.4142136999999999d0,2*-1.d0,1.d0,-1.d0,1.d0,2*-1.41421365737obse-079
     291504d0/                                                          obse-080
      data mx,jts /8*0,2*1,10*0,2*1,2*0,2,7*0,2,1,6*0,2*2,6*0,2*1,2*0,2*obse-081
     11,2*0,2*1,2*0,1,-1,2*0,2*1,2*0,2*1,2*0,2*1,2*0,1,-1,2*0,1,3*0,1,3*obse-082
     20,2*1,2*0,1,3*0,1,3*0,2*1,10*0,2*1,2*0,2*1,2*0,2*1,2*0,1,-1,4*0,2*obse-083
     31,4*0,4*1,4*0,3*1,-1,4*0,4*1,4*0,3*1,-1,4*0,1,0,1,5*0,3*1,5*0,1,0,obse-084
     42*1,5*0/                                                          obse-085
      data iz /'   c','ross','-sec','tion','    ','   c','. s.','/rut','obse-086
     1her.','    ','   a','sym.',' or ','it11',2*'    ','vect','. po','lobse-087
     2ar.',4*'    ',' t20',4*'    ',' t21',4*'    ',' t22',3*'    ','kyyobse-088
     3 ','or d',3*'    ','kxx ','or r',2*'    ','   k','zz o','r a''',3*obse-089
     4'    ','kzx ','or a',2*'    ','   k','xz o','r r''',2*'    ','   sobse-090
     5','pin-','flip',2*'    ','targ','et a','sym.',4*'    ',' ayy',4*' obse-091
     6   ',' axx',4*'    ' ,' azz',4*'    ',' axz',4*'    ',' azx',2*'  obse-092
     7  ',' tot','al c','.-s.','    '/                                  obse-093
      if (jtn.lt.270) call memo('obse',jtn,270)                         obse-094
c transfer of standard descriptions.                                    obse-095
      do 2 i=1,24                                                       obse-096
      do 1 j=1,8                                                        obse-097
    1 nx(j+6,i)=mx(j,i)                                                 obse-098
    2 bm(3,i)=cx(i)                                                     obse-099
      do 4 i=1,20                                                       obse-100
      itx(1,i)=iy(1,i)                                                  obse-101
      itx(2,i)=iy(2,i)                                                  obse-102
      do 3 j=3,7                                                        obse-103
    3 itz(j,i)=iz(j-2,i)                                                obse-104
    4 continue                                                          obse-105
      lo(126)=.false.                                                   obse-106
      kit=20                                                            obse-107
      knx=24                                                            obse-108
      jcal=0                                                            obse-109
      mt(1)=ipi(2,1)                                                    obse-110
      mt(2)=ipi(3,1)                                                    obse-111
c verification of indications already in mf(1,i).                       obse-112
      do 5 i=1,nt                                                       obse-113
      if (mf(2,i).le.18) go to 5                                        obse-114
      if (mf(2,i).eq.19.and.nt-i.ge.ncolr) go to 83                     obse-115
      if (mf(2,i).gt.19) go to 84                                       obse-116
    5 mf(6,i)=0                                                         obse-117
      if (.not.(lo(92).or.lo(31))) go to 56                             obse-118
c search for non standard observables.                                  obse-119
    6 do 7 l=1,nt                                                       obse-120
      if (mf(2,l).lt.0) go to 8                                         obse-121
    7 continue                                                          obse-122
      go to 56                                                          obse-123
    8 kz=kit                                                            obse-124
      kit=kit+1                                                         obse-125
c input of the description of non standard observables.                 obse-126
      lt1=.false.                                                       obse-127
      lt2=.false.                                                       obse-128
      read (mr,1000) lt1,lt2,lt3,kx,k,(itz(j,kit),j=3,7)                obse-129
      k1=knx+1                                                          obse-130
      knx=knx+k                                                         obse-131
      if (9*knx.gt.jtn) call memo('obse',jtn,9*knx)                     obse-132
      read (mr,1001) ((nx(j,i),j=7,14),i=k1,knx)                        obse-133
      read (mr,1002) (bm(3,i),i=k1,knx)                                 obse-134
      if (lt1.or.lt2) read (mr,1002) (bm(1,i),i=k1,knx)                 obse-135
    9 k2=k1                                                             obse-136
      write (mw,1003) kx,(itz(j,kit),j=3,7),k                           obse-137
      if (lt1) write (mw,1004)                                          obse-138
      if (lt3.eq.1) write (mw,1005)                                     obse-139
      if (lt3.eq.2) write (mw,1006)                                     obse-140
      if (.not.lt2) go to 22                                            obse-141
c output of the description not completely in tensor notation           obse-142
c if lt2=.true. , observables can be defined as matrix elements         obse-143
c (mi,mf). in this case,the values read are (mi-s-1,mf-s-1) instead of  obse-144
c the quantum numbers of tensor operator.                               obse-145
      write (mw,1007)                                                   obse-146
   10 k3=min0(k2+5,knx)                                                 obse-147
      write (mw,1008) ((nx(i,j),i=11,14),j=k2,k3)                       obse-148
      write (mw,1009) (bm(3,i),i=k2,k3)                                 obse-149
      write (mw,1010) ((nx(i,j),i=7,10),j=k2,k3)                        obse-150
      write (mw,1011) (bm(1,i),i=k2,k3)                                 obse-151
      k2=k3+1                                                           obse-152
      if (k2.le.knx) go to 10                                           obse-153
      iv=mf(1,l)                                                        obse-154
      mt(3)=ipi(2,iv)                                                   obse-155
      mt(4)=ipi(3,iv)                                                   obse-156
      klt=1                                                             obse-157
c search for non tensor description - pseudo-loop for ij.               obse-158
      ij=1                                                              obse-159
   11 k2=k1                                                             obse-160
      k6=knx                                                            obse-161
   12 if (k2.gt.k6) go to 14                                            obse-162
      do 13 k=k2,k6                                                     obse-163
      if (nx(2*ij+5,k).lt.0) go to 15                                   obse-164
   13 continue                                                          obse-165
   14 if (k6.ne.knx) go to 27                                           obse-166
      go to 20                                                          obse-167
c recurrence computation of (-)**(s-mf)*<s s mi -mf|l m>/sqrt(2*s+1)    obse-168
c starting with the minimum value of l.                                 obse-169
   15 m1=mt(ij)+nx(2*ij+5,k)                                            obse-170
      m2=mt(ij)+nx(2*ij+6,k)                                            obse-171
      if (m1.lt.0.or.m2.lt.0) go to 85                                  obse-172
      m4=m1-m2                                                          obse-173
      m3=iabs(m4)+1                                                     obse-174
      m5=mt(ij)                                                         obse-175
      e2=0.d0                                                           obse-176
      e3=1.d0                                                           obse-177
      c1=dfloat(m1+m2-mt(ij)+1)                                         obse-178
      d2=0.d0                                                           obse-179
      c2=0.d0                                                           obse-180
      do 18 m=m3,m5                                                     obse-181
      if (m.eq.m3) go to 16                                             obse-182
      e1=e2                                                             obse-183
      e2=e3                                                             obse-184
      d1=d2                                                             obse-185
      f1=dfloat(((m-1)**2-m4**2)*(mt(ij)**2-(m-1)**2))                  obse-186
      f2=dfloat((2*m-1)*(2*m-3))                                        obse-187
      d2=dsqrt(f1/f2)                                                   obse-188
      e3=(c1*e2-d1*e1)/d2                                               obse-189
   16 knx=knx+1                                                         obse-190
      do 17 ji=7,14                                                     obse-191
   17 nx(ji,knx)=nx(ji,k)                                               obse-192
      nx(2*ij+5,knx)=m-1                                                obse-193
      nx(2*ij+6,knx)=m4                                                 obse-194
      c2=c2+e3*e3                                                       obse-195
   18 bm(1,knx)=e3                                                      obse-196
c normalisation and sign given by coefficient for maximum value of l.   obse-197
      c2=c2*dfloat(mt(ij))                                              obse-198
      c2=1.d0/dsqrt(c2)                                                 obse-199
      if (e3.lt.0.d0) c2=-c2                                            obse-200
      if (mod(nx(2*ij+6,k),2).eq.0) c2=-c2                              obse-201
      do 19 m=m3,m5                                                     obse-202
      ji=knx+m-m5                                                       obse-203
      bm(3,ji)=bm(3,k)*bm(1,ji)*c2                                      obse-204
   19 bm(1,ji)=bm(1,k)*bm(1,ji)*c2                                      obse-205
      bm(3,k)=0.d0                                                      obse-206
      bm(1,k)=0.d0                                                      obse-207
      k2=k+1                                                            obse-208
      go to 12                                                          obse-209
   20 ij=ij+1                                                           obse-210
      if (ij.le.4) go to 11                                             obse-211
      k2=k1                                                             obse-212
      lt2=.false.                                                       obse-213
      if (lt1) go to 22                                                 obse-214
c if axis of quantification not in vertical plane, take imaginary       obse-215
c amplitude for pure imaginary tensors.                                 obse-216
      do 21 k=k1,knx                                                    obse-217
      m1=nx(7,k)+nx(9,k)+nx(11,k)+nx(13,k)                              obse-218
      if (mod(m1,2).ne.0) bm(3,k)=bm(1,k)                               obse-219
   21 continue                                                          obse-220
   22 if (lt1) go to 35                                                 obse-221
c the first non zero magnetic quantum number must be positive.          obse-222
      do 26 k4=k1,knx                                                   obse-223
      bm(1,k4)=0.d0                                                     obse-224
      do 23 j=8,14,2                                                    obse-225
      if (nx(j,k4)) 24 , 23 , 26                                        obse-226
   23 continue                                                          obse-227
      go to 26                                                          obse-228
   24 ik=0                                                              obse-229
      do 25 j=8,14,2                                                    obse-230
      ik=ik+nx(j-1,k4)+nx(j,k4)                                         obse-231
   25 nx(j,k4)=-nx(j,k4)                                                obse-232
      if (2*(ik/2).ne.ik) bm(3,k4)=-bm(3,k4)                            obse-233
   26 continue                                                          obse-234
      klt=2                                                             obse-235
c reduction of the description:                                         obse-236
c for change into tensors if klt=1, for here if klt=2,                  obse-237
c for change to axis in the reaction plane if klt=3.                    obse-238
   27 if (k1.gt.knx) go to 86                                           obse-239
      do 30 k4=k1,knx                                                   obse-240
      if (dabs(bm(3,k4))+dabs(bm(1,k4)).lt..1d-6) go to 32              obse-241
      k5=k4-1                                                           obse-242
      if (k1.gt.k5) go to 30                                            obse-243
      do 29 j=k1,k5                                                     obse-244
      do 28 i=7,14                                                      obse-245
      if (nx(i,j).ne.nx(i,k4)) go to 29                                 obse-246
   28 continue                                                          obse-247
      go to 31                                                          obse-248
   29 continue                                                          obse-249
   30 continue                                                          obse-250
      go to ( 20 , 35 , 50 ),klt                                        obse-251
   31 bm(3,j)=bm(3,j)+bm(3,k4)                                          obse-252
      bm(1,j)=bm(1,j)+bm(1,k4)                                          obse-253
   32 knx=knx-1                                                         obse-254
      if (knx.lt.k4) go to 27                                           obse-255
      do 34 k=k4,knx                                                    obse-256
      do 33 j=7,14                                                      obse-257
   33 nx(j,k)=nx(j,k+1)                                                 obse-258
      bm(1,k)=bm(1,k+1)                                                 obse-259
   34 bm(3,k)=bm(3,k+1)                                                 obse-260
      go to 27                                                          obse-261
c output of the description.                                            obse-262
   35 k3=min0(k2+5,knx)                                                 obse-263
      write (mw,1008) ((nx(i,j),i=11,14),j=k2,k3)                       obse-264
      write (mw,1012) (bm(3,i),i=k2,k3)                                 obse-265
      write (mw,1010) ((nx(i,j),i=7,10),j=k2,k3)                        obse-266
      if (lt1) write (mw,1011) (bm(1,i),i=k2,k3)                        obse-267
      k2=k3+1                                                           obse-268
      if (k2.le.knx) go to 35                                           obse-269
      do 37 k=k1,knx                                                    obse-270
      do 36 i=8,14,2                                                    obse-271
      if (iabs(nx(i,k)).gt.nx(i-1,k).or.nx(i-1,k).lt.0) go to 87        obse-272
   36 continue                                                          obse-273
   37 continue                                                          obse-274
      if (.not.lt1) go to 54                                            obse-275
c change from vertical axis of quantification to helicity description   obse-276
c by the rotation r(pi/2,pi/2,pi/2).                                    obse-277
      do 39 i=k1,knx                                                    obse-278
      m1=iabs(nx(8,i))+iabs(nx(10,i))+iabs(nx(12,i))+iabs(nx(14,i))     obse-279
      m2=m1/2                                                           obse-280
      if (2*m2.ne.m1) go to 88                                          obse-281
      if (2*(m2/2).eq.m2) go to 38                                      obse-282
      bm(3,i)=-bm(3,i)                                                  obse-283
      bm(1,i)=-bm(1,i)                                                  obse-284
   38 if (m1.eq.0) bm(1,i)=0.d0                                         obse-285
   39 continue                                                          obse-286
      klt=3                                                             obse-287
c pseudo-loop on ij to 50.                                              obse-288
      ij=7                                                              obse-289
   40 j1=knx                                                            obse-290
      do 47 k3=k1,knx                                                   obse-291
      k=nx(ij,k3)                                                       obse-292
      n1=k+nx(ij+1,k3)+1                                                obse-293
      n=2*k+1                                                           obse-294
      e3=1.d0                                                           obse-295
      if (k.eq.0) go to 42                                              obse-296
c rotation matrix elements for pi/2.                                    obse-297
      do 41 i=1,k                                                       obse-298
   41 e3=e3*.5d0                                                        obse-299
   42 c1=0.d0                                                           obse-300
      e2=0.d0                                                           obse-301
      fj=dfloat(k)                                                      obse-302
      fs=-fj                                                            obse-303
      do 43 i=1,n1                                                      obse-304
      if (i.eq.1) go to 43                                              obse-305
      c2=c1                                                             obse-306
      c1=dsqrt(dfloat((i-1)*(1+n-i)))                                   obse-307
      e1=e2                                                             obse-308
      e2=e3                                                             obse-309
      e3=(2.d0*fj*e2-e1*c2)/c1                                          obse-310
      fs=fs+1.d0                                                        obse-311
   43 f2=0.d0                                                           obse-312
      f3=e3                                                             obse-313
      d1=0.d0                                                           obse-314
      do 46 j=1,n                                                       obse-315
      if (j.eq.1) go to 44                                              obse-316
      d2=d1                                                             obse-317
      d1=dsqrt(dfloat((j-1)*(1+n-j)))                                   obse-318
      f1=f2                                                             obse-319
      f2=f3                                                             obse-320
      f3=(2.d0*fs*f2-f1*d2)/d1                                          obse-321
   44 j1=j1+1                                                           obse-322
      if (9*j1.gt.jtn) call memo('obse',jtn,9*j1)                       obse-323
      do 45 l=7,14                                                      obse-324
   45 nx(l,j1)=nx(l,k3)                                                 obse-325
      bm(3,j1)=f3*bm(3,k3)                                              obse-326
      bm(1,j1)=f3*bm(1,k3)                                              obse-327
   46 nx(ij+1,j1)=j-1-k                                                 obse-328
   47 continue                                                          obse-329
c reduction of the description.                                         obse-330
      j2=k1-1                                                           obse-331
      j3=knx+1                                                          obse-332
      do 49 j4=j3,j1                                                    obse-333
      j2=j2+1                                                           obse-334
      do 48 l=7,14                                                      obse-335
   48 nx(l,j2)=nx(l,j4)                                                 obse-336
      bm(3,j2)=bm(3,j4)                                                 obse-337
   49 bm(1,j2)=bm(1,j4)                                                 obse-338
      knx=j2                                                            obse-339
      go to 27                                                          obse-340
   50 ij=ij+2                                                           obse-341
      if (ij.le.13) go to 40                                            obse-342
      do 53 j1=k1,knx                                                   obse-343
      m1=nx(7,j1)+nx(9,j1)+nx(11,j1)+nx(13,j1)                          obse-344
      m2=nx(8,j1)+nx(10,j1)+nx(12,j1)+nx(14,j1)+4*m1                    obse-345
      m3=m2/2                                                           obse-346
      if (2*(m1/2).eq.m1) go to 51                                      obse-347
      if (2*m3.ne.m2) go to 52                                          obse-348
      bm(3,j1)=bm(1,j1)                                                 obse-349
      go to 52                                                          obse-350
   51 if (2*m3.eq.m2) go to 52                                          obse-351
      bm(3,j1)=-bm(1,j1)                                                obse-352
   52 if (2*(m3/2).ne.m3) bm(3,j1)=-bm(3,j1)                            obse-353
   53 continue                                                          obse-354
      lt1=.false.                                                       obse-355
      write (mw,1013)                                                   obse-356
      k=knx+1-k1                                                        obse-357
      go to 9                                                           obse-358
c storage of the description.                                           obse-359
   54 l1=0                                                              obse-360
      itx(1,kit)=k1                                                     obse-361
      itx(2,kit)=knx                                                    obse-362
      do 55 i=1,nt                                                      obse-363
      if (mf(2,i).ne.-kx) go to 55                                      obse-364
      mf(2,i)=kz                                                        obse-365
      mf(6,i)=lt3                                                       obse-366
      l1=l1+1                                                           obse-367
   55 continue                                                          obse-368
      if (l1.eq.0) write (mw,1014) kx                                   obse-369
      go to 6                                                           obse-370
c computation of all the indications needed for the observables.        obse-371
c (beginning and end of do loops,geometrical coefficients ...)          obse-372
   56 do 57 i=1,nt                                                      obse-373
      i1=mf(2,i)+1                                                      obse-374
      mf(3,i)=itx(1,i1)                                                 obse-375
   57 mf(4,i)=itx(2,i1)                                                 obse-376
      lt1=.false.                                                       obse-377
   58 lt1=.not.lt1                                                      obse-378
c lt1=.true.  first passage: number of informations needed for do loops obse-379
c lt1=.false. second one: computation of geometrical coefficients which obse-380
c are stored after the indications for do loops.                        obse-381
      ical=0                                                            obse-382
      ncal=0                                                            obse-383
      do 78 i=1,nt                                                      obse-384
      iv=mf(1,i)                                                        obse-385
      mt(3)=ipi(2,iv)                                                   obse-386
      mt(4)=ipi(3,iv)                                                   obse-387
      if (mf(2,i).le.0.or.mf(2,i).eq.19) go to 78                       obse-388
      if (mf(2,i).ne.1) go to 59                                        obse-389
      if (iv.ne.1) go to 89                                             obse-390
      go to 78                                                          obse-391
   59 if ((mf(2,i).eq.2.and.mt(1).le.3).or.(mf(2,i).eq.3.and.mt(3).le.3)obse-392
     1) go to 62                                                        obse-393
      if (i.eq.1) go to 63                                              obse-394
      i1=i-1                                                            obse-395
      do 60 j=1,i1                                                      obse-396
      if (mf(1,i).eq.mf(1,j).and.mf(2,i).eq.mf(2,j)) go to 61           obse-397
   60 continue                                                          obse-398
      go to 63                                                          obse-399
   61 mf(3,i)=mf(3,j)                                                   obse-400
      mf(4,i)=mf(4,j)                                                   obse-401
      go to 78                                                          obse-402
   62 mf(2,i)=-mf(2,i)                                                  obse-403
      if ((mf(2,i).eq.-2.and.mt(1).eq.0).or.(mf(2,i).eq.-3.and.mt(3).eq.obse-404
     10)) go to 90                                                      obse-405
      go to 78                                                          obse-406
   63 i1=mf(3,i)                                                        obse-407
      i2=mf(4,i)                                                        obse-408
      do 77 ki=i1,i2                                                    obse-409
      kt=0                                                              obse-410
      do 73 l=1,4                                                       obse-411
      k=nx(2*l+5,ki)                                                    obse-412
      nm=nx(2*l+6,ki)                                                   obse-413
      kt=kt+k                                                           obse-414
      if (k.gt.mt(l)) go to 91                                          obse-415
      if (ical.eq.0) go to 65                                           obse-416
      do 64 n=1,ical                                                    obse-417
      if (mt(l).eq.nx(15,n).and.k.eq.nx(16,n).and.nm.eq.nx(17,n)) go to obse-418
     1 71                                                               obse-419
   64 continue                                                          obse-420
   65 ical=ical+1                                                       obse-421
      if (9*ical.gt.jtn) call memo('obse',jtn,9*ical)                   obse-422
      nx(15,ical)=mt(l)                                                 obse-423
      nx(16,ical)=k                                                     obse-424
      nx(17,ical)=nm                                                    obse-425
      nx(18,ical)=jcal                                                  obse-426
      if (lt1) go to 73                                                 obse-427
      il=mt(l)                                                          obse-428
      nx(1,ical)=max0(1,1+nm)                                           obse-429
      nx(2,ical)=min0(il,il+nm)                                         obse-430
      nx(3,ical)=nm                                                     obse-431
      nx(4,ical)=jcal-nx(1,ical)+1                                      obse-432
      if (nx(16,ical).eq.0) go to 70                                    obse-433
c recurrence computation of geometrical coefficients.                   obse-434
      f3=dsqrt(dfloat(2*k+1))                                           obse-435
      do 66 j=1,k                                                       obse-436
   66 f3=-f3*dsqrt(dfloat(il-j)/dfloat(il+j))                           obse-437
      jnm=nm                                                            obse-438
      inm=iabs(jnm)                                                     obse-439
      if (jnm.eq.0) go to 68                                            obse-440
      if (inm.ne.jnm.and.2*(inm/2).ne.inm) f3=-f3                       obse-441
      do 67 j=1,inm                                                     obse-442
   67 f3=f3*dsqrt(dfloat((k+j)*(k-j+1))/dfloat(j*(il-j)))               obse-443
   68 jcal=jcal+1                                                       obse-444
      is=nx(2,ical)-nx(1,ical)                                          obse-445
      if (jcal+is.gt.jts) call memo('obse',jts,jcal+is)                 obse-446
      dm(jcal+kx)=f3                                                    obse-447
      if (is.lt.1) go to 70                                             obse-448
      f2=0.d0                                                           obse-449
      d1=k*(k+1)-(il+1)*(inm-1)                                         obse-450
      c2=0.d0                                                           obse-451
      do 69 j=1,is                                                      obse-452
      c1=c2                                                             obse-453
      c2=dsqrt(dfloat(j*(il-j)*(j+inm)*(il-j-inm)))                     obse-454
      d1=d1+dfloat(2*(2*j-2-il+inm))                                    obse-455
      f1=f2                                                             obse-456
      f2=f3                                                             obse-457
      f3=-(d1*f2+c1*f1)/c2                                              obse-458
      jcal=jcal+1                                                       obse-459
      dm(jcal+kx)=f3                                                    obse-460
   69 continue                                                          obse-461
   70 n=ical                                                            obse-462
   71 if (lt1) go to 73                                                 obse-463
      do 72 ma=1,4                                                      obse-464
      mc=20*ncal+4*l+ma-4                                               obse-465
   72 ny(mc+2*kx)=nx(ma,n)                                              obse-466
      lz(l)=nx(16,n).ne.0                                               obse-467
   73 continue                                                          obse-468
      if (lt1) go to 76                                                 obse-469
      lz(5)=kt.eq.0                                                     obse-470
      lz(6)=2*(kt/2).ne.kt                                              obse-471
      nz(1)=0                                                           obse-472
      nz(2)=0                                                           obse-473
      if (lz(4)) nz(2)=mf(6,i)                                          obse-474
      if (lz(3).or.lz(4)) nz(1)=mf(6,i)                                 obse-475
      lo(126)=lo(126).or.nz(1).ne.0                                     obse-476
      ia1=0                                                             obse-477
      ia2=1                                                             obse-478
      do 74 li=1,6                                                      obse-479
      if (lz(li)) ia1=ia1+ia2                                           obse-480
   74 ia2=2*ia2                                                         obse-481
      ny(20*ncal+17+2*kx)=ia1                                           obse-482
      ny(20*ncal+18+2*kx)=nz(1)+1000*nz(2)                              obse-483
      dm(10*ncal+10+kx)=bm(3,ki)                                        obse-484
      do 75 li=2,4,2                                                    obse-485
      if (.not.lz(li)) go to 75                                         obse-486
      im=ny(20*ncal+4*li-3+2*kx)                                        obse-487
      ny(20*ncal+4*li-3+2*kx)=mt(li)-ny(20*ncal+4*li-2+2*kx)+1          obse-488
      ny(20*ncal+4*li-2+2*kx)=mt(li)-im+1                               obse-489
      ny(20*ncal+4*li-1+2*kx)=-ny(20*ncal+4*li-1+2*kx)                  obse-490
      ny(20*ncal+4*li+2*kx)=ny(20*ncal+4*li+2*kx)+im+ny(20*ncal+4*li-2+2obse-491
     1*kx)                                                              obse-492
   75 continue                                                          obse-493
   76 ncal=ncal+1                                                       obse-494
   77 continue                                                          obse-495
      if (lt1) go to 78                                                 obse-496
      mf(4,i)=ncal                                                      obse-497
      mf(3,i)=ncal+i1-i2                                                obse-498
   78 continue                                                          obse-499
      if (.not.lt1) go to 79                                            obse-500
      kx=9*max0(knx,ical)                                               obse-501
      jcal=10*ncal                                                      obse-502
      jts=jtn-18*(kx-1)                                                 obse-503
      if (jcal.gt.jts) call memo('obse',jts,jcal)                       obse-504
      go to 58                                                          obse-505
c storage of legends and copy of results.                               obse-506
   79 do 81 i=1,nt                                                      obse-507
      i5=iabs(mf(2,i))+1                                                obse-508
      do 80 j=3,7                                                       obse-509
   80 cmf(j+3,i)=itz(j,i5)                                              obse-510
   81 continue                                                          obse-511
      jn=2*jcal                                                         obse-512
      do 82 i=1,jn                                                      obse-513
   82 am(i)=cbm(i+2*kx)                                                 obse-514
      return                                                            obse-515
   83 write (mw,1015) i,mf(2,i)                                         obse-516
      go to 92                                                          obse-517
   84 write (mw,1016) i,mf(2,i)                                         obse-518
      go to 92                                                          obse-519
   85 write (mw,1017) nx(2*ij+5,k),nx(2*ij+6,k),mt(ij)                  obse-520
      go to 92                                                          obse-521
   86 write (mw,1018)                                                   obse-522
      go to 92                                                          obse-523
   87 write (mw,1019) nx(2*i-1,k1),nx(2*i,k1)                           obse-524
      go to 92                                                          obse-525
   88 write (mw,1020)                                                   obse-526
      go to 92                                                          obse-527
   89 write (mw,1021) mf(1,i)                                           obse-528
      go to 92                                                          obse-529
   90 write (mw,1022) mf(1,i)                                           obse-530
      go to 92                                                          obse-531
   91 write (mw,1023) mt(l),mf(2,i),l,k                                 obse-532
   92 write (mw,1024)                                                   obse-533
      stop                                                              obse-534
 1000 format (2l1,i1,i2,i5,5a4)                                         obse-535
 1001 format (8i5)                                                      obse-536
 1002 format (6f10.5)                                                   obse-537
 1003 format (/' observable',i3,' labelled',5x,5a4,10x,i3,' components')obse-538
 1004 format (' defined with an axis perpendicular to the reaction planeobse-539
     1')                                                                obse-540
 1005 format (' defined in the laboratory system')                      obse-541
 1006 format (' defined with respect to the incident beam')             obse-542
 1007 format (' not completely defined by tensors')                     obse-543
 1008 format (/6(11x,4i2,2x))                                           obse-544
 1009 format (6(' +',f8.4,'*m',9x))                                     obse-545
 1010 format (6(11x,4i2,2x))                                            obse-546
 1011 format (' imaginary parts'/6(1x,f8.5,12x))                        obse-547
 1012 format (6(' +',f8.4,'*a',9x))                                     obse-548
 1013 format (//' after transformation:'/)                              obse-549
 1014 format (' the observable read with number',i4,' is not used.')    obse-550
 1015 format (' the',i4,'th observable, of kind',i2,' must be for experiobse-551
     1mental data.')                                                    obse-552
 1016 format (' the',i4,'th observable, of kind',i2,' is not defined.') obse-553
 1017 format (' non tensor indications',i4,' and',i4,' incorrect for (2*obse-554
     1s+1) =',i3)                                                       obse-555
 1018 format (' zero observable.')                                      obse-556
 1019 format (/' too large magnetic quantum number or negative multipolaobse-557
     1rity',2i6)                                                        obse-558
 1020 format (' the sum of magnetic quantum numbers is odd for one compoobse-559
     1nent.')                                                           obse-560
 1021 format (' no cross section divided by rutherford''s for the inelasobse-561
     1tic channel',i3)                                                  obse-562
 1022 format (' no polarisation for a zero spin in the channel',i3)     obse-563
 1023 format (5x,i5,' is a too small spin in channel',i4,' and particle'obse-564
     1,i4,' for a polarisation of tensor order',i4)                     obse-565
 1024 format (//' in obse  ...  stop  ...')                             obse-566
      end                                                               obse-567
c 26/04/07                                                      ecis06  colf-000
      subroutine colf(ncolt,ncoll,ipi,wv,ism,lmax1,lmax2,h,lm,niv,lo,fg,colf-001
     1xg,lmax3,kxt,iexp,z)                                              colf-002
c coulomb functions at the matching point rm=ism*h.                     colf-003
c input:     ncolt:   number of nuclear states (coupled or not)         colf-004
c                     and continua for compound nucleus.                colf-005
c            ncoll:   number of coupled states.                         colf-006
c            ipi(j,i):multiplicity of particle and target for j=1 and 2,colf-007
c                     product of charges for j=4,                       colf-008
c                     number of angular momenta for i=1 and j=10.       colf-009
c            wv(j,*): mass of particle and target for j=1,2,            colf-010
c                     centre of mass energy in mev for j=3.             colf-011
c            ism:     number of points for integration.                 colf-012
c            lmax1:   maximum number of coulomb functions.              colf-013
c            lmax2:   maximum number of coulomb phase shifts.           colf-014
c            h:       integration step size in fermis.                  colf-015
c            lm:      length of working space z.                        colf-016
c            niv:     addresses of coulomb integrals in niv(*,*,3).     colf-017
c            lo(i):   logical controls:                                 colf-018
c               lo(8)  =.true. relativistic kinematics.                 colf-019
c               lo(44) =.true. coulomb corrections.                     colf-020
c               lo(108)=.true. diagonal coulomb corrections are needed. colf-021
c               lo(109)=.true. for dirac potentials.                    colf-022
c               lo(133)=.true. store scalar and coulomb potential       colf-023
c                              independently.                           colf-024
c output:    ipi(j,i):starting address of penetrabilities for i=ncoll+1 colf-025
c                     to ncolt and j=8.                                 colf-026
c                     number of angular momenta for j=10.               colf-027
c            wv(j,*): output of subroutine khco for j=4 to 11.          colf-028
c            fg:      in fg(i,j,k), coulomb wave functions f, fp, g, gp colf-029
c                     respectively for j=1 to 4, for angular momentum   colf-030
c                     i-1 and channel k. if coulomb corrections are     colf-031
c                     requested, integrals of f*f, f*g, g*f and g*g     colf-032
c                     divided by r**2 from matching radius to infinity  colf-033
c                     with the same angular momentum i-1 respectively   colf-034
c                     for j+1 to 4 and k given by niv(*,*,3).           colf-035
c            xg:      in xg(i,k), sigma(i-1)-sigma(0) for angular       colf-036
c                     momentum i-1 and channel k. if coulomb correctionscolf-037
c                     are requested, integrals of f*f divided by r**2   colf-038
c                     from zero to infinity and k given by niv(*,*,3).  colf-039
c            lmax3:   effective maximum number of coulomb functions.    colf-040
c            kxt:     number of penetrabilities for uncoupled states.   colf-041
c working area:                                                         colf-042
c            iexp:    powers of 10 for large values of functions        colf-043
c                     (multiples of 10**15).                            colf-044
c            z:       working area for subroutine cori.                 colf-045
c                                                                       colf-046
c for the common  /dcons/ see calc.                                     colf-047
c                                                                       colf-048
c significance of the quantities in common /dcons/:                     colf-049
c  cm:        atomic mass in mev.                                       colf-050
c  chb:       planck constant /(2*pi) in mev*fermi.                     colf-051
c  ccz:       coulomb alpha constant.                                   colf-052
c  ck:        h-bar*c.                                                  colf-053
c  xz:        conversion factor to millibarns.                          colf-054
c   defined:  xz.                                                       colf-055
c   used:     cm,chb,ccz,ck.                                            colf-056
c                                                                       colf-057
c***********************************************************************colf-058
      implicit real*8 (a-h,o-z)                                         colf-059
      logical lo(150)                                                   colf-060
      dimension ipi(11,*),wv(22,*),fg(lmax1,4,*),xg(lmax2,*),iexp(*),z(*colf-061
     1),niv(ncoll,ncoll,3)                                              colf-062
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            colf-063
      common /inout/ mr,mw,ms                                           colf-064
      kxt=0                                                             colf-065
      lo(133)=.false.                                                   colf-066
      write (mw,1000)                                                   colf-067
c check of the length of working field for iexp.                        colf-068
      if (lm.lt.lmax1) call memo('colf',lm,lmax1)                       colf-069
      lmax3=lmax1                                                       colf-070
c wave number,coulomb parameter and call to coulomb subroutines.        colf-071
      call khco(ncolt,wv(1,1),ipi,wv(1,1),h,lo)                         colf-072
      xz=10.d0/dfloat(ipi(2,1)*ipi(3,1))/wv(4,1)**2                     colf-073
      rm=ism*h                                                          colf-074
      do 6 i=1,ncolt                                                    colf-075
      lo(133)=lo(133).or.((wv(5,i).ne.0.d0).and.(wv(9,i).ne.wv(10,i)))  colf-076
      if (i.gt.ncoll) go to 5                                           colf-077
      write (mw,1001) i,(wv(j,i),j=4,8)                                 colf-078
      rau=rm*wv(11,i)                                                   colf-079
      eta=wv(5,i)                                                       colf-080
      if (wv(3,i).gt.0.d0) go to 1                                      colf-081
      call cocl(eta,rau,lmax1-1,fg(1,1,i),fg(1,2,i),fg(1,3,i),fg(1,4,i),colf-082
     1xg(1,i))                                                          colf-083
      go to 2                                                           colf-084
    1 lx=lmax1                                                          colf-085
      call fcou(lx-1,eta,rau,fg(1,1,i),fg(1,2,i),fg(1,3,i),fg(1,4,i),iexcolf-086
     1p,xg(1,i))                                                        colf-087
    2 ipi(10,i)=ipi(10,1)                                               colf-088
      if (wv(3,i).lt.0.d0) go to 6                                      colf-089
c computation of coulomb phase-shifts.                                  colf-090
      lmx1=lmax3                                                        colf-091
c correction of large value and search for maximum effective number     colf-092
c of coulomb functions.                                                 colf-093
      do 3 j=1,lmx1                                                     colf-094
      if (iexp(j).eq.0) go to 3                                         colf-095
      if (lo(108).or.iexp(j).gt.15) lmax3=min0(lmax3,j)                 colf-096
      fg(j,1,i)=fg(j,1,i)*1.d-15                                        colf-097
      fg(j,2,i)=fg(j,2,i)*1.d-15                                        colf-098
      fg(j,3,i)=fg(j,3,i)*1.d15                                         colf-099
      fg(j,4,i)=fg(j,4,i)*1.d15                                         colf-100
    3 continue                                                          colf-101
      if (lmx1.ne.lmax3) write (mw,1002) lmx1,lmax3                     colf-102
      if (.not.lo(108)) ipi(10,i)=min0(lmax3-1,ipi(10,1))               colf-103
c computation of coulomb integrals.                                     colf-104
      xi=xg(1,i)                                                        colf-105
      si=wv(11,i)                                                       colf-106
      do 4 j=1,i                                                        colf-107
      k=niv(i,j,3)                                                      colf-108
      if (k.eq.0) go to 4                                               colf-109
      xj=xg(1,j)                                                        colf-110
      ej=wv(5,j)                                                        colf-111
      sj=wv(11,j)                                                       colf-112
      call cori(eta,ej,rm*si,rm*sj,xg(1,k),xi,xj,fg(1,1,i),fg(1,1,j),z,lcolf-113
     1max1,lmax2,lm,lmax3,fg(1,1,k))                                    colf-114
    4 continue                                                          colf-115
      go to 6                                                           colf-116
    5 ly=0                                                              colf-117
      if (wv(3,i).gt.0.d0) ly=min0(idint(4.d0+3.3d0*dsqrt(wv(3,i))),lmaxcolf-118
     11)                                                                colf-119
      ipi(10,i)=ly-1                                                    colf-120
      ipi(8,i)=kxt                                                      colf-121
      kxt=kxt+ly*ipi(2,i)                                               colf-122
    6 continue                                                          colf-123
      do 8 i=1,ncoll                                                    colf-124
      xg(1,i)=0.d0                                                      colf-125
      do 7 j=2,lmax2                                                    colf-126
    7 xg(j,i)=xg(j-1,i)+datan2(wv(5,i),dfloat(j-1))                     colf-127
    8 continue                                                          colf-128
      lo(133)=lo(133).and.(.not.lo(109))                                colf-129
      return                                                            colf-130
 1000 format (/' level       wave number  coulomb parameter   reduced macolf-131
     1ss       reduced energy     step size')                           colf-132
 1001 format (1x,i5,5f18.10)                                            colf-133
 1002 format (' number of finite coulomb integrals reduced from',i6,' tocolf-134
     1',i6)                                                             colf-135
      end                                                               colf-136
c 03/06/07                                                      ecis06  khco-000
      subroutine khco(ncolt,wv,ipi,ww,h,lo)                             khco-001
c input:     ncolt:   number of nuclear states (coupled or not) when    khco-002
c                     called from colf or number of continua for        khco-003
c                     compound nucleus when called from conu.           khco-004
c            wv(j,*): mass of the particle for j=1,                     khco-005
c                     mass of the target for j=2,                       khco-006
c                     energy in the centre of mass in mev for j=3.      khco-007
c                     energy in the laboratory system in mev for j=12.  khco-008
c            ipi(j,i):product of charges for j=4.                       khco-009
c            ww:      wv for the ground state.                          khco-010
c            h:       integration step size in fermis.                  khco-011
c            lo(i):   logical controls:                                 khco-012
c               lo(8)  =.true. relativistic kinematics.                 khco-013
c               lo(93) =.true. no recoil correction for reactions with  khco-014
c                              small differences (less than .5) of      khco-015
c                              target masses.                           khco-016
c               lo(94) =.true. non relativistic "reduced mass" for dirackhco-017
c                              equation.                                khco-018
c               lo(95) =.true. "reduced energy" for non coulomb         khco-019
c                              interaction in relativistic schroedinger khco-020
c                              equation or use of rest mass in dirac    khco-021
c                              equation.                                khco-022
c               lo(96) =.true. "reduced mass" for coulomb interaction   khco-023
c                              in relativistic schroedinger equation.   khco-024
c               lo(97) =.true. same reduced mass for all the states     khco-025
c                              with small differences (less than .5)    khco-026
c                              of target masses.                        khco-027
c               lo(109)=.true. for dirac potentials.                    khco-028
c output:    wv(j,*): wave number in 1/fermi for j=4,                   khco-029
c                     coulomb parameter for j=5,                        khco-030
c                     reduced mass for j=6.                             khco-031
c                     reduced energy for j=7.                           khco-032
c                     step size for this level for j=8.                 khco-033
c                     square root of coef. of scalar potentials for j=9.khco-034
c                     square root of coef. of coul. potentials for j109.khco-035
c                     k multiplied by ratio of step sizes for j=11.     khco-036
c                     reduced energy term for j=12.                     khco-037
c                     set to 0. for j=14 to 19.                         khco-038
c                                                                       khco-039
c for the common  /dcons/ see calc.                                     khco-040
c                                                                       khco-041
c significance of the quantities in common /dcons/:                     khco-042
c  cm:        atomic mass in mev.                                       khco-043
c  chb:       planck constant /(2*pi) in mev*fermi.                     khco-044
c  cmb:       atomic mass cm divided by h-bar*c.                        khco-045
c  ccz:       coulomb alpha constant.                                   khco-046
c  ck:        h-bar*c.                                                  khco-047
c   used:     cm,chb,ccz,ck.                                            khco-048
c                                                                       khco-049
c***********************************************************************khco-050
      implicit real*8 (a-h,o-z)                                         khco-051
      logical lo(150)                                                   khco-052
      dimension ipi(11,*),wv(22,*),ww(22)                               khco-053
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            khco-054
      common /inout/ mr,mw,ms                                           khco-055
      amt1=dmax1(ww(1),ww(2))                                           khco-056
      amr=ww(3)/cm+ww(1)+ww(2)                                          khco-057
c wave number,coulomb parameter and call to coulomb subroutines.        khco-058
      do 6 i=1,ncolt                                                    khco-059
      amt2=dmax1(wv(1,i),wv(2,i))                                       khco-060
      rc=1.d0                                                           khco-061
      if ((.not.lo(93)).or.(dabs(amt1-amt2).gt.0.5d0)) rc=amt1/amt2     khco-062
      hrec=h*rc                                                         khco-063
      if ((.not.lo(97)).or.(dabs(amt1-amt2).gt.0.5d0)) go to 1          khco-064
      amp=ww(1)                                                         khco-065
      amt=ww(2)                                                         khco-066
      go to 2                                                           khco-067
    1 amp=wv(1,i)                                                       khco-068
      amt=wv(2,i)                                                       khco-069
    2 if (lo(8)) go to 3                                                khco-070
c non relativistic kinematics: no mass correction.                      khco-071
      amre=amp*amt/(amp+amt)                                            khco-072
      amrm=amre                                                         khco-073
      wsk2=ck*wv(3,i)*amrm                                              khco-074
      go to 5                                                           khco-075
    3 wsk2=0.125d0*ck*wv(3,i)*(wv(3,i)/cm+2.d0*wv(1,i)+2.d0*amt)*(wv(3,ikhco-076
     1)/cm+2.d0*wv(1,i))*(wv(3,i)/cm+2.d0*amt)/amr**2                   khco-077
      wv(4,i)=dsqrt(dabs(wsk2))                                         khco-078
      amrm=amp*amt/amr                                                  khco-079
      if (lo(109)) go to 4                                              khco-080
c relativistic kinematics for schroedinger equation.                    khco-081
      amrd=(amr**4-(wv(1,i)**2-amt**2)**2)/(4.d0*amr**3)                khco-082
      amre=amrd                                                         khco-083
      if (lo(96)) amre=amrm                                             khco-084
      if (lo(95)) amrm=amre                                             khco-085
      go to 5                                                           khco-086
    4 if (lo(94)) amrm=amp*amt/(amp+amt)                                khco-087
      if (lo(95)) amrm=amp                                              khco-088
      amre=dsqrt(wsk2/cmb**2+amrm**2)                                   khco-089
      if (lo(96)) amre=dsqrt(wsk2/cmb**2+amp**2)                        khco-090
    5 wv(4,i)=dsqrt(dabs(wsk2))                                         khco-091
      wv(5,i)=cm*ccz*amre*ipi(4,i)/wv(4,i)/chb**2                       khco-092
      wv(6,i)=cm*amrm                                                   khco-093
      wv(7,i)=cm*amre                                                   khco-094
      wv(8,i)=hrec                                                      khco-095
      wv(9,i)=hrec*dsqrt(ck*amrm)                                       khco-096
      wv(10,i)=hrec*dsqrt(ck*amre)                                      khco-097
      wv(11,i)=wv(4,i)*rc                                               khco-098
      wv(12,i)=hrec*hrec*wsk2                                           khco-099
      if (dabs(wv(5,i)).le.400.d0) go to 6                              khco-100
      write (mw,1000) i,wv(5,i)                                         khco-101
      wv(5,i)=400.d0*wv(5,i)/dabs(wv(5,i))                              khco-102
    6 continue                                                          khco-103
      return                                                            khco-104
 1000 format (' **** beware ****'/' the absolute value of the coulomb pakhco-105
     1rameter of level',i3,' which is',d16.8,' is reduced to 400.')     khco-106
      end                                                               khco-107
c 31/08/06                                                      ecis06  cocl-000
      subroutine cocl(eta,r,l,g,gd,f,fd,sigma)                          cocl-001
c computation of logarithmic derivative at the matching radius of       cocl-002
c increasing and decreasing solutions with wronskian equal to unity     cocl-003
c for closed channels..                                                 cocl-004
c input:     eta:     coulomb parameter.                                cocl-005
c            r:       |k|*r value.                                      cocl-006
c            l:       maximum l value.                                  cocl-007
c output:    f:       decreasing solution at (eta,rho) for i = 1 to l+1.cocl-008
c            fd:      derivative of f(i) for i = 1 to l+1.              cocl-009
c            g:       increasing solution for i = 1 to l+1.             cocl-010
c            gd:      derivative of f(i) for i = 1 to l+1.              cocl-011
c            sigma:   returns 0 at the same number.                     cocl-012
c                                                                       cocl-013
c for negative values of eta, the logarithmic derivative of the         cocl-014
c decreasing solution is computed, the logarithmic derivative of the    cocl-015
c increasing function is assumed opposite. if a negative eta differs    cocl-016
c by less than 1/4 percent of an integer the next integer value is      cocl-017
c used (laguerre polynomial); in other cases, backwards integration     cocl-018
c starting beyond the oscillations estimated up to 2*|eta| is used.     cocl-019
c                                                                       cocl-020
c the functions are renormalised to f=g and such that  f*gd-g*fd=1      cocl-021
c***********************************************************************cocl-022
      implicit real*8 (a-h,o-z)                                         cocl-023
      dimension g(*),gd(*),f(*),fd(*),sigma(*),s(7)                     cocl-024
      data gama /0.577215664901533d0/                                   cocl-025
c for l=0.                                                              cocl-026
      if (eta.le.-1.d-6) go to 17                                       cocl-027
      if (eta.gt.1.d-6) go to 1                                         cocl-028
c no coulomb potential.                                                 cocl-029
      fp=-1.d0                                                          cocl-030
      gp=1.d0                                                           cocl-031
      go to 14                                                          cocl-032
c positive values of eta.                                               cocl-033
    1 if ((eta+1.d0)*r.gt.8.d0) go to 9                                 cocl-034
c series expansion.                                                     cocl-035
      r2=-r*r                                                           cocl-036
      et2=eta+eta                                                       cocl-037
      u0=0.d0                                                           cocl-038
      u1=r                                                              cocl-039
      v0=1.d0                                                           cocl-040
      v1=0.d0                                                           cocl-041
      u=u0+u1                                                           cocl-042
      v=v0+v1                                                           cocl-043
      up=1.d0                                                           cocl-044
      vp=0.d0                                                           cocl-045
      do 3 n=2,10000                                                    cocl-046
      xn=dfloat(n)                                                      cocl-047
      xn1=xn*(xn-1.d0)                                                  cocl-048
      u2=(et2*r*u1-r2*u0)/xn1                                           cocl-049
      u=u+u2                                                            cocl-050
      v2=(et2*r*v1-r2*v0-et2*(2.d0*xn-1.d0)*u2)/xn1                     cocl-051
      v=v+v2                                                            cocl-052
      up=up+xn*u2/r                                                     cocl-053
      vp=vp+xn*v2/r                                                     cocl-054
      if (dabs(u2).gt.1.d-16*dabs(u)) go to 2                           cocl-055
      if (dabs(v2).le.1.d-16*dabs(v)) go to 4                           cocl-056
    2 u0=u1                                                             cocl-057
      u1=u2                                                             cocl-058
      v0=v1                                                             cocl-059
    3 v1=v2                                                             cocl-060
    4 xx=dabs(eta)                                                      cocl-061
      if (xx.lt.1.d-8) go to 7                                          cocl-062
      y=xx                                                              cocl-063
      k=0                                                               cocl-064
      if (xx.le.7.5d0) k=idint(8.5d0-xx)                                cocl-065
      x=1.d0+xx+dfloat(k)                                               cocl-066
      uu=1.d0/x**2                                                      cocl-067
      psr=dlog(x)-.5d0/x-uu/12.d0+uu**2/120.d0-uu**3/252.d0+uu**4/240.d0cocl-068
     1-uu**5/132.d0+uu**6*691.d0/32760.d0                               cocl-069
      if (k.eq.0) go to 6                                               cocl-070
      do 5 i=1,k                                                        cocl-071
    5 psr=psr-1.d0/(x-dfloat(i))                                        cocl-072
    6 psr=psr-.5d0/y+2.d0*gama-1.d0                                     cocl-073
      go to 8                                                           cocl-074
    7 psr=gama-1.d0                                                     cocl-075
    8 ce=et2*(psr+dlog(2.d0*r))                                         cocl-076
      fp=(vp+up*ce+et2*u/r)/(v+u*ce)                                    cocl-077
      go to 14                                                          cocl-078
    9 if (r.lt.10.d0*(eta+1.d0)) go to 11                               cocl-079
c asymptotic expansion.                                                 cocl-080
      c=1.d0/r                                                          cocl-081
      a=1.d0                                                            cocl-082
      b=a                                                               cocl-083
      d=0.d0                                                            cocl-084
      do 10 m=1,26                                                      cocl-085
      am=dfloat(m)                                                      cocl-086
      a=-a*0.5d0*(eta+am-1.d0)*(eta+am)*c/am                            cocl-087
      b=b+a                                                             cocl-088
   10 d=d-a*am*c                                                        cocl-089
      fp=d/b-1.d0-eta/r                                                 cocl-090
      go to 14                                                          cocl-091
c long range integration.                                               cocl-092
   11 h=dmin1(.001953125d0,.25d0*r)                                     cocl-093
      n=1+idint(10.d0/h)                                                cocl-094
      s(6)=dexp(-h)                                                     cocl-095
      s(7)=1.d0                                                         cocl-096
      v2=h**2*(1.d0+2.d0*eta/(r+h*dfloat(n)))/12.d0                     cocl-097
      v3=h**2*(1.d0+2.d0*eta/(r+h*dfloat(n-1)))/12.d0                   cocl-098
      do 13 i=n-2,-3,-1                                                 cocl-099
      do 12 j=1,6                                                       cocl-100
   12 s(j)=s(j+1)/s(7)                                                  cocl-101
      v1=v2                                                             cocl-102
      v2=v3                                                             cocl-103
      v3=h**2*(1.d0+2.d0*eta/(r+h*dfloat(i)))/12.d0                     cocl-104
   13 s(7)=(s(6)*(2.d0+10.d0*v2)-s(5)*(1.d0-v1))/(1.d0-v3)              cocl-105
      fp=((s(1)-s(7))/60.d0+.15d0*(s(6)-s(2))+.75d0*(s(3)-s(5)))/h/s(4) cocl-106
   14 xx=1.d0                                                           cocl-107
      mp=l+25+idint(5.d0*dabs(eta))                                     cocl-108
      do 15 m=mp,1,-1                                                   cocl-109
      xm=dfloat(m)                                                      cocl-110
      a=eta/xm                                                          cocl-111
      b=a+xm/r                                                          cocl-112
      xx=-(a*a-1.d0)/(b+xx)+b                                           cocl-113
      if (m.le.l) gd(m)=xx                                              cocl-114
   15 continue                                                          cocl-115
      do 16 m=1,l+1                                                     cocl-116
      x=dsqrt(dabs(gd(m)-fp))                                           cocl-117
      xm=dfloat(m)                                                      cocl-118
      f(m)=1.d0/x                                                       cocl-119
      fd(m)=fp/x                                                        cocl-120
      g(m)=1.d0/x                                                       cocl-121
      gd(m)=gd(m)/x                                                     cocl-122
      a=eta/xm                                                          cocl-123
      b=a+xm/r                                                          cocl-124
   16 fp=(a*a-1.d0)/(b-fd(m)/f(m))-b                                    cocl-125
      go to 25                                                          cocl-126
c negative values of eta.                                               cocl-127
   17 lp=idint(-eta+.5d0)                                               cocl-128
      if (dabs((dfloat(lp)+eta)/eta).lt..0025d0) go to 22               cocl-129
      ll=min0(l,idint(-eta))                                            cocl-130
      rp=dmax1(-2.d0*eta-r,0.d0)                                        cocl-131
      do 20 m=0,ll                                                      cocl-132
      al=m*(m+1)                                                        cocl-133
      h=dmin1(.001953125d0,r/dfloat(4+m))                               cocl-134
      n=idint(1.d0+(40.d0+rp)/h)                                        cocl-135
      rr=r+dfloat(n)*h                                                  cocl-136
      v2=h**2*(1.d0+al/rr**2+2.d0*eta/rr)/12.d0                         cocl-137
      rr=r+dfloat(n-1)*h                                                cocl-138
      v3=h**2*(1.d0+al/rr**2+2.d0*eta/rr)/12.d0                         cocl-139
      s(6)=dexp(-h)                                                     cocl-140
      s(7)=1.d0                                                         cocl-141
      do 19 i=n-2,-3,-1                                                 cocl-142
      do 18 j=1,6                                                       cocl-143
   18 s(j)=s(j+1)/s(7)                                                  cocl-144
      v1=v2                                                             cocl-145
      v2=v3                                                             cocl-146
      rr=r+dfloat(i)*h                                                  cocl-147
      v3=h**2*(1.d0+al/rr**2+2.d0*eta/rr)/12.d0                         cocl-148
   19 s(7)=(s(6)*(2.d0+10.d0*v2)-s(5)*(1.d0-v1))/(1.d0-v3)              cocl-149
      fp=((s(1)-s(7))/60.d0+.15d0*(s(6)-s(2))+.75d0*(s(3)-s(5)))/h      cocl-150
      ff=s(4)                                                           cocl-151
      gp=1.d0                                                           cocl-152
      if (fp.ne.0.d0) gp=-fp                                            cocl-153
      gg=1.d0                                                           cocl-154
      if (ff.ne.0.d0) gg=ff                                             cocl-155
      x=dsqrt(dabs(gp*ff-gg*fp))                                        cocl-156
      f(m+1)=ff/x                                                       cocl-157
      fd(m+1)=fp/x                                                      cocl-158
      g(m+1)=gg/x                                                       cocl-159
      gd(m+1)=gp/x                                                      cocl-160
   20 continue                                                          cocl-161
      if (ll.eq.l) go to 25                                             cocl-162
      fp=fd(ll+1)/f(ll+1)                                               cocl-163
      do 21 m=ll+1,l                                                    cocl-164
      xm=dfloat(m)                                                      cocl-165
      a=eta/xm                                                          cocl-166
      b=a+xm/r                                                          cocl-167
      fp=(a*a-1.d0)/(b-fd(m)/f(m))-b                                    cocl-168
      x=dsqrt(dabs(2.d0*fp))                                            cocl-169
      f(m+1)=1.d0/x                                                     cocl-170
      fd(m+1)=fp/x                                                      cocl-171
      g(m+1)=1.d0/x                                                     cocl-172
   21 gd(m+1)=-fp/x                                                     cocl-173
      go to 25                                                          cocl-174
   22 ff=1.d0                                                           cocl-175
      fp=1.d0                                                           cocl-176
      mp=l+50-idint(5.d0*eta)                                           cocl-177
      do 24 m=mp,1,-1                                                   cocl-178
      ffm=dfloat(m)                                                     cocl-179
      a=eta/ffm                                                         cocl-180
      b=a+ffm/r                                                         cocl-181
      z=fp+b*ff                                                         cocl-182
      fp=b*z-(a*a-1.d0)*ff                                              cocl-183
      ff=z                                                              cocl-184
      if (dabs(ff).lt.1.d0) go to 23                                    cocl-185
      fp=fp/ff                                                          cocl-186
      ff=1.d0                                                           cocl-187
   23 if (m.gt.l+1) go to 24                                            cocl-188
      gp=1.d0                                                           cocl-189
      if (fp.ne.0.d0) gp=-fp                                            cocl-190
      gg=1.d0                                                           cocl-191
      if (ff.ne.0.d0) gg=ff                                             cocl-192
      x=dsqrt(dabs(gp*ff-gg*fp))                                        cocl-193
      f(m)=ff/x                                                         cocl-194
      fd(m)=fp/x                                                        cocl-195
      g(m)=gg/x                                                         cocl-196
      gd(m)=gp/x                                                        cocl-197
   24 continue                                                          cocl-198
   25 do 26 m=0,l                                                       cocl-199
   26 sigma(m+1)=0.d0                                                   cocl-200
      return                                                            cocl-201
      end                                                               cocl-202
c 19/11/05                                                      ecis06  fcou-000
      subroutine fcou(l,eta,ro,f,fp,g,gp,iexp,sigma)                    fcou-001
c coulomb functions for rho > 0 and -500 < eta < 500  from - dfcoul     fcou-002
c for the mathematical description see chr. bardin et. al. cea-n-906    fcou-003
c or bardin et al. comp. physics comm. vol 3 (1972) pages 73-87         fcou-004
c numerical precision: at least 8 significant figures, except for       fcou-005
c the region -8 < eta < -6 and ro < 125/6                               fcou-006
c the computation of the phase shifts has been removed except for l=0   fcou-007
c input:     l:       final angular momentum required.                  fcou-008
c            eta:     coulomb parameter.                                fcou-009
c            ro:      radius.                                           fcou-010
c output:    f:       regular function.                                 fcou-011
c            fp:      derivative of the regular function.               fcou-012
c            g:       irregular function.                               fcou-013
c            gp:      derivative of the irregular function.             fcou-014
c            iexp:    powers of 10 by which to multiply the irregular   fcou-015
c                     functions and divide the regular , if this power  fcou-016
c                     exceeds 15.                                       fcou-017
c            sigma:   coulomb phase-shift for l=0.                      fcou-018
c                                                                       fcou-019
c subroutines fcou, fcz0, yfri, yfcl, yfas, yfir and functions sigm and fcou-020
c psi will be kept the same for dwba and ecis.                          fcou-021
c***********************************************************************fcou-022
      implicit real*8 (a-h,o-z)                                         fcou-023
      dimension f(*),fp(*),g(*),gp(*),iexp(*),sigma(*)                  fcou-024
      common /inout/ mr,mw,ms                                           fcou-025
      if (ro.gt.0.d0.and.dabs(eta).le.500.d0) go to 1                   fcou-026
      write (mw,1000) eta,ro                                            fcou-027
      stop                                                              fcou-028
c computation of the coulomb functions for l=0.                         fcou-029
    1 call fcz0(eta,ro,f1,fp1,g1,gp1,iexp1,sigma1)                      fcou-030
      f(1)=f1                                                           fcou-031
      fp(1)=fp1                                                         fcou-032
      g(1)=g1                                                           fcou-033
      gp(1)=gp1                                                         fcou-034
      iexp(1)=iexp1                                                     fcou-035
      sigma(1)=sigma1                                                   fcou-036
      if (l.le.0) return                                                fcou-037
      linf=0                                                            fcou-038
      lin=1                                                             fcou-039
      ind=0                                                             fcou-040
      l1=l+1                                                            fcou-041
      etac=eta*eta                                                      fcou-042
      if ((eta.gt.0.d0.and.ro.lt.eta+eta.or.ro.lt.eta+dsqrt(etac+1.d0)))fcou-043
     1 go to 7                                                          fcou-044
      if (ro.ge.eta+dsqrt(etac+dfloat(l*(l+1)))) go to 5                fcou-045
    2 roinf=eta+dsqrt(etac+dfloat(linf*(linf+1)))                       fcou-046
      if (ro.lt.roinf) go to 3                                          fcou-047
      if (linf.ge.l) go to 4                                            fcou-048
      linf=linf+1                                                       fcou-049
      go to 2                                                           fcou-050
    3 ind=1                                                             fcou-051
    4 lin=linf+1                                                        fcou-052
    5 xm=1.d0                                                           fcou-053
      if (ind.eq.0) lin=l1                                              fcou-054
c upward recursion for the regular and irregular functions.             fcou-055
      do 6 j=2,lin                                                      fcou-056
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-057
      zag=eta/xm+xm/ro                                                  fcou-058
      f(j)=(zag*f(j-1)-fp(j-1))/zig                                     fcou-059
      fp(j)=zig*f(j-1)-zag*f(j)                                         fcou-060
      g(j)=(zag*g(j-1)-gp(j-1))/zig                                     fcou-061
      gp(j)=zig*g(j-1)-zag*g(j)                                         fcou-062
      iexp(j)=iexp(1)                                                   fcou-063
    6 xm=xm+1.d0                                                        fcou-064
      if (ind.eq.0) return                                              fcou-065
c descending recursion for the regular function.                        fcou-066
    7 ftest=f(lin)                                                      fcou-067
      fptest=fp(lin)                                                    fcou-068
      lmax=linf+25+idint(5.d0*dabs(eta))                                fcou-069
      if (lmax.lt.l) lmax=l                                             fcou-070
      fi=1.d0                                                           fcou-071
      fpi=1.d0                                                          fcou-072
c angular momentum greater than the maximum required.                   fcou-073
    8 xm=dfloat(lmax+1)                                                 fcou-074
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-075
      zag=eta/xm+xm/ro                                                  fcou-076
      fl=(zag*fi+fpi)/zig                                               fcou-077
      fpl=zag*fl-zig*fi                                                 fcou-078
      if (dabs(fl).lt.1.d15.and.dabs(fpl).lt.1.d15) go to 9             fcou-079
      fl=fl*1.d-15                                                      fcou-080
      fpl=fpl*1.d-15                                                    fcou-081
    9 fi=fl                                                             fcou-082
      fpi=fpl                                                           fcou-083
      if (lmax.le.l) go to 11                                           fcou-084
   10 lmax=lmax-1                                                       fcou-085
      go to 8                                                           fcou-086
c angular momentum smaller than that required.                          fcou-087
   11 f(lmax+1)=fl                                                      fcou-088
      fp(lmax+1)=fpl                                                    fcou-089
      if (lmax.gt.linf) go to 10                                        fcou-090
      fact=ftest/f(lin)                                                 fcou-091
      factp=fptest/fp(lin)                                              fcou-092
      indice=iexp(1)/15                                                 fcou-093
      xm=dfloat(linf)                                                   fcou-094
c normalisation of the results of the descending recursion and          fcou-095
c upwards recursion for the irregular function.                         fcou-096
      do 13 j=lin,l1                                                    fcou-097
      f(j)=f(j)*fact                                                    fcou-098
      fp(j)=fp(j)*factp                                                 fcou-099
      if (j.eq.1) go to 13                                              fcou-100
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-101
      zag=eta/xm+xm/ro                                                  fcou-102
      g(j)=(zag*g(j-1)-gp(j-1))/zig                                     fcou-103
      gp(j)=zig*g(j-1)-zag*g(j)                                         fcou-104
      if (dabs(g(j)).lt.1.d15.and.dabs(gp(j)).lt.1.d15) go to 12        fcou-105
      g(j)=g(j)/1.d15                                                   fcou-106
      gp(j)=gp(j)/1.d15                                                 fcou-107
      indice=indice+1                                                   fcou-108
   12 iexp(j)=indice*15                                                 fcou-109
      a=dlog10(dabs(fp(j)))+dlog10(dabs(g(j)))                          fcou-110
      b=0.d0                                                            fcou-111
      if (a.ge.0.d0) b=1.d0                                             fcou-112
      i1=idint(b+a)                                                     fcou-113
      i2=idint(b+dlog10(dabs(gp(j)))+dlog10(dabs(f(j))))                fcou-114
      f(j)=f(j)*1.d1**(-i2)                                             fcou-115
      fp(j)=fp(j)*1.d1**(-i1)                                           fcou-116
   13 xm=xm+1.d0                                                        fcou-117
      return                                                            fcou-118
 1000 format ('  fcou   ***  eta =',1p,d13.5,',  rho =',d13.5,'   argumefcou-119
     1nt out off range.')                                               fcou-120
      end                                                               fcou-121
c 20/05/07                                                      ecis06  fcz0-000
      subroutine fcz0(eta,ro,f0,fp0,g0,gp0,iexp,sigma)                  fcz0-001
c computation of the coulomb functions for l=0.                         fcz0-002
c input:     eta,ro:  coulomb parameter and radius.                     fcz0-003
c output:    f,fp:    regular function and derivative.                  fcz0-004
c            g,gp:    irregular function and derivative.                fcz0-005
c            iexp:    power of 10.                                      fcz0-006
c            sigma:   coulomb phase shift for l=0.                      fcz0-007
c***********************************************************************fcz0-008
      implicit real*8 (a-h,o-z)                                         fcz0-009
      data pi /3.1415926535897932d0/                                    fcz0-010
      sigma=sigm(eta)                                                   fcz0-011
      iexp=0                                                            fcz0-012
      if (eta.le.28.d0.and.eta.ge.-8.d0) go to 1                        fcz0-013
      call yfri(eta,ro,f0,fp0,g0,gp0,iexp,sigma)                        fcz0-014
      return                                                            fcz0-015
    1 if (eta.ne.0.d0) go to 2                                          fcz0-016
c bessel functions.                                                     fcz0-017
      f0=dsin(ro)                                                       fcz0-018
      g0=dcos(ro)                                                       fcz0-019
      fp0=g0                                                            fcz0-020
      gp0=-f0                                                           fcz0-021
      go to 19                                                          fcz0-022
    2 borne=1.666666666666667d0*dabs(eta)+7.5d0                         fcz0-023
      if (ro.lt.borne) go to 3                                          fcz0-024
      call yfas(eta,ro,f0,fp0,g0,gp0,sigma)                             fcz0-025
      go to 19                                                          fcz0-026
    3 if (eta.ge.10.d0) go to 4                                         fcz0-027
      if (eta.le.0.d0) go to 5                                          fcz0-028
      if (ro-2.d0) 15 , 5 , 5                                           fcz0-029
    4 if (eta.gt.(5.d0*ro+6.d1)/7.d0) go to 15                          fcz0-030
c rs=-1 for normalisation at the origin,rs=1 at ro=borne(the boundary). fcz0-031
    5 if (eta.lt.2.5d0) go to 6                                         fcz0-032
      rs=1.d0                                                           fcz0-033
      call yfas(eta,borne,f0,fp0,g0,gp0,sigma)                          fcz0-034
      go to 8                                                           fcz0-035
    6 rs=-1.d0                                                          fcz0-036
c          clenshaw origin.                                             fcz0-037
      if (eta) 7 , 8 , 8                                                fcz0-038
    7 n=idint(-0.5d0*eta+5.d0)                                          fcz0-039
      go to 9                                                           fcz0-040
    8 n=idint(eta/5.d0+5.d0)                                            fcz0-041
    9 n=10*(n/2+1)                                                      fcz0-042
      tm1=1.d0                                                          fcz0-043
      t=2.d0*ro/borne-1.d0                                              fcz0-044
      x=t+t                                                             fcz0-045
      do 10 i=1,n                                                       fcz0-046
      tp1=x*t-tm1                                                       fcz0-047
      tm1=t                                                             fcz0-048
   10 t=tp1                                                             fcz0-049
      t=tm1                                                             fcz0-050
      a1=1.d-30                                                         fcz0-051
      a2=0.d0                                                           fcz0-052
      b1=0.d0                                                           fcz0-053
      b2=a1                                                             fcz0-054
      s=1.d0                                                            fcz0-055
      sa=0.d0                                                           fcz0-056
      sb=0.d0                                                           fcz0-057
      z1=0.d0                                                           fcz0-058
      z1p=0.d0                                                          fcz0-059
      ap12=0.d0                                                         fcz0-060
      ap11=0.d0                                                         fcz0-061
      bp11=0.d0                                                         fcz0-062
      z2=0.d0                                                           fcz0-063
      z2p=0.d0                                                          fcz0-064
      ap22=0.d0                                                         fcz0-065
      ap21=0.d0                                                         fcz0-066
      bp21=0.d0                                                         fcz0-067
      a0=8.d0*eta/borne-1.d0                                            fcz0-068
      bd=4.d0/(borne*borne)                                             fcz0-069
      b0=bd*dfloat(n+2)                                                 fcz0-070
      b4=bd*dfloat(n-1)                                                 fcz0-071
      r4=4.d0*dfloat(n)                                                 fcz0-072
c          downwards recursion.                                         fcz0-073
   11 am11=a0*(a1-ap11)+ap12-b0*b1-b4*bp11                              fcz0-074
      am21=a0*(a2-ap21)+ap22-b0*b2-b4*bp21                              fcz0-075
      sa=sa+s*a1                                                        fcz0-076
      sb=sb+s*a2                                                        fcz0-077
      z1=z1+a1*t                                                        fcz0-078
      z1p=z1p+b1*t                                                      fcz0-079
      z2=z2+a2*t                                                        fcz0-080
      z2p=z2p+b2*t                                                      fcz0-081
      if (r4.eq.0.d0) go to 12                                          fcz0-082
      bm11=r4*a1+bp11                                                   fcz0-083
      ap12=ap11                                                         fcz0-084
      ap11=a1                                                           fcz0-085
      a1=am11                                                           fcz0-086
      bp11=b1                                                           fcz0-087
      b1=bm11                                                           fcz0-088
      bm21=r4*a2+bp21                                                   fcz0-089
      ap22=ap21                                                         fcz0-090
      ap21=a2                                                           fcz0-091
      a2=am21                                                           fcz0-092
      bp21=b2                                                           fcz0-093
      b2=bm21                                                           fcz0-094
      b4=b4-bd                                                          fcz0-095
      b0=b0-bd                                                          fcz0-096
      r4=r4-4.d0                                                        fcz0-097
      s=s*rs                                                            fcz0-098
      tm1=x*t-tp1                                                       fcz0-099
      tp1=t                                                             fcz0-100
      t=tm1                                                             fcz0-101
      go to 11                                                          fcz0-102
   12 a=ap21-am21                                                       fcz0-103
      b=am11-ap11                                                       fcz0-104
      sa=a*sa+b*sb                                                      fcz0-105
      a1=a*a1+b*a2                                                      fcz0-106
      b1=a*b1+b*b2                                                      fcz0-107
      z1=a*z1+b*z2                                                      fcz0-108
      z1p=a*z1p+b*z2p                                                   fcz0-109
      sa=(sa-0.5d0*a1)/t                                                fcz0-110
      z1=z1-0.5d0*a1                                                    fcz0-111
      z1p=z1p-0.5d0*b1                                                  fcz0-112
      if (rs.lt.0.d0) go to 13                                          fcz0-113
      s=f0/(borne*sa)                                                   fcz0-114
      go to 14                                                          fcz0-115
   13 pieta=pi*eta                                                      fcz0-116
      s=dexp(pieta)                                                     fcz0-117
      s=dexp(-pieta/2.d0)*dsqrt(2.d0*pieta/(s-1.d0/s))/sa               fcz0-118
   14 f0=s*ro*z1                                                        fcz0-119
      fp0=s*(z1+ro*z1p/borne)                                           fcz0-120
      go to 18                                                          fcz0-121
c   series regular at the origin.                                       fcz0-122
   15 pi=3.141592653589793d0                                            fcz0-123
      ro2=ro*ro                                                         fcz0-124
      etap=eta+eta                                                      fcz0-125
      pieta=pi*eta                                                      fcz0-126
      b=dexp(pieta)                                                     fcz0-127
      b=dexp(0.5d0*pieta)*dsqrt((b-1.d0/b)/(2.d0*pieta))                fcz0-128
      u0=0.d0                                                           fcz0-129
      u1=ro                                                             fcz0-130
      u=u0+u1                                                           fcz0-131
      up=1.d0                                                           fcz0-132
      xn=2.d0                                                           fcz0-133
      do 16 n=2,10000                                                   fcz0-134
      xn1=xn*(xn-1.d0)                                                  fcz0-135
      u2=(etap*ro*u1-ro2*u0)/xn1                                        fcz0-136
      u=u+u2                                                            fcz0-137
      up=up+xn*u2/ro                                                    fcz0-138
      if (dabs(u1)+dabs(u2).lt.1.d-10*dabs(u)) go to 17                 fcz0-139
      u0=u1                                                             fcz0-140
      u1=u2                                                             fcz0-141
   16 xn=xn+1.d0                                                        fcz0-142
   17 f0=u/b                                                            fcz0-143
      fp0=up/b                                                          fcz0-144
   18 call yfir(eta,ro,g0,gp0,sigma)                                    fcz0-145
   19 if (dabs(g0).lt.1.d15.and.dabs(gp0).lt.1.d15) return              fcz0-146
      f0=f0*1.d15                                                       fcz0-147
      fp0=fp0*1.d15                                                     fcz0-148
      g0=g0/1.d15                                                       fcz0-149
      gp0=gp0/1.d15                                                     fcz0-150
      indice=indice+1                                                   fcz0-151
      iexp=iexp+15                                                      fcz0-152
      go to 19                                                          fcz0-153
      end                                                               fcz0-154
c 13/11/05                                                      ecis06  yfri-000
      subroutine yfri(eta,rau,fo,fpo,go,gpo,idiv,sigma)                 yfri-001
c computation of the coulomb functions for l=0.                         yfri-002
c riccati method.  same arguments as fcz0.                              yfri-003
c input:     eta,rau: coulomb parameter and radius.                     yfri-004
c            sigma:   coulomb phase shift for l=0.                      yfri-005
c output:    fo,fpo:  regular function and derivative.                  yfri-006
c            go,gpo:  irregular function and derivative.                yfri-007
c            idiv:    power of 10.                                      yfri-008
c***********************************************************************yfri-009
      implicit real*8 (a-h,o-z)                                         yfri-010
      dimension q(5),qp(5)                                              yfri-011
c        riccati coefficients.                                          yfri-012
      data g61,g62,g63,g64,g65,g66,g67,g68,g69,g610,g611/ 1.159057617187yfri-013
     15d-2,3.863525390625d-2,4.6600341796875d-2,4.8583984375d-2,1.156514yfri-014
     248567708d0,5.6874755859375d0,1.323888288225445d1,1.713083224826384yfri-015
     3d1,1.269003295898436d1,5.05523681640625d0,8.42539464010415d-1/    yfri-016
      data g81,g82,g83,g84,g85,g86,g87,g88,g89,g810,g811,g812,g813,g814,yfri-017
     1g815/ 1.851092066083633d-2,8.63842964172363d-2,1.564757823944092d-yfri-018
     21,1.430139541625977d-1,1.924622058868408d-1,8.500803152720129d0,7.yfri-019
     3265429720878595d1,3.057942376817972d2,7.699689544836672d2,1.254157yfri-020
     4054424285d3,1.361719536066055d3,9.831831171035763d2,4.547869927883yfri-021
     5148d2,1.222640538215636d2,1.455524450256709d1/                    yfri-022
      data gp61,gp62,gp63,gp64,gp65,gp66/ 0.289764404296875d-1,0.2318115yfri-023
     1234375d0,0.8056640625d0,1.6015625d0,0.3046875d0,5.625d0/          yfri-024
      data gp81,gp82,gp83,gp84,gp85,gp86,gp87,gp88/ 0.647882223129272d-1yfri-025
     1,0.6910743713378906d0,0.3322952270507811d1,0.94830322265625d1,17.6yfri-026
     296533203125d0,34.787109375d0,50.203125d0,78.75d0/                 yfri-027
      data q/ 0.4959570165d-1,0.8888888889d-2,0.2455199181d-2,0.91089580yfri-028
     161d-3,0.2534684115d-3/                                            yfri-029
      data qp,ho,hpo/ 0.1728260369d0,0.3174603174d-3,0.3581214850d-2,0.3yfri-030
     1117824680d-3,0.9073966427d-3,2*0.d0/                              yfri-031
      etac=eta*eta                                                      yfri-032
      eta2=eta+eta                                                      yfri-033
      etaro=eta*rau                                                     yfri-034
      ind=0                                                             yfri-035
      jnd=0                                                             yfri-036
      ig=0                                                              yfri-037
      idiv=0                                                            yfri-038
      if (eta.gt.0.d0) go to 1                                          yfri-039
      if (-etaro-14.0625d0) 3 , 15 , 15                                 yfri-040
    1 if (dabs(rau-eta2).le.1.d-9) go to 14                             yfri-041
      if (rau-eta2) 6 , 14 , 2                                          yfri-042
    2 if (rau-eta2-2.d1*(eta**0.25d0)) 4 , 15 , 15                      yfri-043
    3 nn=1                                                              yfri-044
      go to 5                                                           yfri-045
    4 nn=0                                                              yfri-046
    5 call yfcl(eta,rau,fo,fpo,go,gpo,sigma,idiv,nn)                    yfri-047
      return                                                            yfri-048
    6 if (etaro.le.12.d0) go to 3                                       yfri-049
      tra=eta2-6.75d0*(eta**0.4d0)                                      yfri-050
      if (rau.le.tra) go to 7                                           yfri-051
      ind=1                                                             yfri-052
      jnd=1                                                             yfri-053
      ro=rau                                                            yfri-054
      rau=tra                                                           yfri-055
      rau0=tra                                                          yfri-056
c             riccati   1.                                              yfri-057
    7 x=rau/eta2                                                        yfri-058
      u=(1.d0-x)/x                                                      yfri-059
      x2=x*x                                                            yfri-060
      ru=dsqrt(u)                                                       yfri-061
      rx=dsqrt(x)                                                       yfri-062
      tre=1.d0/(u*ru*eta2)                                              yfri-063
      trb=tre*tre                                                       yfri-064
      fi=(dsqrt((1.d0-x)*x)+datan2(rx,dsqrt(1.d0-rx*rx))-1.5707963267948yfri-065
     197d0)*eta2                                                        yfri-066
      tr1=-0.25d0*dlog(u)                                               yfri-067
      tr2=-((9.d0*u+6.d0)*u+5.d0)/48.d0                                 yfri-068
      tr3=((((-3.d0*u-4.d0)*u+6.d0)*u+12.d0)*u+5.d0)/64.d0              yfri-069
      tr4=-((((((u+2.d0)*945.d0*u+1395.d0)*u+12300.d0)*u+25191.d0)*u+198yfri-070
     190.d0)*u+5525.d0)/46080.d0                                        yfri-071
      tr5=((((((((-27.d0*u-72.d0)*u-68.d0)*u+360.d0)*u+2190.d0)*u+4808.dyfri-072
     10)*u+5148.d0)*u+2712.d0)*u+565.d0)/2048.d0                        yfri-073
      tr6=-((((((((((g61*u+g62)*u+g63)*u+g64)*u+g65)*u+g66)*u+g67)*u+g68yfri-074
     1)*u+g69)*u+g610)*u+g611)                                          yfri-075
      tr7=((((((((((((-81.d0*u-324.d0)*u-486.d0)*u-404.d0)*u+4509.d0)*u+yfri-076
     152344.d0)*u+233436.d0)*u+567864.d0)*u+838521.d0)*u+775884.d0)*u+44yfri-077
     21450.d0)*u+141660.d0)*u+19675.d0)/6144.d0                         yfri-078
      tr8=(((((((((((((g81*u+g82)*u+g83)*u+g84)*u+g85)*u+g86)*u+g87)*u+gyfri-079
     188)*u+g89)*u+g810)*u+g811)*u+g812)*u+g813)*u+g814)*u+g815         yfri-080
      fi=fi+tre*(tr2+trb*(tr4+trb*(tr6+trb*tr8)))                       yfri-081
      psi=-fi                                                           yfri-082
      tra=tr1+trb*(tr3+trb*(tr5+trb*tr7))                               yfri-083
      fi=fi+tra                                                         yfri-084
      psi=psi+tra                                                       yfri-085
      fip=ru*eta2                                                       yfri-086
      tra=1.d0/(x2*u)                                                   yfri-087
      tr1=0.25d0                                                        yfri-088
      tre=tre/(x2*x2*u)                                                 yfri-089
      trb=trb/(x2*x2)                                                   yfri-090
      tr2=-(8.d0*x-3.d0)/32.d0                                          yfri-091
      tr3=((24.d0*x-12.d0)*x+3.d0)/64.d0                                yfri-092
      tr4=(((-1536.d0*x+704.d0)*x-336.d0)*x+63.d0)/2048.d0              yfri-093
      tr5=((((1920.d0*x-576.d0)*x+504.d0)*x-180.d0)*x+27.d0)/1024.d0    yfri-094
      tr6=((((-gp66*x+gp65)*x-gp64)*x+gp63)*x-gp62)*x+gp61              yfri-095
      tr7=-((((((-40320.d0*x-10560.d0)*x-13248.d0)*x+7560.d0)*x-3132.d0)yfri-096
     1*x+756.d0)*x-81.d0)/2048.d0                                       yfri-097
      tr8=-(((((((gp88*x+gp87)*x+gp86)*x-gp85)*x+gp84)*x-gp83)*x+gp82)*xyfri-098
     1-gp81)                                                            yfri-099
      fip=fip+tre*(tr2+trb*(tr4+trb*(tr6+trb*tr8)))                     yfri-100
      psip=-fip                                                         yfri-101
      tra=tra*(tr1+trb*(tr3+trb*(tr5+trb*tr7)))                         yfri-102
      fip=fip+tra                                                       yfri-103
      psip=psip+tra                                                     yfri-104
      xxx=34.588776394910686d0                                          yfri-105
      indg=idint(psi/xxx)                                               yfri-106
      idiv=15*indg                                                      yfri-107
      if (indg.eq.0) go to 8                                            yfri-108
      psi=psi-xxx*indg                                                  yfri-109
      fi=fi+xxx*indg                                                    yfri-110
    8 fo=0.5d0*dexp(fi)                                                 yfri-111
      go=dexp(psi)                                                      yfri-112
      fpo=fo*fip/eta2                                                   yfri-113
      gpo=go*psip/eta2                                                  yfri-114
      if (jnd.eq.0) return                                              yfri-115
      rau=ro                                                            yfri-116
      go=fo                                                             yfri-117
      gpo=fpo                                                           yfri-118
    9 x=rau0-ro                                                         yfri-119
      x2=x*x                                                            yfri-120
      x3=x*x2                                                           yfri-121
      unr=1.d0/rau0                                                     yfri-122
      etr0=1.d0-2.d0*eta*unr                                            yfri-123
      u0=go                                                             yfri-124
      u1=-x*gpo                                                         yfri-125
      u2=-0.5d0*etr0*x2*u0                                              yfri-126
      s=u0+u1+u2                                                        yfri-127
      v1=u1/x                                                           yfri-128
      v2=2.d0*u2/x                                                      yfri-129
      t=v1+v2                                                           yfri-130
      xn=3.d0                                                           yfri-131
      do 11 n=3,10000                                                   yfri-132
      xn1=xn-1.d0                                                       yfri-133
      xn1=xn*xn1                                                        yfri-134
      u3=x*u2*unr*(1.d0-2.d0/xn)-etr0*u1*x2/xn1+x3*u0*unr/xn1           yfri-135
      s=s+u3                                                            yfri-136
      v3=xn*u3/x                                                        yfri-137
      t=t+v3                                                            yfri-138
      if (dabs(u3).gt.1.d-10*dabs(s)) go to 10                          yfri-139
      if (dabs(v3).le.1.d-10*dabs(t)) go to 12                          yfri-140
   10 u0=u1                                                             yfri-141
      u1=u2                                                             yfri-142
      u2=u3                                                             yfri-143
   11 xn=xn+1.d0                                                        yfri-144
   12 if (ig.eq.0) go to 13                                             yfri-145
      go=s                                                              yfri-146
      gpo=-t                                                            yfri-147
      fo=ho                                                             yfri-148
      fpo=hpo                                                           yfri-149
      return                                                            yfri-150
   13 ho=s                                                              yfri-151
      hpo=-t                                                            yfri-152
   14 et0=eta**(0.1666666666666667d0)                                   yfri-153
      etad=etac*etac                                                    yfri-154
      et=eta**(0.6666666666666667d0)                                    yfri-155
      et1=et*et                                                         yfri-156
      et2=et1*et1                                                       yfri-157
      et3=et2*et                                                        yfri-158
      et4=etad*et                                                       yfri-159
      et5=et4*et                                                        yfri-160
      fo=1.d0-q(1)/et1-q(2)/etac-q(3)/et3-q(4)/etad-q(5)/et5            yfri-161
      go=1.d0+q(1)/et1-q(2)/etac+q(3)/et3-q(4)/etad+q(5)/et5            yfri-162
      fpo=1.d0+qp(1)/et+qp(2)/etac+qp(3)/et2+qp(4)/etad+qp(5)/et4       yfri-163
      gpo=1.d0-qp(1)/et+qp(2)/etac-qp(3)/et2+qp(4)/etad-qp(5)/et4       yfri-164
      fo=0.7063326373d0*et0*fo                                          yfri-165
      go=1.223404016d0*et0*go                                           yfri-166
      fpo=0.4086957323d0*fpo/et0                                        yfri-167
      gpo=-0.7078817734d0*gpo/et0                                       yfri-168
      idiv=0                                                            yfri-169
      if (ind.eq.0) return                                              yfri-170
      ig=1                                                              yfri-171
      rau0=eta2                                                         yfri-172
      go to 9                                                           yfri-173
c        riccati 2 and 3.                                               yfri-174
   15 x=eta2/rau                                                        yfri-175
      x2=x*x                                                            yfri-176
      u=1.d0-x                                                          yfri-177
      ru=dsqrt(u)                                                       yfri-178
      u3=u*u*u                                                          yfri-179
      trd=1.d0/(u3*eta2*eta2)                                           yfri-180
      trc=x2*trd                                                        yfri-181
      tre=1.d0/(u*ru*eta2)                                              yfri-182
      fi=-0.25d0*dlog(u)                                                yfri-183
      trb=trd/64.d0                                                     yfri-184
      tr3=(((3.d0*u-4.d0)*u-6.d0)*u+12.d0)*u-5.d0                       yfri-185
      tr5=((((((((-27.d0*u+72.d0)*u-68.d0)*u-360.d0)*u+2190.d0)*u-4808.dyfri-186
     10)*u+5148.d0)*u-2712.d0)*u+565.d0)/32.d0                          yfri-187
      tr7=((((((((((((81.d0*u-324.d0)*u+486.d0)*u-404.d0)*u-4509.d0)*u+5yfri-188
     12344.d0)*u-233436.d0)*u+567864.d0)*u-838521.d0)*u+775884.d0)*u-441yfri-189
     2450.d0)*u+141660.d0)*u-19675.d0)/96.d0                            yfri-190
      fi=fi+trb*(tr3+trd*(tr5+trd*tr7))                                 yfri-191
      fip=0.25d0/u                                                      yfri-192
      trb=3.d0*trc/(64.d0*u)                                            yfri-193
      tr3=(4.d0-x)*x-8.d0                                               yfri-194
      tr5=((((9.d0*x-60.d0)*x+168.d0)*x-192.d0)*x+640.d0)/16.d0         yfri-195
      tr7=((((((-27.d0*x+252.d0)*x-1044.d0)*x+2520.d0)*x-4416.d0)*x-3520yfri-196
     1.d0)*x-13440.d0)/32.d0                                            yfri-197
      fip=fip+trb*(tr3+trc*(tr5+trc*tr7))                               yfri-198
      tra=dabs((ru-1.d0)/(ru+1.d0))                                     yfri-199
      psi=(0.5d0*dlog(tra)+ru/x)*eta2+0.785398163397448d0               yfri-200
      tr2=-((9.d0*u-6.d0)*u+5.d0)/48.d0                                 yfri-201
      tr4=((((((u-2.d0)*945.d0*u+1395.d0)*u-12300.d0)*u+25191.d0)*u-1989yfri-202
     10.d0)*u+5525.d0)/46080.d0                                         yfri-203
      tr6=(((((((((-g61*u+g62)*u-g63)*u+g64)*u-g65)*u+g66)*u-g67)*u+g68)yfri-204
     1*u-g69)*u+g610)*u-g611                                            yfri-205
      tr8=(((((((((((((g81*u-g82)*u+g83)*u-g84)*u+g85)*u-g86)*u+g87)*u-gyfri-206
     188)*u+g89)*u-g810)*u+g811)*u-g812)*u+g813)*u-g814)*u+g815         yfri-207
      psi=psi+tre*(tr2+trd*(tr4+trd*(tr6+trd*tr8)))                     yfri-208
      psip=-ru*eta2/x2                                                  yfri-209
      trb=tre*x/u                                                       yfri-210
      tr2=(3.d0*x-8.d0)/32.d0                                           yfri-211
      tr4=-(((63.d0*x-336.d0)*x+704.d0)*x-1536.d0)/2048.d0              yfri-212
      tr6=((((gp61*x-gp62)*x+gp63)*x-gp64)*x+gp65)*x-gp66               yfri-213
      tr8=((((((-gp81*x+gp82)*x-gp83)*x+gp84)*x-gp85)*x+gp86)*x+gp87)*x+yfri-214
     1gp88                                                              yfri-215
      psip=psip+trb*(tr2+trc*(tr4+trc*(tr6+trc*tr8)))                   yfri-216
      tra=dexp(fi)                                                      yfri-217
      fo=tra*dsin(psi)                                                  yfri-218
      go=tra*dcos(psi)                                                  yfri-219
      if (eta.gt.0.d0) go to 16                                         yfri-220
      tra=fo                                                            yfri-221
      fo=-go                                                            yfri-222
      go=tra                                                            yfri-223
   16 tra=-eta2/(rau*rau)                                               yfri-224
      fpo=(fip*fo+psip*go)*tra                                          yfri-225
      gpo=(fip*go-psip*fo)*tra                                          yfri-226
      return                                                            yfri-227
      end                                                               yfri-228
c 12/01/07                                                      ecis06  yfcl-000
      subroutine yfcl(eta,ro,u,up,v,vp,sigma,idiv,nn)                   yfcl-001
c computation of the coulomb functions for l=0.                         yfcl-002
c clenshaw method.  same arguments as fcz0, plus nn.                    yfcl-003
c input:     eta,ro:  coulomb parameter and radius.                     yfcl-004
c            sigma:   coulomb phase shift for l=0.                      yfcl-005
c            nn:      0 for asymptotic, 1 for series at the origin.     yfcl-006
c output:    u,up:    regular function and derivative.                  yfcl-007
c            v,vp:    irregular function and derivative.                yfcl-008
c            idiv:    power of 10.                                      yfcl-009
c***********************************************************************yfcl-010
      implicit real*8 (a-h,o-z)                                         yfcl-011
      data pi /3.1415926535897932d0/                                    yfcl-012
      idiv=0                                                            yfcl-013
      etap=eta+eta                                                      yfcl-014
      ro2=ro*ro                                                         yfcl-015
      if (nn.eq.1) go to 4                                              yfcl-016
c          clenshaw asymptotic.                                         yfcl-017
      e2=eta*eta                                                        yfcl-018
      m=idint(40.d0+eta/4.d0)                                           yfcl-019
      m=2*(m/2)                                                         yfcl-020
      i=1                                                               yfcl-021
      r=dfloat(m)                                                       yfcl-022
      d4=4.d0*r                                                         yfcl-023
      tm1=1.d0                                                          yfcl-024
      t=4.d0*eta/ro-1.d0                                                yfcl-025
      z=t+t                                                             yfcl-026
      do 1 j=1,m                                                        yfcl-027
      tp1=z*t-tm1                                                       yfcl-028
      tm1=t                                                             yfcl-029
    1 t=tp1                                                             yfcl-030
      t=tm1                                                             yfcl-031
      gr=0.d0                                                           yfcl-032
      gpr=0.d0                                                          yfcl-033
      scr=0.d0                                                          yfcl-034
      ep1r=0.d0                                                         yfcl-035
      er=0.d0                                                           yfcl-036
      dp1r=0.d0                                                         yfcl-037
      dr=1.d-25                                                         yfcl-038
      c1r=r+1.d0                                                        yfcl-039
      c0r=e2-r*(r+1.d0)                                                 yfcl-040
      gi=0.d0                                                           yfcl-041
      gpi=0.d0                                                          yfcl-042
      sci=0.d0                                                          yfcl-043
      ep1i=0.d0                                                         yfcl-044
      ei=0.d0                                                           yfcl-045
      dp1i=0.d0                                                         yfcl-046
      di=0.d0                                                           yfcl-047
      c1i=-3.d0*eta                                                     yfcl-048
      c0i=-(r+r+1.d0)*eta                                               yfcl-049
c          backwards recurrence.                                        yfcl-050
    2 scz=c0r*c0r+c0i*c0i                                               yfcl-051
      c2r=c1r*dr-c1i*di+0.5d0*(dp1r+er+ep1r)-eta*dp1i                   yfcl-052
      c2i=c1r*di+c1i*dr+0.5d0*(dp1i+ei+ep1i)+eta*dp1r                   yfcl-053
      cr=(c2r*c0r+c2i*c0i)/scz                                          yfcl-054
      ci=(c0r*c2i-c0i*c2r)/scz                                          yfcl-055
      gr=gr+cr*t                                                        yfcl-056
      gpr=gpr+dr*t                                                      yfcl-057
      scr=scr+i*cr                                                      yfcl-058
      gi=gi+ci*t                                                        yfcl-059
      gpi=gpi+di*t                                                      yfcl-060
      sci=sci+i*ci                                                      yfcl-061
      if (r.eq.0.d0) go to 3                                            yfcl-062
      em1r=d4*dr+ep1r                                                   yfcl-063
      dm1r=d4*cr+dp1r                                                   yfcl-064
      ep1r=er                                                           yfcl-065
      er=em1r                                                           yfcl-066
      dp1r=dr                                                           yfcl-067
      dr=dm1r                                                           yfcl-068
      em1i=d4*di+ep1i                                                   yfcl-069
      dm1i=d4*ci+dp1i                                                   yfcl-070
      ep1i=ei                                                           yfcl-071
      ei=em1i                                                           yfcl-072
      dp1i=di                                                           yfcl-073
      di=dm1i                                                           yfcl-074
      tm1=z*t-tp1                                                       yfcl-075
      tp1=t                                                             yfcl-076
      t=tm1                                                             yfcl-077
      c0r=c0r+r+r                                                       yfcl-078
      c0i=c0i+etap                                                      yfcl-079
      c1r=c1r-1.d0                                                      yfcl-080
      i=-i                                                              yfcl-081
      d4=d4-4.d0                                                        yfcl-082
      r=r-1.d0                                                          yfcl-083
      go to 2                                                           yfcl-084
    3 scr=scr-0.5d0*cr                                                  yfcl-085
      gr=gr-0.5d0*cr                                                    yfcl-086
      gpr=gpr-0.5d0*dr                                                  yfcl-087
      sci=sci-0.5d0*ci                                                  yfcl-088
      gi=gi-0.5d0*ci                                                    yfcl-089
      gpi=gpi-0.5d0*di                                                  yfcl-090
      z=sigma+ro-eta*dlog(ro+ro)                                        yfcl-091
      scz=scr*scr+sci*sci                                               yfcl-092
      cr=dcos(z)                                                        yfcl-093
      ci=dsin(z)                                                        yfcl-094
      dr=(cr*scr+ci*sci)/scz                                            yfcl-095
      di=(ci*scr-cr*sci)/scz                                            yfcl-096
      sci=1.d0-eta/ro                                                   yfcl-097
      scr=etap/ro2                                                      yfcl-098
      cr=-gi*sci-gpr*scr                                                yfcl-099
      ci=gr*sci-gpi*scr                                                 yfcl-100
      vp=dr*cr-di*ci                                                    yfcl-101
      up=dr*ci+di*cr                                                    yfcl-102
      v=dr*gr-di*gi                                                     yfcl-103
      u=dr*gi+di*gr                                                     yfcl-104
      return                                                            yfcl-105
c          series at the origin.                                        yfcl-106
    4 pieta=pi*eta                                                      yfcl-107
      if (dabs(pieta).gt.36.d0) go to 5                                 yfcl-108
      p=dsqrt((dexp(2.d0*pieta)-1.d0)/(2.d0*pieta))                     yfcl-109
      go to 7                                                           yfcl-110
    5 if (pieta.gt.0.d0) go to 6                                        yfcl-111
      p=1.d0/dsqrt(-pieta-pieta)                                        yfcl-112
      go to 7                                                           yfcl-113
    6 z=34.588776394910686d0                                            yfcl-114
      idiv=idint(pieta/z)                                               yfcl-115
      p=dexp(pieta-idiv*z)/dsqrt(pieta+pieta)                           yfcl-116
      idiv=15*idiv                                                      yfcl-117
    7 z1=etap*(psi(eta)+.6931471805599453d0)                            yfcl-118
      u0=0.d0                                                           yfcl-119
      u1=ro                                                             yfcl-120
      v0=1.d0                                                           yfcl-121
      v1=z1*ro                                                          yfcl-122
      u=u0+u1                                                           yfcl-123
      v=v0+v1                                                           yfcl-124
      up=1.d0                                                           yfcl-125
      vp=z1                                                             yfcl-126
      xn=2.d0                                                           yfcl-127
      do 9 n=2,10000                                                    yfcl-128
      xn1=xn*(xn-1.d0)                                                  yfcl-129
      u2=(etap*ro*u1-ro2*u0)/xn1                                        yfcl-130
      u=u+u2                                                            yfcl-131
      v2=(etap*ro*v1-ro2*v0-etap*(xn+xn-1.d0)*u2)/xn1                   yfcl-132
      v=v+v2                                                            yfcl-133
      up=up+xn*u2/ro                                                    yfcl-134
      vp=vp+xn*v2/ro                                                    yfcl-135
      if (dabs(u2).gt.1.d-14*dabs(u)) go to 8                           yfcl-136
      if (dabs(v2).le.1.d-14*dabs(v)) go to 10                          yfcl-137
    8 u0=u1                                                             yfcl-138
      u1=u2                                                             yfcl-139
      v0=v1                                                             yfcl-140
      v1=v2                                                             yfcl-141
    9 xn=xn+1.d0                                                        yfcl-142
   10 pp=v+etap*u*dlog(ro)                                              yfcl-143
      w=u/p                                                             yfcl-144
      wp=up/p                                                           yfcl-145
      v=p*pp                                                            yfcl-146
      vp=p*(vp+etap*(up*dlog(ro)+u/ro))                                 yfcl-147
      u=w                                                               yfcl-148
      up=wp                                                             yfcl-149
      return                                                            yfcl-150
      end                                                               yfcl-151
c 13/11/05                                                      ecis06  yfas-000
      subroutine yfas(eta,rau,fo,fpo,go,gpo,sigo)                       yfas-001
c computation of the coulomb functions for l=0.                         yfas-002
c     asymptotic expansion. same arguments as fcz0 except for iexp.     yfas-003
c input:     eta,rau: coulomb parameter and radius.                     yfas-004
c            sigo:    coulomb phase shift for l=0.                      yfas-005
c output:    fo,fpo:  regular function and derivative.                  yfas-006
c            go,gpo:  irregular function and derivative.                yfas-007
c***********************************************************************yfas-008
      implicit real*8 (a-h,o-z)                                         yfas-009
      trb=0.d0                                                          yfas-010
      rau2=rau+rau                                                      yfas-011
      etac=eta*eta                                                      yfas-012
      n=0                                                               yfas-013
      ps=1.d0                                                           yfas-014
      gs=0.d0                                                           yfas-015
      pt=0.d0                                                           yfas-016
      gt=1.d0-eta/rau                                                   yfas-017
      sf=ps                                                             yfas-018
      sg=gs                                                             yfas-019
      spf=pt                                                            yfas-020
      spg=gt                                                            yfas-021
    1 denom=dfloat(n+1)*rau2                                            yfas-022
      an=dfloat(n+n+1)*eta/denom                                        yfas-023
      bn=(etac-dfloat(n*(n+1)))/denom                                   yfas-024
      ps1=an*ps-bn*pt                                                   yfas-025
      gs1=an*gs-bn*gt-ps1/rau                                           yfas-026
      pt1=an*pt+bn*ps                                                   yfas-027
      gt1=an*gt+bn*gs-pt1/rau                                           yfas-028
      sf=sf+ps1                                                         yfas-029
      sg=sg+gs1                                                         yfas-030
      spf=spf+pt1                                                       yfas-031
      spg=spg+gt1                                                       yfas-032
      n=n+1                                                             yfas-033
      if (dabs(ps1).gt.trb) trb=dabs(ps1)                               yfas-034
      if (dabs(ps1).lt.1.d-10*trb.or.bn.lt.-1.d0) go to 2               yfas-035
      ps=ps1                                                            yfas-036
      gs=gs1                                                            yfas-037
      pt=pt1                                                            yfas-038
      gt=gt1                                                            yfas-039
      go to 1                                                           yfas-040
    2 tetao=rau-eta*dlog(rau2)+sigo                                     yfas-041
      tra=dsin(tetao)                                                   yfas-042
      trb=dcos(tetao)                                                   yfas-043
      go=sf*trb-spf*tra                                                 yfas-044
      gpo=sg*trb-spg*tra                                                yfas-045
      fo=spf*trb+sf*tra                                                 yfas-046
      fpo=spg*trb+sg*tra                                                yfas-047
      return                                                            yfas-048
      end                                                               yfas-049
c 12/01/07                                                      ecis06  yfir-000
      subroutine yfir(eta,ro,g0,gp0,sigma)                              yfir-001
c computation of the coulomb irregular function for l=0.                yfir-002
c input:     eta,ro:  coulomb parameter and radius.                     yfir-003
c            sigma:   coulomb phase shift for l=0.                      yfir-004
c output:    go,gpo:  regular function and derivative.                  yfir-005
c***********************************************************************yfir-006
      implicit real*8(a-h,o-z)                                          yfir-007
      data pi /3.1415926535897932d0/                                    yfir-008
      if (eta.le.0.d0) go to 9                                          yfir-009
      if ((ro.le.(54.d0-eta)/80.d0).or.(eta.le.22.d0.and.ro.le.(30.d0-etyfir-010
     1a)/20.d0).or.(eta.le.18.d0.and.ro.le.0.075d0*(26.d0-eta)).or.(eta.yfir-011
     2le.10.d0.and.ro.le..15d0*(18.d0-eta)).or.(eta.le.3.d0.and.ro.le.2.yfir-012
     325d0+7.35d0*(3.d0-eta))) go to 5                                  yfir-013
c   taylor series starting at rau0.                                     yfir-014
    1 rau0=1.666666666666667d0*dabs(eta)+7.5d0                          yfir-015
      call yfas(eta,rau0,f0,fp0,g0,gp0,sigma)                           yfir-016
      x=rau0-ro                                                         yfir-017
      x2=x*x                                                            yfir-018
      x3=x*x2                                                           yfir-019
      unr=1.d0/rau0                                                     yfir-020
      etr0=1.d0-2.d0*eta*unr                                            yfir-021
      u0=g0                                                             yfir-022
      u1=-x*gp0                                                         yfir-023
      u2=-0.5d0*etr0*x2*u0                                              yfir-024
      s=u0+u1+u2                                                        yfir-025
      v1=u1/x                                                           yfir-026
      v2=2.d0*u2/x                                                      yfir-027
      t=v1+v2                                                           yfir-028
      xn=3.d0                                                           yfir-029
      do 3 n=3,10000                                                    yfir-030
      xn1=xn-1.d0                                                       yfir-031
      xn1=xn*xn1                                                        yfir-032
      u3=x*u2*unr*(1.d0-2.d0/xn)-etr0*u1*x2/xn1+x3*u0*unr/xn1           yfir-033
      s=s+u3                                                            yfir-034
      v3=xn*u3/x                                                        yfir-035
      t=t+v3                                                            yfir-036
      if (dabs(u3).gt.1.d-11*dabs(s)) go to 2                           yfir-037
      if (dabs(v3).le.1.d-11*dabs(t)) go to 4                           yfir-038
    2 u0=u1                                                             yfir-039
      u1=u2                                                             yfir-040
      u2=u3                                                             yfir-041
    3 xn=xn+1.d0                                                        yfir-042
    4 g0=s                                                              yfir-043
      gp0=-t                                                            yfir-044
      return                                                            yfir-045
c   series origin.                                                      yfir-046
    5 ro2=ro*ro                                                         yfir-047
      etap=eta+eta                                                      yfir-048
      pieta=pi*eta                                                      yfir-049
      pieta2=0.5d0*pieta                                                yfir-050
      b=dexp(pieta)                                                     yfir-051
      b=dexp(pieta2)*dsqrt((b-1.d0/b)/(2.d0*pieta))                     yfir-052
      c1=etap*(psi(eta)+.6931471805599453d0)                            yfir-053
      u0=0.d0                                                           yfir-054
      u1=ro                                                             yfir-055
      v0=1.d0                                                           yfir-056
      v1=c1*ro                                                          yfir-057
      u=u0+u1                                                           yfir-058
      v=v0+v1                                                           yfir-059
      up=1.d0                                                           yfir-060
      vp=c1                                                             yfir-061
      xn=2.d0                                                           yfir-062
      do 7 n=2,10000                                                    yfir-063
      xn1=xn*(xn-1.d0)                                                  yfir-064
      u2=(etap*ro*u1-ro2*u0)/xn1                                        yfir-065
      u=u+u2                                                            yfir-066
      v2=(etap*ro*v1-ro2*v0-etap*(xn+xn-1.d0)*u2)/xn1                   yfir-067
      v=v+v2                                                            yfir-068
      up=up+xn*u2/ro                                                    yfir-069
      vp=vp+xn*v2/ro                                                    yfir-070
      if (dabs(u2).gt.1.d-14*dabs(u)) go to 6                           yfir-071
      if (dabs(v2).le.1.d-14*dabs(v)) go to 8                           yfir-072
    6 u0=u1                                                             yfir-073
      u1=u2                                                             yfir-074
      v0=v1                                                             yfir-075
      v1=v2                                                             yfir-076
    7 xn=xn+1.d0                                                        yfir-077
    8 gp=v+etap*u*dlog(ro)                                              yfir-078
      g0=b*gp                                                           yfir-079
      gp0=b*(vp+etap*(up*dlog(ro)+u/ro))                                yfir-080
      return                                                            yfir-081
    9 if (ro.le.0.5d0*eta+9.d0) go to 5                                 yfir-082
      go to 1                                                           yfir-083
      end                                                               yfir-084
c 10/05/07                                                      ecis06  sigm-000
      function sigm(eta)                                                sigm-001
c  coulomb phase shift sigma0.                                          sigm-002
c***********************************************************************sigm-003
      implicit real*8 (a-h,o-z)                                         sigm-004
      dimension c(2,13)                                                 sigm-005
      data c1,c2,c3,c4,c5,c6,c7,c /8.333333333333333d-2,-2.7777777777777sigm-006
     178d-3,7.936507936507937d-4,-5.952380952380952d-4,8.417508417508417sigm-007
     2d-4,-1.917526917526918d-3,6.41025641025641d-3,1.d-16,1.4d-15,-5.4dsigm-008
     3-15,-2.07d-14,5.1d-13,-3.6968d-12,7.7823d-12,1.043427d-10,-1.18127sigm-009
     446d-9,5.0020075d-9,6.116095d-9,-2.056338417d-7,1.133027232d-6,-1.2sigm-010
     5504934821d-6,-2.01348547807d-5,1.280502823882d-4,-2.152416741149d-sigm-011
     64,-1.1651675918591d-3,7.218943246663d-3,-9.621971527877d-3,-4.2197sigm-012
     77345555443d-2,.1665386113822915d0,-4.20026350340952d-2,-.655878071sigm-013
     85202538d0,.5772156649015329d0,1.d0/                               sigm-014
      if (dabs(eta).gt.1.d-16) go to 1                                  sigm-015
      sigm=-c(1,13)*eta                                                 sigm-016
      go to 5                                                           sigm-017
    1 e=eta*eta                                                         sigm-018
      if (e.gt.1.d0) go to 3                                            sigm-019
      x=c(1,1)                                                          sigm-020
      y=c(2,1)                                                          sigm-021
      do 2 i=2,13                                                       sigm-022
      x=c(1,i)-e*x                                                      sigm-023
    2 y=c(2,i)-e*y                                                      sigm-024
      sigm=-datan2(eta*x,y)                                             sigm-025
      go to 5                                                           sigm-026
    3 l=1                                                               sigm-027
      if (e.lt.64.d0) l=idint(2.d0+dsqrt(64.d0-e))                      sigm-028
      z=dfloat(l)                                                       sigm-029
      x=dsqrt(z*z+e)                                                    sigm-030
      y=datan2(eta,z)                                                   sigm-031
      e=1.d0/(z*z+e)                                                    sigm-032
      sigm=eta*(dlog(x)-1.d0)+(z-.5d0)*y-(c1*dsin(y)+e*(c2*dsin(3.d0*y)+sigm-033
     1e*(c3*dsin(5.d0*y)+e*(c4*dsin(7.d0*y)+e*(c5*dsin(9.d0*y)+e*(c6*dsisigm-034
     2n(11.d0*y)+e*c7*dsin(13.d0*y)))))))/x                             sigm-035
      if (l.eq.1) go to 5                                               sigm-036
      j=l-1                                                             sigm-037
      do 4 i=1,j                                                        sigm-038
      z=z-1.d0                                                          sigm-039
    4 sigm=sigm-datan2(eta,z)                                           sigm-040
    5 return                                                            sigm-041
      end                                                               sigm-042
c 12/11/05                                                      ecis06  psi_-000
      function psi(eta)                                                 psi_-001
c  real part of psi(1-i*eta)-psi(1)-psi(i)                              psi_-002
c  with psi(z) = logarithmic derivative of the gamma function           psi_-003
c***********************************************************************psi_-004
      implicit real*8 (a-h,o-z)                                         psi_-005
      dimension b(13)                                                   psi_-006
      data c/.5772156649015329d0/,c1/8.333333333333333d-2/,c2/-8.3333333psi_-007
     133333333d-3/,c3/3.968253968253968d-3/,c4/-4.166666666666667d-3/,c5psi_-008
     2/7.575757575757576d-3/,c6/-2.109279609279609d-2/,b/7.4507117898354psi_-009
     328d-9,2.980350351465228d-8,1.192199259653110d-7,4.769329867878064dpsi_-010
     4-7,1.908212716553938d-6,7.637197637899762d-6,3.058823630702049d-5,psi_-011
     51.227133475784893d-4,4.941886041194665d-4,2.008392826082234d-3,8.3psi_-012
     649277381922945d-3,3.692775514337036d-2,2.020569031595948d-1/      psi_-013
      if (dabs(eta).gt.1.d-8) go to 1                                   psi_-014
      psi=c-1.d0                                                        psi_-015
      go to 5                                                           psi_-016
    1 e=eta*eta                                                         psi_-017
      if (e.gt..25d0) go to 3                                           psi_-018
      x=b(1)                                                            psi_-019
      do 2 i=2,13                                                       psi_-020
    2 x=b(i)-e*x                                                        psi_-021
      psi=c-1.d0/(1.d0+e)+e*x                                           psi_-022
      go to 5                                                           psi_-023
    3 l=1                                                               psi_-024
      if (e.lt.64.d0) l=2+idint(dsqrt(64.d0-e))                         psi_-025
      x=dsqrt(dfloat(l*l)+e)                                            psi_-026
      y=datan(eta/dfloat(l))                                            psi_-027
      e=1.d0/(dfloat(l*l)+e)                                            psi_-028
      psi=dlog(x)-.5d0*dfloat(l)*e-e*(c1*dcos(2.d0*y)+e*(c2*dcos(4.d0*y)psi_-029
     1+e*(c3*dcos(6.d0*y)+e*(c4*dcos(8.d0*y)+e*(c5*dcos(10.d0*y)+e*(c6*dpsi_-030
     2cos(12.d0*y)+e*c1*dcos(14.d0*y)))))))+c+c-1.d0                    psi_-031
      if (l.eq.1) go to 5                                               psi_-032
      j=l-1                                                             psi_-033
      e=eta*eta                                                         psi_-034
      do 4 i=1,j                                                        psi_-035
    4 psi=psi-1.d0/(dfloat(i)+e/dfloat(i))                              psi_-036
    5 return                                                            psi_-037
      end                                                               psi_-038
c 13/06/07                                                      ecis06  cori-000
      subroutine cori(ei,ef,si,sf,t,ssi,ssf,fgi,fgf,z,lm1,lm2,lm3,lm,w) cori-001
c    computation of the integrals from rs to infinity of products of    cori-002
c regular or irregular coulomb functions of same l-value divided by r**2cori-003
c for l=0 to l=lm-1 and of regular functions of same l divided by r**2  cori-004
c l=0 to l=lm2-1.calls corz if there is no charge.                      cori-005
c input:     ei,ef:   coulomb parameters.                               cori-006
c            si,sf:   wave numbers multiplied by matching radius.       cori-007
c            ssi,ssf: coulomb phase-shifts for l=0.                     cori-008
c            fgi,fgf: regular and irregular coulomb functions.          cori-009
c            lm1:     maximum number of integrals from rs to inf.       cori-010
c            lm2:     number of integrals from 0 to infinity            cori-011
c            lm3:     dimension of working area.                        cori-012
c            lm:      actual number of integrals from rs to inf.        cori-013
c output:    t:       integrals from 0 to infinity for products of      cori-014
c                           regular functions.                          cori-015
c            w:       integrals from rs to infinity.                    cori-016
c working area:                                                         cori-017
c            z:       for the computation of hypergeometric f3.         cori-018
c                                                                       cori-019
c the subroutines cori, coro, corz and cora for coulomb corrections     cori-020
c are identical in the codes ecis and dwba.                             cori-021
c the present version is of february 2006. for dwba, the no-charge      cori-022
c part and odd integrals could be suppressed.                           cori-023
c***********************************************************************cori-024
      implicit real*8 (a-h,o-z)                                         cori-025
      logical ll(4)                                                     cori-026
      dimension fgi(lm1,*),fgf(lm1,*),z(4,*),w(lm1,*),x1(4),x2(4),x3(4),cori-027
     1x4(4),t(*),y(4,4),az(2),cc(4,4)                                   cori-028
      common /inout/ mr,mw,ms                                           cori-029
      data pi /3.1415926535897932d0/                                    cori-030
      if ((ei.eq.0.d0).and.(ef.eq.0.d0)) go to 38                       cori-031
c computation of some constants.                                        cori-032
      if (si.gt.2.2d0*sf) go to 39                                      cori-033
      rs=dsqrt(si*sf)                                                   cori-034
      fs=dsqrt(sf/si)                                                   cori-035
      fi=ei**2                                                          cori-036
      ff=ef**2                                                          cori-037
      eif=ei*ef                                                         cori-038
      ex=ef-ei                                                          cori-039
      sif=si/sf+sf/si                                                   cori-040
      cx=fi*si**2+ff*sf**2                                              cori-041
      dx=fi*si**2-ff*sf**2                                              cori-042
      if (dabs(dx).gt.1.d-10) go to 1                                   cori-043
      dt=1.d0                                                           cori-044
      dx=0.d0                                                           cori-045
      dy=eif                                                            cori-046
      go to 2                                                           cori-047
    1 dt=si**2-sf**2                                                    cori-048
      dy=(fi*si**4-ff*sf**4)/(si*sf)                                    cori-049
      if (dabs(dt).lt.1.d-10) go to 2                                   cori-050
      dx=dx/dt                                                          cori-051
      dy=dy/dt                                                          cori-052
      dt=1.d0                                                           cori-053
    2 rm=dmax1((5.d0*dabs(ei)+22.5d0)*fs,(5.d0*dabs(ef)+22.5d0)/fs,.18d0cori-054
     1*eif)/3.d0                                                        cori-055
      if (rm.lt.rs) rm=rs                                               cori-056
c computation of integrals from rs to infinity for l=0 and l=1.         cori-057
      call cor0(ei,ef,ssi,ssf,zr,zi,z,lm3,rm,rs,fs,fi,ff,ex,cc)         cori-058
c computation of integrals from 0 to infinity for l=0 and l=1.          cori-059
      if (ei.ne.ef.or.si.ne.sf) go to 4                                 cori-060
c when ei=ef=e   i(l,l,2)=(pi-pi*coth(pi*e)-1/e+sum on n from 0 to l of cori-061
c                2*e/(n**2+e**2))/2/(2*l+1).                            cori-062
      a2=pi*.5d0                                                        cori-063
      b2=dexp(-2.d0*pi*ei)                                              cori-064
      if (ei.ne.0.d0) a2=a2-.5d0*pi*(b2+1.d0)/(1.d0-b2)+.5d0/ei         cori-065
      b3=0.d0                                                           cori-066
      do 3 i=1,lm2                                                      cori-067
      b2=b3                                                             cori-068
      b3=b3+1.d0                                                        cori-069
      t(i)=a2/(b2+b3)                                                   cori-070
    3 a2=a2+ei/(b3**2+fi)                                               cori-071
      ll(1)=.true.                                                      cori-072
      ll(2)=.true.                                                      cori-073
      go to 13                                                          cori-074
c computation of i(0,0,1) and i(1,1,1)                                  cori-075
c  i(l,l,1) = 2*(si*sf)**(1/2)/(si+sf)**2 * exp( pi*sign(sf-si)*ex/2) * cori-076
c real part of (|sf-si|/(sf+si))**(i*ex)*gamma(-i*ex)*exp(i*(xef-xei))* cori-077
c   2f1(l+1-i*ei,l+1+i*ef;1+i*ef-i*ei;((sf-si)/(sf+si))**2)             cori-078
c  where ex=ef-ei.                                                      cori-079
    4 a2=ex**2                                                          cori-080
      b2=((si-sf)/(si+sf))**2                                           cori-081
      a3=2.d0*dexp(zr-pi*.5d0*ex)/(si+sf)**2*rs                         cori-082
      if (sf.gt.si) a3=a3*dexp(pi*ex)                                   cori-083
      a4=zi+ssf-ssi+.5d0*dlog(b2)*ex                                    cori-084
      a5=a3*dcos(a4)                                                    cori-085
      a6=a3*dsin(a4)                                                    cori-086
      a3=a5                                                             cori-087
      a4=a6                                                             cori-088
      a7=0.d0                                                           cori-089
      do 7 l=1,2                                                        cori-090
      az(l)=a3                                                          cori-091
      a8=0.d0                                                           cori-092
      do 5 n=1,500                                                      cori-093
      a8=a8+1.d0                                                        cori-094
      b3=(a7+a8)**2+eif                                                 cori-095
      b4=(a7+a8)*ex                                                     cori-096
      b7=b2/(a8*(a8**2+a2))                                             cori-097
      b5=(b3*a8+b4*ex)*b7                                               cori-098
      b6=(a8*b4-ex*b3)*b7                                               cori-099
      a9=a3*b5-a4*b6                                                    cori-100
      a4=a3*b6+a4*b5                                                    cori-101
      a3=a9                                                             cori-102
      az(l)=az(l)+a3                                                    cori-103
      if (dabs(a3)+dabs(a4).lt.dabs(az(l))*1.d-16) go to 6              cori-104
    5 continue                                                          cori-105
      li=l-1                                                            cori-106
      write (mw,1000) li,li,ei,ef,az(l),a3,a4                           cori-107
    6 b3=1.d0+eif                                                       cori-108
      b5=(1.d0-b2)/dsqrt(b3*b3+ex*ex)                                   cori-109
      a7=1.d0                                                           cori-110
      a3=b5*(a5*b3-a6*ex)                                               cori-111
    7 a4=b5*(a6*b3+a5*ex)                                               cori-112
c computation of i(0,0,2) and i(1,1,2) . only the first is needed       cori-113
c   for backward recurrence:                                            cori-114
c i(l,l,2) = pi/(2*sh(pi*ex)*( (y/si-1/(y*sf))/(2*l+1)+((si-sf)/(sf*si))cori-115
c  *exp(-pi*ex/2) * real part of exp(i*(xei-xef))*((si-sf)/2)**(-i*ex)  cori-116
c  *sf**(i*ef)*si**(-i*ei)*f3(-l+i*ei,-l-i*ef,l+1+i*ei,l+1-i*ef,2-i*ex; cori-117
c  (si-sf)/(2*si),(sf-si)/(2*sf))                                       cori-118
c   where  y=exp(pi*ex/2)*(si/sf)**l*|gamma(l+1+i*ef)/gamma(l+1+i*ei)|. cori-119
      if (ei.gt.ef) go to 8                                             cori-120
      eef=ef                                                            cori-121
      eei=ei                                                            cori-122
      sxf=sf                                                            cori-123
      sxi=si                                                            cori-124
      sss=ssi-ssf-zi                                                    cori-125
      go to 9                                                           cori-126
    8 eef=ei                                                            cori-127
      eei=ef                                                            cori-128
      sxf=si                                                            cori-129
      sxi=sf                                                            cori-130
      sss=ssf-ssi+zi                                                    cori-131
    9 eex=eef-eei                                                       cori-132
      sfi=sxi-sxf                                                       cori-133
      a2=eex/(2.d0*eef)                                                 cori-134
      a3=-a2*sfi/(2.d0*sxf)                                             cori-135
      a4=a2*sfi/(2.d0*sxi)                                              cori-136
      ll(1)=dfloat(lm2)*dabs(ex).gt.3.d0*dabs(ei+ef)                    cori-137
      ll(2)=.not.ll(1)                                                  cori-138
      b3=dexp(-zr)/eex/dsqrt(1.d0+ex**2)                                cori-139
      if (sfi.lt.0.d0) b3=b3*dexp(eex*pi)                               cori-140
      b4=sss+datan(eex)-.5d0*pi+eef*dlog(sxf)-eei*dlog(sxi)-eex*dlog(.5dcori-141
     10*dabs(sfi))                                                      cori-142
      a5=b3*dcos(b4)                                                    cori-143
      a6=b3*dsin(b4)                                                    cori-144
      b5=a5                                                             cori-145
      b6=a6                                                             cori-146
      b2i=-2.d0*pi+4.d0*pi**2*eei                                       cori-147
      b2f=-2.d0*pi+4.d0*pi**2*eef                                       cori-148
      if (dabs(eei).gt.1.d-8) b2i=(dexp(-2.d0*pi*eei)-1.d0)/eei         cori-149
      if (dabs(eef).gt.1.d-8) b2f=(dexp(-2.d0*pi*eef)-1.d0)/eef         cori-150
      b2=dsqrt(b2i/b2f)                                                 cori-151
      a7=dexp(-.5d0*pi*eex)                                             cori-152
      a8=pi*a7**2/(1.d0-a7**4)*rs                                       cori-153
      a7=-a7*sfi/(sf*si)                                                cori-154
      z(1,1)=1.d0                                                       cori-155
      z(2,1)=0.d0                                                       cori-156
      z(3,1)=1.d0                                                       cori-157
      z(4,1)=0.d0                                                       cori-158
      do 12 l=1,2                                                       cori-159
      li=l-1                                                            cori-160
      t(l)=b5                                                           cori-161
      n=0                                                               cori-162
   10 n=n+1                                                             cori-163
      if (2*n.gt.lm3) call memo('cori',lm3,2*n)                         cori-164
      b4=dfloat(n+1)**2+ex**2                                           cori-165
      b9=(b5*dfloat(n+1)-eex*b6)/(b4*a2)                                cori-166
      b6=(b5*eex+b6*dfloat(n+1))/(b4*a2)                                cori-167
      b5=b9                                                             cori-168
      b3=dfloat((l+n-1)*(n-l))-eei**2                                   cori-169
      b4=eei*dfloat(2*n-1)                                              cori-170
      z(1,n+1)=(z(1,n)*b3-z(2,n)*b4)*a4/dfloat(n)                       cori-171
      z(2,n+1)=(z(1,n)*b4+z(2,n)*b3)*a4/dfloat(n)                       cori-172
      b3=dfloat((l+n-1)*(n-l))-eef**2                                   cori-173
      b4=-eef*dfloat(2*n-1)                                             cori-174
      z(3,n+1)=(z(3,n)*b3-z(4,n)*b4)*a3/dfloat(n)                       cori-175
      z(4,n+1)=(z(3,n)*b4+z(4,n)*b3)*a3/dfloat(n)                       cori-176
      b7=z(1,n+1)                                                       cori-177
      b8=z(2,n+1)                                                       cori-178
      do 11 j=1,n                                                       cori-179
      m=n+2-j                                                           cori-180
      b7=b7+z(1,j)*z(3,m)-z(2,j)*z(4,m)                                 cori-181
   11 b8=b8+z(2,j)*z(3,m)+z(1,j)*z(4,m)                                 cori-182
      if (dabs(b7)+dabs(b8).gt.1.d30) go to 40                          cori-183
      b7=b7*b5-b8*b6                                                    cori-184
      t(l)=t(l)+b7                                                      cori-185
      if (dabs(b7).gt.dabs(t(l))*1.d-16) go to 10                       cori-186
      t(l)=a8*(a7*t(l)+(b2/sxi-1.d0/(b2*sxf))/dfloat(2*l-1))            cori-187
      if (ll(1)) go to 13                                               cori-188
      b2=b2*sxf/sxi*dsqrt((1.d0+eef**2)/(1.d0+eei**2))                  cori-189
      b4=dsqrt((1.d0+eei**2)*(1.d0+eef**2))                             cori-190
      b3=(1.d0+eif)/b4                                                  cori-191
      b4=-eex/b4                                                        cori-192
      b5=b3*a5-b4*a6                                                    cori-193
   12 b6=b3*a6+b4*a5                                                    cori-194
c comp. of the integrals from 0 to infinity.                            cori-195
c upwards recurrences for the other integrals:  starting values:        cori-196
   13 do 14 j=1,4                                                       cori-197
      w(1,j)=cc(j,3)                                                    cori-198
      w(2,j)=cc(j,4)                                                    cori-199
      x2(j)=cc(j,1)/rs                                                  cori-200
   14 x3(j)=cc(j,2)/rs                                                  cori-201
      rm=rs**2                                                          cori-202
      im=1                                                              cori-203
      lx=lm                                                             cori-204
      if (.not.ll(1)) lx=max0(lx,lm2)                                   cori-205
      ll(3)=ll(1)                                                       cori-206
      i=2                                                               cori-207
      a1=dsqrt(1.d0+fi)                                                 cori-208
      b1=dsqrt(1.d0+ff)                                                 cori-209
      if (ll(1)) go to 15                                               cori-210
      c4=az(1)                                                          cori-211
      c5=az(2)                                                          cori-212
   15 i=i+1                                                             cori-213
      a2=a1                                                             cori-214
      b2=b1                                                             cori-215
      a=dfloat(i-1)                                                     cori-216
      a1=dsqrt(a**2+fi)                                                 cori-217
      b1=dsqrt(a**2+ff)                                                 cori-218
      ll(4)=i.gt.lm                                                     cori-219
   16 a9=(a-1.d0)**2*dt+dx                                              cori-220
      a3=(2.d0*a-3.d0)*(a**2*dt+dx)*a2*b2                               cori-221
      a4=-(2.d0*a-1.d0)*(dx*cx/rm+dy*((a-1.d0)**2+a**2)+dt*(a*a-a)**2*sicori-222
     1f)                                                                cori-223
      a5=(2.d0*a+1.d0)*a9*a1*b1                                         cori-224
      c1=dt*(2.d0*a-1.d0)*(ei*si+ef*sf)*a2*b2/(a-1.d0)                  cori-225
      c2=dt*(a-.5d0)*(b2**2*((a-1.d0)*ef*sf-(a+1.d0)*ei*si)*sf/si+a2**2*cori-226
     1((a-1.d0)*ei*si-(a+1.d0)*ef*sf)*si/sf)/(a-1.d0)                   cori-227
      a6=a*a2*b2                                                        cori-228
      a7=-(2.d0*a-1.d0)*(eif+(a-1.d0)*a*sif*.5d0)                       cori-229
      a8=(a-1.d0)*a1*b1                                                 cori-230
      if (ll(4)) go to 17                                               cori-231
      b6=(a-.5d0)/(rm*rs*(a-1.d0)**2)                                   cori-232
      b3=-2.d0*rm*dx*b6*a2*b2                                           cori-233
      b4=b6*a9*sf*(2.d0*(a*a-a)*a+(a+1.d0)*ei*si-(a-1.d0)*ef*sf)*b2     cori-234
      b5=b6*a9*si*(2.d0*(a*a-a)*a+(a+1.d0)*ef*sf-(a-1.d0)*ei*si)*a2     cori-235
      b6=-b6*(a9*(2.d0*(a*a-a)**2*(2.d0*a-1.d0)+(ei*si+ef*sf)*(a-1.d0)*(cori-236
     1a+1.d0)*(2.d0*a-1.d0)+2.d0*eif*rm*a)-(a-1.d0)*(cx*dx+(a-1.d0)*((a+cori-237
     21.d0)*cx*dt-2.d0*rm*dy)))                                         cori-238
      b9=(a-.5d0)*a/rs                                                  cori-239
      b7=b9*b2/si                                                       cori-240
      b8=b9*a2/sf                                                       cori-241
      b9=b9*(-(2.d0*a-1.d0)*(a-1.d0)-(ei*si+ef*sf))/rm                  cori-242
   17 if (im.ne.1) go to 26                                             cori-243
      if (ll(3)) go to 18                                               cori-244
      t(i)=-(a3*t(i-2)+a4*t(i-1)+c1*c4+c2*c5)/a5                        cori-245
      c3=c4                                                             cori-246
      c4=c5                                                             cori-247
      c5=-(a6*c3+a7*c4)/a8                                              cori-248
   18 if (ll(4)) go to 23                                               cori-249
      do 20 j=1,4                                                       cori-250
      j1=mod(j+1,2)+i-2                                                 cori-251
      j2=(j+1)/2+i-3                                                    cori-252
      do 19 k=1,4                                                       cori-253
      k1=mod(k+1,2)*2+1                                                 cori-254
      k2=2*((k+1)/2)-1                                                  cori-255
   19 y(k,j)=fgi(j1,k1)*fgf(j2,k2)                                      cori-256
   20 continue                                                          cori-257
c recurrence for (0,2;l).                                               cori-258
      do 21 j=1,4                                                       cori-259
      x1(j)=x2(j)                                                       cori-260
      x2(j)=x3(j)                                                       cori-261
   21 w(i,j)=-(b3*y(j,1)+b4*y(j,2)+b5*y(j,3)+b6*y(j,4)+a3*w(i-2,j)+a4*w(cori-262
     1i-1,j)+c1*x1(j)+c2*x2(j))/a5                                      cori-263
      do 22 j=1,4                                                       cori-264
   22 x3(j)=-(b7*y(j,2)+b8*y(j,3)+b9*y(j,4)+a6*x1(j)+a7*x2(j))/a8       cori-265
   23 if (i.lt.lx) go to 15                                             cori-266
      ln=max0(lm,idint(rs))+50                                          cori-267
      lx=ln                                                             cori-268
      if (.not.ll(2)) lx=max0(lx,lm2+6*min0(idint((si+sf)/dabs(si-sf)),5cori-269
     100))                                                              cori-270
      ll(3)=ll(2)                                                       cori-271
      im=2                                                              cori-272
      x4(1)=1.d0                                                        cori-273
      x4(2)=0.d0                                                        cori-274
      x4(3)=0.d0                                                        cori-275
      x4(4)=0.d0                                                        cori-276
      a1=lx-1                                                           cori-277
      a2=dsqrt(a1**2+fi)                                                cori-278
      b2=dsqrt(a1**2+ff)                                                cori-279
      do 24 j=1,4                                                       cori-280
      x2(j)=0.d0                                                        cori-281
   24 x3(j)=0.d0                                                        cori-282
      x3(1)=1.d-20                                                      cori-283
      x3(2)=1.d-20                                                      cori-284
   25 lx=lx-1                                                           cori-285
      a=lx                                                              cori-286
      a1=a2                                                             cori-287
      b1=b2                                                             cori-288
      a3=dfloat(lx-1)                                                   cori-289
      ll(4)=lx.gt.ln                                                    cori-290
      a2=dsqrt(a3**2+fi)                                                cori-291
      b2=dsqrt(a3**2+ff)                                                cori-292
      go to 16                                                          cori-293
   26 if (ll(3)) go to 27                                               cori-294
      x4(1)=-a6/(a7+a8*x4(1))                                           cori-295
      x4(3)=x4(1)*x4(2)                                                 cori-296
      x4(2)=-(a4*x4(3)+a5*x4(4)*x4(1)+c1+c2*x4(1))/a3                   cori-297
      x4(4)=x4(3)                                                       cori-298
      if (lx.le.lm2) t(lx)=x4(3)/x4(2)                                  cori-299
   27 if (ll(4)) go to 33                                               cori-300
c downward recurrence for f(ei) and f(ef).                              cori-301
      do 28 j=1,4                                                       cori-302
      x1(j)=x2(j)                                                       cori-303
   28 x2(j)=x3(j)                                                       cori-304
      x3(1)=((2.d0*a-1.d0)*(ei+(a-1.d0)*a/si)*x2(1)-(a-1.d0)*a1*x1(1))/(cori-305
     1a*a2)                                                             cori-306
      x3(2)=((2.d0*a-1.d0)*(ef+(a-1.d0)*a/sf)*x2(2)-(a-1.d0)*b1*x1(2))/(cori-307
     1a*b2)                                                             cori-308
c downwards recurrence for (1,2;l).                                     cori-309
      x3(4)=-(a7*x2(4)+a8*x1(4)+b7*x2(1)*x3(2)+b8*x3(1)*x2(2)+b9*x2(1)*xcori-310
     12(2))/a6                                                          cori-311
c downward recurrence for (0,2;l).                                      cori-312
      x3(3)=-(a4*x2(3)+a5*x1(3)+c1*x3(4)+c2*x2(4)+b3*x3(1)*x3(2)+b4*x2(1cori-313
     1)*x3(2)+b5*x3(1)*x2(2)+b6*x2(1)*x2(2))/a3                         cori-314
      i=lx-1                                                            cori-315
      if (i.le.lm) w(i,1)=x3(3)                                         cori-316
      if (dabs(x3(1)).lt.1.d10) go to 29                                cori-317
      x3(1)=x3(1)*1.d-20                                                cori-318
      x2(1)=x2(1)*1.d-20                                                cori-319
      go to 30                                                          cori-320
   29 if (dabs(x3(2)).lt.1.d10) go to 33                                cori-321
      x2(2)=x2(2)*1.d-20                                                cori-322
      x3(2)=x3(2)*1.d-20                                                cori-323
   30 do 31 j=3,4                                                       cori-324
      x3(j)=x3(j)*1.d-20                                                cori-325
   31 x2(j)=x2(j)*1.d-20                                                cori-326
      if (i.gt.lm) go to 33                                             cori-327
      do 32 j=i,lm                                                      cori-328
   32 w(j,1)=w(j,1)*1.d-20                                              cori-329
   33 if (lx.gt.2) go to 25                                             cori-330
      if (ll(2)) go to 36                                               cori-331
c computation of the mixture of the decreasing solution of homogeneous  cori-332
c equation  (s2/s1)**l * |gamma(l+1+i*e2)/gamma(l+1+i*e1)|/(2*l+1)      cori-333
c where s2 is the smaller of the two values si and sf.                  cori-334
      a1=x4(2)*az(1)                                                    cori-335
      a2=t(1)-a1                                                        cori-336
      a3=0.d0                                                           cori-337
      do 35 i=2,lm2                                                     cori-338
      a3=a3+1.d0                                                        cori-339
      a1=t(i)*a1                                                        cori-340
      a4=sf*dsqrt((a3**2+ff)/(a3**2+fi))/si                             cori-341
      if (si.gt.sf) go to 34                                            cori-342
      a2=a2/a4                                                          cori-343
      go to 35                                                          cori-344
   34 a2=a2*a4                                                          cori-345
   35 t(i)=a1+a2/(2.d0*a3+1.d0)                                         cori-346
c the values obtained are unnormalised integrals from rs to 0.          cori-347
c normalisation and transformation to integral from rs to infinity.     cori-348
   36 a1=fgi(1,1)*fgf(1,1)/(x3(1)*x3(2))                                cori-349
      do 37 j=1,lm                                                      cori-350
   37 w(j,1)=a1*w(j,1)+t(j)                                             cori-351
      if ((si.ne.sf).or.(dabs(cc(1,3)-w(1,1))/(dabs(cc(1,3))+dabs(w(1,1)cori-352
     1)).gt.1.d-4).or.(dabs(cc(1,4)-w(2,1))/(dabs(cc(1,4))+dabs(w(2,1)))cori-353
     2.gt.1.d-4)) write (mw,1001) cc(1,3),w(1,1),cc(1,4),w(2,1)         cori-354
      return                                                            cori-355
   38 call corz(si,sf,t,fgi,fgf,lm1,lm2,lm,w)                           cori-356
      return                                                            cori-357
   39 write (mw,1002) sf,si                                             cori-358
      go to 41                                                          cori-359
   40 write (mw,1003) n,li,li,ei,ef,t(l),b5,b6                          cori-360
   41 write (mw,1004)                                                   cori-361
      stop                                                              cori-362
 1000 format (' no convergence with 500 terms for i(',i1,',',i1,') with cori-363
     1ei =',f15.6,31x,'and ef =',f15.6,5x,'in cori'/5x,'value =',d15.8,5cori-364
     2x,'last term =',2d16.8/' ... continue ...')                       cori-365
 1001 format (' integrals with regular functions: (l+1)       direct:   cori-366
     1   backwards recurrence:'/37x,'1',2d20.10/37x,'2',2d20.10)        cori-367
 1002 format (' too large ratio sf/si =',f15.6,1h/,f15.6,5x,'in cori.') cori-368
 1003 format (' the',i4,' term is too large in the computation of i(',i1cori-369
     1,',',i1,',2)    with ei =',f15.6,5x,'and ef =',f15.6,5x,'in corh:'cori-370
     2/5x,'value =',d15.8,5x,'last term =',2d16.8)                      cori-371
 1004 format (//' in cori  ...  stop  ...')                             cori-372
      end                                                               cori-373
c 02/06/07                                                      ecis06  cor0-000
      subroutine cor0(ei,ef,ssi,ssf,zr,zi,z,lm3,rm,rs,fs,fi,ff,ex,cc)   cor0-001
c    computation of the integrals from rs to infinity of products of    cor0-002
c regular or irregular coulomb functions of l=0 and l=1 divided by r**2 cor0-003
c input:     ei,ef:   coulomb parameters.                               cor0-004
c            ssi,ssf: coulomb phase-shifts for l=0.                     cor0-005
c            lm3:     dimension of working area.                        cor0-006
c            rm:      actual matching radius for integrals.             cor0-007
c            rs:      needed matching radius for integrals.             cor0-008
c            fs:      square root of ratio of wave numbers.             cor0-009
c            fi,ff:   squares of coulomb parameters.                    cor0-010
c            ex:      difference of coulomb parameters.                 cor0-011
c output:    cc:      integrals from rs to infinity.                    cor0-012
c            zr,zi:   real, imaginary part of log(gamma(0.,ei-ef))      cor0-013
c working area:                                                         cor0-014
c            z:       for the computation of f and g.                   cor0-015
c***********************************************************************cor0-016
      implicit real*8 (a-h,o-z)                                         cor0-017
      dimension z(4,*),x1(4),x2(4),x3(4),x4(4),x5(4),c(2,2,2),y(4,4),ie(cor0-018
     12,2),absc(20),p(20),b(7),cc(4,4),yy(8,2)                          cor0-019
      equivalence (y,yy)                                                cor0-020
      data pi /3.1415926535897932d0/                                    cor0-021
      data b /.8333333333333333d-01,-.2777777777777778d-2,.7936507936507cor0-022
     19365d-3,-.5952380952380952d-3,.84175084175d-3,-.19175269d-2,.641d-cor0-023
     202/                                                               cor0-024
      data absc( 1),p( 1) / 0.88114514472040d-03, 0.22606385492666d-02/ cor0-025
      data absc( 2),p( 2) / 0.46368806502715d-02, 0.52491422655764d-02/ cor0-026
      data absc( 3),p( 3) / 0.11370025008113d-01, 0.82105291909539d-02/ cor0-027
      data absc( 4),p( 4) / 0.21041590393104d-01, 0.11122924597084d-01/ cor0-028
      data absc( 5),p( 5) / 0.33593595860662d-01, 0.13968503490012d-01/ cor0-029
      data absc( 6),p( 6) / 0.48950596515563d-01, 0.16730097641274d-01/ cor0-030
      data absc( 7),p( 7) / 0.67020248393870d-01, 0.19391083987236d-01/ cor0-031
      data absc( 8),p( 8) / 0.87693884583344d-01, 0.21935454092836d-01/ cor0-032
      data absc( 9),p( 9) / 0.11084717428674d+00, 0.24347903817536d-01/ cor0-033
      data absc(10),p(10) / 0.13634087240504d+00, 0.26613923491968d-01/ cor0-034
      data absc(11),p(11) / 0.16402165769291d+00, 0.28719884549696d-01/ cor0-035
      data absc(12),p(12) / 0.19372305516601d+00, 0.30653121246465d-01/ cor0-036
      data absc(13),p(13) / 0.22526643745244d+00, 0.32402006728300d-01/ cor0-037
      data absc(14),p(14) / 0.25846209915691d+00, 0.33956022907617d-01/ cor0-038
      data absc(15),p(15) / 0.29311039781420d+00, 0.35305823695643d-01/ cor0-039
      data absc(16),p(16) / 0.32900295458712d+00, 0.36443291197902d-01/ cor0-040
      data absc(17),p(17) / 0.36592390749637d+00, 0.37361584528984d-01/ cor0-041
      data absc(18),p(18) / 0.40365120964931d+00, 0.38055180950313d-01/ cor0-042
      data absc(19),p(19) / 0.44195796466237d+00, 0.38519909082124d-01/ cor0-043
      data absc(20),p(20) / 0.48061379124697d+00, 0.38752973989212d-01/ cor0-044
c computation of the integrals from rm to infinity for l=0,1 by         cor0-045
c rawitscher's method. (comp. physics comm., vol.11,183,1976)           cor0-046
c expansions of coulomb wave functions are z(n,2*m-1)+i*z(n,2*m)=g+i*f  cor0-047
c   n=1: l=0,e=ei     n=2: l=0,e=ef     n=3: l=1,e=ei     n=4: l=1,e=ef cor0-048
      a1=rm/fs                                                          cor0-049
      b1=rm*fs                                                          cor0-050
      x1(1)=a1-ei*dlog(2.d0*a1)+ssi                                     cor0-051
      x1(3)=b1-ef*dlog(2.d0*b1)+ssf                                     cor0-052
      x1(2)=x1(1)+datan(ei)-.5d0*pi                                     cor0-053
      x1(4)=x1(3)+datan(ef)-.5d0*pi                                     cor0-054
c first term of asymptotic expansion of h(+/-) for l=0,1.               cor0-055
      do 1 i=1,4                                                        cor0-056
      x5(i)=0.d0                                                        cor0-057
      z(i,1)=dcos(x1(i))                                                cor0-058
    1 z(i,2)=dsin(x1(i))                                                cor0-059
      x1(1)=-a1-b1                                                      cor0-060
      x2(1)=ei+ef                                                       cor0-061
      x1(2)=b1-a1                                                       cor0-062
      x2(2)=-ex                                                         cor0-063
      if (dabs(x2(2)).lt.1.d-8) x2(2)=0.d0                              cor0-064
      if (x2(2).eq.0.d0) go to 4                                        cor0-065
c computation of log(gamma(0.,ei-ef)).                                  cor0-066
      b2=-datan(ex/11.d0)                                               cor0-067
      b3=121.d0+ex**2                                                   cor0-068
      a2=.5d0*dlog(b3)                                                  cor0-069
      zr=.91893853320467274d0+10.5d0*a2+ex*b2-11.d0-dlog(dabs(ex))      cor0-070
      zi=10.5d0*b2+ex-ex*a2+0.5d0*pi                                    cor0-071
      if (ex.lt.0.d0) zi=zi-pi                                          cor0-072
      a2=11.d0/b3                                                       cor0-073
      b2=ex/b3                                                          cor0-074
      a3=a2**2-b2**2                                                    cor0-075
      b3=2.d0*a2*b2                                                     cor0-076
      do 2 i=1,7                                                        cor0-077
      zr=zr+b(i)*a2                                                     cor0-078
      zi=zi+b(i)*b2                                                     cor0-079
      c1=a2*a3-b2*b3                                                    cor0-080
      b2=a2*b3+b2*a3                                                    cor0-081
    2 a2=c1                                                             cor0-082
      do 3 i=1,10                                                       cor0-083
      a2=dfloat(i)                                                      cor0-084
      zr=zr-.5d0*dlog(a2**2+ex**2)                                      cor0-085
    3 zi=zi+datan(ex/a2)                                                cor0-086
    4 if (dabs(x1(2)).gt.2.d0) go to 9                                  cor0-087
c computation of the first confluent hypergeometric function.           cor0-088
      if (x1(2).eq.0.d0) go to 8                                        cor0-089
      if (dabs(x2(2)).lt.1.d-3) go to 5                                 cor0-090
      a2=dexp(-dsign(0.5d0*pi,x1(2))*x2(2)+zr)                          cor0-091
      b2=dsign(zi,x2(2))+x2(2)*dlog(dabs(x1(2)))                        cor0-092
      x5(2)=a2*dcos(b2)                                                 cor0-093
      x5(4)=a2*dsin(b2)-1.d0/x2(2)                                      cor0-094
      go to 6                                                           cor0-095
c expansion for small ex.                                               cor0-096
    5 a2=dlog(dabs(x1(2)))                                              cor0-097
      b2=pi*.5d0                                                        cor0-098
      if (x1(2).lt.0.d0) b2=-b2                                         cor0-099
      a3=a2*(1.d0+ex*(b2-ex*((a2**2-3.d0*b2**2)/6.d0+ex*b2*(a2**2-b2**2)cor0-100
     1/6.d0)))                                                          cor0-101
      b3=b2-ex*((a2**2-b2**2)/2.d0+ex*(b2*(3.d0*a2**2-b2**2)/6.d0-ex*(a2cor0-102
     1**4-6.d0*a2**2*b2**2+b2**4)/24.d0))                               cor0-103
      a2=.5772156649015329d0-.400685634386331d0*ex**2                   cor0-104
      b2=-ex*(.822467033424113d0-0.270580808427784d0*ex**2)             cor0-105
      a4=a2*(1.d0+ex*(b2-ex*((a2**2-3.d0*b2**2)/6.d0+ex*b2*(a2**2-b2**2)cor0-106
     1/6.d0)))                                                          cor0-107
      b4=b2-ex*((a2**2-b2**2)/2.d0+ex*(b2*(3.d0*a2**2-b2**2)/6.d0-ex*(a2cor0-108
     1**4-6.d0*a2**2*b2**2+b2**4)/24.d0))                               cor0-109
      x5(2)=-a3-a4-ex*(a3*b4+b3*a4)                                     cor0-110
      x5(4)=-b3-b4+ex*(a3*a4-b3*b4)                                     cor0-111
    6 a2=x5(2)                                                          cor0-112
      b2=x5(4)                                                          cor0-113
      a3=1.d0                                                           cor0-114
      b3=0.d0                                                           cor0-115
      do 7 j=1,1000                                                     cor0-116
      b4=j                                                              cor0-117
      c1=-x1(2)*(b4*b3-ex*a3)/(b4**2+ex**2)                             cor0-118
      b3=x1(2)*(b4*a3+ex*b3)/(b4**2+ex**2)                              cor0-119
      a3=c1                                                             cor0-120
      c2=(-x1(2)*b2+a3)/b4                                              cor0-121
      b2=(x1(2)*a2+b3)/b4                                               cor0-122
      a2=c2                                                             cor0-123
      x5(2)=x5(2)+a2                                                    cor0-124
      x5(4)=x5(4)+b2                                                    cor0-125
      if (dabs(a2)+dabs(b2).lt.1.d-12*(dabs(x5(2))+dabs(x5(4)))) go to 9cor0-126
    7 continue                                                          cor0-127
      go to 9                                                           cor0-128
    8 x5(4)=-.5d0*pi                                                    cor0-129
      x5(2)=0.d0                                                        cor0-130
    9 do 11 k=1,4                                                       cor0-131
      do 10 j=1,4                                                       cor0-132
   10 y(j,k)=0.d0                                                       cor0-133
   11 continue                                                          cor0-134
      n=idint(dmin1(a1+dsqrt(a1**2-fi),b1+dsqrt(b1**2-ff))+2.d0)        cor0-135
      a3=0.d0                                                           cor0-136
      b3=0.d0                                                           cor0-137
c loop of the asymptotic expansion.                                     cor0-138
      do 27 i=1,n                                                       cor0-139
      if (4*i.gt.lm3) call memo('cor0',lm3,4*i)                         cor0-140
      a4=dfloat(i)-2                                                    cor0-141
      if (i.eq.1) go to 19                                              cor0-142
      if (i.eq.2) go to 13                                              cor0-143
      b4=1.d0-.5d0/a4                                                   cor0-144
      x3(1)=ei*b4/a1                                                    cor0-145
      x3(2)=x3(1)                                                       cor0-146
      x3(3)=ef*b4/b1                                                    cor0-147
      x3(4)=x3(3)                                                       cor0-148
      x4(1)=(fi-a4*(a4-1.d0))/(2.d0*a4*a1)                              cor0-149
      x4(2)=(fi-(a4+1.d0)*(a4-2.d0))/(2.d0*a4*a1)                       cor0-150
      x4(3)=(ff-a4*(a4-1.d0))/(2.d0*a4*b1)                              cor0-151
      x4(4)=(ff-(a4+1.d0)*(a4-2.d0))/(2.d0*a4*b1)                       cor0-152
c new term of asymptotic expansion.                                     cor0-153
      do 12 j=1,4                                                       cor0-154
      z(j,2*i-3)=z(j,2*i-5)*x3(j)-z(j,2*i-4)*x4(j)                      cor0-155
   12 z(j,2*i-2)=z(j,2*i-5)*x4(j)+z(j,2*i-4)*x3(j)                      cor0-156
   13 do 16 l=1,2                                                       cor0-157
      do 15 k=1,2                                                       cor0-158
      do 14 j=1,2                                                       cor0-159
   14 c(j,k,l)=0.d0                                                     cor0-160
   15 continue                                                          cor0-161
   16 continue                                                          cor0-162
c product of the asymptotic expansions in c(1,n,m)+i*c(2,n,m)           cor0-163
c  n=1: h0(+)(ei)*h0(+)(ef)     n=2: h1(+)(ei)*h1(+)(ef)                cor0-164
c  m=1: hl(+)(ei)*hl(+)(ef)     m=2: hl(+)(ei)*hl(+)(ef).               cor0-165
      i1=i-1                                                            cor0-166
      do 18 j=1,i1                                                      cor0-167
      m=i-j                                                             cor0-168
      do 17 l=1,2                                                       cor0-169
      c(1,l,1)=c(1,l,1)+z(l,2*j-1)*z(l+2,2*m-1)-z(l,2*j)*z(l+2,2*m)     cor0-170
      c(2,l,1)=c(2,l,1)+z(l,2*j-1)*z(l+2,2*m)+z(l,2*j)*z(l+2,2*m-1)     cor0-171
      c(1,l,2)=c(1,l,2)+z(l,2*j-1)*z(l+2,2*m-1)+z(l,2*j)*z(l+2,2*m)     cor0-172
   17 c(2,l,2)=c(2,l,2)-z(l,2*j-1)*z(l+2,2*m)+z(l,2*j)*z(l+2,2*m-1)     cor0-173
   18 continue                                                          cor0-174
   19 b4=a4+2.d0                                                        cor0-175
      a5=0.d0                                                           cor0-176
      b5=0.d0                                                           cor0-177
c integration from rs to infinity.                                      cor0-178
      do 26 m=1,2                                                       cor0-179
c transfer of previous integrals.                                       cor0-180
      x4(m)=x5(m)*rm                                                    cor0-181
      x4(m+2)=x5(m+2)*rm                                                cor0-182
      if (dabs(x1(m)).le.2.d0.and.m.eq.2) go to 23                      cor0-183
c pade method for omega function.                                       cor0-184
c instead of formula (44), we compute i*k*r*omega in terms of i*k*r.    cor0-185
      a9=b4**2+(x2(m)+x1(m))**2                                         cor0-186
      a6=b4/a9                                                          cor0-187
      b6=-(x2(m)+x1(m))/a9                                              cor0-188
      a7=-b6*x1(m)                                                      cor0-189
      b7=a6*x1(m)                                                       cor0-190
      a8=a6                                                             cor0-191
      b8=b6+1.d0/x1(m)                                                  cor0-192
      b9=1.d0                                                           cor0-193
c steed's algorithm.                                                    cor0-194
      do 20 j=1,1000                                                    cor0-195
      c2=b7+x1(m)/b9                                                    cor0-196
      a9=(a7**2+c2**2)*b9                                               cor0-197
      c1=a7/a9                                                          cor0-198
      c2=-c2/a9                                                         cor0-199
      c3=-(c2*x1(m)+1.d0)*a8-c1*x1(m)*b8                                cor0-200
      c4=c1*x1(m)*a8-b8*(c2*x1(m)+1.d0)                                 cor0-201
      a7=1.d0+c1*(b4+b9)-c2*x2(m)                                       cor0-202
      b7=c1*x2(m)+(b4+b9)*c2                                            cor0-203
      a9=a7**2+b7**2                                                    cor0-204
      a7=a7/a9                                                          cor0-205
      b7=-b7/a9                                                         cor0-206
      a8=(a7-1.d0)*c3-b7*c4                                             cor0-207
      b8=(a7-1.d0)*c4+b7*c3                                             cor0-208
      b9=b9+1.d0                                                        cor0-209
      if (dabs(c3)+dabs(c4)+dabs(a8)+dabs(b8).lt.1.d-12*(dabs(b6)+dabs(acor0-210
     16))) go to 21                                                     cor0-211
      a6=a6+a8+c3                                                       cor0-212
   20 b6=b6+b8+c4                                                       cor0-213
   21 x5(m)=0.d0                                                        cor0-214
      x5(m+2)=0.d0                                                      cor0-215
      j=j+1                                                             cor0-216
c direct computation of pade approximant for more precision.            cor0-217
      do 22 k=1,j                                                       cor0-218
      c1=1.d0+b9*x5(m)                                                  cor0-219
      c2=b9*x5(m+2)                                                     cor0-220
      a9=c1**2+c2**2                                                    cor0-221
      b9=b9-1.d0                                                        cor0-222
      a7=((b4+b9)*c1+x2(m)*c2)/a9                                       cor0-223
      b7=x1(m)+(c1*x2(m)-c2*(b4+b9))/a9                                 cor0-224
      a9=a7**2+b7**2                                                    cor0-225
      x5(m)=a7/a9                                                       cor0-226
   22 x5(m+2)=-b7/a9                                                    cor0-227
      go to 24                                                          cor0-228
c taylor expansion of confluent hypergeometric function.                cor0-229
   23 if (i.eq.1) go to 26                                              cor0-230
      a7=1.d0+x1(m)*x5(m+2)                                             cor0-231
      b7=-x1(m)*x5(m)                                                   cor0-232
      a9=((b4-1.d0)**2+x2(m)**2)                                        cor0-233
      x5(m)=(a7*(b4-1.d0)+x2(m)*b7)/a9                                  cor0-234
      x5(m+2)=(b7*(b4-1.d0)-x2(m)*a7)/a9                                cor0-235
   24 if (i.eq.1) go to 26                                              cor0-236
c storage of integrals to a factor r in y(j,m)                          cor0-237
c  j=1 and j=2  real and imaginary parts of integral of h0(ei)*h0(ef)   cor0-238
c  j=3 and j=4  real and imaginary parts of integral of h1(ei)*h1(ef)   cor0-239
c  m=1 and m=2 for h*h   m=3 and m=4 for h*h*                           cor0-240
c  m=1 and m=3 for 1/r   m=2 and m=4 for 1/r**2                         cor0-241
      do 25 j=1,2                                                       cor0-242
      a6=c(1,j,m)*x4(m)-c(2,j,m)*x4(m+2)                                cor0-243
      b6=c(1,j,m)*x4(m+2)+c(2,j,m)*x4(m)                                cor0-244
      a5=dmax1(a5,a6**2+b6**2)                                          cor0-245
      y(2*j-1,2*m-1)=y(2*j-1,2*m-1)+a6                                  cor0-246
      y(2*j,2*m-1)=y(2*j,2*m-1)+b6                                      cor0-247
      a3=dmax1(a3,y(2*j-1,2*m-1)**2+y(2*j,2*m-1)**2)                    cor0-248
      a6=c(1,j,m)*x5(m)-c(2,j,m)*x5(m+2)                                cor0-249
      b6=c(1,j,m)*x5(m+2)+c(2,j,m)*x5(m)                                cor0-250
      b5=dmax1(b5,a6**2+b6**2)                                          cor0-251
      y(2*j-1,2*m)=y(2*j-1,2*m)+a6                                      cor0-252
      y(2*j,2*m)=y(2*j,2*m)+b6                                          cor0-253
   25 b3=dmax1(b3,y(2*j-1,2*m)**2+y(2*j,2*m)**2)                        cor0-254
   26 continue                                                          cor0-255
      if (i.ne.1.and.a5.lt.a3*1.d-30.and.b5.lt.b3*1.d-30) go to 28      cor0-256
   27 continue                                                          cor0-257
   28 a1=2.d0*rm                                                        cor0-258
c transformation from h(+/-) to f and g.                                cor0-259
      do 29 i=1,4                                                       cor0-260
      cc(1,i)=(yy(2*i-1,2)-yy(2*i-1,1))/a1                              cor0-261
      cc(4,i)=(yy(2*i-1,2)+yy(2*i-1,1))/a1                              cor0-262
      cc(3,i)=(yy(2*i,1)+yy(2*i,2))/a1                                  cor0-263
   29 cc(2,i)=(yy(2*i,1)-yy(2*i,2))/a1                                  cor0-264
      if (rm.eq.rs) go to 35                                            cor0-265
c if rm is not rs, 40 points gauss integration from rs to rm            cor0-266
c each gauss integration is for variation of r less than 20.            cor0-267
      il=min0(1+idint(dabs(rm-rs)*.05d0),50)                            cor0-268
      a1=dfloat(il)                                                     cor0-269
      a1=(rm-rs)/a1                                                     cor0-270
      a2=rm                                                             cor0-271
      do 34 it=1,il                                                     cor0-272
      a3=a2-a1                                                          cor0-273
      do 33 ii=1,40                                                     cor0-274
      i=min0(ii,41-ii)                                                  cor0-275
      a4=absc(i)                                                        cor0-276
      if (i.ne.ii) a4=1.d0-a4                                           cor0-277
      a5=a3+a1*a4                                                       cor0-278
      call fcou(1,ei,a5/fs,y,y(1,3),y(3,1),y(3,3),ie(1,1),x1)           cor0-279
      call fcou(1,ef,a5*fs,y(1,2),y(1,4),y(3,2),y(3,4),ie(1,2),x1)      cor0-280
      do 32 m=1,2                                                       cor0-281
      ni1=-ie(m,1)                                                      cor0-282
      do 31 j=1,2                                                       cor0-283
      ni2=-ie(m,2)                                                      cor0-284
      do 30 l=1,2                                                       cor0-285
      nii=min0(ni1+ni2,60)                                              cor0-286
      a6=p(i)*y(2*j+m-2,1)*y(2*l+m-2,2)/a5*a1*1.d1**nii                 cor0-287
      cc(2*l+j-2,m)=cc(2*l+j-2,m)+a6                                    cor0-288
      cc(2*l+j-2,m+2)=cc(2*l+j-2,m+2)+a6/a5                             cor0-289
   30 ni2=-ni2                                                          cor0-290
   31 ni1=-ni1                                                          cor0-291
   32 continue                                                          cor0-292
   33 continue                                                          cor0-293
   34 a2=a3                                                             cor0-294
   35 return                                                            cor0-295
      end                                                               cor0-296
c 27/06/06                                                      ecis06  corz-000
      subroutine corz(xi,xf,t,fgi,fgf,lm1,lm2,lm,w)                     corz-001
c    computation of the integrals from 1 to infinity of products of     corz-002
c regular or irregular bessel functions of same l-value and argument    corz-003
c xi*r and xf*r respectively, divided by r**3 for l=1 to lm, and of     corz-004
c integrals from 0 to infinity of regular functions of these arguments  corz-005
c divided by r**3.                                                      corz-006
c    the limit of stability of the upwards recurrence has               corz-007
c     been found to be   lm2*(1-xi/xf) < 3 .                            corz-008
c input:     xi,xf:   wave numbers multiplied by the matching radius.   corz-009
c            fgi,fgf: regular and irregular bessel functions.           corz-010
c            lm1:     maximum number of integrals from 1 to infinity.   corz-011
c            lm2:     number of integrals from 0 to infinity.           corz-012
c            lm:      actual number of integrals from 1 to infinity.    corz-013
c output:    t:       integrals from 0 to infinity.                     corz-014
c            w:       integrals from rs to infinity.                    corz-015
c***********************************************************************corz-016
      implicit real*8 (a-h,o-z)                                         corz-017
      dimension t(*),fgi(lm1,*),fgf(lm1,*),w(lm1,*),b(4),c(2),d(2)      corz-018
c integrals from 0 to infinity.                                         corz-019
c the recurrence relation starts from l=0 with l*(0,3;l)=1/3 for l=0.   corz-020
      t(1)=1.d0/3.d0                                                    corz-021
      if (xi.ne.xf) go to 2                                             corz-022
c when ki=kf   (0,3;l)=1/(2*l*(l+1)).                                   corz-023
      a1=0.d0                                                           corz-024
      do 1 i=2,lm2                                                      corz-025
      a1=a1+1.d0                                                        corz-026
    1 t(i)=.5d0/(a1*(a1+1.d0))                                          corz-027
      go to 11                                                          corz-028
    2 x=xi/xf                                                           corz-029
      if (x.gt.1.d0) x=1.d0/x                                           corz-030
c (0,3;l) = x**l gt(1/2) gt(l+1)/2/gt(l+3/2) 2f1(l,-1/2;l+3/2;x**2).    corz-031
      if (x.ge..9d0) go to 4                                            corz-032
c direct expansion of the 2f1 function.                                 corz-033
      a1=x**2                                                           corz-034
      t(2)=x/3.d0                                                       corz-035
      a2=t(2)                                                           corz-036
      a3=0.d0                                                           corz-037
      do 3 j=1,2000                                                     corz-038
      a3=a3+1.d0                                                        corz-039
      a2=a2*a1*(a3-1.5d0)/(a3+1.5d0)                                    corz-040
      t(2)=t(2)+a2                                                      corz-041
      if (dabs(a2).lt.1.d-15*dabs(t(2))) go to 6                        corz-042
    3 continue                                                          corz-043
      go to 6                                                           corz-044
c analytic continuation of the 2f1 function - erdelyi,.... 15.3.11.     corz-045
    4 a1=1.d0-x**2                                                      corz-046
      a2=x*a1**2/16.d0                                                  corz-047
      a3=dlog(a1/4.d0)+2.d0                                             corz-048
      t(2)=x*(2.d0+a1)/8.d0+a2*a3                                       corz-049
      a4=0.d0                                                           corz-050
      do 5 j=1,2000                                                     corz-051
      a4=a4+1.d0                                                        corz-052
      a3=a3-.5d0/((a4+.5d0)*a4)                                         corz-053
      a2=a2*a1*(a4+.5d0)/a4                                             corz-054
      a5=a2*a3                                                          corz-055
      t(2)=t(2)+a5                                                      corz-056
      if (dabs(a5).lt.1.d-15*dabs(t(2))) go to 6                        corz-057
    5 continue                                                          corz-058
c recurrence relation for  (0,3;l) :                                    corz-059
c  2*(l-1)*(0,3;l-1)-(2*l+1)*(x+1/x)*(0,3;l)+2*(l+2)*(0,3;l+1)=0.       corz-060
c upwards recurrence.                                                   corz-061
    6 a1=x+1.d0/x                                                       corz-062
      xx=lm2*(1-x)                                                      corz-063
      if (xx.gt.3.d0) go to 8                                           corz-064
      t(3)=.5d0*(a1*t(2)-t(1))                                          corz-065
      a2=0.d0                                                           corz-066
      do 7 i=4,lm2                                                      corz-067
      a2=a2+1.d0                                                        corz-068
    7 t(i)=((a2+1.5d0)*a1*t(i-1)-a2*t(i-2))/(a2+3.d0)                   corz-069
      go to 11                                                          corz-070
c downwards recurrence.                                                 corz-071
    8 lk=4*lm2                                                          corz-072
      a2=dfloat(lk-1)                                                   corz-073
      a3=a2/(a2+2.d0)                                                   corz-074
      do 9 i=3,lk                                                       corz-075
      j=lk-i+3                                                          corz-076
      a2=a2-1.d0                                                        corz-077
      a3=a2/((a2+1.5d0)*a1-(a2+3.d0)*a3)                                corz-078
      if (j.le.lm2) t(j)=a3                                             corz-079
    9 continue                                                          corz-080
      do 10 i=3,lm2                                                     corz-081
   10 t(i)=t(i)*t(i-1)                                                  corz-082
   11 b(1)=xi+xf                                                        corz-083
      b(2)=xi-xf                                                        corz-084
c computation of the integrals from 1 to infinity of exp(i*b*r)/r**3 dr.corz-085
      do 17 i=1,2                                                       corz-086
      if (b(i).lt.5.d0) go to 13                                        corz-087
c use of pade approximant.                                              corz-088
      a1=0.d0                                                           corz-089
      a2=0.d0                                                           corz-090
      a3=21.d0                                                          corz-091
      do 12 j=1,20                                                      corz-092
      a3=a3-1.d0                                                        corz-093
      a2=a2-b(i)                                                        corz-094
      b1=a1**2+a2**2                                                    corz-095
      b2=a1*a3/b1+1.d0                                                  corz-096
      b3=-a2*a3/b1                                                      corz-097
      b1=b2**2+b3**2                                                    corz-098
      a1=b2*(a3+2.d0)/b1                                                corz-099
   12 a2=-b3*(a3+2.d0)/b1                                               corz-100
      a2=a2-b(i)                                                        corz-101
      b1=a1**2+a2**2                                                    corz-102
      c(i)=(dcos(b(i))*a1+dsin(b(i))*a2)/b1                             corz-103
      d(i)=(dsin(b(i))*a1-dcos(b(i))*a2)/b1                             corz-104
      go to 17                                                          corz-105
   13 if (b(i).eq.0.d0) go to 16                                        corz-106
c use of the taylor expansion.                                          corz-107
      a1=dabs(b(i))                                                     corz-108
      c(i)=.5d0*(1.d0-a1**2*(.922784335098467d0-dlog(a1)))              corz-109
      d(i)=a1*(1.d0-.78539816339744831d0*a1)                            corz-110
      a2=a1**2/2.d0                                                     corz-111
      a3=0.d0                                                           corz-112
      do 14 j=2,20                                                      corz-113
      a3=a3+1.d0                                                        corz-114
      a2=a2*a1/(2.d0*a3+1.d0)                                           corz-115
      d(i)=d(i)+a2/(2.d0*a3-1.d0)                                       corz-116
      a2=-a2*a1/(2.d0*a3+2.d0)                                          corz-117
      c(i)=c(i)+a2/(2.d0*a3)                                            corz-118
      if (dabs(a2).lt.1.d-16) go to 15                                  corz-119
   14 continue                                                          corz-120
   15 if (a1.ne.b(i)) d(i)=-d(i)                                        corz-121
      go to 17                                                          corz-122
   16 c(i)=.5d0                                                         corz-123
      d(i)=0.d0                                                         corz-124
   17 continue                                                          corz-125
c storage of the two first integrals.                                   corz-126
      a1=2.d0*xi*xf                                                     corz-127
      do 18 i=1,2                                                       corz-128
      w(i,1)=(c(2)-c(1))/a1                                             corz-129
      w(i,2)=(d(1)-d(2))/a1                                             corz-130
      w(i,3)=(d(1)+d(2))/a1                                             corz-131
      w(i,4)=(c(2)+c(1))/a1                                             corz-132
      if (i.eq.2) go to 18                                              corz-133
      c(1)=c(1)*b(2)**2+dcos(b(1))+b(1)*dsin(b(1))                      corz-134
      d(1)=d(1)*b(2)**2+dsin(b(1))-b(1)*dcos(b(1))                      corz-135
      c(2)=c(2)*b(1)**2+dcos(b(2))+b(2)*dsin(b(2))                      corz-136
      d(2)=d(2)*b(1)**2+dsin(b(2))-b(2)*dcos(b(2))                      corz-137
      a1=2.d0*a1**2                                                     corz-138
   18 continue                                                          corz-139
c upwards recurrence.                                                   corz-140
      a1=xi/xf+xf/xi                                                    corz-141
      a2=2.d0*xi*xf                                                     corz-142
      a3=2.d0                                                           corz-143
      do 20 j=3,lm                                                      corz-144
      a3=a3+1.d0                                                        corz-145
      b(2)=(fgi(j-2,3)*fgf(j-2,1)-fgi(j,3)*fgf(j,1))/a2                 corz-146
      b(3)=(fgi(j-2,1)*fgf(j-2,3)-fgi(j,1)*fgf(j,3))/a2                 corz-147
      b(4)=(fgi(j-2,3)*fgf(j-2,3)-fgi(j,3)*fgf(j,3))/a2                 corz-148
      do 19 i=2,4                                                       corz-149
   19 w(j,i)=((a3-1.5d0)*a1*w(j-1,i)-(a3-3.d0)*w(j-2,i)-b(i))/a3        corz-150
   20 continue                                                          corz-151
      ln=max0(lm,idint(dmax1(xi,xf)))+50                                corz-152
      b2=0.d0                                                           corz-153
      b3=0.d0                                                           corz-154
      c2=0.d0                                                           corz-155
      c3=1.d-15                                                         corz-156
      d2=0.d0                                                           corz-157
      d3=1.d-15                                                         corz-158
      a3=ln                                                             corz-159
      do 24 i=2,ln                                                      corz-160
      j=ln-i+2                                                          corz-161
      a3=a3-1.d0                                                        corz-162
      b1=b2                                                             corz-163
      b2=b3                                                             corz-164
      c1=c2                                                             corz-165
      c2=c3                                                             corz-166
      d1=d2                                                             corz-167
      d2=d3                                                             corz-168
      c3=(2.d0*a3+3.d0)*c2/xi-c1                                        corz-169
      d3=(2.d0*a3+3.d0)*d2/xf-d1                                        corz-170
      b3=((a3+1.5d0)*a1*b2-(a3+3.d0)*b1-(c3*d3-c1*d1)/a2)/a3            corz-171
      if (j.le.lm) w(j,1)=b3                                            corz-172
      if (d3.lt.1.d15) go to 21                                         corz-173
      d2=d2*1.d-30                                                      corz-174
      d3=d3*1.d-30                                                      corz-175
      go to 22                                                          corz-176
   21 if (c3.lt.1.d15) go to 24                                         corz-177
      c2=c2*1.d-30                                                      corz-178
      c3=c3*1.d-30                                                      corz-179
   22 b2=b2*1.d-30                                                      corz-180
      b3=b3*1.d-30                                                      corz-181
      if (j.gt.lm) go to 24                                             corz-182
      do 23 k=j,lm                                                      corz-183
   23 w(k,1)=w(k,1)*1.d-30                                              corz-184
   24 continue                                                          corz-185
      a1=fgi(2,1)*fgf(2,1)/(c3*d3)                                      corz-186
      do 25 i=2,lm                                                      corz-187
   25 w(i,1)=w(i,1)*a1+t(i)                                             corz-188
      return                                                            corz-189
      end                                                               corz-190
c 02/06/07                                                      ecis06  redm-000
      subroutine redm(ipi,ncoll,nbeta,beta,iph,nvar,var,fac,idt,lo,niv,iredm-001
     1q,jq,t,it,im)                                                     redm-002
c reduced nuclear matrix elements.                                      redm-003
c input:     ipi(j,*):parity of nuclear states for j=1,                 redm-004
c                     multiplicity of the particle for j=2,             redm-005
c                     multiplicity of the target for j=3.               redm-006
c            ncoll:   number of coupled states                          redm-007
c            nbeta:   quantum numbers of deformations.                  redm-008
c            beta:    deformations, equivalent by call with nbeta.      redm-009
c            iph:     description of vibrational model (see vibm).      redm-010
c            nvar,var:equivalent by call, parameters for some models.   redm-011
c            nva:     number of these parameters.                       redm-012
c            fac:     table and number of logarithms of factorials.     redm-013
c            idt:     length available in this subroutine.              redm-014
c            lo(i):   logical controls:                                 redm-015
c               lo(1)  =.true. rotational model-(.f.:vibrational model).redm-016
c               lo(3)  =.true. anharmonic vibrational or asymmetric     redm-017
c                              rotational model.                        redm-018
c               lo(7)  =.true. matrix element and form factors read.    redm-019
c               lo(11) =.true. deformed coulomb potential.              redm-020
c               lo(12) =.true. deformed imaginary potential.            redm-021
c               lo(13) =.true. deformed real spin-orbit or tensor.      redm-022
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. redm-023
c               lo(15) =.true. reduced nuclear matrix elements read.    redm-024
c               lo(19) =.true. deformed coulomb spin-orbit potential.   redm-025
c               lo(20) =.true. dispersion relations for transition      redm-026
c                              form-factors.                            redm-027
c               lo(52) =.true. reduced nuclear matrix elements output.  redm-028
c               lo(61) =.true. reduced nuclear matrix elements written  redm-029
c                              on file 61.                              redm-030
c               lo(100)=.true. dirac equation.                          redm-031
c               lo(101)=.true. there is a real spin-orbit potential.    redm-032
c               lo(103)=.true. there is a coulomb spin-orbit potential. redm-033
c               lo(117)=.true. for all calculations except the first.   redm-034
c               lo(120)=.true. output and last calculation best one.    redm-035
c               lo(121)=.true. optical model without coupling.          redm-036
c               lo(133)=.true. store scalar and coulomb potential       redm-037
c                              independently.                           redm-038
c output:    niv:     number and references of interaction form factors redm-039
c                     between each channels. niv(i1,i2,k): first i of   redm-040
c                     t(3,i) for the pair of nuclear states i1,i2 for   redm-041
c                     k=1 and last one for k=2.                         redm-042
c            iq,jq,t: equivalent by call of iq(6,i), jq(i) and t(3,i).  redm-043
c            it:      number of nuclear matrix elements in iq,t. for a  redm-044
c                     given value of i:                                 redm-045
c                     iq(1,i): reference to table of form factors,      redm-046
c                     iq(2,i): reference to table of angular momenta,   redm-047
c                     iq(3,i): address of the associated spin-orbit formredm-048
c                              factor or 0,                             redm-049
c                     iq(4,i): unused,                                  redm-050
c                     t(3,i):  reduced nuclear matrix element multipliedredm-051
c                              by (-)**(l/2) where l is the transferred redm-052
c                              angular momentum                         redm-053
c            im:      number of angular momenta.                        redm-054
c***********************************************************************redm-055
c beyond iq(6,it) are stored in jq(*) the tables:                       redm-056
c            ivq:     3*"im" data, description of angular momenta:      redm-057
c                     1) l  transferred angular momentum,               redm-058
c                     2) 2*s where s is the transfer of spin,           redm-059
c                     3) 2*j where j is the transfer of total           redm-060
c                            spin or 0 if s=0.                          redm-061
c            ivy:     7*"intc", table of form factor independent of     redm-062
c                     dispersion relations:                             redm-063
c                     1) form factor control number,                    redm-064
c                     2) reference to the table of multipoles,          redm-065
c                     3) 0 or address of first spin-orbit form factor,  redm-066
c                     4) 0 or address of temporary coulomb form factor, redm-067
c                     5) 0 or address of temporary coulomb spin-orbit,  redm-068
c                     6) 0 or address of correction term (positive for  redm-069
c                        corrected term, negative for correction term), redm-070
c                     7) angular momentum.                              redm-071
c            ivz:     4*"intv" table form factor dependent of dispersionredm-072
c                     relations:                                        redm-073
c                     1) address of computation (without dispersion),   redm-074
c                     2) form factor control number for dispersion,     redm-075
c                     3) 0 or address of the first spin-orbit form      redm-076
c                        factor,                                        redm-077
c                     4) angular momentum.                              redm-078
c "intc" and "intc" are in common /pote1/. the addresses of the tables  redm-079
c "ivq", "ivy" and "ivz" are defined after return from this subroutine. redm-080
c if lo(15)=.true. the reduced matrix elements are read at the first    redm-081
c call and the parameters "var" are not used - in any case where "var"  redm-082
c are not used,the subroutine is skipped.                               redm-083
c if lo(61)=.true. the matrix elements are punched at the last call     redm-084
c of a search in this subroutine.                                       redm-085
c***********************************************************************redm-086
c                                                                       redm-087
c the common /pote2/ is used in calc, lecl, redm, pote, quan, mtch,     redm-088
c                               inti, insh, insi, inch and rest.        redm-089
c the common /pote1/ is used in calc, redm, extp, pote, rotp, stdp,     redm-090
c                               fold and rest.                          redm-091
c for the common  /coupl/ see calx.                                     redm-092
c                                                                       redm-093
c significance of the quantities in common /coupl/:                     redm-094
c  nbt1:      number of phonons (vibrations).                           redm-095
c  npp:       number of optical potentials.                             redm-096
c  nva:       number of nuclear parameters.                             redm-097
c   used:     nbt1,npp,nva.                                             redm-098
c                                                                       redm-099
c significance of the quantities in common /pote1/:                     redm-100
c  itx(16):   starting address of different form factors.               redm-101
c             for schroedinger equation, itx(i)+1 is the starting       redm-102
c             address of the form factor read in extp with ityp=i       redm-103
c             (potential for i=1 to 8, transition for i=9 to 16).       redm-104
c             for dirac equations, itx(1)=0,                            redm-105
c             itx(2)+1=address off first transition form factor,        redm-106
c             itx(7)=address of last transition form factor,            redm-107
c             itx(3)=address of last temporary central potential,       redm-108
c             itx(4)=itx(7)-24,itx(5)=itx(3)-11,itx(6)=itx(2)-4.        redm-109
c             all are used for schroedinger, the first 8 for dirac.     redm-110
c  imax:      maximum angular momentum.                                 redm-111
c  intc:      number of form factors without deformed spin-orbit        redm-112
c             including correction terms.                               redm-113
c  inls:      number of spin-orbit form factors not taking into account redm-114
c             multiplication by 2.                                      redm-115
c  invc:      number of coulomb transition form factors.                redm-116
c  invd:      idem for coulomb spin-orbit.                              redm-117
c  itxm:      total number of form factors.                             redm-118
c   defined:  itx,imax,intc,inls,invc,invd,itxm.                        redm-119
c                                                                       redm-120
c significance of the quantities in common /pote2/:                     redm-121
c  ity(1):    starting address of real central potential (it is 0).     redm-122
c  ity(2):    starting address of imaginary central potential.          redm-123
c  ity(3):    starting address of real spin-orbit potential.            redm-124
c  ity(4):    starting address of imaginary spin-orbit potential.       redm-125
c  ity(5):    starting address of real central transition.              redm-126
c  ity(6):    starting address of imaginary central transition.         redm-127
c  ity(7):    starting address of real spin-orbit transition.           redm-128
c  ity(8):    starting address of imaginary spin-orbit transition.      redm-129
c  ity(9):    starting address of coulomb central potential.            redm-130
c  ity(10):   starting address of coulomb spin-orbit potential.         redm-131
c  ity(11):   starting address of coulomb central transition.           redm-132
c  ity(12):   starting address of coulomb spin-orbit transition.        redm-133
c        ity(2)=14*ncoll and ity(5)=0 only are used for dirac equations.redm-134
c  invt:      number of transition form factors without spin-orbit.     redm-135
c  intv:      same as invt, taking into account dispersion.             redm-136
c  insl:      number of spin-orbit form transition factors not taking   redm-137
c                  into account multiplication by 2.                    redm-138
c  npx:       number of potentials taking into account dispersion.      redm-139
c   defined:  ity,invt,intv,insl.                                       redm-140
c   used:     ity,invt,intv,insl,npx.                                   redm-141
c                                                                       redm-142
c***********************************************************************redm-143
      implicit real*8 (a-h,o-z)                                         redm-144
      logical lo(150),lt                                                redm-145
      dimension niv(ncoll,ncoll,*),iq(6,*),jq(*),t(3,*),ipi(11,*),nbeta(redm-146
     118,*),beta(9,*),iph(2,*),nvar(2,*),var(*),fac(*)                  redm-147
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   redm-148
      common /inout/ mr,mw,ms                                           redm-149
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              redm-150
      common /pote2/ ity(12),invt,intv,insl,npx                         redm-151
      if (lo(120)) go to 42                                             redm-152
      if (lo(7).or.lo(15)) go to 3                                      redm-153
c standard computation of the reduced matrix elements in t(3,i)         redm-154
c with form factor identification in iq(1,i), multipole in iq(2,i)      redm-155
c and 0 or 1 in iq(3,i) if spin-orbit is not or is deformed.            redm-156
c they are called at the first run or if "var" has been changed.        redm-157
      if (lo(1)) go to 1                                                redm-158
      call vibm(niv,iq,t,ipi,ncoll,it,iph,nvar,var,nbeta,fac,idt,lo)    redm-159
      go to 17                                                          redm-160
    1 if (lo(3)) go to 2                                                redm-161
      call rotm(niv,iq,t,ipi,ncoll,iph,nbeta,nvar,var,it,fac,idt,lo)    redm-162
      go to 17                                                          redm-163
    2 call roam(niv,iq,t,ipi,ncoll,it,beta,iph,var,var(nva+1),fac,idt,loredm-164
     1)                                                                 redm-165
      go to 17                                                          redm-166
c input of nuclear matrix elements from cards.                          redm-167
    3 if (lo(117)) go to 42                                             redm-168
      it=0                                                              redm-169
      i=0                                                               redm-170
      do 16 i1=1,ncoll                                                  redm-171
      do 15 i2=i1,ncoll                                                 redm-172
      niv(i1,i2,1)=it+1                                                 redm-173
      read (mr,1000) j1,j2,k                                            redm-174
      write (mw,1001) j1,j2,k                                           redm-175
      if ((j1.ne.i1).or.(j2.ne.i2)) go to 46                            redm-176
      if (k.eq.0) go to 15                                              redm-177
      ijl=iabs(ipi(3,i1)-ipi(3,i2))                                     redm-178
      jil=(ipi(3,i1)+ipi(3,i2))                                         redm-179
      ijs=iabs(ipi(2,i1)-ipi(2,i2))                                     redm-180
      jis=ipi(2,i1)+ipi(2,i2)                                           redm-181
      if (2*(it+k).gt.idt) call memo('redm',idt,2*(it+k))               redm-182
      do 14 k1=1,k                                                      redm-183
      it=it+1                                                           redm-184
      read (mr,1002) j,iq(2,it),nn,m,t(3,it)                            redm-185
      if (nn.eq.-1.and.(.not.lo(11))) go to 47                          redm-186
      n=nn                                                              redm-187
      if (nn.eq.-1) n=0                                                 redm-188
      if (mod(iq(2,it)+ipi(1,i1)+ipi(1,i2),2).ne.0) go to 48            redm-189
      if ((n.gt.jis).or.(n.lt.ijs).or.(mod(jis+n,2).ne.0)) go to 49     redm-190
      if (lo(7)) go to 7                                                redm-191
      if (lo(1)) go to 5                                                redm-192
      if (lo(3)) go to 4                                                redm-193
      iqp=j/(nbt1+1)                                                    redm-194
      ipq=mod(j,nbt1+1)                                                 redm-195
      if ((ipq.le.0).or.(max0(ipq,iqp).gt.nbt1).or.(iqp.lt.0)) go to 50 redm-196
      go to 11                                                          redm-197
    4 if (j.lt.0.or.j.gt.3) go to 51                                    redm-198
      go to 11                                                          redm-199
    5 iqp=j/1000                                                        redm-200
      if (lo(3)) go to 6                                                redm-201
      if (iqp.ne.1+iq(2,it)) go to 52                                   redm-202
      go to 11                                                          redm-203
    6 iqy=iq(2,it)/2+1                                                  redm-204
      iqz=(iqy*(iqy-1))/2                                               redm-205
      if (iqp.le.iqz.or.iqp.gt.iqz+iqy) go to 53                        redm-206
      go to 11                                                          redm-207
    7 if (j.eq.0) go to 10                                              redm-208
      if (iabs(j)-i-1) 8 , 10 , 54                                      redm-209
    8 if (it.eq.1) go to 11                                             redm-210
      do 9 ii=2,it                                                      redm-211
      if (j.eq.iq(1,ii-1)) go to 11                                     redm-212
    9 continue                                                          redm-213
      go to 55                                                          redm-214
   10 i=i+1                                                             redm-215
      if (j.eq.0) j=i                                                   redm-216
   11 iq(1,it)=j                                                        redm-217
      if (n.eq.0) go to 12                                              redm-218
      if (2*iq(2,it).lt.iabs(n-m).or.2*iq(2,it).gt.n+m.or.mod(n+m,2).ne.redm-219
     10) go to 56                                                       redm-220
      nm=m                                                              redm-221
      iq(3,it)=10*m+10000*n                                             redm-222
      go to 13                                                          redm-223
   12 if (m.lt.0) go to 57                                              redm-224
      iq(3,it)=10*m                                                     redm-225
      nm=2*iq(2,it)                                                     redm-226
   13 if (nm.lt.ijl.or.nm.gt.jil) go to 58                              redm-227
      if (nn.eq.-1) iq(3,it)=iq(3,it)+1                                 redm-228
   14 write (mw,1003) iq(1,it),iq(2,it),nn,m,t(3,it)                    redm-229
   15 niv(i1,i2,2)=it                                                   redm-230
   16 continue                                                          redm-231
   17 k=niv(ncoll,ncoll,2)                                              redm-232
      do 19 i1=1,ncoll                                                  redm-233
      do 18 i2=i1,ncoll                                                 redm-234
      niv(i2,i1,1)=niv(i1,i2,1)                                         redm-235
      niv(i2,i1,2)=niv(i1,i2,2)                                         redm-236
   18 continue                                                          redm-237
   19 continue                                                          redm-238
c check that there is enough place.                                     redm-239
      if (7*it.gt.idt) call memo('redm',idt,7*it)                       redm-240
      im=0                                                              redm-241
      invt=0                                                            redm-242
      intv=0                                                            redm-243
      inls=0                                                            redm-244
      insl=0                                                            redm-245
      invc=0                                                            redm-246
      invd=0                                                            redm-247
      intc=0                                                            redm-248
      imax=0                                                            redm-249
c table of multipoles.                                                  redm-250
      if (it.eq.0) go to 40                                             redm-251
      itn=6*it                                                          redm-252
      do 23 j=1,it                                                      redm-253
      is=iq(3,j)/10000                                                  redm-254
      ij=mod(iq(3,j),1000)/10                                           redm-255
      il=mod(iq(3,j),10)                                                redm-256
      if (is.eq.0) ij=2*iq(2,j)                                         redm-257
      if (ij.eq.0) is=2*iq(2,j)                                         redm-258
      if (il.eq.1) is=-2                                                redm-259
      if (is.ne.0) iq(3,j)=0                                            redm-260
      if (im.eq.0) go to 21                                             redm-261
      do 20 k=1,im,3                                                    redm-262
      if ((jq(itn+k).eq.iq(2,j)).and.(jq(itn+k+1).eq.is).and.(jq(itn+k+2redm-263
     1).eq.ij)) go to 22                                                redm-264
   20 continue                                                          redm-265
   21 jq(itn+im+1)=iq(2,j)                                              redm-266
      jq(itn+im+2)=is                                                   redm-267
      jq(itn+im+3)=ij                                                   redm-268
      imax=max0(imax,iq(2,j))                                           redm-269
      im=im+3                                                           redm-270
      iq(2,j)=im/3                                                      redm-271
      go to 23                                                          redm-272
   22 iq(2,j)=1+k/3                                                     redm-273
   23 continue                                                          redm-274
      itm=itn+im+mod(im,2)                                              redm-275
c table of form factors.                                                redm-276
c lt is true if the multipole order matters for form factors.           redm-277
      lt=(lo(1).or.lo(11).or.lo(17).or.lo(19)).and.(.not.lo(7))         redm-278
      do 26 j=1,it                                                      redm-279
      if (invt.eq.0) go to 25                                           redm-280
      do 24 l=1,invt,7                                                  redm-281
      if (jq(itm+l).ne.iq(1,j)) go to 24                                redm-282
      if (lt.and.(jq(itm+l+1).ne.iq(2,j))) go to 24                     redm-283
      iq(1,j)=1+l/7                                                     redm-284
      jq(itm+l+2)=max0(iq(3,j),jq(itm+l+2))                             redm-285
      go to 26                                                          redm-286
   24 continue                                                          redm-287
   25 k=iq(2,j)                                                         redm-288
      k1=jq(itn+3*k-2)                                                  redm-289
      jq(itm+invt+1)=iq(1,j)                                            redm-290
      jq(itm+invt+2)=k                                                  redm-291
      jq(itm+invt+3)=iq(3,j)                                            redm-292
      jq(itm+invt+4)=0                                                  redm-293
      jq(itm+invt+5)=0                                                  redm-294
      jq(itm+invt+6)=0                                                  redm-295
      jq(itm+invt+7)=k1                                                 redm-296
      if ((iq(1,j).lt.0).or.((iq(1,j).gt.1000).and.(k1.le.1).and.(mod(iqredm-297
     1(1,j),1000).ne.0))) jq(itm+invt+6)=1                              redm-298
      if (lo(11).and.(mod(jq(itn+3*k-1),2).eq.0)) jq(itm+invt+4)=1      redm-299
      if (lo(19)) jq(itm+invt+5)=jq(itm+invt+3)                         redm-300
      invt=invt+7                                                       redm-301
      iq(1,j)=invt/7                                                    redm-302
   26 continue                                                          redm-303
c search on correction terms.                                           redm-304
      intc=invt                                                         redm-305
      do 28 j=1,invt,7                                                  redm-306
      if (jq(itm+j+5).eq.0) go to 28                                    redm-307
      k1=itm+j-1                                                        redm-308
      do 27 l=1,7                                                       redm-309
   27 jq(itm+intc+l)=jq(k1+l)                                           redm-310
      jq(itm+intc+6)=-(1+j/7)                                           redm-311
      intc=intc+7                                                       redm-312
      jq(k1+6)=intc/7                                                   redm-313
   28 continue                                                          redm-314
      do 30 j=1,intc,7                                                  redm-315
      if (jq(itm+j+3).eq.0) go to 29                                    redm-316
      invc=invc+1                                                       redm-317
      jq(itm+j+3)=invc                                                  redm-318
   29 if ((jq(itm+j+2).eq.0).and.(jq(itm+j+4).eq.0)) go to 30           redm-319
      inls=inls+1                                                       redm-320
      jq(itm+j+2)=inls                                                  redm-321
      if (jq(itm+j+4).eq.0) go to 30                                    redm-322
      invd=invd+1                                                       redm-323
      jq(itm+j+4)=invd                                                  redm-324
   30 continue                                                          redm-325
      itp=itm+intc+mod(intc,2)                                          redm-326
      ntc=invt/7                                                        redm-327
      do 31 j=1,ntc                                                     redm-328
      jq(itp+4*j-3)=j                                                   redm-329
      jq(itp+4*j-2)=0                                                   redm-330
      jq(itp+4*j-1)=jq(itm+7*j-4)                                       redm-331
      jq(itp+4*j)=jq(itm+7*j)                                           redm-332
   31 continue                                                          redm-333
      intv=4*ntc                                                        redm-334
      if (.not.lo(20)) go to 37                                         redm-335
      do 36 i1=1,ncoll                                                  redm-336
      do 35 i2=i1,ncoll                                                 redm-337
      k1=niv(i1,i2,1)                                                   redm-338
      k2=niv(i1,i2,2)                                                   redm-339
      if (k1.gt.k2) go to 35                                            redm-340
      kk=i1*(ncoll+1)+i2                                                redm-341
      do 34 k=k1,k2                                                     redm-342
      j=iq(1,k)                                                         redm-343
      if (jq(itp+4*j-2).ne.0) go to 32                                  redm-344
      jq(itp+4*j-2)=kk                                                  redm-345
      go to 34                                                          redm-346
   32 do 33 l=1,4                                                       redm-347
   33 jq(itp+intv+l)=jq(itp+4*j+l-4)                                    redm-348
      jq(itp+intv+2)=kk                                                 redm-349
      intv=intv+4                                                       redm-350
      iq(1,k)=intv/4                                                    redm-351
   34 continue                                                          redm-352
   35 continue                                                          redm-353
   36 continue                                                          redm-354
   37 im=im/3                                                           redm-355
      intv=intv/4                                                       redm-356
      invt=invt/7                                                       redm-357
      intc=intc/7                                                       redm-358
      insl=0                                                            redm-359
      do 39 j=1,intv                                                    redm-360
      l=jq(itp+4*j-1)                                                   redm-361
      insl=max0(insl,l)                                                 redm-362
      do 38 k=1,it                                                      redm-363
      if (iq(1,k).eq.j) iq(3,k)=l                                       redm-364
   38 continue                                                          redm-365
   39 continue                                                          redm-366
c number of real and imaginary form factors.                            redm-367
   40 nv=intc                                                           redm-368
      if (lo(13).or.lo(19)) nv=nv+2*inls                                redm-369
      ity(1)=0                                                          redm-370
      lo(121)=im.eq.0                                                   redm-371
      if (lo(100)) go to 41                                             redm-372
      ity(3)=npx                                                        redm-373
      ity(5)=ity(3)+npx                                                 redm-374
      if (.not.(lo(101).or.lo(103))) ity(5)=ity(3)                      redm-375
      ity(7)=ity(5)+intv                                                redm-376
      ity(2)=ity(7)+2*insl                                              redm-377
      ity(4)=ity(2)+npx                                                 redm-378
      ity(6)=ity(4)+npx                                                 redm-379
      if (.not.(lo(101).or.lo(103))) ity(6)=ity(4)                      redm-380
      ity(8)=ity(6)+intv                                                redm-381
      if (.not.lo(12)) ity(8)=ity(6)                                    redm-382
      itx1=ity(8)+2*insl                                                redm-383
      if (.not.lo(14)) itx1=ity(8)                                      redm-384
      intxc=itx1                                                        redm-385
      if (.not.lo(133)) intxc=0                                         redm-386
      ity(9)=ity(1)+intxc                                               redm-387
      ity(10)=ity(3)+intxc                                              redm-388
      ity(11)=ity(5)+intxc                                              redm-389
      ity(12)=ity(7)+intxc                                              redm-390
      if (.not.(lo(103).or.lo(11).or.lo(19))) ity(11)=ity(10)           redm-391
      if (.not.(lo(11).or.lo(19))) ity(12)=ity(11)                      redm-392
      itx2=ity(12)+2*insl                                               redm-393
      if (.not.lo(19)) itx2=ity(12)                                     redm-394
      itx(1)=max0(itx1,itx2)                                            redm-395
      itx(5)=itx(1)+npp                                                 redm-396
      itx(9)=itx(5)+npp                                                 redm-397
      if (.not.(lo(101).or.lo(103))) itx(9)=itx(5)                      redm-398
      itx(13)=itx(9)+intc                                               redm-399
      itx(2)=itx(13)+2*inls                                             redm-400
      itx(6)=itx(2)+npp                                                 redm-401
      itx(10)=itx(6)+npp                                                redm-402
      if (.not.(lo(101).or.lo(103))) itx(10)=itx(6)                     redm-403
      itx(14)=itx(10)+intc                                              redm-404
      itx(7)=itx(14)+2*inls                                             redm-405
      if (.not.lo(14)) itx(7)=itx(14)                                   redm-406
      if (.not.lo(12)) itx(7)=itx(10)                                   redm-407
      itx(8)=itx(7)+npp                                                 redm-408
      itx(3)=itx(8)+npp                                                 redm-409
      itx(4)=itx(3)+npp                                                 redm-410
      itx(11)=itx(4)+npp                                                redm-411
      itx(12)=itx(11)+intc                                              redm-412
      itx(15)=itx(12)+intc                                              redm-413
      if (.not.lo(12)) itx(15)=itx(12)                                  redm-414
      itx(16)=itx(15)+invc                                              redm-415
      itxm=itx(16)+2*invd+intc                                          redm-416
      go to 42                                                          redm-417
   41 ity(5)=0                                                          redm-418
      itx(1)=0                                                          redm-419
      itx(2)=14*ncoll                                                   redm-420
      ity(2)=itx(2)                                                     redm-421
      itx(7)=itx(2)+4*(intv+insl)                                       redm-422
      itx(3)=itx(7)+24*npp                                              redm-423
      itx(4)=itx(7)-24                                                  redm-424
      itx(5)=itx(3)-11                                                  redm-425
      itx(6)=itx(2)-4                                                   redm-426
      itxm=itx(3)+11*intc                                               redm-427
   42 if (.not.(lo(52).or.lo(61))) return                               redm-428
c reduced matrix elements punched on cards on request.                  redm-429
c output of reduced matrix elements on request.                         redm-430
      it=niv(ncoll,ncoll,2)                                             redm-431
      itm=6*it-3                                                        redm-432
      itn=itm+3*im-4+mod(im,2)                                          redm-433
      if (lo(52)) write (mw,1004)                                       redm-434
      do 45 i1=1,ncoll                                                  redm-435
      do 44 i2=i1,ncoll                                                 redm-436
      k1=niv(i1,i2,1)                                                   redm-437
      k2=niv(i1,i2,2)                                                   redm-438
      if (lo(52)) write (mw,1005) i1,i2,k1,k2                           redm-439
      k=k2-k1+1                                                         redm-440
      if (lo(61)) write (61,1000) i1,i2,k                               redm-441
      if (k.eq.0) go to 44                                              redm-442
      do 43 k=k1,k2                                                     redm-443
      if (lo(52)) write (mw,1006) k,(iq(j,k),j=1,3),t(3,k)              redm-444
      if (.not.lo(61)) go to 43                                         redm-445
      m=iq(2,k)                                                         redm-446
      nm=jq(itn+7*m+1)                                                  redm-447
      ns=jq(itm+3*m+2)                                                  redm-448
      nj=jq(itm+3*m+3)                                                  redm-449
      if (ns.le.0) nj=0                                                 redm-450
      if (ns.eq.-2) ns=-1                                               redm-451
      if (nj.eq.0.and.iq(3,k).ne.0) nj=1                                redm-452
      write (61,1007) nm,jq(itm+3*m+1),ns,nj,t(3,k)                     redm-453
   43 continue                                                          redm-454
   44 continue                                                          redm-455
   45 continue                                                          redm-456
      if (it.eq.0.or.(.not.lo(52))) return                              redm-457
      write (mw,1008) (i,(jq(itm+3*i+j),j=1,3),i=1,im)                  redm-458
      write (mw,1009) (i,(jq(itn+7*i+j),j=1,7),i=1,intc)                redm-459
      itp=itn+7*intc+3+mod(intc,2)                                      redm-460
      write (mw,1010) (i,(jq(itp+4*i+j),j=1,4),i=1,intv)                redm-461
      return                                                            redm-462
   46 write (mw,1011) j1,j2,i1,i2                                       redm-463
      go to 59                                                          redm-464
   47 write (mw,1012) nn                                                redm-465
      go to 59                                                          redm-466
   48 write (mw,1013) iq(2,it),ipi(1,i1),ipi(1,i2)                      redm-467
      go to 59                                                          redm-468
   49 write (mw,1014)                                                   redm-469
      go to 59                                                          redm-470
   50 write (mw,1015)                                                   redm-471
      go to 59                                                          redm-472
   51 write (mw,1016)                                                   redm-473
      go to 59                                                          redm-474
   52 write (mw,1017)                                                   redm-475
      go to 59                                                          redm-476
   53 write (mw,1018) n,ijs,jis                                         redm-477
      go to 59                                                          redm-478
   54 write (mw,1019) i,j                                               redm-479
      go to 59                                                          redm-480
   55 write (mw,1020) j                                                 redm-481
      go to 59                                                          redm-482
   56 write (mw,1021) m,iq(2,it),n                                      redm-483
      go to 59                                                          redm-484
   57 write (mw,1022) m                                                 redm-485
      go to 59                                                          redm-486
   58 write (mw,1023) nm,ijl,jil                                        redm-487
      go to 59                                                          redm-488
   59 write (mw,1024)                                                   redm-489
      stop                                                              redm-490
 1000 format (3i5)                                                      redm-491
 1001 format (' for i =',i4,'  and ip =',i4,i8,' reduced matrix elementsredm-492
     1')                                                                redm-493
 1002 format (4i5,f20.12)                                               redm-494
 1003 format (10x,'form factor =',i4,' l =',i4,4x,'2*s =',i4,4x,'2*j =',redm-495
     1i4,4x,' reduced matrix element',d20.6)                            redm-496
 1004 format (//' nuclear reduced matrix elements:'/)                   redm-497
 1005 format (/' state',i3,'  with state',i3,10x,' from',i4,' to',i4/)  redm-498
 1006 format (10x,'n =',i3,3x,'form factor =',i3,3x,'mult. =',i3,3x,'sp.redm-499
     1-o. =',i3,6x,'matrix element',1p,d15.6)                           redm-500
 1007 format (4i5,f20.12)                                               redm-501
 1008 format (//5x,' correspondence to multipoles:'//(20x,'n =',i3,5x,'lredm-502
     1 =',i3,5x,'2*s =',i3,5x,'2*j =',i3))                              redm-503
 1009 format (//4x,' correspondence to form factors in their computationredm-504
     1:'//(10x,'n =',i3,4x,'f.f. =',i6,4x,'mult. =',i4,4x,'sp.-o. =',i4,redm-505
     24x,'coul =',i4,4x,'spdo =',i4,4x,'cor =',i4,4x,'l =',i4))         redm-506
 1010 format (//4x,' correspondence to form factors in their use:'//(10xredm-507
     1,'n =',i3,4x,'above =',i4,4x,'disp. =',i4,4x,'sp.-o. =',i4,4x,'l =redm-508
     2',i4))                                                            redm-509
 1011 format (//' incorrect order of input for reduced matrix elements :redm-510
     1',2i6,' instead of',2i6)                                          redm-511
 1012 format (//' a magnetic coulomb interaction cannot be used if the credm-512
     1oulomb interaction is not deformed:',i3)                          redm-513
 1013 format (/' multipole order',i4,' not of the same parity as',2i4)  redm-514
 1014 format (' error for harmonic vibrational model.')                 redm-515
 1015 format (' error for anharmonic vibrational model.')               redm-516
 1016 format (' error for symmetric rotational model.')                 redm-517
 1017 format (' error for asymmetric rotational model.')                redm-518
 1018 format (/' 2*s =',i4,' incorrect between channels with 2*s =',2i4)redm-519
 1019 format (/' last form factor identification',i3,'  new form factor redm-520
     1identification',i3,'  too large.')                                redm-521
 1020 format (/' last form factor identification',i3,'  was not already redm-522
     1read with this sign.')                                            redm-523
 1021 format (/' 2*j =',i4,' incorrect with l =',i4,' and 2*s =',i4)    redm-524
 1022 format (/' j-value =',i4,'  used as deformed spin-orbit control inredm-525
     1correct. limit:',i2)                                              redm-526
 1023 format (/' 2*transfer of ang. momentum',i4,' not between',i4,' andredm-527
     1',i4)                                                             redm-528
 1024 format (//' in redm  ...  stop  ...')                             redm-529
      end                                                               redm-530
c 02/06/07                                                      ecis06  vibm-000
      subroutine vibm(niv,iq,t,ipi,ncoll,it,iph,nvar,var,nbeta,fac,idt,lvibm-001
     1o)                                                                vibm-002
c nuclear reduced matrix elements for the harmonic vibrational model.   vibm-003
c input:     ipi(j,*):parity of nuclear states for j=1,                 vibm-004
c                     multiplicity of the particle for j=2,             vibm-005
c                     multiplicity of the target for j=3.               vibm-006
c            ncoll:   number of coupled states                          vibm-007
c            iph(i,j):description of vibrational model for level j:     vibm-008
c                     number of phonons (0, 1, 2 phonons or 3 for       vibm-009
c                     mixture of 1 and 2 phonons states) for i=1.       vibm-010
c                     address of the description of two phonons and     vibm-011
c                     mixed states which are in the nvar,var for i=2.   vibm-012
c            nvar,var:equivalent by call, 1 and 2 phonons mixing        vibm-013
c                     coefficients.                                     vibm-014
c            nbeta:   quantum numbers of deformations in nbeta(17,*),   vibm-015
c                     0 in nbeta(18,*) to be used in second order       vibm-016
c                     monopole correction, anything not to be used/     vibm-017
c            nbt1:    number of phonons.                                vibm-018
c            fac:     table and number of logarithms of factorials.     vibm-019
c            idt:     length available in this subroutine.              vibm-020
c            lo(i):   logical controls:                                 vibm-021
c               lo(2)  =.true. second order vibrational or constrained  vibm-022
c                              asymmetric rotational model.             vibm-023
c               lo(13) =.true. deformed real spin-orbit or tensor.      vibm-024
c               lo(19) =.true. deformed coulomb spin-orbit potential.   vibm-025
c               lo(117)=.true. for all calculations except the first.   vibm-026
c output:    niv:     number and references of interaction form factors vibm-027
c                     between each channels. niv(i1,i2,k): first i of   vibm-028
c                     t(3,i) for the pair of nuclear states i1,i2 for   vibm-029
c                     k=1 and last one for k=2.                         vibm-030
c            iq,t:    equivalent by call of iq(6,i) and t(3,i).         vibm-031
c            it:      number of nuclear matrix elements in iq,t. for a  vibm-032
c                     given value of i:                                 vibm-033
c                     iq(1,i): reference to table of form factors:      vibm-034
c                              i for beta(i) and i+j*(nbt1+1) for       vibm-035
c                              beta(i)*beta(j) with j larger than i in  vibm-036
c                              the harmonic vibrational model (order of vibm-037
c                              derivative in the anharmonic vibrational vibm-038
c                              model)                                   vibm-039
c                     iq(2,i): reference to table of angular momenta,   vibm-040
c                     iq(3,i): address of the associated spin-orbit formvibm-041
c                              factor or 0,                             vibm-042
c                     iq(4,i): unused,                                  vibm-043
c                     t(3,i):  reduced nuclear matrix element multipliedvibm-044
c                              by (-)**(l/2) where l is the transferred vibm-045
c                              angular momentum                         vibm-046
c                                                                       vibm-047
c***********************************************************************vibm-048
c  the deformations beta and factors 1/sqrt(4*pi) are not included in   vibm-049
c the matrix elements which are computed here. the full expressions are:vibm-050
c (0||q2||0) = sum on beta**2/(4*pi) with iq=0,                         vibm-051
c (0||q1||i) = (-)**i beta(i)/sqrt(4*pi) with iq=i,                     vibm-052
c (i||q1||0) same value without (-)**i,                                 vibm-053
c (ip||q2||i) = (-)**i beta(i)*beta(ip)*djcg(i,ip,0,0|iq,0)/(2*pi)      vibm-054
c    plus sum on beta**2*sqrt(2*i+1)/(4*pi) with iq=0 when i=ip,        vibm-055
c (0||q2||l1,l2,i) = (-)**i beta(l1)*beta(l2) djcg(l1,l2,0,0|i,0)/      vibm-056
c    (2*pi*sqrt(1+delta(l1,l2)))   with iq=i,                           vibm-057
c (l1,l2,i||q2||0) same value without (-)**i,                           vibm-058
c (ip||q1||l1,l2,i) = (-)**iq beta(*)*(delta(iq,l1)*delta(ip,l2)+(-)**  vibm-059
c    (ip+i+iq)*delta(iq,l2)*delta(ip,l1)) * sqrt((2*i+1)/((2*iq+1)*     vibm-060
c    (1+delta(l1,l2))*sqrt(4*pi)),                                      vibm-061
c (l1,l2,i||q1||ip) same expression but with (-)**ip+i+iq  in front,    vibm-062
c (l3,l4,ip||q2||l1,l2,i)  sum on beta**2*(delta(l1,l3)*delta(l2,l4)+   vibm-063
c    (-)**(l1+l2-i)*delta(l1,l4)*delta(l2,l3)) * sqrt(2*ip+1)/(4*pi*sqrtvibm-064
c    ((1+delta(l1,l2))*(1+delta(l3,l4))) with iq=0,when i=ip            vibm-065
c    plus,when two phonons are identical,sum with all the possible va-  vibm-066
c    lues for iq of beta(l5)*beta(l6)*djcg(l5,l6,0,0|iq,0)*dj6j(l6,ip,  vibm-067
c    l7,i,l5,iq) * sqrt((2*i+1)*(2*ip+1))/(2*pi*sqrt((1+delta(l1,l2)*(1+vibm-068
c    delta(l3,l4))   where  l7 is the common phonon ,l5 and l6 the othervibm-069
c    phonons in i and ip, multiplied by the phase:                      vibm-070
c      *(-)**(ip-l1)   if l1=l3,        *(-)**(l3)       if l1=l4,      vibm-071
c      *(-)**(ip+l1-i) if l2=l3,      *(-)**(l1+l3+l4-i) if l2=l4.      vibm-072
c (j||l=iq||i) is multiplied by a phase (-)**((iq+ipi(i)-ipi(j))/2)     vibm-073
c and the factors beta/sqrt(4*pi) are shifted on the form factors.      vibm-074
c                                                                       vibm-075
c for the common  /coupl/ see calx.                                     vibm-076
c                                                                       vibm-077
c significance of the quantities in common /coupl/:                     vibm-078
c  nbt1:      number of phonons (vibrations).                           vibm-079
c  nfa:       number of logarithms of factorials.                       vibm-080
c  nva:       number of nuclear parameters.                             vibm-081
c   used:     nbt1,nfa,nva.                                             vibm-082
c                                                                       vibm-083
c***********************************************************************vibm-084
      implicit real*8 (a-h,o-z)                                         vibm-085
      logical lib(4),lo(150)                                            vibm-086
      dimension niv(ncoll,ncoll,*),iq(6,*),t(3,*),ipi(11,*),iph(2,*),nvavibm-087
     1r(2,*),var(*),nbeta(18,*),fac(*),ia(6,4),b(4),aa(2,2)             vibm-088
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   vibm-089
      common /inout/ mr,mw,ms                                           vibm-090
      it=1                                                              vibm-091
      nsp=0                                                             vibm-092
      if (lo(13).or.lo(19)) nsp=10                                      vibm-093
      do 39 i1=1,ncoll                                                  vibm-094
      aa(1,1)=1.d0                                                      vibm-095
      aa(1,2)=0.d0                                                      vibm-096
      if (iph(1,i1).le.2) go to 1                                       vibm-097
      jvar=iph(2,i1)+1                                                  vibm-098
      ivar=nvar(2,jvar)                                                 vibm-099
      ay=1.74532925d-02*var(ivar)                                       vibm-100
      aa(1,1)=dcos(ay)                                                  vibm-101
      aa(1,2)=dsin(ay)                                                  vibm-102
      if (.not.lo(117)) write (mw,1000) i1,var(ivar),aa(1,1),aa(1,2)    vibm-103
    1 aa(2,1)=aa(1,1)                                                   vibm-104
      aa(2,2)=aa(1,2)                                                   vibm-105
      do 38 i2=i1,ncoll                                                 vibm-106
      if (i1.eq.i2) go to 2                                             vibm-107
      aa(2,1)=1.d0                                                      vibm-108
      aa(2,2)=0.d0                                                      vibm-109
      if (iph(1,i2).le.2) go to 2                                       vibm-110
      ivar=iph(2,i2)+1                                                  vibm-111
      jvar=nvar(2,ivar)                                                 vibm-112
      if (jvar.gt.nva) go to 40                                         vibm-113
      ay=1.74532925d-02*var(jvar)                                       vibm-114
      aa(2,1)=dcos(ay)                                                  vibm-115
      aa(2,2)=dsin(ay)                                                  vibm-116
    2 niv(i1,i2,1)=it                                                   vibm-117
      l1=iph(1,i1)                                                      vibm-118
      ax=aa(1,1)                                                        vibm-119
      if (l1.gt.2) l1=1                                                 vibm-120
      if (dabs(ax).lt.1.d-6) go to 27                                   vibm-121
    3 l2=iph(1,i2)                                                      vibm-122
      if (l2.gt.2) l2=1                                                 vibm-123
      ay=ax*aa(2,1)                                                     vibm-124
      if (dabs(ay).lt.1.d-6) go to 26                                   vibm-125
    4 i=l1+l2+1                                                         vibm-126
      if (i.eq.3.and.l1.ne.l2) i=6                                      vibm-127
      if (l1.gt.l2) go to 5                                             vibm-128
      j1=i1                                                             vibm-129
      j2=i2                                                             vibm-130
      go to 6                                                           vibm-131
    5 j1=i2                                                             vibm-132
      j2=i1                                                             vibm-133
c  transposition.                                                       vibm-134
      ay=ay*dfloat(1-mod(ipi(3,i1)+ipi(3,i2)+2*(ipi(1,i1)+ipi(1,i2)+1),4vibm-135
     1))                                                                vibm-136
    6 go to ( 7 , 9 , 10 , 14 , 18 , 24 ) , i                           vibm-137
c  (0||q||0).                                                           vibm-138
    7 if ((ipi(3,j1).ne.1).or.(ipi(3,j2).ne.1)) go to 41                vibm-139
      if (.not.lo(2)) go to 26                                          vibm-140
      do 8 l=1,nbt1                                                     vibm-141
      if (nbeta(18,l).ne.0) go to 8                                     vibm-142
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-143
      iq(1,it)=l*(nbt1+2)                                               vibm-144
      iq(2,it)=0                                                        vibm-145
      iq(3,it)=nsp                                                      vibm-146
      t(3,it)=ay                                                        vibm-147
      it=it+1                                                           vibm-148
    8 continue                                                          vibm-149
      go to 26                                                          vibm-150
c  (ip||q||0)  with ip=j2.                                              vibm-151
    9 if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-152
      n2=iph(2,j2)                                                      vibm-153
      if (iph(1,j2).gt.2) n2=nvar(1,n2+1)                               vibm-154
      if ((ipi(3,j2).ne.(2*nbeta(17,n2)+1)).or.(ipi(3,j1).ne.1)) go     vibm-155
     1to 41                                                             vibm-156
      iq(1,it)=n2                                                       vibm-157
      iq(2,it)=nbeta(17,n2)                                             vibm-158
      iq(3,it)=nsp                                                      vibm-159
      t(3,it)=ay                                                        vibm-160
      if (mod(iabs(iq(2,it)+ipi(1,j1)-ipi(1,j2)),4).ne.0) t(3,it)=-t(3,ivibm-161
     1t)                                                                vibm-162
      go to 25                                                          vibm-163
c  (ip||q||i).                                                          vibm-164
   10 if (.not.lo(2)) go to 26                                          vibm-165
      n1=iph(2,j1)                                                      vibm-166
      if (iph(1,j1).gt.2) n1=nvar(1,n1+1)                               vibm-167
      n2=iph(2,j2)                                                      vibm-168
      if (iph(1,j2).gt.2) n2=nvar(1,n2+1)                               vibm-169
      if ((ipi(3,j2).ne.(2*nbeta(17,n2)+1)).or.(ipi(3,j1).ne.(2*nbeta(17vibm-170
     1,n1)+1))) go to 41                                                vibm-171
      if (n1.ne.n2) go to 12                                            vibm-172
      aq=dsqrt(dfloat(2*nbeta(17,n1)+1))                                vibm-173
      do 11 l=1,nbt1                                                    vibm-174
      if (nbeta(18,l).ne.0) go to 11                                    vibm-175
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-176
      iq(1,it)=l*(nbt1+2)                                               vibm-177
      iq(2,it)=0                                                        vibm-178
      iq(3,it)=nsp                                                      vibm-179
      t(3,it)=aq*ay                                                     vibm-180
      it=it+1                                                           vibm-181
   11 continue                                                          vibm-182
c factor 2 for non identical phonons added on the 10/03/81.             vibm-183
   12 k1=iabs(nbeta(17,n2)-nbeta(17,n1))+1                              vibm-184
      k2=nbeta(17,n2)+nbeta(17,n1)+1                                    vibm-185
      fs=dfloat(2*(1-2*mod(nbeta(17,n1)+iabs(ipi(1,j1)-ipi(1,j2)+k1-1)/2vibm-186
     1,2)))                                                             vibm-187
      do 13 k=k1,k2,2                                                   vibm-188
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-189
      j=k-1                                                             vibm-190
      aq=fs*djcg(ipi(3,j1)-1,ipi(3,j2)-1,2*j,0,0,fac,nfa)               vibm-191
      iq(1,it)=max0(n1,n2)*(nbt1+1)+min0(n1,n2)                         vibm-192
      iq(2,it)=j                                                        vibm-193
      iq(3,it)=nsp                                                      vibm-194
      t(3,it)=aq*ay                                                     vibm-195
      fs=-fs                                                            vibm-196
   13 it=it+1                                                           vibm-197
      go to 26                                                          vibm-198
c  (l1,l2,ip||q||i) with i=j1 and ip=j2.                                vibm-199
   14 i=iph(2,j2)                                                       vibm-200
      lb1=nvar(1,i)                                                     vibm-201
      lb2=nvar(2,i)                                                     vibm-202
      n1=iph(2,j1)                                                      vibm-203
      if (iph(1,j1).gt.2) n1=nvar(1,n1+1)                               vibm-204
      if (ipi(3,j1).ne.(2*nbeta(17,n1)+1)) go to 41                     vibm-205
      lib(1)=lb1.eq.n1                                                  vibm-206
      lib(2)=lb2.eq.n1                                                  vibm-207
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-208
      if (lib(1).and.lib(2)) go to 16                                   vibm-209
      if (lib(2)) go to 15                                              vibm-210
      if (.not.lib(1)) go to 26                                         vibm-211
      iq(1,it)=lb2                                                      vibm-212
      iq(2,it)=nbeta(17,lb2)                                            vibm-213
      iq(3,it)=nsp                                                      vibm-214
      t(3,it)=ay*dfloat(1-2*mod(iabs(ipi(1,j1)-ipi(1,j2)+iq(2,it))/2,2))vibm-215
      go to 17                                                          vibm-216
   15 iq(1,it)=lb1                                                      vibm-217
      iq(2,it)=nbeta(17,lb1)                                            vibm-218
      iq(3,it)=nsp                                                      vibm-219
      t(3,it)=ay*dfloat(1-mod(iabs(ipi(3,j1)+ipi(3,j2)-2+ipi(1,j1)-ipi(1vibm-220
     1,j2)-iq(2,it)),4))                                                vibm-221
      go to 17                                                          vibm-222
   16 if (mod(ipi(3,j2),4).ne.1) go to 26                               vibm-223
      iq(1,it)=n1                                                       vibm-224
      iq(2,it)=nbeta(17,n1)                                             vibm-225
      iq(3,it)=nsp                                                      vibm-226
      t(3,it)=dsqrt(2.d0)*ay*dfloat(1-mod(iabs(ipi(1,j1)-ipi(1,j2)+iq(2,vibm-227
     1it)),4))                                                          vibm-228
   17 t(3,it)=t(3,it)*dsqrt(dfloat(ipi(3,j2))/dfloat(2*iq(2,it)+1))     vibm-229
      go to 25                                                          vibm-230
c  (l3,l4,ip||q||l1,l2,i).                                              vibm-231
   18 if (.not.lo(2)) go to 26                                          vibm-232
      i=iph(2,i1)                                                       vibm-233
      lb1=nvar(1,i)                                                     vibm-234
      lb2=nvar(2,i)                                                     vibm-235
      i=iph(2,i2)                                                       vibm-236
      lb3=nvar(1,i)                                                     vibm-237
      lb4=nvar(2,i)                                                     vibm-238
      lib(1)=lb1.ne.lb3                                                 vibm-239
      lib(2)=lb2.ne.lb4                                                 vibm-240
      lib(3)=lb1.ne.lb4                                                 vibm-241
      lib(4)=lb2.ne.lb3                                                 vibm-242
      if (lib(1).and.lib(2).and.lib(3).and.lib(4)) go to 26             vibm-243
      ja1=(ipi(3,j1)-1)/2                                               vibm-244
      ja2=(ipi(3,j2)-1)/2                                               vibm-245
      ia(1,1)=nbeta(17,lb2)                                             vibm-246
      ia(2,1)=nbeta(17,lb4)                                             vibm-247
      ia(1,2)=nbeta(17,lb1)                                             vibm-248
      ia(2,2)=nbeta(17,lb3)                                             vibm-249
      ia(1,3)=ia(1,1)                                                   vibm-250
      ia(2,3)=ia(2,2)                                                   vibm-251
      ia(1,4)=ia(1,2)                                                   vibm-252
      ia(2,4)=ia(2,1)                                                   vibm-253
      ia(3,1)=ia(1,2)                                                   vibm-254
      ia(3,2)=ia(1,1)                                                   vibm-255
      ia(3,3)=ia(1,2)                                                   vibm-256
      ia(3,4)=ia(1,1)                                                   vibm-257
      ia(6,1)=max0(lb2,lb4)*(nbt1+1)+min0(lb2,lb4)                      vibm-258
      ia(6,2)=max0(lb1,lb3)*(nbt1+1)+min0(lb1,lb3)                      vibm-259
      ia(6,3)=max0(lb2,lb3)*(nbt1+1)+min0(lb2,lb3)                      vibm-260
      ia(6,4)=max0(lb1,lb4)*(nbt1+1)+min0(lb1,lb4)                      vibm-261
      imin=1000                                                         vibm-262
      imax=0                                                            vibm-263
      do 19 i=1,4                                                       vibm-264
      if (lib(i)) go to 19                                              vibm-265
      ia(4,i)=iabs(ia(1,i)-ia(2,i))                                     vibm-266
      ia(5,i)=ia(1,i)+ia(2,i)                                           vibm-267
      if (ia(4,i).lt.imin) imin=ia(4,i)                                 vibm-268
      if (ia(5,i).gt.imax) imax=ia(5,i)                                 vibm-269
   19 continue                                                          vibm-270
      b(1)=dfloat(1-2*mod(ja2+ia(1,2),2))                               vibm-271
      b(2)=dfloat(1-2*mod(ia(1,2)+ia(2,2)+ia(2,1)+ja1,2))               vibm-272
      b(3)=dfloat(1-2*mod(ia(2,2),2))                                   vibm-273
      b(4)=dfloat(1-2*mod(ja2+ja1+ia(1,2),2))                           vibm-274
      t0=dsqrt(dfloat((2*ja1+1)*(2*ja2+1)))*2.d0                        vibm-275
      if (lb1.eq.lb2) t0=dsqrt(0.5d0)*t0                                vibm-276
      if (lb3.eq.lb4) t0=dsqrt(0.5d0)*t0                                vibm-277
      if (ja1.ne.ja2) go to 21                                          vibm-278
      tkq=0.d0                                                          vibm-279
      if ((lb1.eq.lb3).and.(lb2.eq.lb4)) tkq=1.d0                       vibm-280
      if ((lb1.eq.lb4).and.(lb2.eq.lb3)) tkq=tkq+dfloat(1-2*mod(ja1+ia(1vibm-281
     1,1)+ia(1,2),2))                                                   vibm-282
      if (tkq.eq.0.d0) go to 21                                         vibm-283
      if (lb1.eq.lb2) tkq=0.5d0*tkq                                     vibm-284
      do 20 l=1,nbt1                                                    vibm-285
      if (nbeta(18,l).ne.0) go to 20                                    vibm-286
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-287
      iq(1,it)=l*(nbt1+2)                                               vibm-288
      iq(2,it)=0                                                        vibm-289
      iq(3,it)=nsp                                                      vibm-290
      t(3,it)=tkq*dsqrt(2.d0*ja1+1.d0)*ay                               vibm-291
      it=it+1                                                           vibm-292
   20 continue                                                          vibm-293
   21 imin=max0(imin,iabs(ja1-ja2))+1                                   vibm-294
      imax=min0(imax,ja1+ja2)+1                                         vibm-295
      do 23 m=imin,imax                                                 vibm-296
      j=m-1                                                             vibm-297
      do 22 k=1,4                                                       vibm-298
      if (lib(k)) go to 22                                              vibm-299
      if ((j.lt.ia(4,k)).or.(j.gt.ia(5,k)).or.(mod(j+ia(5,k),2).ne.0)) gvibm-300
     1o to 22                                                           vibm-301
      if (2*it.gt.idt) call memo('vibm',idt,2*it)                       vibm-302
      t3=b(k)*dj6j(2*ia(1,k),2*ia(2,k),2*j,2*ja2,2*ja1,2*ia(3,k),fac,nfavibm-303
     1)*djcg(2*ia(1,k),2*ia(2,k),2*j,0,0,fac,nfa)*dfloat(1-mod(iabs(ipi(vibm-304
     21,j1)-ipi(1,j2)+j),4))                                            vibm-305
      if (dabs(t3).lt.1.d-6) go to 22                                   vibm-306
      iq(1,it)=ia(6,k)                                                  vibm-307
      iq(2,it)=j                                                        vibm-308
      iq(3,it)=nsp                                                      vibm-309
      t(3,it)=t3*t0*ay                                                  vibm-310
      it=it+1                                                           vibm-311
   22 continue                                                          vibm-312
   23 continue                                                          vibm-313
      go to 26                                                          vibm-314
c  (l1,l2,ip||q||0) with ip=j2.                                         vibm-315
   24 if (.not.lo(2)) go to 26                                          vibm-316
      k3=(ipi(3,j2)-1)/2                                                vibm-317
      iq(2,it)=k3                                                       vibm-318
      i=iph(2,j2)                                                       vibm-319
      k1=nvar(1,i)                                                      vibm-320
      k2=nvar(2,i)                                                      vibm-321
      iq(1,it)=max0(k1,k2)*(nbt1+1)+min0(k1,k2)                         vibm-322
      iq(3,it)=nsp                                                      vibm-323
      w1=2.d0                                                           vibm-324
      if (k1.eq.k2) w1=dsqrt(w1)                                        vibm-325
      t(3,it)=ay*djcg(2*nbeta(17,k1),2*nbeta(17,k2),ipi(3,j2)-1,0,0,fac,vibm-326
     1nfa)*dfloat(1-mod(iabs(ipi(1,j1)-ipi(1,j2)+k3),4))*w1             vibm-327
   25 it=it+1                                                           vibm-328
   26 if ((aa(2,2).eq.0.d0).or.(l2.eq.2)) go to 27                      vibm-329
      l2=2                                                              vibm-330
      ay=ax*aa(2,2)                                                     vibm-331
      go to 4                                                           vibm-332
   27 if ((aa(1,2).eq.0.d0).or.(l1.eq.2)) go to 28                      vibm-333
      l1=2                                                              vibm-334
      ax=aa(1,2)                                                        vibm-335
      go to 3                                                           vibm-336
   28 iti=niv(i1,i2,1)                                                  vibm-337
      if (iti.eq.it) go to 37                                           vibm-338
      itf=it-1                                                          vibm-339
      if (itf.eq.iti) go to 32                                          vibm-340
      it1=iti+1                                                         vibm-341
      it=iti                                                            vibm-342
      do 31 i=it1,itf                                                   vibm-343
      do 29 j=iti,it                                                    vibm-344
      if ((iq(1,i).ne.iq(1,j)).or.(iq(2,i).ne.iq(2,j)).or.(iq(3,i).ne.iqvibm-345
     1(3,j))) go to 29                                                  vibm-346
      t(3,j)=t(3,j)+t(3,i)                                              vibm-347
      go to 31                                                          vibm-348
   29 continue                                                          vibm-349
      it=it+1                                                           vibm-350
      do 30 k=1,3                                                       vibm-351
   30 iq(k,it)=iq(k,i)                                                  vibm-352
      t(3,it)=t(3,i)                                                    vibm-353
   31 continue                                                          vibm-354
      it=it+1                                                           vibm-355
   32 itf=it-1                                                          vibm-356
      do 36 i=iti,itf                                                   vibm-357
      if (it.le.i) go to 37                                             vibm-358
   33 if (dabs(t(3,i)).gt.1.d-12) go to 36                              vibm-359
      it1=i+1                                                           vibm-360
      it=it-1                                                           vibm-361
      if (it1.gt.it) go to 37                                           vibm-362
      do 35 j=it1,it                                                    vibm-363
      do 34 k=1,3                                                       vibm-364
   34 iq(k,j-1)=iq(k,j)                                                 vibm-365
   35 t(3,j-1)=t(3,j)                                                   vibm-366
      go to 33                                                          vibm-367
   36 continue                                                          vibm-368
   37 niv(i1,i2,2)=it-1                                                 vibm-369
   38 continue                                                          vibm-370
   39 continue                                                          vibm-371
      it=it-1                                                           vibm-372
      return                                                            vibm-373
   40 write (mw,1001) jvar,nva                                          vibm-374
      go to 42                                                          vibm-375
   41 write (mw,1002) i1,i2                                             vibm-376
   42 write (mw,1003)                                                   vibm-377
      stop                                                              vibm-378
 1000 format (' state',i4,f15.5,' degrees      amplitudes =',f15.7,'  1 vibm-379
     1phonon and',f15.7,'  2 phonons.')                                 vibm-380
 1001 format (' number of variables used:',i5,5x,'exceeds number of varivibm-381
     1ables read:',i6)                                                  vibm-382
 1002 format (' incorrect description of level',i3,'  or',i3)           vibm-383
 1003 format (//' in vibm  ...  stop  ...')                             vibm-384
      end                                                               vibm-385
c 02/06/07                                                      ecis06  rotm-000
      subroutine rotm(niv,iq,t,ipi,ncoll,iph,nbeta,nvar,var,it,fac,idt,lrotm-001
     1o)                                                                rotm-002
c nuclear reduced matrix elements for the symmetric rotational model.   rotm-003
c input:     ipi(j,*):parity of nuclear states for j=1,                 rotm-004
c                     multiplicity of the particle for j=2,             rotm-005
c                     multiplicity of the target for j=3.               rotm-006
c            ncoll:   number of coupled states                          rotm-007
c            iph:     description of vibrational model (see vibm).      rotm-008
c            nbeta:   l quantum numbers of deformations in nbeta(17,*), rotm-009
c                     k quantum numbers of deformations in nbeta(18,*),.rotm-010
c            nvar,var:equivalent by call, mixture coefficients of bands.rotm-011
c                     model.                                            rotm-012
c            fac:     table and number of logarithms of factorials.     rotm-013
c            idt:     length available in this subroutine.              rotm-014
c            lo(i):   logical controls:                                 rotm-015
c               lo(13) =.true. deformed real spin-orbit or tensor.      rotm-016
c               lo(19) =.true. deformed coulomb spin-orbit potential.   rotm-017
c               lo(117)=.true. for all calculations except the first.   rotm-018
c output:    niv:     number and references of interaction form factors rotm-019
c                     between each channels. niv(i1,i2,k): first i of   rotm-020
c                     t(3,i) for the pair of nuclear states i1,i2 for   rotm-021
c                     k=1 and last one for k=2.                         rotm-022
c            iq,t:    equivalent by call of iq(6,i) and t(3,i).         rotm-023
c            it:      number of nuclear matrix elements in iq,t. for a  rotm-024
c                     given value of i:                                 rotm-025
c                     iq(1,i): reference to table of form factors,      rotm-026
c                              the control number for the form factor   rotm-027
c                              with the vibration n1 and the            rotm-028
c                              multipolarity l is 1000*(l+1)+n1.        rotm-029
c                     iq(2,i): reference to table of angular momenta,   rotm-030
c                     iq(3,i): address of the associated spin-orbit formrotm-031
c                              factor or 0,                             rotm-032
c                     iq(4,i): unused,                                  rotm-033
c                     t(3,i):  reduced nuclear matrix element:          rotm-034
c                     (ip||q||i)=sqrt(2*i+1)*cg(i,iq,ip,k,0,k),         rotm-035
c                     (ip+v||q||i)=sqrt(2*i+1)*cg(i,iq,ip,k,v,k+v),     rotm-036
c                     (ip+v||q||i+v)=sqrt(2*i+1)*cg(i,iq,ip,k+v,0,k+v). rotm-037
c                                                                       rotm-038
c for the common  /coupl/ see calx.                                     rotm-039
c                                                                       rotm-040
c significance of the quantities in common /coupl/:                     rotm-041
c  iqmax:     maximum l-expansion in rotational model.                  rotm-042
c  nfa:       number of logarithms of factorials.                       rotm-043
c  nspin:     twice the k-value of the rotational band.                 rotm-044
c  nva:       number of nuclear parameters.                             rotm-045
c   used:     iqmax,nfa,nspin,nva.                                      rotm-046
c                                                                       rotm-047
c***********************************************************************rotm-048
      implicit real*8 (a-h,o-z)                                         rotm-049
      logical lo(150)                                                   rotm-050
      dimension niv(ncoll,ncoll,*),iq(6,*),t(3,*),ipi(11,*),iph(2,*),nberotm-051
     1ta(18,*),nvar(2,*),var(*),fac(*),aa(2,2)                          rotm-052
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   rotm-053
      common /inout/ mr,mw,ms                                           rotm-054
      it=1                                                              rotm-055
      nsp=0                                                             rotm-056
      if (lo(13).or.lo(19)) nsp=10                                      rotm-057
      do 24 i1=1,ncoll                                                  rotm-058
      ia1=ipi(3,i1)-1                                                   rotm-059
      aa(1,1)=1.d0                                                      rotm-060
      aa(1,2)=0.d0                                                      rotm-061
      if (iph(1,i1).le.1) go to 1                                       rotm-062
      jvar=iph(2,i1)                                                    rotm-063
      ivar=nvar(2,jvar)                                                 rotm-064
      ay=1.74532925d-02*var(ivar)                                       rotm-065
      aa(1,1)=dcos(ay)                                                  rotm-066
      aa(1,2)=dsin(ay)                                                  rotm-067
      if (.not.lo(117)) write (mw,1000) i1,var(ivar),aa(1,1),aa(1,2)    rotm-068
    1 aa(2,1)=aa(1,1)                                                   rotm-069
      aa(2,2)=aa(1,2)                                                   rotm-070
      do 23 i2=i1,ncoll                                                 rotm-071
      ia2=ipi(3,i2)-1                                                   rotm-072
      if (i1.eq.i2) go to 2                                             rotm-073
      aa(2,1)=1.d0                                                      rotm-074
      aa(2,2)=0.d0                                                      rotm-075
      if (iph(1,i2).le.1) go to 2                                       rotm-076
      ivar=iph(2,i2)                                                    rotm-077
      jvar=nvar(2,ivar)                                                 rotm-078
      if (jvar.gt.nva) go to 25                                         rotm-079
      ay=1.74532925d-02*var(jvar)                                       rotm-080
      aa(2,1)=dcos(ay)                                                  rotm-081
      aa(2,2)=dsin(ay)                                                  rotm-082
    2 niv(i1,i2,1)=it                                                   rotm-083
      l1=iph(1,i1)                                                      rotm-084
      ax=aa(1,1)                                                        rotm-085
      if (l1.gt.1) l1=0                                                 rotm-086
      if (dabs(ax).lt.1.d-6) go to 12                                   rotm-087
    3 l2=iph(1,i2)                                                      rotm-088
      if (l2.gt.1) l2=0                                                 rotm-089
      ay=ax*aa(2,1)                                                     rotm-090
      if (dabs(ay).lt.1.d-6) go to 11                                   rotm-091
    4 if (l1.ne.l2) go to 7                                             rotm-092
      nsj=nspin                                                         rotm-093
      if (l1.eq.0) go to 5                                              rotm-094
      n3=iph(2,i1)                                                      rotm-095
      if (n3.ne.iph(2,i2)) go to 11                                     rotm-096
      nsj=2*nbeta(18,n3)+nsj                                            rotm-097
    5 if (ipi(1,i1).ne.ipi(1,i2)) go to 26                              rotm-098
      if ((iabs(nsj).gt.ia2).or.(iabs(nsj).gt.ia1)) go to 27            rotm-099
      iq1=min0(iqmax,(ia1+ia2)/2)                                       rotm-100
      iq2=max0(2,iabs(ia1-ia2)/2)                                       rotm-101
      if (2*(iq2/2).ne.iq2) iq2=iq2+1                                   rotm-102
      if (iq2.gt.iq1) go to 11                                          rotm-103
      do 6 iqz=iq2,iq1,2                                                rotm-104
      if (2*it.gt.idt) call memo('rotm',idt,2*it)                       rotm-105
      iq(1,it)=1000*(iqz+1)                                             rotm-106
      iq(2,it)=iqz                                                      rotm-107
      iq(3,it)=nsp                                                      rotm-108
      t(3,it)=dfloat(1-mod(iqz,4))*dsqrt(ia1+1.d0)*djcg(ia1,2*iqz,ia2,nsrotm-109
     1j,0,fac,nfa)*ay                                                   rotm-110
      if (dabs(t(3,it)).gt.1.d-6) it=it+1                               rotm-111
    6 continue                                                          rotm-112
      go to 11                                                          rotm-113
    7 if (l1.gt.l2) go to 8                                             rotm-114
      n3=iph(2,i2)                                                      rotm-115
      go to 9                                                           rotm-116
c  transposition.                                                       rotm-117
    8 ay=ay*dfloat(1-mod(ipi(3,i1)+ipi(3,i2)+2*(ipi(1,i1)+ipi(1,i2)+1),4rotm-118
     1))                                                                rotm-119
      n3=iph(2,i1)                                                      rotm-120
c 0 phonons -1 phonon.                                                  rotm-121
    9 nsj=2*nbeta(18,n3)                                                rotm-122
      if (mod(ipi(1,i1)+ipi(1,i2)+nbeta(17,n3),2).ne.0) go to 28        rotm-123
      if (iabs(nsj+nspin).gt.ia2) go to 27                              rotm-124
      iq1=(ia1+ia2)/2                                                   rotm-125
      iq2=max0(iabs(nsj),iabs(ia1-ia2))/2                               rotm-126
      if (mod(iq2+nbeta(17,n3),2).ne.0) iq2=iq2+1                       rotm-127
      if (iq2.gt.iq1) go to 11                                          rotm-128
      do 10 iqz=iq2,iq1,2                                               rotm-129
      if (3*it.gt.idt) call memo('rotm',idt,3*it)                       rotm-130
      iq(1,it)=1000*(iqz+1)+n3                                          rotm-131
      iq(2,it)=iqz                                                      rotm-132
      iq(3,it)=nsp                                                      rotm-133
      t(3,it)=dfloat(1-mod(iqz+ipi(1,i1)+ipi(1,i2),4))*dsqrt(ia1+1.d0)*drotm-134
     1jcg(ia1,2*iqz,ia2,nspin,nsj,fac,nfa)*ay                           rotm-135
      if (dabs(t(3,it)).gt.1.d-6) it=it+1                               rotm-136
   10 continue                                                          rotm-137
   11 if ((aa(2,2).eq.0.d0).or.(l2.eq.1)) go to 12                      rotm-138
      l2=1                                                              rotm-139
      ay=ax*aa(2,2)                                                     rotm-140
      go to 4                                                           rotm-141
   12 if ((aa(1,2).eq.0.d0).or.(l1.eq.1)) go to 13                      rotm-142
      l1=1                                                              rotm-143
      ax=aa(1,2)                                                        rotm-144
      go to 3                                                           rotm-145
   13 iti=niv(i1,i2,1)                                                  rotm-146
      if (iti.eq.it) go to 22                                           rotm-147
      itf=it-1                                                          rotm-148
      if (itf.eq.iti) go to 17                                          rotm-149
      it1=iti+1                                                         rotm-150
      it=iti                                                            rotm-151
      do 16 i=it1,itf                                                   rotm-152
      do 14 j=iti,it                                                    rotm-153
      if ((iq(1,i).ne.iq(1,j)).or.(iq(2,i).ne.iq(2,j)).or.(iq(3,i).ne.iqrotm-154
     1(3,j))) go to 14                                                  rotm-155
      t(3,j)=t(3,j)+t(3,i)                                              rotm-156
      go to 16                                                          rotm-157
   14 continue                                                          rotm-158
      it=it+1                                                           rotm-159
      do 15 k=1,3                                                       rotm-160
   15 iq(k,it)=iq(k,i)                                                  rotm-161
      t(3,it)=t(3,i)                                                    rotm-162
   16 continue                                                          rotm-163
      it=it+1                                                           rotm-164
   17 itf=it-1                                                          rotm-165
      do 21 i=iti,itf                                                   rotm-166
      if (it.le.i) go to 22                                             rotm-167
   18 if (dabs(t(3,i)).gt.1.d-12) go to 21                              rotm-168
      it1=i+1                                                           rotm-169
      it=it-1                                                           rotm-170
      if (it1.gt.it) go to 22                                           rotm-171
      do 20 j=it1,it                                                    rotm-172
      do 19 k=1,3                                                       rotm-173
   19 iq(k,j-1)=iq(k,j)                                                 rotm-174
   20 t(3,j-1)=t(3,j)                                                   rotm-175
      go to 18                                                          rotm-176
   21 continue                                                          rotm-177
   22 niv(i1,i2,2)=it-1                                                 rotm-178
   23 continue                                                          rotm-179
   24 continue                                                          rotm-180
      it=it-1                                                           rotm-181
      return                                                            rotm-182
   25 write (mw,1001) jvar,nva                                          rotm-183
      go to 29                                                          rotm-184
   26 write (mw,1002) i1,i2                                             rotm-185
      go to 29                                                          rotm-186
   27 write (mw,1003) i1,i2                                             rotm-187
      go to 29                                                          rotm-188
   28 write (mw,1004) i1,i2,n3                                          rotm-189
      go to 29                                                          rotm-190
   29 write (mw,1005)                                                   rotm-191
      stop                                                              rotm-192
 1000 format (' state',i4,f15.5,' degrees      amplitudes =',f15.7,' grorotm-193
     1und state band and',f15.5,' vibrational band.')                   rotm-194
 1001 format (' number of variables used:',i5,5x,'exceeds number of varirotm-195
     2ables read:',i6)                                                  rotm-196
 1002 format (/' parities of states',i4,'  and',i4,'  incorrect for the rotm-197
     1rotational model.')                                               rotm-198
 1003 format (' too large magnetic quantum number between levels',i4,' arotm-199
     1nd',i4)                                                           rotm-200
 1004 format (/' parities of states',i4,'  and',i4,'  incorrect for the rotm-201
     1rotational model with the vibration',i4)                          rotm-202
 1005 format (//' in rotm  ...  stop  ...')                             rotm-203
      end                                                               rotm-204
c 02/06/07                                                      ecis06  roam-000
      subroutine roam(niv,iq,t,ipi,ncoll,it,beta,iph,var,va,fac,idt,lo) roam-001
c nuclear reduced matrix elements for the asymmetric rotational model.  roam-002
c input:     ipi(j,*):parity of nuclear states for j=1,                 roam-003
c                     multiplicity of the particle for j=2,             roam-004
c                     multiplicity of the target for j=3.               roam-005
c            ncoll:   number of coupled states                          roam-006
c            beta:    deformations for l=2 are in beta(*,1),            roam-007
c                     gamma values for l=2 are in beta(*,2),            roam-008
c                     deformations for l=4 are in beta(*,3),            roam-009
c                     ... etc (see description of input).               roam-010
c            iph(i,*):number of nuclear parameters for i=1,             roam-011
c                     their address for i=2.                            roam-012
c            var:     equivalent by call, parameters for some models.   roam-013
c            fac:     table and number of logarithms of factorials.     roam-014
c            idt:     length available in this subroutine.              roam-015
c            lo(i):   logical controls:                                 roam-016
c               lo(2)  =.true. second order vibrational or constrained  roam-017
c                              asymmetric rotational model.             roam-018
c               lo(13) =.true. deformed real spin-orbit or tensor.      roam-019
c               lo(19) =.true. deformed coulomb spin-orbit potential.   roam-020
c               lo(117)=.true. for all calculations except the first.   roam-021
c output:    niv:     number and references of interaction form factors roam-022
c                     between each channels. niv(i1,i2,k): first i of   roam-023
c                     t(3,i) for the pair of nuclear states i1,i2 for   roam-024
c                     k=1 and last one for k=2.                         roam-025
c            iq,t:    equivalent by call of iq(6,i) and t(3,i).         roam-026
c            it:      number of nuclear matrix elements in iq,t. for a  roam-027
c                     given value of i:                                 roam-028
c                     iq(1,i): reference to table of form factors,      roam-029
c                              the control number for form factor       roam-030
c                              (l=2,k=0) is 2,for (l=2,k=2) is 3, for   roam-031
c                              (l=4,k=0) is 4,for (l=4,k=2) is 5 ...    roam-032
c                              and so on...                             roam-033
c                     iq(2,i): reference to table of angular momenta,   roam-034
c                     iq(3,i): address of the associated spin-orbit formroam-035
c                              factor or 0,                             roam-036
c                     iq(4,i): unused,                                  roam-037
c                     t(3,i):  reduced nuclear matrix element:          roam-038
c                     (ip||q(iq,kq)||i)=sqrt(2*i+1)*cg(i,iq,ip,k,kq,kp) roam-039
c            va:      band mixing coefficients for l=2.                 roam-040
c                                                                       roam-041
c for the common  /coupl/ see calx.                                     roam-042
c                                                                       roam-043
c significance of the quantities in common /coupl/:                     roam-044
c  iqmax:     maximum l-expansion in rotational model.                  roam-045
c  nfa:       number of logarithms of factorials.                       roam-046
c   used:     iqmax,nfa.                                                roam-047
c                                                                       roam-048
c***********************************************************************roam-049
      implicit real*8 (a-h,o-z)                                         roam-050
      logical lo(150)                                                   roam-051
      dimension niv(ncoll,ncoll,*),iq(6,*),t(3,*),ipi(11,*),beta(9,*),iproam-052
     1h(2,*),var(*),va(*),fac(*)                                        roam-053
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   roam-054
      common /inout/ mr,mw,ms                                           roam-055
      ivar=0                                                            roam-056
      i2=1                                                              roam-057
      if (.not.lo(2)) go to 4                                           roam-058
c var(1) is the angle gamma of davydov and filippov model.              roam-059
c the second level must be a the first 2+ and the third one,if present, roam-060
c the second 2+ .their mixing coefficients are computed from var(1).    roam-061
c there can be any number of levels after the third one.                roam-062
      g=var(1)-beta(1,2)                                                roam-063
      if (.not.lo(117)) write (mw,1000) g,(beta(i,2),i=1,8)             roam-064
      do 1 i=1,8                                                        roam-065
    1 beta(i,2)=beta(i,2)+g                                             roam-066
      if (.not.lo(117)) write (mw,1001) (beta(i,2),i=1,8)               roam-067
      g=0.0174532925199433d0*var(1)                                     roam-068
      g1=dsin(g)                                                        roam-069
      g2=dcos(g)                                                        roam-070
      g3=dsin(3.d0*g)                                                   roam-071
      g4=dcos(3.d0*g)                                                   roam-072
      g=dsqrt(9.d0-8.d0*g3*g3)                                          roam-073
      g5=-(g1*g3+3.d0*g2*g4+g)                                          roam-074
      g6=3.d0*g1*g4-g2*g3                                               roam-075
      va(1)=1.d0                                                        roam-076
      if (ncoll.eq.1) go to 2                                           roam-077
      g=dsqrt(g6*g6+g5*g5)                                              roam-078
      va(2)=g5/g                                                        roam-079
      va(3)=g6/g                                                        roam-080
      if (ncoll.eq.2) go to 2                                           roam-081
      va(4)=-va(3)                                                      roam-082
      va(5)=va(2)                                                       roam-083
    2 i2=min0(ncoll,3)                                                  roam-084
      do 3 i1=1,i2                                                      roam-085
      if (i1.eq.1.and.ipi(3,i1).ne.1) go to 14                          roam-086
      if (i1.eq.1) go to 3                                              roam-087
      if (ipi(3,i1).ne.5) go to 14                                      roam-088
      if (.not.lo(117)) write (mw,1002) i1,va(2*i1-2),va(2*i1-1)        roam-089
    3 continue                                                          roam-090
      ivar=i2-1                                                         roam-091
      i2=4                                                              roam-092
      if (i2.gt.ncoll) go to 7                                          roam-093
c levels not related to the gamma deformation.                          roam-094
    4 do 6 i1=i2,ncoll                                                  roam-095
      if (ipi(3,i1).eq.3) go to 16                                      roam-096
      ivar=iph(2,i1)                                                    roam-097
      if (mod(ipi(3,i1),4).ne.1) var(ivar+1)=90.d0                      roam-098
      k1=ivar+i1                                                        roam-099
      va(k1)=1.d0                                                       roam-100
      if (iph(1,i1).eq.0) go to 6                                       roam-101
      k2=k1+iph(1,i1)-1                                                 roam-102
      do 5 k=k1,k2                                                      roam-103
      ivar=ivar+1                                                       roam-104
      g=0.0174532925199433d0*var(ivar)                                  roam-105
      va(k+1)=va(k)*dsin(g)                                             roam-106
    5 va(k)=va(k)*dcos(g)                                               roam-107
      if (.not.lo(117)) write (mw,1002) i1,(va(k),k=k1,k2),va(k2+1)     roam-108
    6 continue                                                          roam-109
c computation of red. mat. ele. for i=/<ip at the first call.           roam-110
    7 it=1                                                              roam-111
      nsp=0                                                             roam-112
      if (lo(13).or.lo(19)) nsp=10                                      roam-113
      do 13 i1=1,ncoll                                                  roam-114
      nt=iph(1,i1)+1                                                    roam-115
      nv=iph(2,i1)+i1-1                                                 roam-116
      ia1=ipi(3,i1)-1                                                   roam-117
      nx=ia1/2-2*(ia1/4)                                                roam-118
      do 12 i2=i1,ncoll                                                 roam-119
      if (ipi(1,i1).ne.ipi(1,i2)) go to 15                              roam-120
      niv(i1,i2,1)=it                                                   roam-121
      mt=iph(1,i2)+1                                                    roam-122
      mv=iph(2,i2)+i2-1                                                 roam-123
      ia2=ipi(3,i2)-1                                                   roam-124
      mx=ia2/2-2*(ia2/4)                                                roam-125
      iq1=min0(iqmax,(ia1+ia2)/2,8)                                     roam-126
      iq2=max0(2,2*((iabs(ia1-ia2)/2+1)/2))                             roam-127
      if (iq2.gt.iq1) go to 11                                          roam-128
c computation of reduced matrix elements.                               roam-129
      do 10 iqz=iq2,iq1,2                                               roam-130
      fs=dfloat(iqz-4*((iqz+2)/4)+1)                                    roam-131
      iqy=iqz/2+1                                                       roam-132
      do 9 mqz=1,iqy                                                    roam-133
      if (2*it.gt.idt) call memo('roam',idt,2*it)                       roam-134
      iq(1,it)=1000*((iqy*(iqy-1))/2+mqz)                               roam-135
      b=0.d0                                                            roam-136
      iq(2,it)=iqz                                                      roam-137
      iq(3,it)=nsp                                                      roam-138
      mq=2*mqz-2                                                        roam-139
      do 8 n1=1,nt                                                      roam-140
      if (n1-nx.eq.0) go to 8                                           roam-141
      n=2*n1-2                                                          roam-142
      lm=n-mq                                                           roam-143
      if (iabs(lm).ge.2*mt) go to 8                                     roam-144
      l1=1+iabs(lm)/2                                                   roam-145
      fq=djcg(ia1,2*iqz,ia2,2*n,-2*mq,fac,nfa)*va(nv+n1)*va(mv+l1)      roam-146
      if (lm.lt.0.and.mx.eq.1) fq=-fq                                   roam-147
      if (mq*n*lm.ne.0) fq=.7071068d0*fq                                roam-148
      b=b+fq                                                            roam-149
      if (n*mq.eq.0) go to 8                                            roam-150
      lm=mq+n                                                           roam-151
      if (lm.ge.2*mt) go to 8                                           roam-152
      l1=1+lm/2                                                         roam-153
      fq=djcg(ia1,2*iqz,ia2,2*n,2*mq,fac,nfa)*va(nv+n1)*va(mv+l1)       roam-154
      if (mq*n*lm.ne.0) fq=.7071068d0*fq                                roam-155
      b=b+fq                                                            roam-156
    8 continue                                                          roam-157
      if (mq.ne.0) b=.7071068d0*b                                       roam-158
      t(3,it)=dsqrt(dfloat(ia1+1))*b*fs                                 roam-159
      if (dabs(t(3,it)).gt.1.d-6) it=it+1                               roam-160
    9 continue                                                          roam-161
   10 continue                                                          roam-162
   11 niv(i1,i2,2)=it-1                                                 roam-163
   12 continue                                                          roam-164
   13 continue                                                          roam-165
      it=it-1                                                           roam-166
      return                                                            roam-167
   14 write (mw,1003)                                                   roam-168
      go to 17                                                          roam-169
   15 write (mw,1004) i1,i2                                             roam-170
      go to 17                                                          roam-171
   16 write (mw,1005)                                                   roam-172
   17 write (mw,1006)                                                   roam-173
      stop                                                              roam-174
 1000 format (/' for constrained asymmetric rotational model the beta(i,roam-175
     12) are increased by',f10.5//23x,'v',9x,'w',8x,'vs',8x,'ws',7x,'vsoroam-176
     2',7x,'wso',6x,'coul s.o. coul'/' initial values ',8f10.5)         roam-177
 1001 format (' modified values',8f10.5)                                roam-178
 1002 format (/' band mixing coefficients for the level',i4/(6d20.7))   roam-179
 1003 format (/' level order incorrect for link between deformation and roam-180
     1band mixing'/' use 0+-2+-2+ and then the other levels.')          roam-181
 1004 format (/' parities of states',i4,'  and',i4,'  incorrect for the roam-182
     1rotational model.')                                               roam-183
 1005 format (/' no spin-1 state in this model.')                       roam-184
 1006 format (//' in roam  ...  stop  ...')                             roam-185
      end                                                               roam-186
c 13/04/06                                                      ecis06  djcg-000
      function djcg(j1,j2,j3,m1,m2,fac,nfa)                             djcg-001
c clebsch-gordan coefficients ( j1  j2  m1  m2 | j3  m1+m2 ).           djcg-002
c input:     j1,..m2: integer doubled values.                           djcg-003
c            fac:     table of logarithm of factorials.                 djcg-004
c            nfa:     length of fac.                                    djcg-005
c***********************************************************************djcg-006
      implicit real*8(a-f)                                              djcg-007
      dimension fac(*)                                                  djcg-008
      common /inout/ mr,mw,ms                                           djcg-009
      djcg=0.d0                                                         djcg-010
      m3=m1+m2                                                          djcg-011
      if (j1+j2+j3.gt.2*nfa) go to 18                                   djcg-012
      if ((j1.lt.0).or.(j2.lt.0).or.(j3.lt.0)) go to 16                 djcg-013
      iy1=j1+m1+2                                                       djcg-014
      ix1=iy1/2                                                         djcg-015
      iy2=j2+m2+2                                                       djcg-016
      ix2=iy2/2                                                         djcg-017
      iy3=j3-m3+2                                                       djcg-018
      ix3=iy3/2                                                         djcg-019
      if ((ix1.le.0).or.(ix2.le.0).or.(ix3.le.0)) return                djcg-020
      if ((2*ix1.ne.iy1).or.(2*ix2.ne.iy2).or.(2*ix3.ne.iy3)) go to 17  djcg-021
      iy1=ix1-m1                                                        djcg-022
      iy2=ix2-m2                                                        djcg-023
      iy3=ix3+m3                                                        djcg-024
      if ((iy1.le.0).or.(iy2.le.0).or.(iy3.le.0)) return                djcg-025
c at this point ix1,ix2,ix3 are twice j+m and iy1,iy2,iy3 twice j-m     djcg-026
c search for a zero argument.                                           djcg-027
      if (j3.eq.0) go to 4                                              djcg-028
      if ((j1.eq.0).or.(j2.eq.0)) go to 5                               djcg-029
      if (m3.eq.0) go to 6                                              djcg-030
      if (m2.eq.0) go to 7                                              djcg-031
      if (m1.eq.0) go to 8                                              djcg-032
c general case.                                                         djcg-033
    1 nx=ix1+ix2+ix3                                                    djcg-034
      iz1=nx-ix1-iy1                                                    djcg-035
      iz2=nx-ix2-iy2                                                    djcg-036
      iz3=nx-ix3-iy3                                                    djcg-037
      if ((iz1.le.0).or.(iz2.le.0).or.(iz3.le.0)) return                djcg-038
      nxy=nx-1                                                          djcg-039
      i1=ix2-iy3                                                        djcg-040
      i2=iy1-ix3                                                        djcg-041
c k1 and k2 are the limits of the sum.                                  djcg-042
c m1,m2,m3,k1,k3,k4 have their factorials in the denominator            djcg-043
c nxy=j1+j2+j3+1      iz1,iz2,iz3  are j1+j2-j3, j1-j2+j3 and -j1+j2+j3.djcg-044
      k1=max0(i1,i2,0)+1                                                djcg-045
      k2=min0(iy1,ix2,iz3)                                              djcg-046
      k3=k1-i1                                                          djcg-047
      k4=k1-i2                                                          djcg-048
      n1=iy1-k1+1                                                       djcg-049
      n2=ix2-k1+1                                                       djcg-050
      n3=iz3-k1+1                                                       djcg-051
      djcg=dexp(0.5d0*(fac(ix3+iy3)-fac(ix3+iy3-1)-fac(nxy)+fac(iz1)+facdjcg-052
     1(iz2)+fac(iz3)+fac(ix1)+fac(ix2)+fac(ix3)+fac(iy1)+fac(iy2)+fac(iydjcg-053
     23))-fac(n1)-fac(n2)-fac(n3)-fac(k1)-fac(k3)-fac(k4))              djcg-054
      if (2*(k1/2).eq.k1) djcg=-djcg                                    djcg-055
      if (k1.eq.k2) go to 3                                             djcg-056
      a4=djcg                                                           djcg-057
      k=k2-k1                                                           djcg-058
      k3=k2-i1                                                          djcg-059
      k4=k2-i2                                                          djcg-060
      n1=iy1-k2                                                         djcg-061
      n2=ix2-k2                                                         djcg-062
      n3=iz3-k2                                                         djcg-063
c k2,k3,k4,n1,n2,n3 are the arguments of the factorials in the last termdjcg-064
      do 2 i=1,k                                                        djcg-065
      a1=dfloat((k2-i)*(k3-i)*(k4-i))                                   djcg-066
      a2=dfloat((n1+i)*(n2+i)*(n3+i))                                   djcg-067
    2 djcg=a4-djcg*a2/a1                                                djcg-068
    3 return                                                            djcg-069
c j1,j2 or j3  is zero.                                                 djcg-070
    4 if (j1.ne.j2) return                                              djcg-071
      a1=dfloat(j1+1)                                                   djcg-072
      djcg=1.d0/dsqrt(a1)                                               djcg-073
      if (mod(iy1,2).eq.0) djcg=-djcg                                   djcg-074
      return                                                            djcg-075
    5 if (j1+j2.ne.j3) return                                           djcg-076
      djcg=1.d0                                                         djcg-077
      return                                                            djcg-078
c m1,m2 or m3 is zero; if the others m are larger than 1/2,general case.djcg-079
    6 if (iabs(m1)-1) 9 , 10 , 1                                        djcg-080
    7 if (iabs(m1).gt.1) go to 1                                        djcg-081
      go to 11                                                          djcg-082
    8 if (iabs(m3).gt.1) go to 1                                        djcg-083
      go to 12                                                          djcg-084
c all the m are zeros.                                                  djcg-085
    9 n5=ix1+ix2+ix3-1                                                  djcg-086
      if (2*(n5/2).ne.n5) return                                        djcg-087
      n2=ix1+ix2-ix3                                                    djcg-088
      n3=ix2+ix3-ix1                                                    djcg-089
      n4=ix3+ix1-ix2                                                    djcg-090
      a1=fac(2*ix3)-fac(2*ix3-1)                                        djcg-091
      kc=1                                                              djcg-092
      go to 14                                                          djcg-093
c one m is zero and the others +-1/2  formula of dcgs.                  djcg-094
   10 iq=ix3-1                                                          djcg-095
      iz1=ix1+ix2-2                                                     djcg-096
      iz2=ix1-iy2                                                       djcg-097
      lz1=j1                                                            djcg-098
      lz2=j2                                                            djcg-099
      lw2=m2                                                            djcg-100
      lw1=iy1                                                           djcg-101
      go to 13                                                          djcg-102
   11 iq=ix2-1                                                          djcg-103
      iz1=ix1+ix3-2                                                     djcg-104
      iz2=ix3-iy1                                                       djcg-105
      lz1=j1                                                            djcg-106
      lz2=j3                                                            djcg-107
      lw2=m1                                                            djcg-108
      lw1=iy3                                                           djcg-109
      go to 13                                                          djcg-110
   12 iq=ix1-1                                                          djcg-111
      iz1=ix2+ix3-2                                                     djcg-112
      iz2=ix2-iy3                                                       djcg-113
      lz1=j2                                                            djcg-114
      lz2=j3                                                            djcg-115
      lw2=-m3                                                           djcg-116
      lw1=iy2                                                           djcg-117
   13 n2=iz1-iq+1                                                       djcg-118
      n3=iq+iz2+1                                                       djcg-119
      n4=iq-iz2+1                                                       djcg-120
      if (n2.lt.1.or.n3.lt.1.or.n4.lt.1) return                         djcg-121
      n5=iz1+iq+2                                                       djcg-122
      a1=fac(j3+2)-fac(j3+1)-fac(lz1+2)+fac(lz1+1)-fac(lz2+2)+fac(lz2+1)djcg-123
      kc=2                                                              djcg-124
c simple formula.                                                       djcg-125
   14 if (n5-1.gt.nfa) go to 18                                         djcg-126
      l1=(n5+1)/2                                                       djcg-127
      l2=(n2+1)/2                                                       djcg-128
      l3=(n3+1)/2                                                       djcg-129
      l4=(n4+1)/2                                                       djcg-130
      djcg=dexp(0.5d0*(a1+fac(n2)+fac(n3)+fac(n4)-fac(n5))+fac(l1)-fac(ldjcg-131
     12)-fac(l3)-fac(l4))                                               djcg-132
      if (kc.eq.2) go to 15                                             djcg-133
      if (mod(l1+ix1-ix2,2).eq.0) djcg=-djcg                            djcg-134
      return                                                            djcg-135
   15 if (lw2.gt.0) l4=l4+n5+1                                          djcg-136
      djcg=2.d0*djcg                                                    djcg-137
      if (mod(l4+lw1+ix1-iy2,2).ne.0) djcg=-djcg                        djcg-138
      return                                                            djcg-139
   16 write (mw,1000)                                                   djcg-140
      return                                                            djcg-141
   17 write (mw,1001)                                                   djcg-142
      return                                                            djcg-143
   18 write (mw,1002)                                                   djcg-144
      return                                                            djcg-145
 1000 format (' negative angular momentum in djcg.')                    djcg-146
 1001 format (' integer/half-integer rule between quantum numbers transgdjcg-147
     1ressed in djcg.')                                                 djcg-148
 1002 format (' factorial too large in djcg.')                          djcg-149
      end                                                               djcg-150
c 13/04/06                                                      ecis06  dj6j-000
      function dj6j(j1,j2,j3,j4,j5,j6,fac,nfa)                          dj6j-001
c computation of six-j coefficients.                                    dj6j-002
c input:     j1..j6:  double value of angular momenta.                  dj6j-003
c            fac:     table of logarithm of factorials.                 dj6j-004
c            nfa:     length of fac.                                    dj6j-005
c output:                                                               dj6j-006
c                                  ( j1  j2  j3 )                       dj6j-007
c            6-j coefficients      )            (                       dj6j-008
c                                  ( j4  j5  j6 )                       dj6j-009
c                                                                       dj6j-010
c***********************************************************************dj6j-011
      implicit real*8(a-f)                                              dj6j-012
      dimension ix(6),ia(3,4),iy(4),fac(*)                              dj6j-013
      common /inout/ mr,mw,ms                                           dj6j-014
      data ia /1,2,3,1,5,6,4,2,6,4,5,3/                                 dj6j-015
      dj6j=0.d0                                                         dj6j-016
      ix(1)=j1                                                          dj6j-017
      ix(2)=j2                                                          dj6j-018
      ix(3)=j3                                                          dj6j-019
      ix(4)=j4                                                          dj6j-020
      ix(5)=j5                                                          dj6j-021
      ix(6)=j6                                                          dj6j-022
c the quantum numbers multiplied by 2 are in the table ix.              dj6j-023
c search for a zero quantum number.                                     dj6j-024
      do 1 i=1,6                                                        dj6j-025
      if (ix(i).lt.0) go to 14                                          dj6j-026
      if (ix(i).eq.0) go to ( 5 , 6 , 7 , 8 , 9, 10 ),i                 dj6j-027
    1 continue                                                          dj6j-028
c general case.                                                         dj6j-029
c check of the triangular relations and computation of delta.           dj6j-030
      do 2 k=1,4                                                        dj6j-031
      iz1=ia(1,k)                                                       dj6j-032
      iz2=ia(2,k)                                                       dj6j-033
      iz3=ia(3,k)                                                       dj6j-034
      ix1=ix(iz1)                                                       dj6j-035
      ix2=ix(iz2)                                                       dj6j-036
      ix3=ix(iz3)                                                       dj6j-037
      n=ix1+ix2+ix3+2                                                   dj6j-038
      i1=n/2                                                            dj6j-039
      if (2*i1.ne.n) go to 12                                           dj6j-040
      if (i1.gt.nfa) go to 13                                           dj6j-041
      n1=i1-ix3                                                         dj6j-042
      n2=i1-ix2                                                         dj6j-043
      n3=i1-ix1                                                         dj6j-044
      if ((i1.le.0).or.(n1.le.0).or.(n2.le.0).or.(n3.le.0)) go to 15    dj6j-045
      iy(k)=i1+1                                                        dj6j-046
    2 dj6j=dj6j+fac(n1)-fac(i1+1)+fac(n2)+fac(n3)                       dj6j-047
      n1=(ix(1)+ix(2)+ix(4)+ix(5))/2                                    dj6j-048
      n2=(ix(1)+ix(3)+ix(4)+ix(6))/2                                    dj6j-049
      n3=(ix(2)+ix(3)+ix(5)+ix(6))/2                                    dj6j-050
c k1 and k2 are the limits of the sum.                                  dj6j-051
c k1, l1, l2, l3, l4, m1, m2, m3 are the factorials of the first term.  dj6j-052
      k1=max0(iy(1),iy(2),iy(3),iy(4))                                  dj6j-053
      k2=min0(n1,n2,n3)+2                                               dj6j-054
      l1=k1-iy(1)+1                                                     dj6j-055
      l2=k1-iy(2)+1                                                     dj6j-056
      l3=k1-iy(3)+1                                                     dj6j-057
      l4=k1-iy(4)+1                                                     dj6j-058
      m1=n1-k1+3                                                        dj6j-059
      m2=n2-k1+3                                                        dj6j-060
      m3=n3-k1+3                                                        dj6j-061
      dj6j=dexp(.5d0*dj6j+fac(k1)-fac(l1)-fac(l2)-fac(l3)-fac(l4)-fac(m1dj6j-062
     1)-fac(m2)-fac(m3))                                                dj6j-063
      if (2*(k1/2).ne.k1) dj6j=-dj6j                                    dj6j-064
      if (k2.eq.k1) go to 4                                             dj6j-065
      a2=dj6j                                                           dj6j-066
      k=k2-k1                                                           dj6j-067
    3 a1=dfloat((m1-k)*(m2-k)*(m3-k))                                   dj6j-068
      k=k-1                                                             dj6j-069
      a3=dfloat((l1+k)*(l2+k)*(l3+k)*(l4+k))                            dj6j-070
      dj6j=a2-dfloat(k1+k)*a1*dj6j/a3                                   dj6j-071
      if (k.gt.0) go to 3                                               dj6j-072
    4 return                                                            dj6j-073
c one quantum number is zero; verification of the triangular relation.  dj6j-074
    5 if (ix(2).ne.ix(3).or.ix(5).ne.ix(6)) go to 15                    dj6j-075
      ix(6)=ix(4)                                                       dj6j-076
      ix(1)=ix(2)                                                       dj6j-077
      ix(4)=ix(5)                                                       dj6j-078
      go to 11                                                          dj6j-079
    6 if (ix(1).ne.ix(3).or.ix(4).ne.ix(6)) go to 15                    dj6j-080
      ix(6)=ix(5)                                                       dj6j-081
      go to 11                                                          dj6j-082
    7 if (ix(1).ne.ix(2).or.ix(4).ne.ix(5)) go to 15                    dj6j-083
      if (ix(4).ne.ix(5)) go to 15                                      dj6j-084
      go to 11                                                          dj6j-085
    8 if (ix(2).ne.ix(6).or.ix(3).ne.ix(5)) go to 15                    dj6j-086
      ix(6)=ix(1)                                                       dj6j-087
      ix(1)=ix(5)                                                       dj6j-088
      ix(4)=ix(2)                                                       dj6j-089
      go to 11                                                          dj6j-090
    9 if (ix(1).ne.ix(6).or.ix(3).ne.ix(4)) go to 15                    dj6j-091
      ix(6)=ix(2)                                                       dj6j-092
      go to 11                                                          dj6j-093
   10 if (ix(1).ne.ix(5).or.ix(2).ne.ix(4)) go to 15                    dj6j-094
      ix(6)=ix(3)                                                       dj6j-095
c value of 6-j coefficient with one quantum number zero.                dj6j-096
   11 if (min0(ix(1),ix(4),ix(6)).lt.0) go to 14                        dj6j-097
      if (ix(6).gt.ix(1)+ix(4).or.ix(6).lt.iabs(ix(1)-ix(4))) go to 15  dj6j-098
      if (max0(ix(1),ix(4)).gt.nfa) go to 13                            dj6j-099
      k=ix(1)+ix(4)+ix(6)                                               dj6j-100
      n=k/2                                                             dj6j-101
      if (2*n.ne.k) go to 12                                            dj6j-102
      dj6j=dfloat(1-2*mod(n,2))/dsqrt(dfloat((ix(1)+1)*(ix(4)+1)))      dj6j-103
      return                                                            dj6j-104
   12 write (mw,1000)                                                   dj6j-105
      go to 15                                                          dj6j-106
   13 write (mw,1001)                                                   dj6j-107
      go to 15                                                          dj6j-108
   14 write (mw,1002)                                                   dj6j-109
   15 dj6j=0.d0                                                         dj6j-110
      return                                                            dj6j-111
 1000 format (' violation of the integer/half-integer rule between quantdj6j-112
     1um numbers in dj6j.')                                             dj6j-113
 1001 format (' factorial too large for dj6j.')                         dj6j-114
 1002 format (' negative angular momentum in dj6j.')                    dj6j-115
      end                                                               dj6j-116
c 27/06/06                                                      ecis06  dj9j-000
      function dj9j(j1,j2,j3,j4,j5,j6,j7,j8,j9,aa,ito)                  dj9j-001
c computation of 9-j coefficients.                                      dj9j-002
c input:     j1,..j9: integer doubled values.                           dj9j-003
c output:                             | j1  j2  j3 |                    dj9j-004
c                                     |            |                    dj9j-005
c   9j(j1,j2,j3,j4,j5,j6,j7,j8,j9) =  | j4  j5  j6 |                    dj9j-006
c                                     |            |                    dj9j-007
c                                     | j7  j8  j9 |                    dj9j-008
c                                                                       dj9j-009
c working area:                                                         dj9j-010
c            aa:      for computation of unnormalised 6-j coefficients  dj9j-011
c                     by recurrence.                                    dj9j-012
c            ito:     length of aa.                                     dj9j-013
c***********************************************************************dj9j-014
      implicit real*8 (a-h,o-z)                                         dj9j-015
      dimension aa(*),j(5),ix(9),jx(3,3),js(3),jf(3),ia(5,3),ib(3)      dj9j-016
      equivalence (ix(1),jx(1,1)),(ib(1),ib1),(ib(2),ib2),(ib(3),ib3)   dj9j-017
      common /inout/ mr,mw,ms                                           dj9j-018
      data ia /1,2,3,6,9,6,4,5,8,2,8,9,7,1,4/                           dj9j-019
      dj9j=0.d0                                                         dj9j-020
      ix(1)=j1                                                          dj9j-021
      ix(2)=j2                                                          dj9j-022
      ix(3)=j3                                                          dj9j-023
      ix(4)=j4                                                          dj9j-024
      ix(5)=j5                                                          dj9j-025
      ix(6)=j6                                                          dj9j-026
      ix(7)=j7                                                          dj9j-027
      ix(8)=j8                                                          dj9j-028
      ix(9)=j9                                                          dj9j-029
      do 2 i=1,3                                                        dj9j-030
      do 1 k=1,3                                                        dj9j-031
      if (jx(k,i).lt.0) go to 13                                        dj9j-032
    1 continue                                                          dj9j-033
c check of triangular relations.                                        dj9j-034
      if (mod(jx(1,i)+jx(2,i)+jx(3,i),2).ne.0.or.mod(jx(i,1)+jx(i,2)+jx(dj9j-035
     1i,3),2).ne.0) go to 11                                            dj9j-036
      if (iabs(jx(1,i)-jx(2,i)).gt.jx(3,i).or.jx(1,i)+jx(2,i).lt.jx(3,i)dj9j-037
     1) return                                                          dj9j-038
      if (iabs(jx(i,1)-jx(i,2)).gt.jx(i,3).or.jx(i,1)+jx(i,2).lt.jx(i,3)dj9j-039
     1) return                                                          dj9j-040
    2 continue                                                          dj9j-041
c search of the configuration for which the sum on products of 6-j      dj9j-042
c coefficients is the smallest one.                                     dj9j-043
      k1=min0(ix(3),ix(5),ix(7))                                        dj9j-044
      k2=min0(ix(2),ix(4),ix(9))                                        dj9j-045
      k3=min0(ix(1),ix(6),ix(8))                                        dj9j-046
      kt=max0(k1,k2,k3)                                                 dj9j-047
      if (kt.eq.k1) go to 6                                             dj9j-048
      if (k2.gt.k3) go to 4                                             dj9j-049
      do 3 i=1,3                                                        dj9j-050
      ii=ix(i)                                                          dj9j-051
      ix(i)=ix(i+3)                                                     dj9j-052
      ix(i+3)=ix(i+6)                                                   dj9j-053
    3 ix(i+6)=ii                                                        dj9j-054
      go to 6                                                           dj9j-055
    4 do 5 i=1,3                                                        dj9j-056
      ii=ix(i+6)                                                        dj9j-057
      ix(i+6)=ix(i+3)                                                   dj9j-058
      ix(i+3)=ix(i)                                                     dj9j-059
    5 ix(i)=ii                                                          dj9j-060
    6 do 7 k=1,3                                                        dj9j-061
      ia1=ia(1,k)                                                       dj9j-062
      ia2=ia(2,k)                                                       dj9j-063
      ia4=ia(4,k)                                                       dj9j-064
      ia5=ia(5,k)                                                       dj9j-065
      js(k)=max0(iabs(ix(ia1)-ix(ia5)),iabs(ix(ia4)-ix(ia2)))+1         dj9j-066
    7 jf(k)=min0(ix(ia1)+ix(ia5),ix(ia2)+ix(ia4))+1                     dj9j-067
      kf=min0(jf(1),jf(2),jf(3))                                        dj9j-068
      kt=2+(kf-max0(js(1),js(2),js(3)))/2                               dj9j-069
c loop on the three 6-j coefficients.                                   dj9j-070
      itx=0                                                             dj9j-071
      az=1.d0                                                           dj9j-072
      do 9 k=1,3                                                        dj9j-073
      ij=itx                                                            dj9j-074
      ib(k)=itx+(jf(k)-kf)/2                                            dj9j-075
      do 8 i=1,5                                                        dj9j-076
      ia1=ia(i,k)                                                       dj9j-077
    8 j(i)=ix(ia1)                                                      dj9j-078
      jt=2+(jf(k)-js(k))/2                                              dj9j-079
      itx=itx+jt                                                        dj9j-080
      if (itx.gt.ito) go to 12                                          dj9j-081
      at=dfloat(jf(k))                                                  dj9j-082
      call dx6j(aa(1+ij),at,j,jt)                                       dj9j-083
    9 az=az*at*dfloat(j(3)+1)                                           dj9j-084
c summation on products of 6-j.                                         dj9j-085
      af=dfloat(kf)                                                     dj9j-086
      do 10 i=2,kt                                                      dj9j-087
      dj9j=dj9j+af*aa(i+ib1)*aa(i+ib2)*aa(i+ib3)                        dj9j-088
   10 af=af-2.d0                                                        dj9j-089
c normalisation.                                                        dj9j-090
      dj9j=dj9j/dsqrt(az)                                               dj9j-091
      return                                                            dj9j-092
   11 write (mw,1000)                                                   dj9j-093
      return                                                            dj9j-094
   12 write (mw,1001)                                                   dj9j-095
      return                                                            dj9j-096
   13 write (mw,1002)                                                   dj9j-097
      return                                                            dj9j-098
 1000 format (' integer/half-integer rule between quantum numbers transgdj9j-099
     1ressed in dj9j.')                                                 dj9j-100
 1001 format (' too many 6-j needed in dj9j.')                          dj9j-101
 1002 format (' negative angular momentum in dj9j.')                    dj9j-102
      end                                                               dj9j-103
c 27/06/06                                                      ecis06  dx6j-000
      subroutine dx6j(aa,at,j,jt)                                       dx6j-001
c recurrence computation of unnormalised 6-j coefficients.              dx6j-002
c                       ( j(1)  j(2)  j(3) )                            dx6j-003
c 6-j coefficients      )                  ( for all values of jj.      dx6j-004
c                       ( j(4)  j(5)   jj  )                            dx6j-005
c input:     j:       integer doubled values.                           dx6j-006
c            jt:      number of 6j coefficients plus one.               dx6j-007
c output:    aa:      unnormalised 6j coefficients in aa(2) to aa(jt)   dx6j-008
c                     starting from the largest value of jj; aa(1)=0.   dx6j-009
c            at:      normalisation: the values aa must be divided by   dx6j-010
c                     (-)**(j(1)+j(2)+j(4)+j(5))*sqrt((j(3)+1)*at).     dx6j-011
c***********************************************************************dx6j-012
      implicit real*8 (a-h,o-z)                                         dx6j-013
      dimension aa(*),j(5)                                              dx6j-014
      aa(1)=0.d0                                                        dx6j-015
      aa(2)=1.d0                                                        dx6j-016
      if (jt.le.2) return                                               dx6j-017
      al=at                                                             dx6j-018
      c2=0.d0                                                           dx6j-019
      bk1=dfloat(j(1)-j(5))**2                                          dx6j-020
      bk3=dfloat(j(2)-j(4))**2                                          dx6j-021
      bk2=dfloat(j(1)+j(5)+2)**2                                        dx6j-022
      bk4=dfloat(j(2)+j(4)+2)**2                                        dx6j-023
      d1=dfloat(j(1)-j(5))*dfloat(j(1)+j(5)+2)*dfloat(j(4)-j(2))*dfloat(dx6j-024
     1j(2)+j(4)+2)/16.d0                                                dx6j-025
      d2=(bk1+bk2+bk3+bk4-dfloat(4*j(3)*(j(3)+2)))/8.d0-1.d0            dx6j-026
      bk=(al+1.d0)**2                                                   dx6j-027
      do 2 i=3,jt                                                       dx6j-028
      c1=c2                                                             dx6j-029
      bk=bk-al*4.d0                                                     dx6j-030
      c2=.03125d0*dsqrt((bk3-bk)*(bk1-bk)*(bk2-bk)*(bk4-bk))            dx6j-031
      d4=.5d0*(al+.5d0*bk-1.d0)                                         dx6j-032
      aa(i)=-(al*(d1+(d2-d4)*d4)*aa(i-1)+(al-1.d0)*c1*aa(i-2))/(c2*(al+1dx6j-033
     1.d0))                                                             dx6j-034
      al=al-2.d0                                                        dx6j-035
      at=at+al*aa(i)*aa(i)                                              dx6j-036
      if (at.lt.1.d12) go to 2                                          dx6j-037
      at=at*1.d-24                                                      dx6j-038
      do 1 ii=2,i                                                       dx6j-039
    1 aa(ii)=aa(ii)*1.d-12                                              dx6j-040
    2 continue                                                          dx6j-041
      return                                                            dx6j-042
      end                                                               dx6j-043
c 02/06/07                                                      ecis06  extp-000
      subroutine extp(ncoll,ncolt,wv,niv,iq,ivy,ivq,ipi,fac,val,nval,ll,extp-001
     1ipp,pip,idt,lo)                                                   extp-002
c input and setup of external form factors, elastic and transitions.    extp-003
c input:     ncoll:   number of coupled nuclear states.                 extp-004
c            ncolt:   number of nuclear states including uncoupled ones.extp-005
c            wv:      masses of particle and target in wv(1/2,*).       extp-006
c            niv:     addresses in table of nuclear matrix elements.    extp-007
c            iq:      table of reduced nuclear matrix elements.         extp-008
c            ivy:     table of form factors (see redm).                 extp-009
c            ivq:     table of angular momenta (see redm).              extp-010
c            ipi(5,*):reference to potentials.                          extp-011
c            fac:     table of logarithm of factorials.                 extp-012
c            ipp,pip: dispersion relations, equivalent by call.         extp-013
c            idt:     size of available working space.                  extp-014
c            lo(i):   logical controls:                                 extp-015
c               lo(6)  =.true. use deformation lengths.                 extp-016
c               lo(10) =.true. dispersion relations for potentials.     extp-017
c               lo(12) =.true. deformed imaginary potential.            extp-018
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. extp-019
c               lo(16) =.true. heavy-ion definition of reduced radii andextp-020
c                              deformations.                            extp-021
c               lo(73) =.true. no output of external potentials when    extp-022
c                              they are read.                           extp-023
c               lo(99) =.true. schroedinger equivalent to dirac         extp-024
c                              equation.                                extp-025
c               lo(100)=.true. dirac equation.                          extp-026
c               lo(101)=.true. there is a real spin-orbit potential.    extp-027
c               lo(102)=.true. there is an imaginary spin-orbit         extp-028
c                              potential.                               extp-029
c output:    val,nval:in equivalence by call, for parameters read here. extp-030
c                     nva(1) first address after ll.                    extp-031
c                     nva(2) number of sets of folding parameters.      extp-032
c                     nva(3) first address of folding parameters.       extp-033
c                     nva(4) last address of folding parameters.        extp-034
c            ll:      addresses in va in equivalence with nva(1,3):     extp-035
c                     ll(1,ityp,k) first address of parameters which canextp-036
c                     be varied for ityp and form factor k, 1 for form  extp-037
c                     factors not used.                                 extp-038
c                     ll(2,ityp,k) last address for ityp and form factorextp-039
c                     k, -1 for form factors not used.                  extp-040
c                                                                       extp-041
c for the common  /coupl/ see calx.                                     extp-042
c for the common  /pote1/ see redm.                                     extp-043
c                                                                       extp-044
c significance of the quantities in common /coupl/:                     extp-045
c  nfa:       number of logarithms of factorials.                       extp-046
c  npp:       number of optical potentials.                             extp-047
c   used:     nfa,npp                                                   extp-048
c                                                                       extp-049
c significance of the quantities in common /pote1/:                     extp-050
c  intc:      number of form factors without deformed spin-orbit        extp-051
c             including correction terms.                               extp-052
c  inls:      number of spin-orbit form factors not taking into account extp-053
c             multiplication by 2.                                      extp-054
c  invc:      number of coulomb transition form factors.                extp-055
c  invd:      idem for coulomb spin-orbit.                              extp-056
c   used:     intc,inls,invc,invd.                                      extp-057
c                                                                       extp-058
c***********************************************************************extp-059
c ityp 1 real volume or dirac scalar potential.                         extp-060
c      2 imaginary volume or dirac scalar potential.                    extp-061
c      3 real surface or dirac vector potential.                        extp-062
c      4 imaginary surface or dirac vector potential.                   extp-063
c      5 real spin-orbit or dirac tensor potential.                     extp-064
c      6 imaginary spin-orbit or dirac tensor potential.                extp-065
c      7 coulomb potential.                                             extp-066
c      8 coulomb spin-orbit potential.                                  extp-067
c                                                                       extp-068
c l1,l2 controls the level to potential assignment.                     extp-069
c ml    is 0 for the potential or the place of the transition form.     extp-070
c       factor in the sequence of reduced matrix elements.              extp-071
c       the form factors contain the deformation.                       extp-072
c l1x,l2x,mlx  form factor copied to l1,l2,ml.                          extp-073
c                                                                       extp-074
c the spin-orbit transition form factor to be read is the second one    extp-075
c multiplied by r**2. (multipole of an ordinary woods-saxon potential). extp-076
c                                                                       extp-077
c itypx  -1  woods-saxon potential.                                     extp-078
c        -2  first derivative   multiplied by r/sqrt(4*pi).             extp-079
c        -3  second derivative  multiplied by r**2/(8*pi).              extp-080
c        -4  third derivative   multiplied by r**3/(48*pi**(3/2)).      extp-081
c        -5  deformed woods-saxon potential.                            extp-082
c        -6  derivative of deformed woods-saxon potential.              extp-083
c        -7  laguerre polynomial.                                       extp-084
c        -8  solution in real woods-saxon potential.                    extp-085
c        -9  bessel expansion.                                          extp-086
c       -10  laguerre expansion.                                        extp-087
c l2x gives the number of deformations, of nodes, of bessel functions,  extp-088
c                      of laguerre polynomials.                         extp-089
c mlx is the l-value of bessel or laguerre expansion, or number of boundextp-090
c functions: =0 or 1 for one with the quantum numbers of the transition,extp-091
c            =2 for two functions with the same itypx,                  extp-092
c            =3 when itypx=-8 for laguerre polynomial as the second one.extp-093
c mlx and -l1x are quantum numbers of vibrational band:                 extp-094
c -l1x gives the multiplication of step in computing bound function,    extp-095
c -l1x is the order of derivation of bessel or laguerre expansion.      extp-096
c                                                                       extp-097
c allowed values of itypx for standard potentials                       extp-098
c ***********************************************                       extp-099
c **** ml is 0 ****                                                     extp-100
c itypx =    -1       -2,-4    -5       -6       -7,-8    -9,-10        extp-101
c ityp = 1   yes      no       yes      no       no       yes           extp-102
c ityp = 2   yes      no       yes      no       no       yes           extp-103
c ityp = 3   yes      no       yes      no       no       yes           extp-104
c ityp = 4   yes      no       yes      no       no       yes           extp-105
c ityp = 5   yes      no       yes      no       no       yes           extp-106
c ityp = 6   yes      no       yes      no       no       yes           extp-107
c ityp = 7   yes      no       yes      no       no       yes           extp-108
c ityp = 8   yes      no       yes      no       no       yes           extp-109
c **** ml is not 0 ****                                                 extp-110
c ityp = 1   yes      yes      yes      yes      yes      yes           extp-111
c ityp = 2   yes      yes      yes      yes      yes      yes           extp-112
c ityp = 3   yes      yes      yes      yes      no       yes           extp-113
c ityp = 4   yes      yes      yes      yes      no       yes           extp-114
c ityp = 5   yes      yes      yes      yes      no       yes           extp-115
c ityp = 6   yes      yes      yes      yes      no       yes           extp-116
c ityp = 7   no       yes      yes      yes      no       yes           extp-117
c ityp = 8   no       yes      yes      yes      no       yes           extp-118
c number of parameters to store:                                        extp-119
c itypx = -1,-4       -5        -6        -7        -8        -9,-10    extp-120
c integer 6           7         8         15        15        9         extp-121
c real*8  4           4+l2x     4+l2x     1         23        2+l2x     extp-122
c the odd number of integer needed is rounded to next even value        extp-123
c there is one more for coulomb potentials and itypx=-1 to -6.          extp-124
c there are 5 more parameters for itypx=-7 and mlx=2.                   extp-125
c there are 16 or 6 more parameters for itypx=-8 and mlx=2 or mlx=3.    extp-126
c                                                                       extp-127
c for the common  /coupl/ see calc.                                     extp-128
c                                                                       extp-129
c significance of the quantities in common /coupl/:                     extp-130
c  nfa:       number of logarithms of factorials.                       extp-131
c  npp:       number of optical potentials.                             extp-132
c   used:     nfa,npp.                                                  extp-133
c                                                                       extp-134
c***********************************************************************extp-135
      implicit real*8 (a-h,o-z)                                         extp-136
      logical lo(150)                                                   extp-137
      dimension wv(22,*),niv(ncoll,ncoll,*),iq(6,*),ivy(7,*),ivq(3,*),ipextp-138
     1i(11,*),fac(*),val(*),nval(*),ll(2,8,*),ipp(2,18,*),pip(18,1),itz(extp-139
     210)                                                               extp-140
      character*8 aa(3,8)                                               extp-141
      character*4 ierm,last                                             extp-142
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   extp-143
      common /inout/ mr,mw,ms                                           extp-144
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              extp-145
      data aa /'      re','al volum','e/scalar',' imagina','ry volum','eextp-146
     1/scalar','     rea','l surfac','e/vector','  imagin','. surfac','eextp-147
     2/vector','  real s','pin-orbi','t/tensor',' imag. s','pin-orbi','textp-148
     3/tensor','        ','        ',' coulomb','      sp','in-orbit',' extp-149
     4coulomb'/                                                         extp-150
      data itz /2,2,2,2,3,4,7,7,4,4/                                    extp-151
      data ierm /'last'/                                                extp-152
      if (lo(99)) go to 44                                              extp-153
      npx=npp+intc                                                      extp-154
      nma=3+8*npx                                                       extp-155
      nval(1)=nma                                                       extp-156
      if (nma.gt.idt) call memo('extp',idt,nma)                         extp-157
c setting the controls of input                                         extp-158
      ntot=0                                                            extp-159
      do 9 i=1,npx                                                      extp-160
      do 1 j=1,8                                                        extp-161
      ll(1,j,i)=-1                                                      extp-162
    1 ll(2,j,i)=-1                                                      extp-163
      if (i.gt.npp) go to 2                                             extp-164
      if (.not.lo(101)) ll(1,5,i)=1                                     extp-165
      if (.not.lo(102)) ll(1,6,i)=1                                     extp-166
      if (.not.lo(101)) ll(1,8,i)=1                                     extp-167
      go to 7                                                           extp-168
    2 k=i-npp                                                           extp-169
      l=ivy(2,k)                                                        extp-170
      if (ivq(2,l).ge.0) go to 4                                        extp-171
      do 3 l=1,6                                                        extp-172
    3 ll(1,l,i)=1                                                       extp-173
      ll(1,8,i)=1                                                       extp-174
      go to 7                                                           extp-175
    4 if (lo(12)) go to 5                                               extp-176
      ll(1,2,i)=1                                                       extp-177
      ll(1,4,i)=1                                                       extp-178
    5 if (lo(100)) go to 6                                              extp-179
      if (k.gt.inls) ll(1,5,i)=1                                        extp-180
      if ((.not.lo(14)).or.k.gt.inls) ll(1,6,i)=1                       extp-181
      if (k.gt.invc) ll(1,7,i)=1                                        extp-182
      if (k.gt.invd) ll(1,8,i)=1                                        extp-183
      go to 7                                                           extp-184
    6 if (ivy(3,k).eq.0) ll(1,5,i)=1                                    extp-185
      if ((.not.lo(14)).or.ivy(3,k).eq.0) ll(1,6,i)=1                   extp-186
      if (ivy(4,k).eq.0) ll(1,7,i)=1                                    extp-187
      if (ivy(5,k).eq.0) ll(1,8,i)=1                                    extp-188
c count of form factors to be read                                      extp-189
    7 do 8 j=1,8                                                        extp-190
      if (ll(1,j,i).eq.-1) ntot=ntot+1                                  extp-191
    8 continue                                                          extp-192
    9 continue                                                          extp-193
      nfolt=0                                                           extp-194
   10 if (ntot.le.0) go to 42                                           extp-195
c input of a form factor                                                extp-196
      read (mr,1000,err= 45 ) l1,l2,ml,ityp,l1x,l2x,mlx,itypx,nst,nfold,extp-197
     1mint                                                              extp-198
      if (ityp.gt.8.or.iabs(nst).gt.ncolt.or.ityp.le.0) go to 46        extp-199
      nfolt=max0(nfolt,nfold)                                           extp-200
      if (iabs(ml).ne.0) go to 11                                       extp-201
c test for a potential                                                  extp-202
      if (l1.ne.l2.or.l1.gt.ncolt) go to 47                             extp-203
      lz=ipi(5,l1)                                                      extp-204
      if (nst.eq.0) nst=l1                                              extp-205
      if (.not.lo(73)) write (mw,1001) (aa(k,ityp),k=1,3),lz            extp-206
      go to 14                                                          extp-207
c test for a transition                                                 extp-208
   11 if (l1.gt.ncoll.or.l2.gt.ncoll) go to 48                          extp-209
      ly=niv(l1,l2,1)+iabs(ml)-1                                        extp-210
      if (ly.gt.niv(l1,l2,2)) go to 49                                  extp-211
      lx=iq(1,ly)                                                       extp-212
      if (ml.gt.0) go to 12                                             extp-213
      lx=ivy(6,lx)                                                      extp-214
      if (lx.le.0) go to 50                                             extp-215
   12 if (lo(100)) go to 13                                             extp-216
      if ((ityp.eq.5).or.(ityp.eq.6)) lx=ivy(3,lx)                      extp-217
      if (ityp.ge.7) lx=ivy(ityp-3,lx)                                  extp-218
   13 lz=lx+npp                                                         extp-219
      if (nst.eq.0) nst=1                                               extp-220
      if (.not.lo(73)) write (mw,1002) (aa(k,ityp),k=1,3),l1,l2,ml      extp-221
c test it is not already read and that there is place                   extp-222
   14 if (ll(1,ityp,lz).ne.-1) go to 51                                 extp-223
      if (nma+31.gt.idt) call memo('extp',idt,nma+32)                   extp-224
      ntot=ntot-1                                                       extp-225
      nna=2*nma-1                                                       extp-226
      nval(nna)=8*lz+ityp                                               extp-227
      nval(nna+2)=nfold                                                 extp-228
      if (itypx.lt.0.or.l1x.le.0) go to 21                              extp-229
      nval(nna+5)=nma                                                   extp-230
      nmd=nma+3                                                         extp-231
      ll(1,ityp,lz)=nmd                                                 extp-232
      val(nmd)=1.d0                                                     extp-233
      if (mint.lt.0) read (mr,1003,err= 59 ) val(nmd)                   extp-234
c use of already stored form factor/test existence of copied form factorextp-235
      if (ityp.ne.itypx) go to 52                                       extp-236
      if (ml.ne.0) go to 15                                             extp-237
      if (l1x.ne.l2x.or.l1x.gt.ncolt) go to 53                          extp-238
      lzx=ipi(5,l1x)                                                    extp-239
      if (.not.lo(73)) write (mw,1004) l1x,itypx,l1                     extp-240
      go to 17                                                          extp-241
   15 if (l1x.gt.ncoll.or.l2x.gt.ncoll) go to 54                        extp-242
      lyy=niv(l1x,l2x,1)+mlx-1                                          extp-243
      if (lyy.gt.niv(l1x,l2x,2)) go to 55                               extp-244
      lxx=iq(1,lyy)                                                     extp-245
      if (lo(100)) go to 16                                             extp-246
      if ((ityp.eq.5).or.(ityp.eq.6)) lxx=ivy(3,lxx)                    extp-247
      if (ityp.ge.7) lxx=ivy(ityp-3,lxx)                                extp-248
   16 lzx=lxx+npp                                                       extp-249
      if (.not.lo(73)) write (mw,1005) l1x,l2x,mlx,itypx,l1,l2,ml       extp-250
   17 nmc=ll(1,ityp,lzx)                                                extp-251
      if (nmc.eq.-1) go to 56                                           extp-252
c use of already stored form factor/test possibility to copy            extp-253
      nmb=nval(2*nmc-2)                                                 extp-254
      itypx=-nval(2*nmb)                                                extp-255
      if (nval(2*nmb+1).eq.0.and.nfold.ne.0) nval(2*nmb+1)=-1           extp-256
      if (nval(2*nmb+1).ne.0.and.nfold.eq.0) nval(2*nma+1)=-1           extp-257
      if (itypx.ne.-16) go to 18                                        extp-258
      lzx=(nval(2*nmb+2)-1)/8                                           extp-259
      go to 17                                                          extp-260
   18 if (itypx.gt.-5.or.ml.eq.0) go to 20                              extp-261
      if (itypx.ne.-7.and.itypx.ne.-8) go to 19                         extp-262
      ll(1,ityp+2,lz)=1                                                 extp-263
      ntot=ntot-1                                                       extp-264
      nmb=nmb+itz(-itypx)                                               extp-265
      if (nval(2*nmb-1).eq.1) go to 19                                  extp-266
      if (nval(2*nmb+2).ne.1.or.nval(2*nmb+6).ne.1) go to 20            extp-267
      k=iq(2,ly)                                                        extp-268
      val(nmd)=dcgs(2*ivq(1,k),nval(2*nmb+3),nval(2*nmb+7),fac,nfa)*dsqrextp-269
     1t(2.d0*ivq(1,k)+1.d0)/val(nmc)                                    extp-270
      if (val(nmd).eq.0.d0) go to 57                                    extp-271
      go to 20                                                          extp-272
   19 if (iq(2,ly).ne.iq(2,lyy)) go to 58                               extp-273
   20 nval(nna+1)=16                                                    extp-274
      nval(nna+3)=8*lzx+ityp                                            extp-275
      nval(nna+4)=nma                                                   extp-276
      nmb=nma+2                                                         extp-277
      if (.not.lo(73)) write (mw,1006) nma,nmb,(nval(nna+i),i=0,4),nmd,vextp-278
     1al(nmd)                                                           extp-279
      ll(2,ityp,lz)=nmd                                                 extp-280
      nma=nmd+1                                                         extp-281
      go to 41                                                          extp-282
   21 nval(nna+3)=mint                                                  extp-283
      nval(nna+4)=nst                                                   extp-284
      if (itypx.lt.0) go to 23                                          extp-285
      nval(nna+5)=nma                                                   extp-286
      ll(1,ityp,lz)=nma+3                                               extp-287
c form factor read from cards                                           extp-288
      read (mr,1003,err= 59 ) val(nma+3),val(nma+4)                     extp-289
      if (val(nma+3).eq.0.d0) val(nma+3)=1.d0                           extp-290
      if (val(nma+4).eq.0.d0) val(nma+4)=1.d0                           extp-291
      nm=nma+5                                                          extp-292
   22 nmb=nm+3                                                          extp-293
      if (nmb.gt.idt) call memo('extp',idt,nmb)                         extp-294
      read (mr,1007,err= 59 ) (val(i),i=nm,nmb),last                    extp-295
      nm=nmb+1                                                          extp-296
      if (last.ne.ierm) go to 22                                        extp-297
      nvn=nma+2                                                         extp-298
      nm1=nvn+1                                                         extp-299
      nm2=nvn+2                                                         extp-300
      nm3=nvn+3                                                         extp-301
      nval(2*nma)=1-(nmb-nvn)/2                                         extp-302
      if (.not.lo(73)) write (mw,1008) nma,nvn,(nval(nna+i-1),i=1,6),nm1extp-303
     1,nm2,val(nm1),val(nm2),nm3,nmb,(val(i),i=nm3,nmb)                 extp-304
      if (nval(2*nma).gt.-4) go to 60                                   extp-305
      ll(2,ityp,lz)=nmb                                                 extp-306
      nma=nmb+1                                                         extp-307
      go to 41                                                          extp-308
c standard form factors                                                 extp-309
   23 if (itypx.lt.-10) go to 61                                        extp-310
      itypy=-itypx                                                      extp-311
      if (itypy.lt.9) go to 24                                          extp-312
      if ((ml.ne.0).and.(mlx.eq.0)) mlx=ivy(7,lx)                       extp-313
      if (mlx.lt.0) mlx=0                                               extp-314
      go to 25                                                          extp-315
   24 if (((itypy-1)*(itypy-5).ne.0).and.ml.eq.0) go to 62              extp-316
      if ((itypy.eq.1).and.(ml.ne.0).and.(ityp.ge.7)) go to 63          extp-317
      if ((itypy.ge.7).and.(ityp.gt.2)) go to 64                        extp-318
   25 nval(nna+1)=itypy                                                 extp-319
      nmb=nma+itz(itypy)                                                extp-320
      if (itypy.lt.5) go to 26                                          extp-321
      nval(nna+5)=l2x                                                   extp-322
      nval(nna+6)=mlx                                                   extp-323
      nval(nna+7)=-l1x                                                  extp-324
      if (itypy.eq.7.or.itypy.eq.8) go to 32                            extp-325
      nval(2*nmb-1)=nma                                                 extp-326
   26 nval(2*nmb)=nma                                                   extp-327
      ll(1,ityp,lz)=nmb+1                                               extp-328
      if (lo(73)) go to 27                                              extp-329
      if (itypy.ge.9) write (mw,1009) nma,nmb,(nval(nna+i-1),i=1,9)     extp-330
      if (itypy.eq.6) write (mw,1010) nma,nmb,(nval(nna+i-1),i=1,9)     extp-331
      if (itypy.eq.5) write (mw,1011) nma,nmb,(nval(nna+i-1),i=1,7)     extp-332
      if (itypy.lt.5) write (mw,1012) nma,nmb,(nval(nna+i-1),i=1,6)     extp-333
   27 if (itypy.ge.9) go to 29                                          extp-334
      nma=nmb+1                                                         extp-335
      nmb=nmb+4                                                         extp-336
      if (ityp.gt.6) nmb=nmb+1                                          extp-337
      read (mr,1003,err= 59 ) (val(i),i=nma,nmb)                        extp-338
      if (itypy.gt.6) go to 28                                          extp-339
      k=iabs(nst)                                                       extp-340
      if (k.eq.nst) go to 28                                            extp-341
      if (.not.lo(73)) write (mw,1013) val(nma),val(nma+1)              extp-342
      ex=wv(2,k)**.33333333333333d0                                     extp-343
      ey=ex                                                             extp-344
      if (lo(16)) ex=ex+wv(1,k)**.33333333333333d0                      extp-345
      ey=ey/ex                                                          extp-346
      val(nma+1)=val(nma+1)*ex                                          extp-347
      if ((.not.lo(16)).or.ml.eq.0) go to 28                            extp-348
      ityz=itypy                                                        extp-349
      if (ityz.ge.5) ityz=ityz-4                                        extp-350
      ityw=1                                                            extp-351
      k=iq(2,ly)                                                        extp-352
      if (ityp.gt.6) ityw=ityw*ivq(1,k)                                 extp-353
      if (lo(6)) ityw=ityw-1                                            extp-354
      if (ityz.gt.1) val(nma)=val(nma)*ey**((ityz-1)*ityw)              extp-355
   28 if (.not.lo(73)) write (mw,1014) nma,nmb,(val(i),i=nma,nmb)       extp-356
      if (itypy.lt.5) go to 40                                          extp-357
   29 nma=nmb+1                                                         extp-358
      nmc=nma                                                           extp-359
      if (itypy.ge.9) nmc=nmc+2                                         extp-360
      nmb=nmc+l2x-1                                                     extp-361
      if (nmb.gt.idt) call memo('extp',idt,nmb)                         extp-362
      read (mr,1003,err= 59 ) (val(i),i=nma,nmb)                        extp-363
      if ((itypy.ge.9).and.(val(nma).eq.0.d0)) val(nma)=1.d0            extp-364
      if (nst.gt.0.or.itypy.ge.9) go to 31                              extp-365
      if (.not.lo(73)) write (mw,1015) (val(i),i=nma,nmb)               extp-366
      do 30 i=nma,nmb                                                   extp-367
      j=i-nma                                                           extp-368
      if (ityp.lt.7) j=0                                                extp-369
      if (.not.lo(6)) j=j+1                                             extp-370
   30 val(i)=val(i)*ey**j                                               extp-371
   31 if (lo(73)) go to 40                                              extp-372
      if (itypy.ge.9) write (mw,1016) nma,nmb,val(nma),val(nma+1),l2x,(iextp-373
     1,val(i),i=nmc,nmb)                                                extp-374
      if (itypy.lt.9) write (mw,1017) nma,nmb,l2x,(i,val(i),i=nma,nmb)  extp-375
      go to 40                                                          extp-376
   32 ll(1,ityp+2,lz)=1                                                 extp-377
      ntot=ntot-1                                                       extp-378
      if (lo(100)) go to 65                                             extp-379
      nval(nna+7)=-l1x                                                  extp-380
      if (mlx.eq.0) mlx=1                                               extp-381
      if ((mlx.lt.0.or.mlx.gt.3).or.(mlx.eq.3.and.itypy.eq.7)) go to 66 extp-382
      nval(nna+6)=mlx                                                   extp-383
      mly=mlx                                                           extp-384
      nmd=nma+2                                                         extp-385
      if (.not.lo(73)) write (mw,1018) nma,nmd,(nval(nna+i-1),i=1,6)    extp-386
      nmd=nmd+1                                                         extp-387
      k=iq(2,ly)                                                        extp-388
      if (mlx.gt.1) go to 34                                            extp-389
      do 33 i=1,3                                                       extp-390
   33 nval(nna+7+i)=ivq(i,k)                                            extp-391
      nval(nna+11)=nma                                                  extp-392
      nmb=nmd+2                                                         extp-393
      if (.not.lo(73)) write (mw,1019) nmd,nmb,(nval(nna+i),i=6,11)     extp-394
      nmc=nmb                                                           extp-395
      go to 36                                                          extp-396
   34 read (mr,1000) (nval(nna+i),i=7,14),nvc                           extp-397
      if (nval(nna+9).eq.1.and.nvc.eq.0) nval(nna+9)=-3                 extp-398
      nmb=nma+7                                                         extp-399
      nval(nna+15)=nma                                                  extp-400
      nmc=nmb+1                                                         extp-401
      val(nmc)=1.d0                                                     extp-402
      if (nval(nna+9).ne.1.or.nval(nna+13).ne.1.or.nvc.eq.0) go to 35   extp-403
      val(nmc)=dcgs(2*ivq(1,k),nval(nna+10),nval(nna+14),fac,nfa)*dsqrt(extp-404
     1dfloat(2*ivq(1,k)+1))                                             extp-405
      if (val(nmc).eq.0.d0) go to 57                                    extp-406
   35 if (.not.lo(73)) write (mw,1020) nmd,nmb,(nval(nna+i),i=6,15),nmc,extp-407
     1val(nmc)                                                          extp-408
   36 nmc=nmc+1                                                         extp-409
      ll(1,ityp,lz)=nmb+1                                               extp-410
      if (itypy.eq.8) go to 39                                          extp-411
   37 read (mr,1003,err= 59 ) (val(nmc+i-1),i=1,3*mlx)                  extp-412
      if (val(nmc+1).eq.0.d0) val(nmc+1)=wv(2,l1)                       extp-413
      if (val(nmc+2).eq.0.d0) val(nmc+2)=1.d0                           extp-414
      if (mlx.eq.1) go to 38                                            extp-415
      if (val(nmc+3).eq.0.d0) val(nmc+3)=val(nmc)                       extp-416
      if (val(nmc+4).eq.0.d0) val(nmc+4)=wv(2,l1)                       extp-417
      if (val(nmc+5).eq.0.d0) val(nmc+5)=1.d0                           extp-418
   38 nmb=nmc+3*mlx-1                                                   extp-419
      if (.not.lo(73)) write (mw,1021) nmc,nmb,(val(i),i=nmc,nmb)       extp-420
      go to 40                                                          extp-421
   39 nmb=nmc+10                                                        extp-422
      read (mr,1003,err= 59 ) (val(i),i=nmc,nmb)                        extp-423
      if (val(nmc+1).eq.0.d0) val(nmc+1)=wv(2,l1)                       extp-424
      if (val(nmc+2).eq.0.d0) val(nmc+2)=1.d0                           extp-425
      if (val(nmc+4).eq.0.d0) val(nmc+4)=35.d0                          extp-426
      if (.not.lo(73)) write (mw,1022) nmc,nmb,(val(i),i=nmc,nmb)       extp-427
      if (mlx.eq.1.and.mly.eq.2.and.val(nmc-10).lt.0.d0.and.val(nmc).lt.extp-428
     10.d0) go to 67                                                    extp-429
      nmc=nmb+1                                                         extp-430
      mlx=mlx-2                                                         extp-431
      if (mlx.eq.1) go to 37                                            extp-432
      if (mlx.eq.0) go to 39                                            extp-433
   40 ll(2,ityp,lz)=nmb                                                 extp-434
      nma=nmb+1                                                         extp-435
   41 if ((.not.lo(10)).or.lz.gt.npp) go to 10                          extp-436
      nmc=ll(1,ityp,lz)                                                 extp-437
      ex=val(nmc)                                                       extp-438
      if (ipp(1,2,lz).ne.0.and.ex.eq.0.d0.and.ityp.eq.2) go to 68       extp-439
      if (ipp(2,2,lz).ne.0.and.ex.eq.0.d0.and.ityp.eq.4) go to 69       extp-440
      if (pip(15,lz).ne.0.d0.and.ex.eq.0.d0.and.ityp.eq.1) go to 70     extp-441
      if (pip(7,lz).ne.0.d0.and.ex.eq.0.d0.and.ityp.eq.5) go to 71      extp-442
      if (pip(8,lz).ne.0.d0.and.ex.eq.0.d0.and.ityp.eq.6) go to 72      extp-443
      go to 10                                                          extp-444
   42 nval(2)=nfolt                                                     extp-445
      nval(3)=nma                                                       extp-446
      nval(4)=nma                                                       extp-447
      if (nfolt.eq.0) return                                            extp-448
      if (.not.lo(73)) write (mw,1023) nfold                            extp-449
      do 43 i=1,nfolt                                                   extp-450
      read (mr,1003,err= 77 ) val(nma),val(nma+1),val(nma+2)            extp-451
      if (.not.lo(73)) write (mw,1024) i,val(nma),val(nma+1),val(nma+2) extp-452
   43 nval(4)=nval(4)+3                                                 extp-453
      return                                                            extp-454
   44 write (mw,1025)                                                   extp-455
      go to 73                                                          extp-456
   45 write (mw,1026)                                                   extp-457
      go to 73                                                          extp-458
   46 write (mw,1027) ityp,nst,ncolt                                    extp-459
      go to 73                                                          extp-460
   47 write (mw,1028) ml,l1,l2,ncolt                                    extp-461
      go to 73                                                          extp-462
   48 write (mw,1029) ml,l1,l2,ncoll                                    extp-463
      go to 73                                                          extp-464
   49 write (mw,1030) ml,l1,l2                                          extp-465
      go to 73                                                          extp-466
   50 write (mw,1031) l1,l2,ml                                          extp-467
      go to 73                                                          extp-468
   51 write (mw,1032) l1,l2,ml,ityp                                     extp-469
      go to 73                                                          extp-470
   52 write (mw,1033) l1,l2,ml,ityp,l1x,l2x,mlx,itypx                   extp-471
      go to 73                                                          extp-472
   53 write (mw,1034) mlx,l1x,l2x,ncolt                                 extp-473
      go to 73                                                          extp-474
   54 write (mw,1035) mlx,l1x,l2x,ncoll                                 extp-475
      go to 73                                                          extp-476
   55 write (mw,1036) mlx,l1x,l2x,ncoll                                 extp-477
      go to 73                                                          extp-478
   56 write (mw,1037) mlx,l1x,l2x,itypx                                 extp-479
      go to 73                                                          extp-480
   57 write (mw,1038) nval(nna+8),nval(nna+12),k                        extp-481
      go to 73                                                          extp-482
   58 write (mw,1039) itypx,iq(2,lyy),iq(2,ly)                          extp-483
      go to 73                                                          extp-484
   59 write (mw,1040) ityp,lz                                           extp-485
      go to 73                                                          extp-486
   60 k=-nval(2*nma)                                                    extp-487
      write (mw,1041) k                                                 extp-488
      go to 73                                                          extp-489
   61 write (mw,1042) itypx                                             extp-490
      go to 73                                                          extp-491
   62 write (mw,1043) itypx,ityp                                        extp-492
      go to 73                                                          extp-493
   63 write (mw,1044) itypx,ityp                                        extp-494
      go to 73                                                          extp-495
   64 write (mw,1045) itypx,ityp                                        extp-496
      go to 73                                                          extp-497
   65 write (mw,1046) itypx                                             extp-498
      go to 73                                                          extp-499
   66 write (mw,1047) mlx,itypx                                         extp-500
      go to 73                                                          extp-501
   67 write (mw,1048) val(nmc-10),val(nmc)                              extp-502
      go to 73                                                          extp-503
   68 write (mw,1049) lz,ipp(1,2,lz),ex                                 extp-504
      go to 73                                                          extp-505
   69 write (mw,1050) lz,ipp(2,2,lz),ex                                 extp-506
      go to 73                                                          extp-507
   70 write (mw,1051) lz,lz,pip(15,lz),ex                               extp-508
      go to 73                                                          extp-509
   71 write (mw,1052) lz,lz,pip(7,lz),ex                                extp-510
      go to 73                                                          extp-511
   72 write (mw,1053) lz,lz,pip(8,lz),ex                                extp-512
   73 if (ntot.eq.0) go to 78                                           extp-513
      write (mw,1054) ntot,npp                                          extp-514
      do 76 j=1,npx                                                     extp-515
      do 75 i=1,8                                                       extp-516
      if (ll(1,i,j).ne.-1) go to 75                                     extp-517
      if (j.gt.npp) go to 74                                            extp-518
      write (mw,1055) (aa(k,i),k=1,3),j                                 extp-519
      go to 75                                                          extp-520
   74 write (mw,1056) (aa(k,i),k=1,3),j-npp                             extp-521
   75 continue                                                          extp-522
   76 continue                                                          extp-523
      go to 78                                                          extp-524
   77 write (mw,1057) i,nfold                                           extp-525
   78 write (mw,1058)                                                   extp-526
      stop                                                              extp-527
 1000 format (12i5)                                                     extp-528
 1001 format (/3a8,' potential nr(',i2,')')                             extp-529
 1002 format (/3a8,' transition potential from level(',i2,') to level(',extp-530
     1i2,') and the order ml =',i2)                                     extp-531
 1003 format (7f10.5)                                                   extp-532
 1004 format (' the elastic potential nr(',i2,') typ(',i1,') is copied textp-533
     1o nr(',i2,')')                                                    extp-534
 1005 format (' transition potential l1(',i2,') l2(',i2,') ml(',i2,') tyextp-535
     1p(',i2,') is copied to l1(',i2,') l2(',i2,') ml(',i2,')')         extp-536
 1006 format (' using parameters',i6,' to',i6,' for copy to:',i5,5x,'(coextp-537
     1py):',i3,5x,'fold =',i3,5x,'from:',i5,5x,'start:',i5/' using paramextp-538
     2eter',i6,' for multiplicative factor',d15.8)                      extp-539
 1007 format (f10.5,f20.10,f10.5,f20.10,a4)                             extp-540
 1008 format (' using parameters',i6,' to',i6,' to store:'/i5,5x,'nb poiextp-541
     1nts:',i5,5x,'fold:',i2,5x,'intg:',i2,5x,'step:',i2,5x,'start:',i5/extp-542
     25x,'parameters',i6,' to',i6,' to store:'/20x,'strength:',f15.6,10xextp-543
     3,'scale:',f15.6/' and parameters',i6,' to',i6,' to store:'/4(6x,'rextp-544
     4adius',7x,'potential',2x)/(4(2x,0p,f10.5,3x,1p,d15.7)))           extp-545
 1009 format (' using parameters',i6,' to',i6,' to store:'/i5,3x,'type:'extp-546
     1,i2,3x,'fold:',i2,3x,'intg:',i2,3x,'step:',i2,i6,' functions  l:',extp-547
     2i3,i4,' derivations  start:',i5)                                  extp-548
 1010 format (' using parameters',i6,' to',i6,' to store:'/i5,3x,'type:'extp-549
     1,i2,3x,'fold:',i2,3x,'intg:',i2,3x,'step:',i2,i6,' deformations   extp-550
     2lbet:',i5,5x,'kbet:',i5,5x,'start:',i5)                           extp-551
 1011 format (' using parameters',i6,' to',i6,' to store:'/i5,3x,'type:'extp-552
     1,i2,3x,'fold:',i2,3x,'intg:',i2,3x,'step:',i2,i6,' deformations',5extp-553
     2x,'start:',i5)                                                    extp-554
 1012 format (' using parameters',i6,' to',i6,' to store:',i4,3x,'type:'extp-555
     1,i2,3x,'fold:',i2,3x,'intg:',i2,3x,'step:',i2,5x,'start:',i5)     extp-556
 1013 format (' values read:',f12.6,3x,f9.6)                            extp-557
 1014 format (' using parameters',i6,' to',i6,' for'/' depth',f12.6,' meextp-558
     1v  radius',f10.6,' f  diffuseness',f9.6,' f at the power (1.+',f9.extp-559
     26,')',2x,f9.6,' (3rd coul. parm.)'/)                              extp-560
 1015 format (' deformations read:',8f10.5/(19x,8f10.5))                extp-561
 1016 format (' using parameters',i6,' to',i6,' for strength:',f12.6,10xextp-562
     1,'scale:',f12.6/' and to store',i5,' bessel function or legendre pextp-563
     2olynomials coefficients:'/(6(3x,i5,f10.5)))                       extp-564
 1017 format (' using parameters',i6,' to',i6,' for',i5,' deformations:'extp-565
     1/(6(3x,i5,f10.5)))                                                extp-566
 1018 format (' using parameters',i6,' to',i6,' to store:',i4,3x,'type:'extp-567
     1,i2,3x,'fold:',i2,3x,'intg:',i2,3x,'step:',i2,5x,'mult:',i3)      extp-568
 1019 format (' using parameters',i6,' to',i6,' to store:',i2,' functionextp-569
     1s   n =',i2,3x,'l =',i3,3x,'2*s =',i2,3x,'2*j =',i3,5x,'start:',i5extp-570
     2)                                                                 extp-571
 1020 format (' using parameters',i6,' to',i6,' to store:'/i5,' functionextp-572
     1s',2(2x,'n =',i2,3x,'l =',i3,3x,'2*s =',i2,3x,'2*j =',i3),5x,'starextp-573
     2t:',i5/' using parameter',i6,' for multiplicative factor',d18.8)  extp-574
 1021 format (' using parameters',i6,' to',i6,' to store:'/(' oscillatorextp-575
     1 parameter',f10.6,2x,'total mass',f12.6,2x,'particle mass',f12.6))extp-576
 1022 format (' using parameters',i6,' to',i6,' to store:'/' **** bindinextp-577
     1g energy',f12.6,' mev ****',2x,'total mass',f12.6,2x,'particle masextp-578
     2s',f12.6,2x,'product of charges',f8.2/' search on depth of real poextp-579
     3tential from',f12.6,' with reduced radius',f10.6,' fermi and diffuextp-580
     4seness',f10.6,' fermi'/' spin-orbit potential  depth:',f12.6,' mevextp-581
     5  radius:',f10.6,' f  diffuseness:',f9.6,' f  coulomb radius:',f10extp-582
     6.6,' f'/)                                                         extp-583
 1023 format (/2x,i3,' sets of folding parameters')                     extp-584
 1024 format (2x,i2,5x,' v =',f12.6,5x,' r =',f9.6,5x,' a =',f9.6)      extp-585
 1025 format (' external form factors not allowed with schroedinder equiextp-586
     1valent of dirac equation')                                        extp-587
 1026 format (' input error in the first card defining the potential')  extp-588
 1027 format (/' ityp =',i5,' not allowed or nst =',i5,' larger than ncoextp-589
     1lt =',i3)                                                         extp-590
 1028 format (' with ml =',i2,' l1 =',i3,' is not equal to l2 =',i3,' orextp-591
     1 is larger than ncolt =',i3)                                      extp-592
 1029 format (' with ml =',i3,' l1 =',i3,' or l2 =',i3,' is larger than extp-593
     1ncoll =',i3)                                                      extp-594
 1030 format (' ml =',i3,' too large between levels l1 =',i3,' and l2 ='extp-595
     1,i3)                                                              extp-596
 1031 format (' there is no correction term of the form factor for l1 ='extp-597
     1,i3,'  l2 =',i3,'  ml =',i3)                                      extp-598
 1032 format (' the form factor for l1 =',i3,'  l2 =',i3,'  ml =',i3,'  extp-599
     1and ityp =',i2,' is already read or does not have to be read')    extp-600
 1033 format (/' different types not allowed to copy for form factors l1extp-601
     1/l2/ml/ityp/l1x/l2x/mlx/itypx :'/30x,8i5)                         extp-602
 1034 format (' with mlx =',i2,' l1x =',i3,' is not equal to l2x =',i3,'extp-603
     1 or is larger than ncolt =',i3)                                   extp-604
 1035 format (' with mlx =',i3,' l1x =',i3,' or l2x =',i3,' is larger thextp-605
     1an ncoll =',i3)                                                   extp-606
 1036 format (' mlx =',i3,' too large between levels l1x =',i3,' and l2xextp-607
     1 =',i5)                                                           extp-608
 1037 format (' form factor defined by l1x =',i3,'  l2x =',i3,'  mlx =',extp-609
     1i3,'  itypx =',i3,' not yet defined')                             extp-610
 1038 format (' no particle-hole coupling with 2*jp =',i3,' and 2*jh =',extp-611
     1i3,' to l =',i3)                                                  extp-612
 1039 format (' copy with itypx =',i3,' not allowed between transitions extp-613
     1with quantum numbers',i2,' and',i2)                               extp-614
 1040 format (' input error for the potential (',i2,',',i2,')')         extp-615
 1041 format (' number of data',i4,' less than 4 which arenecessary to iextp-616
     1nterpolate.')                                                     extp-617
 1042 format (/' itypx =',i5,' not allowed for standard form factors')  extp-618
 1043 format (' itypx,ityp =',2i5,'  not allowed: central potential cannextp-619
     1ot be derivative or bound function')                              extp-620
 1044 format (' itypx,ityp =',2i5,'  not allowed: coulomb transition forextp-621
     1m factor must be derivative')                                     extp-622
 1045 format (' itypx,ityp =',2i5,'  not allowed: bound state function cextp-623
     1an be only real or imaginary transition potential')               extp-624
 1046 format (' itypx =',i3,'  not allowed in dirac formalism')         extp-625
 1047 format (' l2x =',i3,'  not allowed with itypx =',i4)              extp-626
 1048 format (' for ityp=-8 and two functions, both are unbounded',2f12.extp-627
     16)                                                                extp-628
 1049 format (' the potential',i4,' cannot be used for dispersion relatiextp-629
     1ons because the volume imaginary strength is 0:'/10x,'nv =',i3,'  extp-630
     1wv =',d13.6)                                                      extp-631
 1050 format (' the potential',i4,' cannot be used for dispersion relatiextp-632
     1ons because the surface imaginary strength is 0:'/10x,'ns =',i3,' extp-633
     2 ws =',d13.6)                                                     extp-634
 1051 format (' the potential',i4,' cannot be used with variation of theextp-635
     1 hartree-fock potential of which the strength is 0':/10x,'pip(15,'extp-636
     2,i2,') =',d13.6,'  v =',d13.6)                                    extp-637
 1052 format (' the potential',i4,' cannot be used with variation of theextp-638
     1 real spin-orbit of which the strength is 0':/10x,'pip(7,',i2,') =extp-639
     2',d13.6,'  vls =',d13.6)                                          extp-640
 1053 format (' the potential',i4,' cannot be used with variation of theextp-641
     1 imaginary spin-orbit of which the strength is 0':/10x,'pip(8,',i2extp-642
     2,') =',d13.6,'  wls =',d13.6)                                     extp-643
 1054 format (i6,' form factors to read, for (ityp, n  )  ( potentials fextp-644
     1or n smaller than',i2,' transitions after)')                      extp-645
 1055 format (10x,3a8,' missing for potential',i4)                      extp-646
 1056 format (10x,3a8,' missing for transition',i4)                     extp-647
 1057 format (' input error for the',i4,'th set of the',i4,' sets of folextp-648
     1ding parameters to be read')                                      extp-649
 1058 format (//' in extp  ...  stop  ...')                             extp-650
      end                                                               extp-651
c 27/06/06                                                      ecis06  dcgs-000
      function dcgs(l,j1,j2,fac,nfa)                                    dcgs-001
c computation of singular clebsch-gordan coefficients.                  dcgs-002
c input:     l,j1,j2: double value of angular momenta.                  dcgs-003
c            fac:     table of logarithm of factorials.                 dcgs-004
c            nfa:     length of fac.                                    dcgs-005
c output:                                                               dcgs-006
c                                                                       dcgs-007
c                                 /~~~~~~~~~~~~~~~~   ( j2   l   j1  )  dcgs-008
c  cgs(l,j1,j2) = (-)**(j1+1/2)  / (2*j1+1)*(2*j2+1)  (              )  dcgs-009
c                                                     (-1/2  0   1/2 )  dcgs-010
c  when j1 and j2 are half-integers,                                    dcgs-011
c                              ( j2  l  j1 )                            dcgs-012
c  cgs(l,j1,j2) = (-)**(j1-1)  (           )                            dcgs-013
c                              (  0  0  0  )                            dcgs-014
c  when j1 and j2  are integers.                                        dcgs-015
c                                                                       dcgs-016
c***********************************************************************dcgs-017
      implicit real*8 (a-h,o-z)                                         dcgs-018
      dimension fac(*)                                                  dcgs-019
      if (l.lt.0.or.j1.lt.0.or.j2.lt.0) go to 1                         dcgs-020
      ll=l+j1+j2+2                                                      dcgs-021
      lt=ll/2                                                           dcgs-022
      if (2*lt.ne.ll) go to 1                                           dcgs-023
      if (lt.ge.nfa) go to 1                                            dcgs-024
      l1=lt-j1                                                          dcgs-025
      l2=lt-j2                                                          dcgs-026
      l3=lt-l                                                           dcgs-027
      if (l1.le.0.or.l2.le.0.or.l3.le.0) go to 1                        dcgs-028
      l4=lt+1                                                           dcgs-029
      n1=(l1+1)/2                                                       dcgs-030
      n2=(l2+1)/2                                                       dcgs-031
      n3=(l3+1)/2                                                       dcgs-032
      n4=(l4+1)/2                                                       dcgs-033
      dcgs=dexp(fac(n4)-fac(n1)-fac(n2)-fac(n3)-.5d0*(fac(l4)-fac(l1)-fadcgs-034
     1c(l2)-fac(l3)))                                                   dcgs-035
      if (2*(n1/2).ne.n1) dcgs=-dcgs                                    dcgs-036
      if (n4-n1-n2-n3+1) 3 , 2 , 1                                      dcgs-037
    1 dcgs=0.d0                                                         dcgs-038
    2 dcgs=2.d0*dcgs                                                    dcgs-039
    3 return                                                            dcgs-040
      end                                                               dcgs-041
c 26/04/07                                                      ecis06  conu-000
      subroutine conu(ix,ipi,wv,ipim,wvm,nci,xd,scn,kxt,lo)             conu-001
c discretisation of continua for compound nucleus.                      conu-002
c input:     ix:      0 for count of points,                            conu-003
c                     not 0 for computation of points, weights, ...     conu-004
c            ipi:     integer values for the description of channels    conu-005
c                     (see calx).                                       conu-006
c            wv:      floating values for the description of channels   conu-007
c                     (see calx).                                       conu-008
c            scn:     descriptions of level densities:                  conu-009
c                     1-sa  2-ux   3-tau  4-sg   5-e0   6-ex   7-nz     conu-010
c                     (see input description).                          conu-011
c            lo(i):   logical controls:                                 conu-012
c               lo(8)  =.true. relativistic kinematics.                 conu-013
c               lo(44) =.true. coulomb corrections.                     conu-014
c               lo(109)=.true. for dirac potentials.                    conu-015
c output:    ipim:    ipi for continua of compound nucleus.             conu-016
c            wvm:     wv for continua of compound nucleus.              conu-017
c            nci:     starting and final addresses for continua.        conu-018
c            xd:      steps of discretisation of continua,              conu-019
c                     energy and spin dependence of level densities     conu-020
c            kxt:     number of transmission coefficients               conu-021
c                                                                       conu-022
c for the common  /dcons/ see calc.                                     conu-023
c for the common  /ncomp/ see calx.                                     conu-024
c                                                                       conu-025
c significance of the quantities in common /dcons/:                     conu-026
c  cm:        atomic mass in mev.                                       conu-027
c   used:     cm.                                                       conu-028
c                                                                       conu-029
c significance of the quantities in common /ncomp/:                     conu-030
c  ncont:     number of continuum for compound nucleus.                 conu-031
c  ncons:     number of level densities needed.                         conu-032
c  nie:       number of uncoupled states added for discretisation.      conu-033
c  ncolx:     total number of levels without discretisation.            conu-034
c  acn1:      ratio size/step for discretisation of a continuum.        conu-035
c  acn2:      maximum number of steps by mev for a continuum.           conu-036
c   defined:  nie.                                                      conu-037
c   used:     ncont,ncons,nie,ncolx,acn1,acn2.                          conu-038
c***********************************************************************conu-039
      implicit real*8 (a-h,o-z)                                         conu-040
      logical lo(150)                                                   conu-041
      dimension ipi(11,*),wv(22,*),ipim(11,*),wvm(22,*),nci(2,*),xd(3,*)conu-042
     1,scn(7,*)                                                         conu-043
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            conu-044
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqconu-045
     1,acn1,acn2,az(18)                                                 conu-046
      common /inout/ mr,mw,ms                                           conu-047
c discretisation of continuum for compound nucleus.                     conu-048
      nie=0                                                             conu-049
      if (ix.eq.0) go to 1                                              conu-050
      kxt=ipi(8,ncolx+1-ncont)                                          conu-051
    1 do 12 i=1,ncont                                                   conu-052
      j=i+ncons-ncont                                                   conu-053
      scnb=dexp(2.d0*dsqrt(scn(1,j)*scn(2,j))-(scn(6,j)-scn(5,j))/scn(3,conu-054
     1j))*scn(3,j)/(scn(1,j)**.5d0*scn(2,j)**1.5d0)                     conu-055
      iv=i-ncont+ncolx                                                  conu-056
      nci(1,i)=nie+1                                                    conu-057
      if (wv(3,iv).le.0.d0) go to 11                                    conu-058
      ne=0                                                              conu-059
      e=wv(3,iv)                                                        conu-060
      acn3=1.d0/acn2                                                    conu-061
      if (e*acn2.lt.1.d0) acn3=e/1.9d0                                  conu-062
    2 if (e.le.0.d0) go to 11                                           conu-063
      nie=nie+1                                                         conu-064
      if (ne.ne.0) go to 4                                              conu-065
      if (e.lt.acn1*acn3) go to 3                                       conu-066
      estp=e/acn1                                                       conu-067
      go to 5                                                           conu-068
    3 ne=idint(e/acn3+1.d0)                                             conu-069
      if (ne.eq.1) ne=2                                                 conu-070
      acn3=e/dfloat(ne)*1.000001d0                                      conu-071
    4 estp=acn3                                                         conu-072
    5 if (e.lt.estp) estp=e                                             conu-073
      ecn=e-.5d0*estp                                                   conu-074
      e=e-estp                                                          conu-075
      if (ix.eq.0) go to 2                                              conu-076
      do 6 k=1,22                                                       conu-077
    6 wvm(k,nie)=wv(k,iv)                                               conu-078
      do 7 k=1,11                                                       conu-079
    7 ipim(k,nie)=ipi(k,iv)                                             conu-080
      wvm(3,nie)=ecn                                                    conu-081
      xd(2,nie)=estp                                                    conu-082
      if (lo(8)) go to 8                                                conu-083
      wvm(13,nie)=wvm(3,nie)*(wvm(1,nie)+wvm(2,nie))/wvm(2,nie)         conu-084
      go to 9                                                           conu-085
    8 wvm(13,nie)=wvm(3,nie)*(wvm(3,nie)/(2.d0*cm)+wvm(1,nie)+wvm(2,nie)conu-086
     1)/wvm(2,nie)                                                      conu-087
    9 ly=4+idint(3.3d0*dsqrt(wvm(3,nie)))                               conu-088
      ipim(10,nie)=ly-1                                                 conu-089
      ipim(8,nie)=kxt                                                   conu-090
      kxt=kxt+ly*ipim(2,nie)                                            conu-091
      if (wv(3,1)-wvm(3,nie).gt.scn(6,j)) go to 10                      conu-092
      xd(1,nie)=xd(2,nie)*dexp((wv(3,1)-wvm(3,nie)-scn(5,j))/scn(3,j))/sconu-093
     1cn(3,j)                                                           conu-094
      xd(3,nie)=2.d0*scn(4,j)**2                                        conu-095
      go to 2                                                           conu-096
   10 exd=wv(3,1)-wvm(3,nie)+scn(2,j)-scn(6,j)                          conu-097
      ebyt=dsqrt(scn(1,j)*exd)                                          conu-098
      xd(1,nie)=xd(2,nie)*dexp(2.d0*ebyt)/(ebyt*exd*scnb)               conu-099
      xd(3,nie)=2.d0*scn(4,j)**2*dsqrt(exd/scn(2,j))                    conu-100
      go to 2                                                           conu-101
   11 if (ix.eq.0) go to 12                                             conu-102
      jy=nie-nci(1,i)+1                                                 conu-103
      write (mw,1000) i,jy                                              conu-104
      nci(2,i)=nie                                                      conu-105
   12 continue                                                          conu-106
      if (ix.ne.0) call khco(nie,wvm,ipim,wv(1,1),wv(8,1),lo)           conu-107
      return                                                            conu-108
 1000 format (' ***** start of',i4,'th continuum *****',5x,i5,' discreticonu-109
     1sation points.')                                                  conu-110
      end                                                               conu-111
c 20/08/06                                                      ecis06  ggdr-000
      subroutine ggdr(ipi,wv,scn,lo)                                    ggdr-001
c calculations related to giant dipole resonance.                       ggdr-002
c input:     ipi(3,*):multiplicity of the target.                       ggdr-003
c            wv(j,*): mass of particle and target for j=1 and 2,        ggdr-004
c                     centre of mass energy in mev for j=3.             ggdr-005
c            scn:     descriptions of level densities:                  ggdr-006
c                     1-sa  2-ux   3-tau  4-sg   5-e0   6-ex   7-nz     ggdr-007
c            lo(i):   logical controls:                                 ggdr-008
c               lo(81) =.true. hauser-feshbach corrections.             ggdr-009
c               lo(82) =.true. old simplified compound nucleus.         ggdr-010
c               lo(86) =.true. gamma emission in compound nucleus.      ggdr-011
c               lo(112)=.true. spin-orbit or compound nucleus parametersggdr-012
c                              are changed in search.                   ggdr-013
c               lo(115)=.true. first computation for this energy.       ggdr-014
c               lo(116)=.true. no output.                               ggdr-015
c output:    in common /ncomp/.                                         ggdr-016
c                                                                       ggdr-017
c for the common  /ncomp/ see calx.                                     ggdr-018
c                                                                       ggdr-019
c significance of the quantities in common /ncomp/:                     ggdr-020
c  nrd:       number of gamma transmission coefficients.                ggdr-021
c  ncont:     number of continuum for compound nucleus.                 ggdr-022
c  bz:        hauser-feshbach and moldauer's parameters described below.ggdr-023
c   bz(1):    square root of elastic enhancement.                       ggdr-024
c   bz(2):    if lo(82)=.true., spin cut-off parameter.                 ggdr-025
c             if lo(82)=.false., particle degrees of freedom.           ggdr-026
c   bz(3):    square root of level density parameter. if lo(82)=lo(87)= ggdr-027
c             .false., parameter bz(3) in moldauer's formula of input   ggdr-028
c             description.                                              ggdr-029
c   bz(4):    if lo(82)=lo(87)=.false., parameter bz(4) in same formula.ggdr-030
c   bz(5):    if lo(82)=lo(87)=.false., parameter bz(5) in same formula.ggdr-031
c  tg0:       slow s-wave neutron gamma width/spacing for normalisation.ggdr-032
c  bn:        neutron separation energy.                                ggdr-033
c  fnug:      radiative degrees of freedom.                             ggdr-034
c  egd:       energy of the giant dipole resonance.                     ggdr-035
c  ggd:       resonance width.                                          ggdr-036
c  tg1:       derived data for gamma in compound nucleus.               ggdr-037
c  sgsq:      derived data for gamma in compound nucleus.               ggdr-038
c   defined:  bz,egd,ggd,sgsq.                                          ggdr-039
c   used:     nrd,ncont,bz,tgo,bn,fnug,egd,ggd,tg1,sgsq.                ggdr-040
c                                                                       ggdr-041
c***********************************************************************ggdr-042
      implicit real*8 (a-h,o-z)                                         ggdr-043
      logical lo(150)                                                   ggdr-044
      dimension ipi(11,*),wv(22,*),scn(7)                               ggdr-045
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqggdr-046
     1,acn1,acn2,az(6),bz(5),tg0,bn,fnug,egd,ggd,tg1,sgsq               ggdr-047
      common /inout/ mr,mw,ms                                           ggdr-048
      if (.not.lo(81)) return                                           ggdr-049
      bz(2)=dabs(bz(2))                                                 ggdr-050
      if (lo(82)) bz(3)=bz(1)*bz(1)-1.d0                                ggdr-051
      if (.not.(lo(112).or.lo(115))) return                             ggdr-052
c  gamma ray input.                                                     ggdr-053
      if ((.not.lo(86)).or.(nrd.ne.0)) return                           ggdr-054
      xfr=0.5d0                                                         ggdr-055
      na=idint(wv(2,1)+wv(1,1)+.5d0)                                    ggdr-056
      aa=dfloat(na)                                                     ggdr-057
      nz=idint(scn(7)+.1d0)                                             ggdr-058
      nn=na-nz                                                          ggdr-059
      zz=dfloat(nz*nn)                                                  ggdr-060
      kgd=0                                                             ggdr-061
      if (egd.eq.0.d0) egd=163.d0*dsqrt(zz)/(aa**1.3333333d0)           ggdr-062
      if (egd.lt.0.d0) go to 1                                          ggdr-063
      kgd=1                                                             ggdr-064
      if (ggd.le.0.d0) ggd=5.d0                                         ggdr-065
    1 if (.not.lo(116)) write (mw,1000) na,nz,nn,bn,fnug,scn(4)         ggdr-066
      atg0=dabs(tg0)                                                    ggdr-067
      if (.not.lo(116)) write (mw,1001) atg0                            ggdr-068
      if (kgd.eq.0.and..not.lo(116)) write (mw,1002)                    ggdr-069
      if (kgd.eq.1.and..not.lo(116)) write (mw,1003) egd,ggd,xfr        ggdr-070
      sgsq=2.d0*scn(4)**2                                               ggdr-071
      roj=0.d0                                                          ggdr-072
      ecm=0.d0                                                          ggdr-073
    2 tg=0.d0                                                           ggdr-074
      elim=bn+ecm                                                       ggdr-075
      elo=0.d0                                                          ggdr-076
    3 ehi=elo+0.05d0                                                    ggdr-077
      if (ehi.ge.elim) ehi=elim                                         ggdr-078
      eps=(ehi+elo)/2.d0                                                ggdr-079
      esq=eps*eps                                                       ggdr-080
      tint=(ehi-elo)*eps*esq                                            ggdr-081
      eee=-egd*egd+esq                                                  ggdr-082
      if (kgd.eq.1) tint=tint*eps/(esq*ggd*ggd+eee*eee)                 ggdr-083
      exc=bn+ecm-eps                                                    ggdr-084
      if (exc.gt.scn(6)) go to 4                                        ggdr-085
      ebyt=(exc-scn(5))/scn(3)                                          ggdr-086
      tint=tint*dexp(ebyt)/scn(3)                                       ggdr-087
      go to 5                                                           ggdr-088
    4 exd=exc+scn(2)-scn(6)                                             ggdr-089
      ebyt=dsqrt(scn(1)*exd)                                            ggdr-090
      scnb=dexp(2.d0*dsqrt(scn(1)*scn(2))-(scn(6)-scn(5))/scn(3))*scn(3)ggdr-091
     1/(scn(1)**.5d0*scn(2)**1.5d0)                                     ggdr-092
      tint=tint*dexp(2.d0*ebyt)/(ebyt*exd*scnb)                         ggdr-093
    5 tg=tg+tint                                                        ggdr-094
      if (ehi.eq.elim) go to 6                                          ggdr-095
      elo=ehi                                                           ggdr-096
      go to 3                                                           ggdr-097
    6 if (ecm.ne.0.d0) go to 9                                          ggdr-098
      temp=tg                                                           ggdr-099
      jd=ipi(3,1)-1                                                     ggdr-100
      n1=iabs(jd-1)                                                     ggdr-101
      n2=jd+1                                                           ggdr-102
      do 8 i=n1,n2,2                                                    ggdr-103
      n3=iabs(i-2)                                                      ggdr-104
      n4=i+2                                                            ggdr-105
      do 7 j=n3,n4,2                                                    ggdr-106
      dex=-dfloat(j+1)**2/(sgsq*4.d0)                                   ggdr-107
    7 roj=roj+dexp(dex)*dfloat(j+1)/sgsq                                ggdr-108
    8 continue                                                          ggdr-109
      ctg=atg0/(temp*roj)                                               ggdr-110
      ecm=wv(3,1)                                                       ggdr-111
      go to 2                                                           ggdr-112
    9 tg1=tg*ctg                                                        ggdr-113
      return                                                            ggdr-114
 1000 format (/'    gamma ray channel parameters :'//'   a=',i3,'  z=',iggdr-115
     13,'  n=',i3,5x,f9.3,' mev  neutron binding',5x,f6.2,' radiative d.ggdr-116
     2 of f.',5x,'sigma=',f6.3)                                         ggdr-117
 1001 format ('   normalised to slow s-wave neutron gamma widths/spacingggdr-118
     1s =',d12.4)                                                       ggdr-119
 1002 format ('   e1 strong coupling model.')                           ggdr-120
 1003 format ('   e1 giant resonance at ',f7.2,' mev   width=',f7.2,' meggdr-121
     1v',5x,'exchange fraction=',f5.2)                                  ggdr-122
      end                                                               ggdr-123
c 11/01/07                                                      ecis06  disp-000
      subroutine disp(ipi,wv,ipp,pip,nval,val,nie,lo)                   disp-001
c computation of the depths of real surface and volume contributions    disp-002
c obtained by dispersion relations from the imaginary volume and        disp-003
c surface potentials. computation of the corrections to the imaginary   disp-004
c potentials due to differences of energy. variation of hartree-fock anddisp-005
c spin-orbit potentials.                                                disp-006
c input:     ipi(5,i):potential for the level i.                        disp-007
c            wv(3,i): centre of mass energy of the level i.             disp-008
c            ipp,pip: equivalent by call, parameters of the dispersion  disp-009
c                     relations (see input description).                disp-010
c            nval,val:optical potentials.                               disp-011
c            nie:     total number of levels, negative value for        disp-012
c                     compound continua.                                disp-013
c            lo(i):   logical controls:                                 disp-014
c               lo(7)  =.true. matrix element and form factors read.    disp-015
c               lo(10) =.true. dispersion relations for potentials.     disp-016
c               lo(109)=.true. for dirac potentials.                    disp-017
c               lo(116)=.true. no output.                               disp-018
c output:    wv(j,i): correction to potentials:                         disp-019
c                     to volume/scalar imaginary potential for j=14,    disp-020
c                     to volume/scalar real potential for j=15,         disp-021
c                     to surface/vector imaginary potential for j=16,   disp-022
c                     to surface/vector real potential for j=17,        disp-023
c                     to sp-o/tensor imaginary potential for j=18,      disp-024
c                     to sp-o/tensor real potential for j=19.           disp-025
c***********************************************************************disp-026
      implicit real*8 (a-h,o-z)                                         disp-027
      logical lo(150)                                                   disp-028
      dimension ipi(11,*),wv(22,*),ipp(34,*),pip(17,*),nval(2,*),val(42,disp-029
     1*),ww(9),av(3,2,3),vv(3),en(4),wx(9,4)                            disp-030
      common /inout/ mr,mw,ms                                           disp-031
c input of dispersion coefficients.                                     disp-032
      if (lo(10).and.(ipp(2,1).eq.-1)) call ldis(wv,ipp,pip,nval,val,lo)disp-033
      ncolt=iabs(nie)                                                   disp-034
      ipz=0                                                             disp-035
      if (.not.lo(116).and.lo(10)) write (mw,1000)                      disp-036
c loop on levels.                                                       disp-037
      do 24 iv=1,ncolt                                                  disp-038
      do 1 i=1,9                                                        disp-039
    1 ww(i)=0.d0                                                        disp-040
      ipi(11,iv)=max0(1,ipi(11,iv))                                     disp-041
      ip=ipi(5,iv)                                                      disp-042
      if (.not.lo(10)) go to 22                                         disp-043
      iz=3                                                              disp-044
      if (ipp(1,ip).ge.0) iz=13                                         disp-045
      if (ipp(6,ip).eq.0) go to 7                                       disp-046
      if (ncolt.eq.nie) go to 6                                         disp-047
c input of parameters for a continuum.                                  disp-048
      if (ip.eq.ipz) go to 2                                            disp-049
      read (mr,1001) en                                                 disp-050
      read (mr,1002) wx                                                 disp-051
      if (.not.lo(116)) write (mw,1003) (en(i),(wx(j,i),j=1,9),i=1,4)   disp-052
c interpolation of parameters for a continuum.                          disp-053
    2 y=wv(iz,iv)                                                       disp-054
      do 5 l=1,4                                                        disp-055
      x=0.d0                                                            disp-056
      do 3 k=1,4                                                        disp-057
      if (k.eq.l) go to 3                                               disp-058
      x=x*(y-en(k))/(en(l)-en(k))                                       disp-059
    3 continue                                                          disp-060
      do 4 i=1,9                                                        disp-061
    4 ww(i)=ww(i)+x*wx(i,l)                                             disp-062
    5 continue                                                          disp-063
      go to 22                                                          disp-064
c input of parameters for a state.                                      disp-065
    6 read (mr,1002) ww                                                 disp-066
      go to 22                                                          disp-067
c search on depths of real volume, imaginary volume and imaginary       disp-068
c spin-orbit potentials                                                 disp-069
    7 if (lo(7)) go to 8                                                disp-070
      vv(1)=val(1,ip)                                                   disp-071
      vv(2)=val(5,ip)                                                   disp-072
      vv(3)=val(21,ip)                                                  disp-073
      go to 9                                                           disp-074
    8 vv(1)=val(nval(1,8*ip-5),1)                                       disp-075
      vv(2)=val(nval(1,8*ip-4),1)                                       disp-076
      vv(3)=val(nval(1,8*ip),1)                                         disp-077
    9 ef=pip(5,ip)                                                      disp-078
      ep=pip(6,ip)                                                      disp-079
      eo=ep-ef                                                          disp-080
      yy=pip(4,ip)-ef                                                   disp-081
      y=wv(iz,iv)-ef                                                    disp-082
c spin-orbit or tensor potential.                                       disp-083
      if (pip(9,ip).ne.0.d0) ww(7)=-pip(9,ip)*(y-yy)/vv(3)              disp-084
      if (pip(8,ip).ne.0.d0) ww(9)=dexp(-pip(8,ip)*(y-yy))-1.d0         disp-085
c working array av(i,j,k) with i=1,2,3 for volume/scalar/vector         disp-086
c form-factor, j=1,2 for two terms, k=1 for reference potential,        disp-087
c k=2 for actual potential, k=3 for intermediate results.               disp-088
      do 21 i=1,3                                                       disp-089
      nm=ipp(i+2,ip)                                                    disp-090
      if (nm.eq.0) go to 19                                             disp-091
      n=iabs(nm)                                                        disp-092
      do 14 k=1,2                                                       disp-093
      b=pip(3*i+k+6,ip)                                                 disp-094
      do 10 l=1,2                                                       disp-095
   10 av(i,k,l)=0.d0                                                    disp-096
      if (dabs(yy).gt.eo) av(i,k,1)=(dabs(yy)-eo)**n/((dabs(yy)-eo)**n+bdisp-097
     1**n)                                                              disp-098
      if (dabs(y).gt.eo) av(i,k,2)=(dabs(y)-eo)**n/((dabs(y)-eo)**n+b**ndisp-099
     1)                                                                 disp-100
      if (lo(109).or.(i.ne.2)) go to 11                                 disp-101
      if ((n.gt.0).and.((pip(14,ip).ne.0.d0).or.(pip(15,ip).ne.0.d0))) gdisp-102
     1o to 20                                                           disp-103
   11 av(i,k,3)=dvwi(y,eo,n,b,0.d0,0.d0)                                disp-104
      if ((i.eq.3).or.(n.eq.nm)) go to 15                               disp-105
      if (k.eq.1) go to 14                                              disp-106
c sum or difference of two volume terms.                                disp-107
      do 13 j=1,3                                                       disp-108
   13 av(i,1,j)=pip(3*i+9,ip)*av(i,1,j)+(1.d0-pip(3*i+9,ip))*av(i,2,j)  disp-109
   14 continue                                                          disp-110
   15 if ((n.lt.0).or.(i.eq.2)) go to 18                                disp-111
c volume correction for large energy contributions.                     disp-112
      ea=pip(7,ip)                                                      disp-113
      if (ea.eq.0.d0) go to 18                                          disp-114
      cn=pip(12,ip)                                                     disp-115
      if (ipp(2,ip).eq.0) go to 16                                      disp-116
c large negative energies.                                              disp-117
      n2=iabs(ipp(2,ip))                                                disp-118
      if (yy.lt.-ea) av(1,1,1)=av(1,1,1)*(1.d0-(yy+ea)**n2/((yy+ea)**n2+disp-119
     1ea**n2)*dexp(cn*(dsqrt(ea+ef)-dsqrt(-yy+ef))))                    disp-120
      if (y.lt.-ea) av(1,1,2)=av(1,1,2)*(1.d0-(y+ea)**n2/((y+ea)**n2+ea*disp-121
     1*n2)*dexp(cn*(dsqrt(ea+ef)-dsqrt(-y+ef))))                        disp-122
      av(1,1,3)=av(1,1,3)+dlne(ipp(2,ip),n,ea,ef,ep,b,cn,wv(iz,iv))     disp-123
   16 if (pip(11,ip).eq.0.d0) go to 18                                  disp-124
c large positive energy term.                                           disp-125
      el=ef+ea                                                          disp-126
      ell=dsqrt(el)                                                     disp-127
      av(1,2,1)=0.d0                                                    disp-128
      av(1,2,2)=0.d0                                                    disp-129
      if (yy.gt.ea) av(1,2,1)=(dsqrt(yy+ef)+ell*(el/(yy+ef)-3.d0)/2.d0)*disp-130
     1dexp(-cn*(dsqrt(yy+ef)-ell))                                      disp-131
      if (y.gt.ea) av(1,2,2)=(dsqrt(y+ef)+ell*(el/(y+ef)-3.d0)/2.d0)*dexdisp-132
     1p(-cn*(dsqrt(y+ef)-ell))                                          disp-133
      av(1,2,3)=dlpe(el,y+ef,ef,cn)                                     disp-134
      xx=(vv(2)-av(1,2,1)*pip(11,ip))/av(1,1,1)                         disp-135
      do 17 k=1,3                                                       disp-136
   17 av(1,1,k)=xx*av(1,1,k)+pip(11,ip)*av(1,2,k)                       disp-137
   18 ww(3*i-2)=av(i,1,2)/av(i,1,1)-1.d0                                disp-138
      if ((i.ne.3).or.(nm.gt.0)) ww(3*i-1)=av(i,1,3)/av(i,1,1)          disp-139
   19 if ((i.eq.1).and.(pip(17,ip).ne.0.d0)) ww(3)=dexp(-pip(17,ip)*(y-ydisp-140
     1y))-1.d0                                                          disp-141
      go to 21                                                          disp-142
c surface form-factor.                                                  disp-143
   20 cs=pip(14,ip)                                                     disp-144
      cn=pip(15,ip)                                                     disp-145
      av(2,1,1)=av(2,1,1)*dexp(-cn*yy-cs*dabs(yy))                      disp-146
      av(2,1,2)=av(2,1,2)*dexp(-cn*y-cs*dabs(y))                        disp-147
      ww(4)=av(2,1,2)/av(2,1,1)-1.d0                                    disp-148
      ww(5)=dvwi(y,eo,n,b,cs,cn)/av(2,1,1)                              disp-149
   21 continue                                                          disp-150
   22 do 23 i=1,9                                                       disp-151
   23 wv(i+13,iv)=ww(i)                                                 disp-152
      ipz=ip                                                            disp-153
      if (.not.lo(116).and.lo(10)) write (mw,1004) ip,iv,pip(4,ip),wv(izdisp-154
     1,iv),ww                                                           disp-155
   24 continue                                                          disp-156
      return                                                            disp-157
 1000 format (' potential refer. energy  actual energy',10x,'volume/scaldisp-158
     1ar correction',21x,'surface/vector correction'/5x,'level',37x,'spidisp-159
     2n-orbit/tensor correction'/38x,2('   imaginary      dispersion    disp-160
     3 real',8x))                                                       disp-161
 1001 format (4f10.5)                                                   disp-162
 1002 format (6f10.5/3f10.5)                                            disp-163
 1003 format (' energy for interpolation',20x,'coefficients'/1p,7d15.6/6disp-164
     10x,3d15.6)                                                        disp-165
 1004 format (1x,i4,i5,1p,2d14.6,6d15.8/38x,3d15.8)                     disp-166
      end                                                               disp-167
c 02/06/07                                                      ecis06  ldis-000
      subroutine ldis(wv,ipp,pip,nval,val,lo)                           ldis-001
c input of dispersion parameters.                                       ldis-002
c input:     wv(j,i): centre of mass energy of the level i for j=3.     ldis-003
c                     laboratory energy of the level i for j=13.        ldis-004
c            ipp(i,j):first level using potential j for i=1 (temporary).ldis-005
c                     -1 to read dispersion parameters for i=2.         ldis-006
c            nval,val:optical potentials.                               ldis-007
c            lo(i):   logical controls:                                 ldis-008
c               lo(7)  =.true. matrix element and form factors read.    ldis-009
c               lo(109)=.true. for dirac potentials.                    ldis-010
c output:    ipp,pip: equivalent by call, parameters of the dispersion  ldis-011
c                     relations (see input description).                ldis-012
c                                                                       ldis-013
c for the common  /coupl/ see calx.                                     ldis-014
c                                                                       ldis-015
c significance of the quantities in common /coupl/:                     ldis-016
c  npp:       number of optical potentials.                             ldis-017
c   used:     npp.                                                      ldis-018
c                                                                       ldis-019
c***********************************************************************ldis-020
      implicit real*8 (a-h,o-z)                                         ldis-021
      logical lo(150)                                                   ldis-022
      character*4 cleg(6)                                               ldis-023
      dimension wv(22,*),ipp(34,*),pip(17,*),nval(2,*),val(42,*),vv(6)  ldis-024
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   ldis-025
      common /inout/ mr,mw,ms                                           ldis-026
      data cleg /' vol','ume ',' sca','lar ',' vec','tor '/             ldis-027
      do 13 ij=1,npp                                                    ldis-028
c collect six depths of potentials.                                     ldis-029
      ip=ipp(1,ij)                                                      ldis-030
      if (lo(7)) go to 2                                                ldis-031
      do 1 i=1,6                                                        ldis-032
    1 vv(i)=val(4*i-3,ip)                                               ldis-033
      go to 4                                                           ldis-034
    2 do 3 i=1,6                                                        ldis-035
    3 vv(i)=val(nval(1,8*ip+i-6),1)                                     ldis-036
c input of dispersion parameters.                                       ldis-037
    4 read (mr,1000) ippip,(ipp(j,ij),j=2,6)                            ldis-038
      if (ipp(6,ij).ne.1) go to 5                                       ldis-039
      write (mw,1001) ij                                                ldis-040
      go to 13                                                          ldis-041
    5 if (ippip.ne.1) ipp(1,ij)=-ipp(1,ij)                              ldis-042
      if (mod(ipp(2,ij),2).ne.0) go to 14                               ldis-043
      read (mr,1002) (pip(j,ij),j=4,17)                                 ldis-044
      do 6 i=1,3                                                        ldis-045
      if (mod(ipp(i+2,ij),2).ne.0) go to 14                             ldis-046
      if ((ipp(i+2,ij).ne.0).and.(vv(2*i).eq.0.d0)) go to 15            ldis-047
    6 continue                                                          ldis-048
      if ((pip(8,ij).ne.0.d0).and.(vv(5).eq.0.d0)) go to 16             ldis-049
      if ((pip(9,ij).ne.0.d0).and.(vv(6).eq.0.d0)) go to 17             ldis-050
      if ((pip(17,ij).ne.0.d0).and.(vv(1).eq.0.d0)) go to 18            ldis-051
      if (ipp(1,ij).gt.0) go to 7                                       ldis-052
      write (mw,1003)                                                   ldis-053
      iz=3                                                              ldis-054
      go to 8                                                           ldis-055
    7 write (mw,1004)                                                   ldis-056
      iz=13                                                             ldis-057
    8 if (pip(4,ij).eq.0.d0) pip(4,ij)=wv(iz,ip)                        ldis-058
      if (pip(5,ij).eq.0.d0) pip(5,ij)=-6.8d0                           ldis-059
      if (pip(6,ij).eq.0.d0) pip(6,ij)=pip(5,ij)                        ldis-060
      write (mw,1005) (pip(i,ip),i=4,6)                                 ldis-061
      if (pip(8,ij).ne.0.d0) write (mw,1006) vv(5),pip(8,ij),pip(4,ij)  ldis-062
      if (pip(9,ij).ne.0.d0) write (mw,1007) vv(6),pip(9,ij),pip(4,ij)  ldis-063
      if (pip(17,ij).ne.0.d0) write (mw,1008) vv(1),pip(17,ij),pip(4,ij)ldis-064
      i1=1                                                              ldis-065
      if (lo(109)) i1=3                                                 ldis-066
      if (ipp(3,ij).lt.0) go to 9                                       ldis-067
      write (mw,1009) cleg(i1),cleg(i1+1),ipp(3,ij),pip(10,ij)          ldis-068
      if ((ipp(2,ij).ne.0).or.(pip(11,ij).ne.0.d0)) write (mw,1010) pip(ldis-069
     15,ip),pip(7,ij),ipp(2,ij),pip(11,ij),pip(12,ij)                   ldis-070
      go to 10                                                          ldis-071
    9 write (mw,1011) cleg(i1),cleg(i1+1),ipp(3,ij),pip(10,ij),pip(11,ipldis-072
     1),pip(12,ij)                                                      ldis-073
   10 if (lo(109)) go to 12                                             ldis-074
      if (ipp(4,ij).lt.0) go to 11                                      ldis-075
      write (mw,1012) ipp(4,ij),pip(13,ij),pip(14,ij),pip(15,ij)        ldis-076
      go to 13                                                          ldis-077
   11 if (pip(14,ij).eq.0.d0) pip(14,ij)=2.d0*pip(13,ij)                ldis-078
      write (mw,1013) ipp(4,ij),pip(13,ij),pip(14,ij)                   ldis-079
      go to 13                                                          ldis-080
   12 if (ipp(4,ij).ge.0) write (mw,1009) cleg(5),cleg(6),ipp(4,ij),pip(ldis-081
     113,ij)                                                            ldis-082
      if (ipp(4,ij).lt.0) write (mw,1011) cleg(5),cleg(6),ipp(4,ij),pip(ldis-083
     113,ij),pip(14,ij),pip(15,ij)                                      ldis-084
   13 continue                                                          ldis-085
      return                                                            ldis-086
   14 write (mw,1014) ij,(ipp(i,ij),i=2,5)                              ldis-087
      go to 20                                                          ldis-088
   15 write (mw,1015) ij,(ipp(i+2,ij),vv(2*i),i=1,3)                    ldis-089
      go to 19                                                          ldis-090
   16 write (mw,1016) ij,ip,pip(7,ij),vv(5)                             ldis-091
      go to 19                                                          ldis-092
   17 write (mw,1017) ij,ip,pip(8,ij),vv(6)                             ldis-093
      go to 19                                                          ldis-094
   18 write (mw,1018) ij,ip,pip(15,ij),vv(1)                            ldis-095
   19 write (mw,1019)                                                   ldis-096
   20 write (mw,1020)                                                   ldis-097
      stop                                                              ldis-098
 1000 format (14i5)                                                     ldis-099
 1001 format (' dispersion coefficients read for each level: data=',i5) ldis-100
 1002 format (7f10.5)                                                   ldis-101
 1003 format (' use of centre of mass energies.')                       ldis-102
 1004 format (' use of laboratory energies.')                           ldis-103
 1005 format (' imaginary depths read for',f12.6,' mev   fermi energy:',ldis-104
     1f12.6,' mev   treshold energy:',f12.6)                            ldis-105
 1006 format (' exponential decrease of real spin-orbit potential:',3x,fldis-106
     112.6,'*exp(-',f10.6,'(e-',f10.6,')) mev')                         ldis-107
 1007 format (' linear decrease of imaginary spin-orbit potential:',3x,fldis-108
     112.6,'-',f10.6,'*(e-',f10.6,') mev')                              ldis-109
 1008 format (' exponential decrease of hartree-fock potential:',6x,f12.ldis-110
     16,'*exp(-',f10.6,'(e-',f10.6,')) mev')                            ldis-111
 1009 format (2a4,':   power =',i3,5x,'b =',f10.4)                      ldis-112
 1010 format (' for energies ''e'' such that |',f12.6,'-''e''| >',f12.6,ldis-113
     1' mev'/' corrections with power',i3,' for negatives energies and cldis-114
     2oefficient',f12.6,' for positive energies'/15x,'damping factor',f1ldis-115
     32.6)                                                              ldis-116
 1011 format (2a4,':   power =',i3,5x,'sum of b1 =',f10.4,5x,'and b2 =',ldis-117
     1f10.4,5x,'contribution of b1 =',f10.5)                            ldis-118
 1012 format (' surface:   power =',i3,5x,'b =',f10.4,5x,' decreasing raldis-119
     1te =',f10.6,5x,' non locality parameter =',f10.4)                 ldis-120
 1013 format (' surface:   power =',i3,5x,'difference of b1 =',f10.4,5x,ldis-121
     1'and b2 =',f10.4)                                                 ldis-122
 1014 format (' for dispersion relations of potential',i3,' all the follldis-123
     1owing integers must be even'/10x,'n2 =',i4,10x,'nv =',i4,10x,'ns =ldis-124
     2',i4,10x,'nl =',i4)                                               ldis-125
 1015 format (' the potential',i4,' cannot be used for dispersion relatildis-126
     1ons because an imaginary strength is 0:'/10x,'nv =',i3,'  wv =',1pldis-127
     2,d13.6,10x,'ns =',i3,'  ws =',d13.6,10x,'nl =',i3,'  ls =',d13.6) ldis-128
 1016 format (' the potential',i4,' cannot be used with variation of theldis-129
     1 real spin-orbit of which the strength is 0':/10x,'pip(7,',i2,') =ldis-130
     2',1p,d13.6,'  vls =',d13.6)                                       ldis-131
 1017 format (' the potential',i4,' cannot be used with variation of theldis-132
     1 imaginary spin-orbit of which the strength is 0':/10x,'pip(8,',i2ldis-133
     2,') =',1p,d13.6,'  wls =',d13.6)                                  ldis-134
 1018 format (' the potential',i4,' cannot be used with variation of theldis-135
     1 hartree-fock potential of which the strength is 0':/10x,'pip(15,'ldis-136
     2,i2,') =',1p,d13.6,'  v =',d13.6)                                 ldis-137
 1019 format (' give values for another energy'/)                       ldis-138
 1020 format (//' in ldis  ...  stop  ...')                             ldis-139
      end                                                               ldis-140
c 14/04/06                                                      ecis06  dcei-000
      subroutine dcei(ar,ai,zr,zi)                                      dcei-001
c complex exponential integral function multiplied by exponential for   dcei-002
c complex argument: z = exp(x)*ei(x).                                   dcei-003
c input:     ar,ai:   real and imaginary part of the argument x.        dcei-004
c output:    zr,zi:   real and imaginary part of the result z.          dcei-005
c***********************************************************************dcei-006
      implicit real*8 (a-h,o-z)                                         dcei-007
      zr=0.d0                                                           dcei-008
      zi=0.d0                                                           dcei-009
      if ((ar.eq.0.d0).and.(ai.eq.0.d0)) return                         dcei-010
      if (dabs(ar)+18.5d0.ge.32.d0) go to 3                             dcei-011
      if (dsqrt(1024.d0-(ar+18.5d0)**2)/1.665d0.lt.dabs(ai)) go to 3    dcei-012
c series expansion.                                                     dcei-013
      zr=-.57721566490153d0-dlog(ar**2+ai**2)*0.5d0                     dcei-014
      zi=-datan2(ai,ar)                                                 dcei-015
      yr=1.d0                                                           dcei-016
      yi=0.d0                                                           dcei-017
      do 1 m=1,2000                                                     dcei-018
      aj=dfloat(m)                                                      dcei-019
      yz=yr                                                             dcei-020
      yr=-(yz*ar-yi*ai)/aj                                              dcei-021
      yi=-(yz*ai+yi*ar)/aj                                              dcei-022
      if (yr**2+yi**2.lt.1.d-30*(ar**2+ai**2)) go to 2                  dcei-023
      zr=zr-yr/aj                                                       dcei-024
    1 zi=zi-yi/aj                                                       dcei-025
    2 yr=dexp(ar)                                                       dcei-026
      yi=yr*zi                                                          dcei-027
      yr=yr*zr                                                          dcei-028
      zr=yr*dcos(ai)-yi*dsin(ai)                                        dcei-029
      zi=yi*dcos(ai)+yr*dsin(ai)                                        dcei-030
      return                                                            dcei-031
c continued fraction.                                                   dcei-032
    3 do 4 i=1,20                                                       dcei-033
      aj=dfloat(21-i)                                                   dcei-034
      zr=zr+ar                                                          dcei-035
      zi=zi+ai                                                          dcei-036
      z=zr**2+zi**2                                                     dcei-037
      zr=aj*zr/z                                                        dcei-038
      zi=-aj*zi/z                                                       dcei-039
      zr=zr+1.d0                                                        dcei-040
      z=zr**2+zi**2                                                     dcei-041
      zr=aj*zr/z                                                        dcei-042
    4 zi=-aj*zi/z                                                       dcei-043
      zr=zr+ar                                                          dcei-044
      zi=zi+ai                                                          dcei-045
      z=zr**2+zi**2                                                     dcei-046
      zr=zr/z                                                           dcei-047
      zi=-zi/z                                                          dcei-048
      return                                                            dcei-049
      end                                                               dcei-050
c 11/01/07                                                      ecis06  drei-000
      function drei(ar)                                                 drei-001
c real exponential integral function multiplied by exponential.         drei-002
c input:     ar:      argument.                                         drei-003
c***********************************************************************drei-004
      implicit real*8 (a-h,o-z)                                         drei-005
      drei=0.d0                                                         drei-006
      if (ar.eq.0.d0) return                                            drei-007
      if (dabs(ar)+18.5d0.ge.32.d0) go to 3                             drei-008
c series expansion.                                                     drei-009
      drei=-.57721566490153d0-dlog(dabs(ar))                            drei-010
      yr=1.d0                                                           drei-011
      do 1 m=1,2000                                                     drei-012
      aj=dfloat(m)                                                      drei-013
      yr=-yr*ar/aj                                                      drei-014
      if (dabs(yr).lt.1.d-15*dabs(ar)) go to 2                          drei-015
    1 drei=drei-yr/aj                                                   drei-016
    2 drei=drei*dexp(ar)                                                drei-017
      return                                                            drei-018
c continued fraction.                                                   drei-019
    3 do 4 i=1,20                                                       drei-020
      aj=dfloat(21-i)                                                   drei-021
      drei=drei+ar                                                      drei-022
      drei=aj/drei                                                      drei-023
    4 drei=aj/(drei+1.d0)                                               drei-024
      drei=1.d0/(drei+ar)                                               drei-025
      return                                                            drei-026
      end                                                               drei-027
c 10/05/07                                                      ecis06  dlne-000
      function dlne(i2,nv,ea,ef,ep,b,cv,ex)                             dlne-001
c contribution to the real volume potential of the large negative       dlne-002
c energies.                                                             dlne-003
c input:     i2:      power for negative correction, negative value     dlne-004
c                     to take into account the imaginary potential      dlne-005
c                     only at the first point.                          dlne-006
c            nv:      power for volume or scalar potential.             dlne-007
c            ea:      large energy starting value above fermi energy.   dlne-008
c            ef:      fermi energy.                                     dlne-009
c            ep:      threshold energy.                                 dlne-010
c            b:       constant for volume or scalar potential.          dlne-011
c            cv:      exponential decrease in |ex-ef-ea| for large      dlne-012
c                     energy terms, negative for decrease in            dlne-013
c                     sqrt|ex-ef-ea|.                                   dlne-014
c            ex:      energy.                                           dlne-015
c***********************************************************************dlne-016
      implicit real*8 (a-h,o-z)                                         dlne-017
      data pi /3.1415926535897932d0/                                    dlne-018
      n2=iabs(i2)                                                       dlne-019
      m2=n2/2                                                           dlne-020
      mv=nv/2                                                           dlne-021
      el=ea-ef                                                          dlne-022
      ag1x=(el+ex)**n2/((el+ex)**n2+ea**n2)                             dlne-023
      ag2x=(2*ef-ep-ex)**nv/((2*ef-ep-ex)**nv+b**nv)                    dlne-024
      ag2f=(ef-ep)**nv/((ef-ep)**nv+b**nv)                              dlne-025
      if (cv.ne.0.d0) go to 1                                           dlne-026
      if (i2.lt.0) dlne=.5d0*dlog(ea)-ag1x*dlog(ex+el)                  dlne-027
      if (i2.gt.0) dlne=.5d0*ag2f*dlog(ea)-ag1x*ag2x*dlog(ex+el)        dlne-028
      go to 3                                                           dlne-029
    1 if (cv.gt.0.d0) go to 2                                           dlne-030
      call dcei(0.d0,-cv*dsqrt(ex+el),brf,bif)                          dlne-031
      call dcei(0.d0,-cv*dsqrt(ea),crf,cif)                             dlne-032
      if (i2.lt.0) dlne=2*ag1x*brf-crf                                  dlne-033
      if (i2.gt.0) dlne=2*ag1x*ag2x*brf-ag2f*crf                        dlne-034
      go to 3                                                           dlne-035
    2 if (i2.lt.0) dlne=ag1x*drei(cv*(ex+el))-.5d0*drei(cv*ea)          dlne-036
      if (i2.gt.0) dlne=(ag1x*ag2x*drei(cv*(ex+el))-.5d0*ag2f*drei(cv*eadlne-037
     1))                                                                dlne-038
    3 bn=pi/dfloat(2*m2)                                                dlne-039
      kb=1                                                              dlne-040
      mp=m2                                                             dlne-041
      mq=mv                                                             dlne-042
      amp=-el                                                           dlne-043
      bmp=ea                                                            dlne-044
      amq=2*ef-ep                                                       dlne-045
      bmq=b                                                             dlne-046
    4 do 9 i=1,mp                                                       dlne-047
      cn=(2*i-1)*bn                                                     dlne-048
      azr=dcos(cn)*bmp/mp                                               dlne-049
      azi=dsin(cn)*bmp/mp                                               dlne-050
      bpr=amp+bmp*dcos(cn)                                              dlne-051
      bpi=bmp*dsin(cn)                                                  dlne-052
c residue azr+i*azi, pole bpr+i*bpi                                     dlne-053
      ctx=(bpr-ex)**2+bpi**2                                            dlne-054
      ctf=(bpr-ef)**2+bpi**2                                            dlne-055
      cr=(bpr-ex)/ctx-(bpr-ef)/ctf                                      dlne-056
      ci=bpi*(1/ctf-1/ctx)                                              dlne-057
      br=cr*azr-ci*azi                                                  dlne-058
      bi=cr*azi+ci*azr                                                  dlne-059
c residue*(1/(p1(i)-ex)-1/(p1(i)-ef))  br+i*bi                          dlne-060
      if (i2.lt.0) go to 5                                              dlne-061
      at=(((amq-bpr)**2+bpi**2)/bmq**2)**mq                             dlne-062
      cn=datan2(-bpi,amq-bpr)*mq*2.d0                                   dlne-063
      ct=at**2+2*at*dcos(cn)+1.d0                                       dlne-064
      er=(at*dcos(cn)+at**2)/ct                                         dlne-065
      ei=at*dsin(cn)/ct                                                 dlne-066
c value of the other function at the pole er+i*ei                       dlne-067
    5 if (cv.ne.0.d0) go to 6                                           dlne-068
      cr=-dlog((el+bpr)**2+bpi**2)*.5d0                                 dlne-069
      ci=-datan2(bpi,el+bpr)                                            dlne-070
      go to 8                                                           dlne-071
    6 if (cv.gt.0.d0) go to 7                                           dlne-072
      at=cv*((el+bpr)**2+bpi**2)**.25d0                                 dlne-073
      cn=datan2(bpi,el+bpr)/2.d0                                        dlne-074
      call dcei(-at*dsin(cn),at*dcos(cn),cr,ci)                         dlne-075
      call dcei(at*dsin(cn),-at*dcos(cn),dr,di)                         dlne-076
      cr=cr+dr                                                          dlne-077
      ci=ci+di                                                          dlne-078
      go to 8                                                           dlne-079
    7 call dcei(cv*(el+bpr),cv*bpi,cr,ci)                               dlne-080
    8 dr=(cr*br-ci*bi)                                                  dlne-081
      di=(cr*bi+ci*br)                                                  dlne-082
      if (i2.gt.0) dr=dr*er-di*ei                                       dlne-083
    9 dlne=dlne+dr                                                      dlne-084
      if (kb.eq.2) go to 11                                             dlne-085
      if (i2.lt.0) go to 10                                             dlne-086
      kb=kb+1                                                           dlne-087
      bn=pi/dfloat(nv)                                                  dlne-088
      mp=mv                                                             dlne-089
      mq=m2                                                             dlne-090
      amp=2*ef-ep                                                       dlne-091
      bmp=b                                                             dlne-092
      amq=-el                                                           dlne-093
      bmq=ea                                                            dlne-094
      go to 4                                                           dlne-095
   10 dlne=dlne*(ef-ep+ea)**nv/((ef-ep+ea)**nv+b**nv)                   dlne-096
   11 dlne=dlne/pi                                                      dlne-097
      return                                                            dlne-098
      end                                                               dlne-099
c 11/01/07                                                      ecis06  dlpe-000
      function dlpe(el,ex,ef,cn)                                        dlpe-001
c contribution to the real volume potential of the large positive       dlpe-002
c energies.                                                             dlpe-003
c input:     ea:      large energy starting value above zero energy.    dlpe-004
c            ex:      energy.                                           dlpe-005
c            ef:      fermi energy.                                     dlpe-006
c            cn:      exponential decrease in |ex-ef-ea| for large      dlpe-007
c                     energy terms, negative for decrease in            dlpe-008
c                     sqrt|ex-ef-ea|.                                   dlpe-009
c***********************************************************************dlpe-010
      implicit real*8 (a-h,o-z)                                         dlpe-011
      data pi /3.1415926535897932d0/                                    dlpe-012
      dlpe=0.d0                                                         dlpe-013
      if (ex.eq.ef) return                                              dlpe-014
      ff=dsqrt(dabs(ef))                                                dlpe-015
      fl=dsqrt(dabs(el))                                                dlpe-016
      fx=dsqrt(dabs(ex))                                                dlpe-017
      if (cn.ne.0.d0) go to 5                                           dlpe-018
      dlpe=2.d0*ff*datan2(ff,fl)+0.5d0*el*fl/ef*dlog(1.d0-ef/el)-1.5d0*fdlpe-019
     1l*dlog(dabs(el-ef))                                               dlpe-020
      if (ex.gt.0.d0) go to 3                                           dlpe-021
      if (dabs(ex).gt.el*1.d-5) go to 1                                 dlpe-022
      dlpe=dlpe+.5d0*fl*(1.d0+ex/el/2.d0+(ex/el)**2/3.d0)               dlpe-023
      go to 2                                                           dlpe-024
    1 dlpe=dlpe-0.5d0*el*fl/ex*dlog(dabs(1-ex/el))                      dlpe-025
    2 dlpe=dlpe-2.d0*fx*(datan2(fx,fl))+1.5d0*fl*dlog(dabs(el-ex))      dlpe-026
      go to 16                                                          dlpe-027
    3 if (dabs(ex).gt.el*1.d-5) go to 4                                 dlpe-028
      dlpe=dlpe+.5d0*fl*(1.d0+ex/el/2.d0+(ex/el)**2/3.d0)-fx*(dlog(dabs(dlpe-029
     1fl-fx)/(fl+fx)))+1.5d0*fl*(dlog(dabs(el-ex)))                     dlpe-030
      go to 16                                                          dlpe-031
    4 dlpe=dlpe+(fx+1.5d0*fl-0.5d0*el*fl/ex)*dlog(fl+fx)+el*fl/ex*dlog(fdlpe-032
     1l)                                                                dlpe-033
      if (dabs(ex-el).gt.1.d-3) dlpe=dlpe-(fx-1.5d0*fl+0.5d0*el*fl/ex)*ddlpe-034
     1log(dabs(fl-fx))                                                  dlpe-035
      go to 16                                                          dlpe-036
    5 if (cn.gt.0.d0) go to 9                                           dlpe-037
      a1=drei(-cn*fl)                                                   dlpe-038
      a2=drei(cn*(fx-fl))                                               dlpe-039
      if (ex.gt.0.d0) go to 6                                           dlpe-040
      call dcei(-cn*fl,-cn*fx,a3,a4)                                    dlpe-041
      dlpe=2.d0*fx*a4-3.d0*fl*a3                                        dlpe-042
      if (ex.gt.-1.d-4) go to 7                                         dlpe-043
      dlpe=dlpe+el*fl/ex*(a3-a1)                                        dlpe-044
      go to 8                                                           dlpe-045
    6 a3=drei(-cn*(fl+fx))                                              dlpe-046
      dlpe=fx*(a2-a3)-1.5d0*fl*(a2+a3)                                  dlpe-047
      if (ex.lt.1.d-4) go to 7                                          dlpe-048
      dlpe=dlpe+.5d0*el*fl/ex*(a2+a3-2.d0*a1)                           dlpe-049
      go to 8                                                           dlpe-050
c using up to the fourth derivative of the exponential function.        dlpe-051
    7 dlpe=dlpe+.5d0*el*fl*((a1*cn**2+cn/fl+1.d0/el)*(1.d0+cn**2*ex/12.ddlpe-052
     10)+(cn/fl+3.d0/el)/el*ex/6.d0)                                    dlpe-053
    8 call dcei(-cn*fl,-cn*ff,b1,b2)                                    dlpe-054
      dlpe=dlpe-ff*2.d0*b2-el*fl/ef*(b1-a1)+3.d0*fl*b1                  dlpe-055
      go to 16                                                          dlpe-056
    9 if (ex.lt.0.d0) fx=0.d0                                           dlpe-057
      av=fx-1.5d0*fl                                                    dlpe-058
      aw=.5d0*el*fl                                                     dlpe-059
      a2=drei(cn*(el-ef))                                               dlpe-060
      a3=drei(cn*(el-ex))                                               dlpe-061
      a8=drei(cn*(el))                                                  dlpe-062
      a4=(a8-a2)*aw/ef+(a3-a2)*av                                       dlpe-063
      if (dabs(ex).gt.1.d-4) go to 10                                   dlpe-064
      a4=a4-((a8*cn-1.d0/el)*(1.d0-.5d0*ex*cn)-0.5d0/el**2*ex)*aw       dlpe-065
      go to 11                                                          dlpe-066
   10 a4=a4-(a8-a3)*aw/ex                                               dlpe-067
   11 a5=a4                                                             dlpe-068
      imax=32                                                           dlpe-069
      do 14 j=1,15                                                      dlpe-070
      a1=0.d0                                                           dlpe-071
      gx=1.d0/el/dfloat(imax)                                           dlpe-072
      gy=gx*1.5d0                                                       dlpe-073
      gu=0.d0                                                           dlpe-074
      do 13 i=1,imax                                                    dlpe-075
      if (i.eq.imax) gy=gx/2.d0                                         dlpe-076
      gu=gu+gx                                                          dlpe-077
      if (dabs((1.d0-gu*ef)*gu).lt.1.d-6) go to 13                      dlpe-078
      if (ex.gt.0.d0) go to 12                                          dlpe-079
      a1=a1+gy*(dsqrt(1.d0/gu))*(1.d0/(1.d0-gu*ex)-1.d0/(1.d0-gu*ef))*dedlpe-080
     1xp(-cn*(1/gu-el))/gu                                              dlpe-081
      go to 13                                                          dlpe-082
   12 a1=a1+gy/(dsqrt(1.d0/gu)+fx)*dexp(-cn*(1/gu-el))/gu**2            dlpe-083
      a1=a1-gy*(dsqrt(1.d0/gu)-fx)/(1.d0-gu*ef)*dexp(-cn*(1/gu-el))/gu  dlpe-084
   13 gy=gx                                                             dlpe-085
      dlpe=a1+a4                                                        dlpe-086
      if (dabs(1.d0-a5/dlpe).lt.1.d-5) go to 15                         dlpe-087
      a5=dlpe                                                           dlpe-088
   14 imax=2*imax                                                       dlpe-089
   15 dlpe=(dlpe-a5)/2+dlpe                                             dlpe-090
   16 dlpe=dlpe/pi                                                      dlpe-091
      return                                                            dlpe-092
      end                                                               dlpe-093
c 12/01/07                                                      ecis06  dvwi-000
      function dvwi(e,eo,nv,b,cs,cr)                                    dvwi-001
c contribution to the real potential of a dispersive imaginary term     dvwi-002
c '(e-eo)**nv/((e-eo)**nv+bv**nv)' with a damping factor                dvwi-003
c 'exp[-cs*|e-eo|-cr*(e-eo)]'. with 'ey=e-e0' for positive values and   dvwi-004
c 'ey=-e-e0' for negative values, the poles are:                        dvwi-005
c 'ey+b*dexp( i *pi*(2*j-1)/nv)' for j=1 to nv and their residues are:  dvwi-006
c '2 b*dexp( i *pi*(2*j-1)/nv)/nv' eventually multiplied by the damping dvwi-007
c factor.                                                               dvwi-008
c input:     e:       energy minus the fermi energy.                    dvwi-009
c            eo:      threshold energy minus the fermi energy.          dvwi-010
c            nv:      power in the expression given above.              dvwi-011
c            b:       constant in the expression given above.           dvwi-012
c            cs:      exponential decrease in |e-ef|.                   dvwi-013
c            cr:      exponential decrease in (e-ef).                   dvwi-014
c***********************************************************************dvwi-015
      implicit real*8 (a-h,o-z)                                         dvwi-016
      data pi /3.1415926535897932d0/                                    dvwi-017
      m=nv/2                                                            dvwi-018
      if ((cr.ne.0.d0).or.(cs.ne.0.d0)) go to 2                         dvwi-019
c without damping. no integral between -e-eo and e-eo.                  dvwi-020
      dvwi=(dlog(dabs(e+eo)/b)*(e+eo)**nv/((e+eo)**nv+b**nv)-dlog(dabs(edvwi-021
     1-eo)/b)*(e-eo)**nv/((e-eo)**nv+b**nv))                            dvwi-022
c loop on poles in the complex upper plane.                             dvwi-023
      do 1 j=1,m                                                        dvwi-024
      bt=pi*dfloat(2*j-1)/dfloat(nv)                                    dvwi-025
      h=((e-eo)**2+2.d0*b*(e-eo)*dcos(bt)+b**2)*m/b                     dvwi-026
      g=((e+eo)**2-2.d0*b*(e+eo)*dcos(bt)+b**2)*m/b                     dvwi-027
    1 dvwi=dvwi+((e-eo)/h+(e+eo)/g)*dsin(bt)*bt                         dvwi-028
      go to 4                                                           dvwi-029
    2 h=dfloat(m)*(e-eo)**nv/((e-eo)**nv+b**nv)*drei((cs+cr)*(eo-e))    dvwi-030
      g=-dfloat(m)*(e+eo)**nv/((e+eo)**nv+b**nv)*drei((cs-cr)*(eo+e))   dvwi-031
c loop on poles in the complex upper plane.                             dvwi-032
      do 3 j=1,m                                                        dvwi-033
      bt=pi*dfloat(2*j-1)/dfloat(nv)                                    dvwi-034
      at=b*dcos(bt)                                                     dvwi-035
      az=b*dsin(bt)                                                     dvwi-036
      call dcei((cs+cr)*at,(cs+cr)*az,br,bi)                            dvwi-037
      h=h+((br*at-bi*az)*(e-eo)+br*b**2)/((e-eo+at)**2+az**2)           dvwi-038
      call dcei((cs-cr)*at,(cs-cr)*az,br,bi)                            dvwi-039
    3 g=g+((br*at-bi*az)*(e+eo)-br*b**2)/((e+eo-at)**2+az**2)           dvwi-040
      dvwi=(dexp(-(cs+cr)*eo)*h+dexp(-(cs-cr)*eo)*g)/dfloat(m)          dvwi-041
    4 dvwi=dvwi/pi                                                      dvwi-042
      return                                                            dvwi-043
      end                                                               dvwi-044
c 02/06/07                                                      ecis06  cal1-000
      subroutine cal1(nw,cw,dw,lo)                                      cal1-001
c this subroutine computes form factors (pote), looks for quantum       cal1-002
c numbers (quan), checks for convergence with respect to total spin,    cal1-003
c computes helicity amplitudes (sche) and computes chi2 (resu).         cal1-004
c input:     nw:      working area for integers.                        cal1-005
c            cw:      working area for characters.                      cal1-006
c            dw:      working area for double precision.                cal1-007
c                     nw,cw,dw are in equivalence by call.              cal1-008
c            lo(i):   logical controls:                                 cal1-009
c               lo(21) =.true. usual coupled equations.                 cal1-010
c               lo(23) =.true. no use of pade and shift to usual coupledcal1-011
c                              equations when there is no convergence.  cal1-012
c               lo(24) =.true. compute the couplings at each iteration. cal1-013
c               lo(25) =.true. complete calculation up to the end - (f: cal1-014
c                              one iteration if two are enough).        cal1-015
c               lo(28) =.true. computation up to j-convergence-(f: stop cal1-016
c                              when all coupling terms negligible).     cal1-017
c               lo(43) =.true. interpolation on total spin.             cal1-018
c               lo(44) =.true. coulomb corrections.                     cal1-019
c               lo(51) =.true. output of potentials.                    cal1-020
c               lo(54) =.true. output length used in the working field. cal1-021
c               lo(63) =.true. penetrabilities written on file 63.      cal1-022
c               lo(74) =.true. output of time in different steps.       cal1-023
c               lo(81) =.true. hauser-feshbach corrections.             cal1-024
c               lo(82) =.true. old simplified compound nucleus.         cal1-025
c               lo(100)=.true. dirac equation.                          cal1-026
c               lo(104)=.true. convergence is obtained in the iteration.cal1-027
c               lo(107)=.true. all the couplings calculated beforehand. cal1-028
c               lo(108)=.true. diagonal coulomb corrections are needed. cal1-029
c               lo(110)=.true. derivatives are needed.                  cal1-030
c               lo(115)=.true. first computation for this energy.       cal1-031
c               lo(117)=.true. for all calculations except the first.   cal1-032
c               lo(118)=.true. for last results.                        cal1-033
c               lo(119)=.true. results with the last calculation.       cal1-034
c               lo(120)=.true. output and last calculation best one.    cal1-035
c               lo(122)=.true. identical particles without spin.        cal1-036
c               lo(124)=.true. compute transmission coefficients.       cal1-037
c               lo(125)=.true. usual coupled equations.                 cal1-038
c               lo(127)=.true. coulomb corrections in asymptotic region.cal1-039
c               lo(128)=.true. no copy of uncoupled functions and       cal1-040
c                              phase-shifts.                            cal1-041
c               lo(131)=.true. total spin is too large for compound     cal1-042
c                              nucleus.                                 cal1-043
c output:     lo:     logical controls. defined here:                   cal1-044
c                     lo(24), lo(107), lo(115), lo(117), lo(125),       cal1-045
c                     lo(127), lo(128) and lo(131).                     cal1-046
c                                                                       cal1-047
c for the commons /addre/ and /integ/ see calc.                         cal1-048
c for the commons /conve/ and /coupl/ see calx.                         cal1-049
c for the common  /noequ/ see quan.                                     cal1-050
c                                                                       cal1-051
c significance of the quantities in common /addre/:                     cal1-052
c  njit:      data for interpolation on total spin.                     cal1-053
c  nwv:       non integer values for the channels.                      cal1-054
c  nipp:      dispersion parameters.                                    cal1-055
c  nfis:      fission data for compound nucleus.                        cal1-056
c  ngam:      gamma data for compound nucleus.                          cal1-057
c  nniv:      addresses of reduced nuclear matrix elements and coulomb  cal1-058
c             integrals in niv(ncoll,ncoll,3).                          cal1-059
c  npot:      optical potential parameters.                             cal1-060
c  nbeta:     deformation parameters.                                   cal1-061
c  nfm:       helicities and observables (see deph,lecd and obse).      cal1-062
c  ntgx:      beginning of chi2 and normalisation of data.              cal1-063
c  ndonn:     experimental data.                                        cal1-064
c  nnvi:      table of addresses of coupling coefficients.              cal1-065
c  nnwi:      same as nnvi for symmetrised equations.                   cal1-066
c  ncc:       table of energies, l*(l+1) and l*s  (see quan).           cal1-067
c  mcc:       same as ncc for symmetrised equations.                    cal1-068
c  nxa:       table of coefficients of symmetrisation.                  cal1-069
c  nam1:      computation of observables (see obse).                    cal1-070
c  nfac:      table of log of factorials for geometric coefficients.    cal1-071
c  nfg:       coulomb functions and finite integrals.                   cal1-072
c  nxg:       coulomb phases and infinite integrals.                    cal1-073
c  nres:      functions for the search.                                 cal1-074
c  nt:        table of reduced nuclear matrix elements.                 cal1-075
c  nivq:      table of multipoles.                                      cal1-076
c  nivy:      table of form factor identification ivy (for computation).cal1-077
c  nivz:      table of form factor identification ivz (for use).        cal1-078
c  ncoi:      address of the table for discretisation of continuum.     cal1-079
c  mipi:      address of "ipim" for the discretisation of continuum.    cal1-080
c  nxd:       address of weights and steps of continuum.                cal1-081
c  mwv:       same as nwv for the discretisation of continuum.          cal1-082
c  nixt:      transmission coefficients of uncoupled states.            cal1-083
c  nty:       temporary results of compound nucleus for interpolation.  cal1-084
c  nsm:       standard and helicity scattering matrix elements.         cal1-085
c  ntx:       partial reaction cross sections and compound nucleus.     cal1-086
c  nry:       compound nucleus coefficients.                            cal1-087
c  nrco:      strength of coulomb central potentials for corrections.   cal1-088
c  nrdo:      strength of coulomb transition potentials for corrections.cal1-089
c  nvc1:      real potentials.                                          cal1-090
c  nvc2:      imaginary potentials.                                     cal1-091
c  nnc:       first free address after computation of potentials.       cal1-092
c  ncx:       first free address for computation of potentials.         cal1-093
c   used:     njit,nwv,nipp,nfis,ngam,nniv,npot,nbeta,nfm,ntgx,ndonn,   cal1-094
c             nnvi,nnwi,ncc,mcc,nxa,nam1,nfac,nfg,nxg,nres,nt,nivq,nivy,cal1-095
c             nivz,ncoi,mipi,nxd,mwv,nixt,nty,nsm,ntx,nry,nrco,nrdo,    cal1-096
c             nvc1,nvc2,nnc,ncx.                                        cal1-097
c                                                                       cal1-098
c significance of the quantities in common /conve/:                     cal1-099
c  h:         step size for integration.                                cal1-100
c  bjm:       convergence coefficient of imaginary potential.           cal1-101
c  eiter:     convergence criterion for s-matrix.                       cal1-102
c  conj:      convergence criterion for the scattering amplitudes.      cal1-103
c   used:     h,bjm,eiter,conj.                                         cal1-104
c                                                                       cal1-105
c significance of the quantities in common /coupl/:                     cal1-106
c  nbt1:      number of phonons (vibrations).                           cal1-107
c  nfa:       number of logarithms of factorials.                       cal1-108
c   used:     nbt1,nfa.                                                 cal1-109
c                                                                       cal1-110
c significance of the quantities in common /integ/:                     cal1-111
c  idmt:      total working field length as single precision.           cal1-112
c  nplace:    maximum working field used.                               cal1-113
c  ncoll:     number of coupled channels.                               cal1-114
c  njmax:     maximum number of j-values.                               cal1-115
c  iterm:     maximum number of iterations.                             cal1-116
c  jdm:       minimum number of total spin.                             cal1-117
c  jit:       number of rates of interpolation on total spin.           cal1-118
c  kmin:      minimum number of j values for compound nucleus.          cal1-119
c  kmax:      maximum number of j values for compound nucleus.          cal1-120
c  ncols:     number of channels with angular distributions.            cal1-121
c  ncolt:     number of channels including uncoupled states.            cal1-122
c  lmx:       difference between number of j and of coulomb functions.  cal1-123
c  lmax1:     number of l-values for coulomb functions.                 cal1-124
c  nlt:       memories needed for legendre polynomials.                 cal1-125
c  ism:       number of integration steps.                              cal1-126
c  njc:       maximum number of observables at equidistant angles.      cal1-127
c  jtx:       maximum number of calculated values for a plot.           cal1-128
c  kcc:       number of independent amplitudes with uncoupled states.   cal1-129
c  ms1:       largest particle multiplicity.                            cal1-130
c  ms2:       largest target multiplicity.                              cal1-131
c  kba:       number of independent amplitudes without uncoupled states.cal1-132
c  kab:       maximum number of equations.                              cal1-133
c  kbc:       maximum number of solutions.                              cal1-134
c  jth:       maximum number of angles for a plot.                      cal1-135
c  ncolr:     number of experimental angular distributions.             cal1-136
c  lmax2:     number of l values for coulomb phases.                    cal1-137
c  itemm:     maximum number of iterations at the beginning of a run.   cal1-138
c  kxt:       number of penetrabilities for uncoupled states.           cal1-139
c  lmax3:     effective number of coulomb functions.                    cal1-140
c  nrz:       number of results to save for minimum chi2..              cal1-141
c  ntz:       number of memories to initialise to zero for scattering   cal1-142
c             matrix and compound nucleus results..                     cal1-143
c  ipm:       number pf j values used for scattering matrix (in cal1).  cal1-144
c  ipk:       number pf j values used for compound nucleus (in cal1).   cal1-145
c  mcm(1):    maximum angular momentum for central coulomb corrections. cal1-146
c  mcm(2):    maximum angular momentum for spin-orbit coulomb correct.  cal1-147
c  nct(1):    number of equations for positive parity.                  cal1-148
c  nct(2):    number of equations for negative parity.                  cal1-149
c  nct(3):    number of solutions for positive parity.                  cal1-150
c  nct(4):    number of solutions for negative parity.                  cal1-151
c  nct(5):    number of compound nucleus coefficients, positive parity. cal1-152
c  nct(6):    number of compound nucleus coefficients, negative parity. cal1-153
c   defined:  nplace,iterm,ipm,ipk.                                     cal1-154
c   used:     idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncols,    cal1-155
c             ncolt,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,  cal1-156
c             jth,ncolr,lmax2,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm,nct.  cal1-157
c                                                                       cal1-158
c significance of the quantities in common /noequ/:                     cal1-159
c  ncxn:      number of solutions needed.                               cal1-160
c  nc:        number of equations for identical particles.              cal1-161
c  ncin:      number of solutions for identical particles.              cal1-162
c  nin:       number of coupling potentials.                            cal1-163
c  jpi:       parity 0 or 1.                                            cal1-164
c  ipj:       value of j+1 or j+1/2 where j is the channel spin.        cal1-165
c  r1(2):     maximum of scattering and compound coefficient.           cal1-166
c  naj:       twice the channel spin j.                                 cal1-167
c   defined:  ncxn,nin,jpi,ipj,naj.                                     cal1-168
c   used:     ncxn,nc,ncin,nin,r1.                                      cal1-169
c                                                                       cal1-170
c significance of the quantities in common /pote2/:                     cal1-171
c  npx:       number of potentials taking into account dispersion.      cal1-172
c   used:     npx.                                                      cal1-173
c                                                                       cal1-174
c***********************************************************************cal1-175
      implicit real*8 (a-h,o-z)                                         cal1-176
      logical lo(150)                                                   cal1-177
      character*4 cw(2,*)                                               cal1-178
      character*1 jp                                                    cal1-179
      dimension nw(2,*),dw(*)                                           cal1-180
      common /addre/ niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npcal1-181
     1ot,nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,nxa,namcal1-182
     21,nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,ncal1-183
     3ty,nsm,ntx,nry,nrco,nrdo,nvc1,nvc2,nnc,ncx                        cal1-184
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       cal1-185
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   cal1-186
      common /inout/ mr,mw,ms                                           cal1-187
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncocal1-188
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtcal1-189
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),cal1-190
     3nct(6)                                                            cal1-191
      common /ncomp/ nsp(5),ncont,ncoj(3),ncolx,ndp,ndq,acn(20)         cal1-192
      common /noequ/ ncxn,nic,nci,nc,ncin,nin,jpi,ipj,r1(2),naj         cal1-193
      lmd=2                                                             cal1-194
      if (lo(100).or.lo(133)) lmd=3                                     cal1-195
      jmin=mod(nw(2,1)+nw(1,2),2)                                       cal1-196
      nfam=nnc                                                          cal1-197
      npad=nfam+kab*(2*kbc+10)                                          cal1-198
      if (lo(124)) npad=nfam+kab*(2*kab+10)                             cal1-199
      nr5=npad+2*itemm*(kab+2)                                          cal1-200
      if (lo(21).or.lo(22)) nr5=npad                                    cal1-201
      nww=nr5+2*kab                                                     cal1-202
      nxc=nww+4*ism*kab                                                 cal1-203
      if (lo(120).and.(.not.lo(51))) go to 2                            cal1-204
      if (lo(119)) go to 22                                             cal1-205
      if (lo(100)) nxc=nxc+4*ism*kab                                    cal1-206
      if (lo(21)) nxc=nr5                                               cal1-207
      id1=idmt-ncx                                                      cal1-208
c computation of potentials and form factors.                           cal1-209
      n=ncx-1                                                           cal1-210
      do 1 i=nrco,n                                                     cal1-211
    1 dw(i)=0.d0                                                        cal1-212
      call pote(dw(nbeta),nw(1,nbeta),nw(1,nivq),nw(1,nivy),nw(1,nivz),dcal1-213
     1w(npot),nw(1,npot),dw(nwv),dw(mwv),ism,ncoll,ncolx-ncont,ncolt,id1cal1-214
     2,nw,nw(1,mipi),nw(1,nipp),mcm,lo,dw(nvc1),dw(nrco),dw(nrdo),dw(nixcal1-215
     3t),dw(ncx),nw(1,ncx))                                             cal1-216
    2 if (lo(120)) go to 22                                             cal1-217
      nplace=max0(nplace,nxc+id1)                                       cal1-218
      jpi=0                                                             cal1-219
      ip1=1                                                             cal1-220
      if (lo(122)) ip1=2                                                cal1-221
      npt=0                                                             cal1-222
      n=nty+ntz-1                                                       cal1-223
      do 3 i=nty,n                                                      cal1-224
    3 dw(i)=0.d0                                                        cal1-225
      if ((.not.lo(81)).or.lo(82)) go to 4                              cal1-226
      nx=nnc+2*ism                                                      cal1-227
      n=nx+2*(ism+2)                                                    cal1-228
      if (n.gt.idmt) call memo('cal1',idmt,n)                           cal1-229
      nplace=max0(nplace,n)                                             cal1-230
c loop on the parities  jpi is the parity (0 or 1).                     cal1-231
    4 ipj=1                                                             cal1-232
      ajm=-1.d0                                                         cal1-233
      lo(127)=.false.                                                   cal1-234
      lo(131)=.not.lo(81)                                               cal1-235
      iterm=itemm                                                       cal1-236
      kb=(kab+1)/2                                                      cal1-237
      do 5 k=1,kb                                                       cal1-238
      nw(1,ncc+k-1)=0                                                   cal1-239
    5 nw(2,ncc+k-1)=0                                                   cal1-240
c loop on the values of j.                                              cal1-241
c search for quantum numbers and coupling coefficients.                 cal1-242
    6 lo(125)=lo(21)                                                    cal1-243
      naj=jmin+2*ipj-2                                                  cal1-244
      aj=0.5d0*dfloat(naj)                                              cal1-245
      iterr=0                                                           cal1-246
    7 call quan(ncoll,dw(nwv),nw,nw(1,nniv),nw(1,nt),dw(nt),nw(1,nivq),ncal1-247
     1w(1,nivz),nw(1,ncc),nw(1,nxc),dw(nxc),iu,nw(1,nnvi),kab,kbc,dw(nxacal1-248
     2),dw(nfac),nfa,idmt-nxc-200,lmd,lo)                               cal1-249
      if (ncin.eq.0) go to 15                                           cal1-250
      ajm=aj                                                            cal1-251
      nx=nxc+iu*lmd                                                     cal1-252
      ipx=ipj                                                           cal1-253
      lo(131)=lo(131).or.ipj.gt.kmax                                    cal1-254
      nx1=nx                                                            cal1-255
      ncxn=ncin                                                         cal1-256
      if (lo(124)) ncxn=nc                                              cal1-257
      nwr=2*nx1+20*kab*kab-1                                            cal1-258
      if (nwr+10*kab**2.gt.idmt) call memo('cal1',idmt,nwr+10*kab**2)   cal1-259
      call mtch(nw(1,nnwi),ncoll,kab,dw(nwv),nw(1,mcc),dw(nxg),nw(1,nxc)cal1-260
     1,dw(nxc),dw(nx1),ism,lmax2,nw(1,nniv),nw(1,nivz),dw(nfg),lmax1,lmacal1-261
     2x3,nw(1,nwr),dw(nrco),dw(nrdo),dw(nfam),lmd,lo)                   cal1-262
      if (lo(127)) go to 12                                             cal1-263
      if (lo(44)) nx=nx+4*kab*kab                                       cal1-264
      if (lo(74)) call hora                                             cal1-265
c nx first address which can be used.                                   cal1-266
      if (lo(125)) go to 12                                             cal1-267
c iterations.                                                           cal1-268
      nfar=nfam+10*kab                                                  cal1-269
      nfai=nfar+ncxn*kab                                                cal1-270
      if (lo(100)) go to 8                                              cal1-271
      nwr=2*nx+4*(ism+2)-1                                              cal1-272
      nr4=nwr+2*nc*ism                                                  cal1-273
      if (lo(110)) nr4=nwr+4*nc*ism                                     cal1-274
      n=nr4+2*ism                                                       cal1-275
      go to 9                                                           cal1-276
    8 nwr=nx+2*(ism+2)                                                  cal1-277
      nr4=nwr+4*nc*ism                                                  cal1-278
      nin=4*nin                                                         cal1-279
c  n is the first free address and nin the number of coupling potentialscal1-280
c which can be stored.                                                  cal1-281
      n=nr4+4*ism                                                       cal1-282
    9 n3=n                                                              cal1-283
      if (n.gt.idmt) call memo('cal1',idmt,n)                           cal1-284
      lo(107)=(.not.lo(24)).and.iterm.gt.1                              cal1-285
      if (bjm.ne.0.d0) nin=nin+nc                                       cal1-286
      if (lo(107)) n3=n3+nin*ism                                        cal1-287
      if (lo(54)) write (mw,1000) n3,ajm                                cal1-288
      if (n3.le.idmt) go to 10                                          cal1-289
      lo(107)=.false.                                                   cal1-290
      lo(24)=.true.                                                     cal1-291
      n3=n                                                              cal1-292
      write (mw,1001)                                                   cal1-293
   10 nplace=max0(nplace,n3)                                            cal1-294
      if (lo(100)) go to 11                                             cal1-295
      call inti(dw(nfam),dw(nx),dw(nww),dw(nwr),dw(nr4),dw(npad),nw(1,nrcal1-296
     15),ism,kab,dw(n),iterm,nc,dw(nvc1),nw(1,nnwi),nw(1,mcc),nw(1,nxc),cal1-297
     2dw(nxc),lmd,dw(nx1),ncxn,nni,iterr,lo)                            cal1-298
      if (lo(104).or.iterm.eq.1) go to 13                               cal1-299
      if (.not.lo(23)) go to 13                                         cal1-300
      if (lo(110)) write (mw,1002) ajm,jpi                              cal1-301
      lo(125)=.true.                                                    cal1-302
      lo(128)=.true.                                                    cal1-303
      go to 7                                                           cal1-304
   11 call intr(dw(nfam),dw(nx),dw(nww),dw(nwr),dw(nr4),dw(npad),nw(1,nrcal1-305
     15),ism,kab,dw(n),iterm,nc,dw(nvc1),dw(nvc2),nw(1,nnwi),nw(1,mcc),ncal1-306
     2w(1,nxc),dw(nxc),dw(nx1),ncxn,nni,iterr,lo)                       cal1-307
      go to 13                                                          cal1-308
c usual coupled channels calculation.                                   cal1-309
c nwr is the first address to store potentials and nm the maximum       cal1-310
c number of points   for arguments  see inch.                           cal1-311
   12 nwr=nx+6*kab*kab                                                  cal1-312
      if (lo(54)) write (mw,1000) nwr,ajm                               cal1-313
      nfai=nx+kab*kab                                                   cal1-314
      nfar=nfai+3*kab*kab                                               cal1-315
      if (lo(127)) go to 13                                             cal1-316
      n=nwr+2*nc*nc*(ism+1)                                             cal1-317
      if (n.gt.idmt) call memo('cal1',idmt,n)                           cal1-318
      nm=(idmt-nwr)/(2*nc*nc)-1                                         cal1-319
      nm=min0(nm,ism)                                                   cal1-320
      if (lo(54).and.nm.ne.ism) write (mw,1003) nm                      cal1-321
      n3=nwr+2*(nm+1)*nc*nc                                             cal1-322
      nplace=max0(nplace,n3,nfar+3*kab*kab)                             cal1-323
      call inch(dw(nvc1),nw(1,mcc),nw(1,nxc),dw(nxc),lmd,nw(1,nnwi),dw(ncal1-324
     1fam),dw(nx1),dw(nx),dw(nwr),ism,kab,nc,ncxn,nm,iterm,nw(1,nwr),lo)cal1-325
   13 if (lo(74)) call hora                                             cal1-326
c nfar and nfai  addresses of real and imaginary parts of s-matrix.     cal1-327
      nmx=nwr+(4+ncin)*(nc+kxt)                                         cal1-328
      n=nmx+max0(4*nc*nc,lmax2+4*ipj)                                   cal1-329
      if (n.gt.idmt) call memo('cal1',idmt,n)                           cal1-330
      npt=npt+1                                                         cal1-331
      call scam(dw(nsm),dw(nty),dw(ntx),dw(nry),njmax,kmax,nw(1,mcc),nw(cal1-332
     11,ncc),dw(nfar),dw(nfai),dw(nwv),ncoll,ncols,kab,kcc,nw,nw(1,mipi)cal1-333
     2,dw(ngam),dw(nfis),dw(nixt),nw(1,ncoi),dw(nxd),dw(nmx),dw(nmx),dw(cal1-334
     3nwr),nct,ncin+4,dw(nxa),kbc,idmt-nmx,lo)                          cal1-335
      if (lo(131)) go to 14                                             cal1-336
      lo(131)=r1(2).lt.conj.and.ipj.gt.kmin                             cal1-337
      if (.not.lo(131)) ipk=ipj                                         cal1-338
      if (lo(131).and.(lo(118).or.lo(115))) write (mw,1004) ajm,r1(2)   cal1-339
   14 if (lo(74)) call hora                                             cal1-340
      if (lo(21)) go to 15                                              cal1-341
c reduction of maximum number of iterations if 2 where sufficient(iterr)cal1-342
      if ((.not.lo(25)).and.(iterr.le.2).and.(ipj.gt.jdm)) iterm=1      cal1-343
c checks of convergence.                                                cal1-344
      if ((nni.eq.nc).and.(ipj.gt.jdm)) lo(127)=.true.                  cal1-345
      if ((.not.lo(28)).and.nni.eq.nc.and.ipj.gt.jdm+1) go to 18        cal1-346
c increase of the total angular momentum.                               cal1-347
   15 if (.not.lo(43)) go to 17                                         cal1-348
      do 16 i=1,jit                                                     cal1-349
      if (ipj.le.nw(1,njit+i-1)) go to 17                               cal1-350
   16 ipj=ipj+nw(2,njit+i-1)*ip1                                        cal1-351
   17 ipj=ipj+ip1                                                       cal1-352
      if (ipj.gt.lmax3-lmx) lo(127)=.true.                              cal1-353
      if (.not.lo(108)) lo(127)=.false.                                 cal1-354
      if ((ipj.le.njmax).and.((r1(1).ge.conj).or.(ipj.le.jdm).or.(ncin.ecal1-355
     1q.0))) go to 6                                                    cal1-356
c change of parity.                                                     cal1-357
   18 naj=jmin+2*ipx-2                                                  cal1-358
      if (lo(118).or.lo(115)) write (mw,1005) ajm,r1(1)                 cal1-359
      if (jpi.eq.1) go to 19                                            cal1-360
      jpi=jpi+1                                                         cal1-361
      ipy=ipx                                                           cal1-362
      ipz=ipk                                                           cal1-363
      go to 4                                                           cal1-364
   19 ipm=max0(ipx,ipy)                                                 cal1-365
      ipk=max0(ipk,ipz)                                                 cal1-366
      if (.not.lo(63)) go to 22                                         cal1-367
      write (63,1006) dw(nwv),dw(nwv+12),dw(nwv+1),nw(2,2),npt          cal1-368
      rewind 99                                                         cal1-369
      do 21 i=1,npt                                                     cal1-370
      read (99,1007) u1,jp,k3                                           cal1-371
      write (63,1007) u1,jp,k3                                          cal1-372
      do 20 k=1,k3                                                      cal1-373
      read (99,1008) k1,k2,u1,u2                                        cal1-374
   20 write (63,1008) k1,k2,u1,u2                                       cal1-375
   21 continue                                                          cal1-376
      close (99,status='delete')                                        cal1-377
   22 kcb=max0(nct(5),nct(6))                                           cal1-378
      ndx=nxc+4*kcb                                                     cal1-379
      ndy=ndx+jth                                                       cal1-380
      ndz=ndy+jth                                                       cal1-381
      nmy=ndz+jtx                                                       cal1-382
      nga=nmy+3*njc                                                     cal1-383
      nma=nga+4*kbc*kab                                                 cal1-384
      nmc=nma+ms1*ms2*kcb                                               cal1-385
      n=nmc+2*ipm                                                       cal1-386
      if (n.gt.idmt) call memo('cal1',idmt,n)                           cal1-387
      call sche(dw(nsm),njmax,kmax,nw,ms1,ms2,nw(1,nfm),dw(ntx),dw(nmc),cal1-388
     1nw(1,nxc),dw(nga),dw(nxg),lmax2,dw(nwv),kab,kba,kcb,jmin,ipm,ipk,dcal1-389
     2w(nty),ncoll,ncols,nct,dw(nry),dw(nma),jit,nw(1,njit),nlt,idmt-nmccal1-390
     3,lo)                                                              cal1-391
      id1=idmt-nga                                                      cal1-392
c for arguments    see calx and resu.                                   cal1-393
      call resu(nw,dw(nsm),dw(ntx),dw(nsm),njmax,kmax,ncoll,ncols,nw(1,ncal1-394
     1fm),cw(1,nfm),nw(1,ntgx),dw(ntgx),ipm,ipk,dw(ndonn),ncolr,nw(1,namcal1-395
     21),dw(nam1),dw(nwv),dw(mwv),dw(nry),nw(1,ncoi),dw(nxd),jmin,nrz,njcal1-396
     3c,dw(nres),dw(nga),dw(nmy),dw(ndx),dw(ndy),dw(ndz),id1,lo)        cal1-397
      nplace=max0(nplace,nga+id1)                                       cal1-398
      if (lo(74)) call hora                                             cal1-399
      lo(117)=.true.                                                    cal1-400
      lo(115)=.false.                                                   cal1-401
      return                                                            cal1-402
 1000 format (10x,'required working field',i10,'  for j =',f7.1)        cal1-403
 1001 format (/' working field too small to store all the potentials'/1xcal1-404
     1,52('*')//' the 24th control is set .true.'//)                    cal1-405
 1002 format (' warning: for j =',f6.1,' parity (-1)**',i1,' the derivatcal1-406
     1ive terms are neglected.')                                        cal1-407
 1003 format ('+',60x,'computation of potentials by',i5,'  at a time')  cal1-408
 1004 format (' maximum j-value =',f6.1,' for compound nucleus',6x,'maxical1-409
     1mum coefficient at the end',d12.3)                                cal1-410
 1005 format (' maximum j-value =',f6.1,16x,'maximum scattering coefficical1-411
     1ent at the end',d12.3)                                            cal1-412
 1006 format ('<tlj     >',f10.2,1p,d20.8,0p,f10.2,2i5)                 cal1-413
 1007 format (1x,f9.1,4x,a1,1x,i4)                                      cal1-414
 1008 format (1x,i2,i6,f9.1,2x,1p,d18.8,0p)                             cal1-415
      end                                                               cal1-416
c 02/06/07                                                      ecis06  pote-000
      subroutine pote(beta,nbeta,ivq,ivy,ivz,val,nval,wv,wvm,ism,ncoll,npote-001
     1cold,ncolt,idt,ipi,ipim,ipp,mcm,lo,v,vco,vdo,tl,q,np)             pote-002
c computation and output of form factors.                               pote-003
c input:     beta:    deformations of the target.                       pote-004
c            nbeta:   equivalent by call with beta.                     pote-005
c            ivq:     table of angular momenta of form factors.         pote-006
c            ivy:     table for computation of form factors.            pote-007
c            ivz:     table for use of form factors.                    pote-008
c            val,nval:optical model and folding parameters.             pote-009
c            wv,wvm:  description of the channels (see calx).           pote-010
c            ism:     number of points.                                 pote-011
c            ncoll:   number of coupled nuclear states.                 pote-012
c            ncold:   total number of states without continuum.         pote-013
c            ncolt:   total number of states with continuum.            pote-014
c            idt:     maximum working field q.                          pote-015
c            ipi,ipim:description of the channels (see calx).           pote-016
c            ipp:     cross-reference to potentials in ipi(1,*).        pote-017
c            mcm:     angular momentum limits on coulomb corrections.   pote-018
c            lo:      logical controls:                                 pote-019
c               lo(1)  =.true. rotational model-(.f.:vibrational model).pote-020
c               lo(3)  =.true. anharmonic vibrational or asymmetric     pote-021
c                              rotational model.                        pote-022
c               lo(7)  =.true. matrix element and form factors read.    pote-023
c               lo(10) =.true. dispersion relations for potentials.     pote-024
c               lo(11) =.true. deformed coulomb potential.              pote-025
c               lo(12) =.true. deformed imaginary potential.            pote-026
c               lo(13) =.true. deformed real spin-orbit or tensor.      pote-027
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. pote-028
c               lo(17) =.true. folding model.                           pote-029
c               lo(19) =.true. deformed coulomb spin-orbit potential.   pote-030
c               lo(51) =.true. output of potentials.                    pote-031
c               lo(62) =.true. potentials written on file 62.           pote-032
c               lo(74) =.true. output of time in different steps.       pote-033
c               lo(93) =.true. no recoil correction for reactions.      pote-034
c               lo(93) =.true. no recoil correction for reactions with  pote-035
c                              small differences (less than .5) of      pote-036
c                              target masses.                           pote-037
c               lo(99) =.true. schroedinger equivalent to dirac         pote-038
c                              equation.                                pote-039
c               lo(100)=.true. dirac equation.                          pote-040
c               lo(101)=.true. there is a real spin-orbit potential.    pote-041
c               lo(102)=.true. there is an imaginary spin-orbit         pote-042
c                              potential.                               pote-043
c               lo(103)=.true. there is a coulomb spin-orbit potential. pote-044
c               lo(109)=.true. for dirac potentials.                    pote-045
c               lo(117)=.true. for all calculations except the first.   pote-046
c               lo(120)=.true. output and last calculation best one.    pote-047
c               lo(129)=.true. real spin-orbit or dirac equation.       pote-048
c               lo(130)=.true. imaginary spin-orbit or dirac equation.  pote-049
c               lo(133)=.true. store scalar and coulomb potential       pote-050
c                              independently.                           pote-051
c output:    tl:      transmission coefficients for uncoupled states.   pote-052
c            v(i,j):  potential and transition form factors.            pote-053
c            vco(2,i):strength of coulomb potential tails, scalar in    pote-054
c                     vco(1,i), spin-orbit in vco(2,i).                 pote-055
c            vdo(2,i):strength of coulomb transition tails, scalar in   pote-056
c                     vdo(1,i), spin-orbit in vdo(2,i).                 pote-057
c            idt:     returns the place used.                           pote-058
c working area:                                                         pote-059
c            np,q:    in equivalence by call.                           pote-060
c                                                                       pote-061
c***********************************************************************pote-062
c     disposition of form-factors in the area v(i,*):                   pote-063
c                                                                       pote-064
c                     for schroedinger equations:                       pote-065
c     after ity(1) (=0) real central potentials in order ipi(11,*)      pote-066
c     after ity(3) real spin-orbit form factors in the same order.      pote-067
c     after ity(5) real transition form factors in order ivz(1,*).      pote-068
c     after ity(7) real derived spin-orbit form factors in order        pote-069
c           ivz(1,*) with the r**-2 form factor at the same address+inlspote-070
c     after ity(9) coulomb central potential if needed separated in the pote-071
c           order of real potentials.                                   pote-072
c     after ity(10) coulomb spin-orbit potential if needed separated in pote-073
c           the order of spin-orbit potentials.                         pote-074
c     imaginary potentials and form factor follow with the same order   pote-075
c           from ity(2), ity(4), ity(6) and ity(8)                      pote-076
c                                                                       pote-077
c                     for dirac equations:                              pote-078
c     after ity(1) (=0) for each level, 14 form factors v(*,i,*) which  pote-079
c           are central potential for i=1,2   spin-orbit potential for  pote-080
c           i=3,4  d=e+m+v-w for i=5,6   e-m-v-w for i=7,8  d**(1/2) forpote-081
c           i=9,10 d**(-1) for i=11,12  and  - d( tensor ) for i=13,14  pote-082
c     after itx(6) the invt sets of complex scalar + vector form factorspote-083
c           followed by the insl sets of tensor form factors            pote-084
c***********************************************************************pote-085
c                                                                       pote-086
c for the common  /coupl/ see calx.                                     pote-087
c for the common  /dcons/ see calc.                                     pote-088
c for the commons /pote1/ and /pote2/ see redm.                         pote-089
c                                                                       pote-090
c significance of the quantities in common /dcons/:                     pote-091
c  chb:       planck constant /(2*pi) in mev*fermi.                     pote-092
c  ccz:       coulomb alpha constant.                                   pote-093
c   used:     chb,ccz.                                                  pote-094
c                                                                       pote-095
c significance of the quantities in common /coupl/:                     pote-096
c  iqm:       maximum l-value of deformation in rotational model.       pote-097
c  npp:       number of optical potentials.                             pote-098
c   used:     iqm,npp.                                                  pote-099
c                                                                       pote-100
c significance of the quantities in common /pote1/:                     pote-101
c  itx(16):   starting address of different form factors.               pote-102
c             for schroedinger equation, itx(i)+1 is the starting       pote-103
c             address of the form factor read in extp with ityp=i       pote-104
c             (potential for i=1 to 8, transition for i=9 to 16).       pote-105
c             for dirac equations, itx(1)=0,                            pote-106
c             itx(2)+1=address off first transition form factor,        pote-107
c             itx(7)=address of last transition form factor,            pote-108
c             itx(3)=address of last temporary central potential,       pote-109
c             itx(4)=itx(7)-24,itx(5)=itx(3)-11,itx(6)=itx(2)-4.        pote-110
c             all are used for schroedinger, the first 8 for dirac.     pote-111
c  imax:      maximum angular momentum.                                 pote-112
c  intc:      number of form factors without deformed spin-orbit        pote-113
c             including correction terms.                               pote-114
c  inls:      number of spin-orbit form factors not taking into account pote-115
c             multiplication by 2.                                      pote-116
c  invd:      idem for coulomb spin-orbit.                              pote-117
c  itxm:      total number of form factors.                             pote-118
c   used:     itx,imax,intc,inls,invd,itxm.                             pote-119
c                                                                       pote-120
c significance of the quantities in common /pote2/:                     pote-121
c  ity(1):    starting address of real central potential (it is 0).     pote-122
c  ity(2):    starting address of imaginary central potential.          pote-123
c  ity(3):    starting address of real spin-orbit potential.            pote-124
c  ity(4):    starting address of imaginary spin-orbit potential.       pote-125
c  ity(5):    starting address of real central transition.              pote-126
c  ity(6):    starting address of imaginary central transition.         pote-127
c  ity(7):    starting address of real spin-orbit transition.           pote-128
c  ity(8):    starting address of imaginary spin-orbit transition.      pote-129
c  ity(9):    starting address of coulomb central potential.            pote-130
c  ity(10):   starting address of coulomb spin-orbit potential.         pote-131
c  ity(11):   starting address of coulomb central transition.           pote-132
c  ity(12):   starting address of coulomb spin-orbit transition.        pote-133
c        ity(2)=14*ncoll and ity(5)=0 only are used for dirac equations.pote-134
c  invt:      number of transition form factors without spin-orbit.     pote-135
c  intv:      same as invt, taking into account dispersion.             pote-136
c  insl:      number of spin-orbit form transition factors not taking   pote-137
c             into account multiplication by 2.                         pote-138
c  npx:       number of potentials taking into account dispersion.      pote-139
c   used:     ity,invt,intv,insl,npx.                                   pote-140
c                                                                       pote-141
c***********************************************************************pote-142
      implicit real*8 (a-h,o-z)                                         pote-143
      logical lo(150)                                                   pote-144
      dimension beta(9,*),nbeta(18,*),v(ism,*),ivq(3,*),ivy(7,*),ivz(4,*pote-145
     1),np(2,*),ilo(16),q(*),val(42,*),nval(*),vco(2,*),vdo(2,*),wv(22,*pote-146
     2),wvm(22,*),ipi(11,*),ipim(11,*),ipp(34,*),tl(*),mcm(*),ipix(11),ppote-147
     3gn(10),xgn(10),w(24),wvx(22)                                      pote-148
      character*4 bb(2)                                                 pote-149
      character*8 aa(3,8)                                               pote-150
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   pote-151
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            pote-152
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              pote-153
      common /pote2/ ity(12),invt,intv,insl,npx                         pote-154
      common /inout/ mr,mw,ms                                           pote-155
      data pgn( 1),pgn( 2) / 1.52753387130726d-01, 1.49172986472604d-01/pote-156
      data pgn( 3),pgn( 4) / 1.42096109318382d-01, 1.31688638449177d-01/pote-157
      data pgn( 5),pgn( 6) / 1.18194531961518d-01, 1.01930119817240d-01/pote-158
      data pgn( 7),pgn( 8) / 8.32767415767047d-02, 6.26720483341091d-02/pote-159
      data pgn( 9),pgn(10) / 4.06014298003869d-02, 1.76140071391521d-02/pote-160
      data xgn( 1),xgn( 2) / 7.65265211334973d-02, 2.27785851141645d-01/pote-161
      data xgn( 3),xgn( 4) / 3.73706088715420d-01, 5.10867001950827d-01/pote-162
      data xgn( 5),xgn( 6) / 6.36053680726515d-01, 7.46331906460151d-01/pote-163
      data xgn( 7),xgn( 8) / 8.39116971822219d-01, 9.12234428251326d-01/pote-164
      data xgn( 9),xgn(10) / 9.63971927277914d-01, 9.93128599185095d-01/pote-165
      data bb /'    ','last'/                                           pote-166
      data aa/'      re','al volum','e/scalar',' imagina','ry volum','e/pote-167
     1scalar','     rea','l surfac','e/vector','  imagin','. surfac','e/pote-168
     2vector','  real s','pin-orbi','t/tensor',' imag. s','pin-orbi','t/pote-169
     3tensor','        ','        ',' coulomb','      sp','in-orbit',' cpote-170
     4oulomb'/                                                          pote-171
      data ilo /62,62,62,62,101,102,62,103,62,12,62,12,13,14,11,19/     pote-172
      idy=0                                                             pote-173
      if (lo(120)) go to 4                                              pote-174
      itm=itxm                                                          pote-175
      if (lo(100)) itm=itm-itx(7)                                       pote-176
      if (lo(7)) go to 3                                                pote-177
      invz=intc                                                         pote-178
      iny=1                                                             pote-179
      if (lo(109)) iny=3                                                pote-180
      do 2 ip=1,npp                                                     pote-181
      k=iabs(ipp(1,ip))                                                 pote-182
      invy=invz+iny                                                     pote-183
      n1=(invy+1)/2+1                                                   pote-184
      n2=n1+max0(imax,iqm)+1                                            pote-185
      id1=invy+27                                                       pote-186
      idx=10                                                            pote-187
      if (lo(3)) idx=36                                                 pote-188
      if (.not.lo(1)) idx=1                                             pote-189
      idx=max0(idx*id1+10*invy,6*ism)+n2                                pote-190
      if (idx.gt.idt) call memo('pote',idt,idx)                         pote-191
      ik=ip                                                             pote-192
      if (lo(100)) ik=itx(4)+24*ip+1                                    pote-193
      call rotp(beta,nbeta,ik,ivy,val(1,ip),id1,ism,wv(1,k),invz,invy,inpote-194
     1y,pgn,xgn,lo,v,v(1,itx(3)+1),np,q(n1),q(n2),q(10*invy+n2))        pote-195
c  to use the folding model, the spin-orbit potentials and the first    pote-196
c spin-orbit non diagonal form factors are not derived ( v(r) instead ofpote-197
c (1/r)*(d/dr)(v(r)) )  for schroedinger equations. for dirac equations pote-198
c the derivatives are computed but not used.                            pote-199
      idy=max0(idx,idy)                                                 pote-200
      if (lo(74)) call hora                                             pote-201
      if (.not.lo(17)) go to 2                                          pote-202
c  *******  folding model  **********                                   pote-203
      ist=5+ism+idint(2.d0*(dabs(val(41,ip))+2.d0*dabs(val(42,ip)))/wv(8pote-204
     1,k))                                                              pote-205
      if (val(40,ip)*val(41,ip).eq.0.d0) ist=ism+5                      pote-206
c the working space in p is shifted from v with the origins in table it.pote-207
      nnf=1+ism*itm                                                     pote-208
      idz=nnf+4*itm                                                     pote-209
      idx=idz+4*ist                                                     pote-210
      if (invz.ne.0) idx=idx+2*ist*imax                                 pote-211
      idy=max0(idy,idx)                                                 pote-212
      if (idx.gt.idt) call memo('pote',idt,idx)                         pote-213
      do 1 j=1,nnf                                                      pote-214
    1 q(j)=0.d0                                                         pote-215
      call fold(v(1,ik),q,val(34,ip),3,ip,ism,ist,ivy,invz,q(idz),pgn,xgpote-216
     1n,wv,np(1,nnf),lo)                                                pote-217
      if (lo(74)) call hora                                             pote-218
    2 invz=0                                                            pote-219
      go to 4                                                           pote-220
    3 nnf=2*itm                                                         pote-221
      if (nnf.gt.idt) call memo('pote',idt,nnf)                         pote-222
      idz=idt-nnf                                                       pote-223
      ik=1                                                              pote-224
      if (lo(100)) ik=itx(7)+1                                          pote-225
      call stdp(v(1,ik),ivy,ism,val,nval,idz,idx,q(nnf+1),wv,pgn,xgn,npppote-226
     1,np,q(nnf+1),lo)                                                  pote-227
      idy=max0(idy,idx+2*nnf)                                           pote-228
    4 if (.not.lo(62)) go to 14                                         pote-229
      npt=8*(npp+intc)                                                  pote-230
      if (.not.lo(101)) npt=npt-npp                                     pote-231
      if (.not.lo(102)) npt=npt-npp                                     pote-232
      if (.not.lo(103)) npt=npt-npp                                     pote-233
      if (.not.lo(11)) npt=npt-intc                                     pote-234
      if (.not.lo(12)) npt=npt-2*intc                                   pote-235
      if (.not.lo(13)) npt=npt-intc                                     pote-236
      if (.not.lo(14)) npt=npt-intc                                     pote-237
      if (.not.lo(19)) npt=npt-intc                                     pote-238
      write (62,1000) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),npt             pote-239
      ist=2*(ism/2)                                                     pote-240
      idx=ist                                                           pote-241
      idy=max0(idy,idx)                                                 pote-242
      if (idx.gt.idt) call memo('pote',idt,idx)                         pote-243
c punch the form factors.                                               pote-244
      do 5 i=1,ist                                                      pote-245
    5 q(i)=i*wv(8,1)                                                    pote-246
      ir=0                                                              pote-247
      do 8 ip=1,npp                                                     pote-248
      do 7 ij=1,8                                                       pote-249
      is=1                                                              pote-250
      il=ilo(ij)                                                        pote-251
      if (.not.lo(il)) go to 7                                          pote-252
      ji=ip+itx(ij)                                                     pote-253
      if (lo(100)) ji=itx(7)+ij+24*(ip-1)                               pote-254
      ir=ir+1                                                           pote-255
      write (mw,1001) (aa(j,ij),j=1,3),ip,ir                            pote-256
      write (62,1001) (aa(j,ij),j=1,3),ip,ir                            pote-257
      do 6 i=1,ist,2                                                    pote-258
      if (i.eq.ist-1) is=2                                              pote-259
      write (mw,1002) q(i),v(i,ji),q(i+1),v(i+1,ji),bb(is),ir           pote-260
    6 write (62,1003) q(i),v(i,ji),q(i+1),v(i+1,ji),bb(is),ir           pote-261
    7 continue                                                          pote-262
    8 continue                                                          pote-263
      if (intc.eq.0) go to 14                                           pote-264
      do 13 iq=1,intc                                                   pote-265
      do 12 ij=9,16                                                     pote-266
      is=1                                                              pote-267
      il=ilo(ij)                                                        pote-268
      if (.not.lo(il)) go to 12                                         pote-269
      ip=iq                                                             pote-270
      if (ij.eq.13.or.ij.eq.14) ip=ivy(3,iq)+inls                       pote-271
      if (ij.ge.15) ip=ivy(ij-11,iq)                                    pote-272
      if (ip.le.0) go to 12                                             pote-273
      ji=ip+itx(ij)                                                     pote-274
      if (lo(100)) ji=itx(7)+24*npp+11*iq+ij-19                         pote-275
      ir=ir+1                                                           pote-276
      write (mw,1004) (aa(j,ij-8),j=1,3),iq,ir                          pote-277
      write (62,1004) (aa(j,ij-8),j=1,3),iq,ir                          pote-278
      if (.not.lo(100).and.(ij.ge.13).and.(ij.ne.15)) go to 10          pote-279
      do 9 i=1,ist,2                                                    pote-280
      if (i.eq.ist-1) is=2                                              pote-281
      write (mw,1002) q(i),v(i,ji),q(i+1),v(i+1,ji),bb(is),ir           pote-282
    9 write (62,1003) q(i),v(i,ji),q(i+1),v(i+1,ji),bb(is),ir           pote-283
      go to 12                                                          pote-284
   10 if (ij.eq.16) ji=ji+invd                                          pote-285
      do 11 i=1,ist,2                                                   pote-286
      a1=-v(i,ji)*q(i)**2                                               pote-287
      a2=-v(i+1,ji)*q(i+1)**2                                           pote-288
      if (i.eq.ist-1) is=2                                              pote-289
      write (mw,1002) q(i),a1,q(i+1),a2,bb(is),ir                       pote-290
   11 write (62,1003) q(i),a1,q(i+1),a2,bb(is),ir                       pote-291
   12 continue                                                          pote-292
   13 continue                                                          pote-293
   14 if (lo(120)) go to 68                                             pote-294
      if (intc.eq.invt) go to 26                                        pote-295
c addition of correction terms of form factors.                         pote-296
      do 25 k=1,invt                                                    pote-297
      if (ivy(6,k).le.0) go to 25                                       pote-298
      k1=ivy(6,k)                                                       pote-299
      l=ivy(7,k)+2                                                      pote-300
      do 24 n=1,8                                                       pote-301
      il=ilo(n+8)                                                       pote-302
      if ((il.ne.62).and.(.not.lo(il))) go to 24                        pote-303
      l1=l                                                              pote-304
      m=0                                                               pote-305
      if (lo(100)) go to 17                                             pote-306
      if (n.gt.6) go to 16                                              pote-307
      if (n.gt.4) go to 15                                              pote-308
      k2=itx(n+8)+k                                                     pote-309
      k3=itx(n+8)+k1                                                    pote-310
      go to 19                                                          pote-311
   15 if (ivy(3,k).eq.0) go to 24                                       pote-312
      k2=itx(n+8)+ivy(3,k)+inls                                         pote-313
      k3=itx(n+8)+ivy(3,k1)+inls                                        pote-314
      l1=l1+2                                                           pote-315
      m=-inls                                                           pote-316
      go to 19                                                          pote-317
   16 if (ivy(n-3,k).eq.0) go to 24                                     pote-318
      k2=itx(n+8)+ivy(n-3,k)                                            pote-319
      k3=itx(n+8)+ivy(n-3,k1)                                           pote-320
      if (n.eq.8) m=invd                                                pote-321
      go to 18                                                          pote-322
   17 if ((n.gt.4).and.(n.ne.7)) m=min0(11-n,4)                         pote-323
      k2=itx(5)+11*k+n                                                  pote-324
      k3=k2+11*(k1-k)                                                   pote-325
      if (n.le.6) go to 19                                              pote-326
   18 ci=v(ism,k3)                                                      pote-327
      cr=v(ism,k2)                                                      pote-328
      go to 21                                                          pote-329
   19 dd=0.d0                                                           pote-330
      ci=0.d0                                                           pote-331
      cr=0.d0                                                           pote-332
      do 20 is=1,ism                                                    pote-333
      dd=dd+wv(8,1)                                                     pote-334
      ci=ci+v(is,k3)*dd**l1                                             pote-335
   20 cr=cr+v(is,k2)*dd**l1                                             pote-336
   21 if ((ci.eq.0.d0).or.(cr.eq.0.d0)) go to 24                        pote-337
      cr=cr/ci                                                          pote-338
      if (.not.lo(117)) write (mw,1005) k,n,cr                          pote-339
   22 do 23 is=1,ism                                                    pote-340
   23 v(is,k2)=v(is,k2)-cr*v(is,k3)                                     pote-341
      if (m.eq.0) go to 24                                              pote-342
      k2=k2+m                                                           pote-343
      k3=k3+m                                                           pote-344
      m=0                                                               pote-345
      go to 22                                                          pote-346
   24 continue                                                          pote-347
   25 continue                                                          pote-348
   26 rm=ism*wv(8,1)                                                    pote-349
      if (lo(74)) call hora                                             pote-350
c storage of optical potentials.                                        pote-351
      do 44 kj=1,ncolt                                                  pote-352
      jj=mod(kj+ncoll-1,ncolt)+1                                        pote-353
      if (jj.gt.ncold) go to 29                                         pote-354
      do 27 i=1,11                                                      pote-355
   27 ipix(i)=ipi(i,jj)                                                 pote-356
      do 28 i=1,22                                                      pote-357
   28 wvx(i)=wv(i,jj)                                                   pote-358
      go to 32                                                          pote-359
   29 do 30 i=1,11                                                      pote-360
   30 ipix(i)=ipim(i,jj-ncold)                                          pote-361
      do 31 i=1,22                                                      pote-362
   31 wvx(i)=wvm(i,jj-ncold)                                            pote-363
   32 xp=chb/(2.d0*wvx(6))                                              pote-364
      xq=xp**2                                                          pote-365
      if (lo(100)) go to 38                                             pote-366
c potentials for schroedinger equation.                                 pote-367
      if (jj.gt.ncoll) go to 33                                         pote-368
      i1=ipix(11)                                                       pote-369
      i2=i1+ity(2)                                                      pote-370
      i3=i1+ity(3)                                                      pote-371
      i4=i1+ity(4)                                                      pote-372
      i5=i1+ity(9)                                                      pote-373
      i6=i1+ity(10)                                                     pote-374
      if (lo(133)) go to 34                                             pote-375
      go to 36                                                          pote-376
   33 i1=1                                                              pote-377
      i2=2                                                              pote-378
      i3=3                                                              pote-379
      i4=4                                                              pote-380
      i5=5                                                              pote-381
      i6=6                                                              pote-382
      if (lo(133)) go to 34                                             pote-383
      i5=1                                                              pote-384
      i6=3                                                              pote-385
      go to 36                                                          pote-386
   34 do 35 is=1,ism                                                    pote-387
      if (lo(103)) v(is,i6)=0.d0                                        pote-388
   35 v(is,i5)=0.d0                                                     pote-389
   36 j=ipix(5)                                                         pote-390
      do 37 is=1,ism                                                    pote-391
      v(is,i1)=v(is,j+itx(1))*(1.d0+wvx(16))+v(is,j+itx(3))*(1.d0+wvx(19pote-392
     1))+wvx(15)*v(is,j+itx(2))+wvx(18)*v(is,j+itx(4))                  pote-393
      v(is,i2)=v(is,j+itx(2))*(1.d0+wvx(14))+v(is,j+itx(4))*(1.d0+wvx(17pote-394
     1))                                                                pote-395
      if (lo(129)) v(is,i3)=v(is,j+itx(5))*(1.d0+wvx(22))+wvx(21)*v(is,jpote-396
     1+itx(6))                                                          pote-397
      if (lo(130)) v(is,i4)=v(is,j+itx(6))*(1.d0+wvx(20))               pote-398
      if (lo(103)) v(is,i6)=v(is,i6)+v(is,j+itx(8))*xq                  pote-399
   37 v(is,i5)=v(is,i5)-v(is,j+itx(7))                                  pote-400
      if (lo(103)) vco(2,i1)=v(ism,j+itx(8))*rm**3/wvx(6)               pote-401
      if (.not.lo(99)) go to 43                                         pote-402
      vco(1,i1)=rm*v(ism,j+itx(7))*chb/(2.d0*wvx(7)*wvx(6))             pote-403
      vco(2,i1)=vco(2,i1)+vco(1,i1)*chb/(wvx(6)+wvx(7))                 pote-404
      go to 43                                                          pote-405
c potentials for dirac equation:                                        pote-406
c at this point:   after v(1,itx(7)),                                   pote-407
c v(*,n,1) scalar potential v for n=1,2 vector potential w for n=3,4    pote-408
c          tensor potential t for n=5,6 coulomb potentials for n=7,8    pote-409
c          their first derivatives for n=9,16                           pote-410
c          their second derivatives for n=17,24                         pote-411
c the first derivatives of non-coulomb potentials have a reversed sign. pote-412
   38 m=itx(4)+24*ipix(5)                                               pote-413
      j=jj                                                              pote-414
      if (j.gt.ncoll) j=1                                               pote-415
      n=14*j-14                                                         pote-416
      rr=0.d0                                                           pote-417
      do 42 is=1,ism                                                    pote-418
      rr=rr+wvx(8)                                                      pote-419
      do 39 k=1,24                                                      pote-420
   39 w(k)=v(is,k+m)                                                    pote-421
      if (.not.lo(10)) go to 41                                         pote-422
      do 40 k=1,24,8                                                    pote-423
      w(k)=(1.d0+wvx(16))*w(k)+wvx(15)*w(k+1)                           pote-424
      w(k+1)=w(k+1)+wvx(14)*w(k+1)                                      pote-425
      w(k+2)=(1.d0+wvx(19))*w(k+2)+wvx(18)*w(k+3)                       pote-426
      w(k+3)=w(k+3)+wvx(17)*w(k+3)                                      pote-427
      w(k+4)=(1.d0+wvx(22))*w(k+4)+wvx(21)*w(k+5)                       pote-428
   40 w(k+5)=(1.d0+wvx(20))*w(k+5)                                      pote-429
   41 w(3)=w(3)+w(7)                                                    pote-430
      w(11)=w(11)+w(15)                                                 pote-431
      w(19)=w(19)+w(23)                                                 pote-432
      w(13)=(w(13)+w(16))/wvx(6)                                        pote-433
      w(21)=(w(21)+w(24))/wvx(6)                                        pote-434
      w(14)=w(14)/wvx(6)                                                pote-435
      w(22)=w(22)/wvx(6)                                                pote-436
      w(15)=wvx(6)+wvx(7)+w(1)-w(3)                                     pote-437
      w(16)=w(2)-w(4)                                                   pote-438
      v(is,n+7)=(wvx(7)-wvx(6)-w(1)-w(3))/chb                           pote-439
      v(is,n+8)=-(w(2)+w(4))/chb                                        pote-440
      dd=w(15)**2+w(16)**2                                              pote-441
      w(5)=w(15)/dd                                                     pote-442
      w(6)=-w(16)/dd                                                    pote-443
      dd=dsqrt(dsqrt(dd)/(wvx(6)+wvx(7)))                               pote-444
      ar=.5d0*datan2(w(16),w(15))                                       pote-445
      v(is,n+9)=dd*dcos(ar)                                             pote-446
      v(is,n+10)=dd*dsin(ar)                                            pote-447
      ar=w(11)-w(9)                                                     pote-448
      ai=w(12)-w(10)                                                    pote-449
      br=w(17)-w(19)                                                    pote-450
      bi=w(18)-w(20)                                                    pote-451
      cr=ar*w(5)-ai*w(6)+w(13)                                          pote-452
      ci=ar*w(6)+ai*w(5)+w(14)                                          pote-453
      er=br*w(5)-bi*w(6)+w(13)*(cr+cr-w(13))-w(14)*(ci+ci-w(14))-w(21)+2pote-454
     1.d0*cr/rr                                                         pote-455
      ei=br*w(6)+bi*w(5)+w(13)*(ci+ci-w(14))+w(14)*(cr+cr-w(13))-w(22)+2pote-456
     1.d0*ci/rr                                                         pote-457
      v(is,n+1)=-w(1)-w(3)*wvx(7)/wvx(6)-(w(1)*w(1)-w(2)*w(2)-w(3)*w(3)+pote-458
     1w(4)*w(4))/(2.d0*wvx(6))-(.75d0*(cr**2-ci**2)-.5d0*er)*xp*chb     pote-459
      v(is,n+2)=-w(2)-w(4)*wvx(7)/wvx(6)-(w(1)*w(2)-w(3)*w(4))/wvx(6)-(1pote-460
     1.5d0*cr*ci-.5d0*ei)*xp*chb                                        pote-461
      v(is,n+3)=.5d0*cr*xp*chb/rr                                       pote-462
      v(is,n+4)=.5d0*ci*xp*chb/rr                                       pote-463
      v(is,n+5)=w(15)/chb                                               pote-464
      v(is,n+6)=w(16)/chb                                               pote-465
      v(is,n+11)=w(5)*chb                                               pote-466
      v(is,n+12)=w(6)*chb                                               pote-467
      v(is,n+13)=w(13)/chb                                              pote-468
   42 v(is,n+14)=w(14)/chb                                              pote-469
      vco(1,j)=w(7)*rr/chb                                              pote-470
      vco(2,j)=rr*(w(7)/(wvx(6)+wvx(7))+w(8)/wvx(6))                    pote-471
   43 if (jj.le.ncoll) go to 44                                         pote-472
      nx1=2*ism+5                                                       pote-473
      nx2=nx1+10*(ipix(10)+2)                                           pote-474
      hh=wv(8,1)                                                        pote-475
      if (nx2.gt.idt) call memo('pote',idt,nx2)                         pote-476
      if ((.not.lo(93)).or.(dabs(wv(2,1)-wvx(2)).gt.0.5d0)) hh=hh*wv(2,1pote-477
     1)/wvx(2)                                                          pote-478
      call tlnc(hh,ipix,wvx,tl(ipix(8)+1),ism,q,q(nx1),ipix(10)+2,np(1,npote-479
     1x2),q(nx2),idt-nx2,v,vco(1,i1),lo)                                pote-480
   44 continue                                                          pote-481
      if (intv.eq.0) go to 68                                           pote-482
c storage of transition form factors.                                   pote-483
      do 67 j=1,intv                                                    pote-484
      ij=ivz(1,j)                                                       pote-485
      if (.not.lo(100)) go to 45                                        pote-486
      ik=itx(6)+4*j                                                     pote-487
      ki=itx(5)+11*ij                                                   pote-488
   45 l=ivy(4,ij)                                                       pote-489
      if (l.eq.0) go to 50                                              pote-490
      k=ivy(2,ij)                                                       pote-491
      if (ivq(2,k).ge.0) go to 50                                       pote-492
c magnetic coulomb transition.                                          pote-493
      dd=2.d0*(wv(8,1)/wv(10,1))**2/chb                                 pote-494
      if (lo(100)) go to 47                                             pote-495
      do 46 is=1,ism                                                    pote-496
      if (lo(12)) v(is,j+ity(6))=0.d0                                   pote-497
   46 v(is,j+ity(11))=-v(is,l+itx(15))*dd                               pote-498
      if (ivy(7,ij).le.mcm(1)) vdo(1,j)=v(ism,l+itx(15))*dd*rm**(ivy(7,ipote-499
     1j)+1)                                                             pote-500
      go to 67                                                          pote-501
   47 do 49 is=1,ism                                                    pote-502
      do 48 m=1,4                                                       pote-503
   48 v(is,ik+m)=0.d0                                                   pote-504
   49 v(is,ik+3)=v(is,ki+7)*dd                                          pote-505
      if (ivy(7,ij).le.mcm(1)) vdo(1,j)=v(ism,ki+7)*dd*rm**(ivy(7,ij)+1)pote-506
      go to 67                                                          pote-507
c central transition form-factor.                                       pote-508
   50 i1=ivz(2,j)/(ncoll+1)                                             pote-509
      i2=mod(ivz(2,j),ncoll+1)                                          pote-510
      do 51 k=1,9                                                       pote-511
      wvx(k)=wv(k+13,1)                                                 pote-512
      if (i2.ne.0) wvx(k)=.5d0*(wv(k+13,i1)+wv(k+13,i2))                pote-513
      if (.not.lo(10)) wvx(k)=0.d0                                      pote-514
   51 continue                                                          pote-515
      if (lo(100)) go to 54                                             pote-516
      do 52 is=1,ism                                                    pote-517
      if (lo(12)) v(is,j+ity(6))=v(is,ij+itx(10))+v(is,ij+itx(12))+wvx(1pote-518
     1)*v(is,ij+itx(10))+wvx(4)*v(is,ij+itx(12))                        pote-519
   52 v(is,j+ity(5))=v(is,ij+itx(9))*(1.d0+wvx(3))+v(is,ij+itx(11))*(1.dpote-520
     10+wvx(6))+wvx(2)*v(is,ij+itx(10))+wvx(5)*v(is,ij+itx(12))         pote-521
      if (l.eq.0) go to 59                                              pote-522
c coulomb transition form factor for schroedinger equation.             pote-523
      do 53 is=1,ism                                                    pote-524
   53 v(is,j+ity(11))=v(is,j+ity(11))-v(is,l+itx(15))                   pote-525
      if (ivy(7,ij).le.mcm(1)) vdo(1,j)=v(ism,l+itx(15))*rm**(ivy(7,ij)+pote-526
     11)                                                                pote-527
      go to 59                                                          pote-528
   54 do 55 is=1,ism                                                    pote-529
      v(is,ik+1)=v(is,ki+1)+wvx(2)*v(is,ki+2)                           pote-530
      v(is,ik+2)=v(is,ki+2)+wvx(1)*v(is,ki+2)                           pote-531
      v(is,ik+3)=v(is,ki+3)+wvx(4)*v(is,ki+4)                           pote-532
   55 v(is,ik+4)=v(is,ki+4)+wvx(3)*v(is,ki+4)                           pote-533
      if (l.eq.0) go to 57                                              pote-534
c coulomb transition form factor for dirac equation.                    pote-535
      do 56 is=1,ism                                                    pote-536
   56 v(is,ik+3)=v(is,ik+3)+v(is,ki+7)                                  pote-537
      if (ivy(7,ij).le.mcm(1)) vdo(1,j)=v(ism,ki+7)*rr**(ivy(7,ij)+1)   pote-538
   57 do 58 is=1,ism                                                    pote-539
      cr=v(is,ik+1)                                                     pote-540
      ci=v(is,ik+2)                                                     pote-541
      v(is,ik+1)=xp*(v(is,ik+3)+cr)                                     pote-542
      v(is,ik+2)=xp*(v(is,ik+4)+ci)                                     pote-543
      v(is,ik+3)=xp*(v(is,ik+3)-cr)                                     pote-544
   58 v(is,ik+4)=xp*(v(is,ik+4)-ci)                                     pote-545
   59 if (j.gt.invt) go to 67                                           pote-546
c spin-orbit transition form factor for schroedinger equation.          pote-547
      l=ivy(3,ij)                                                       pote-548
      if (l.eq.0) go to 67                                              pote-549
      if (lo(100)) go to 64                                             pote-550
      do 60 is=1,ism                                                    pote-551
      v(is,l+ity(7))=v(is,l+itx(13))*(1.d0+wvx(9))+v(is,l+itx(14))*wvx(8pote-552
     1)                                                                 pote-553
   60 v(is,l+ity(7)+insl)=v(is,l+inls+itx(13))*(1.d0+wvx(9))+v(is,l+itx(pote-554
     114))*wvx(8)                                                       pote-555
      if (.not.lo(14)) go to 62                                         pote-556
      do 61 is=1,ism                                                    pote-557
      v(is,l+ity(8))=v(is,l+itx(14))*(1.d0+wvx(7))                      pote-558
   61 v(is,l+ity(8)+insl)=v(is,l+inls+itx(14))*(1.d0+wvx(7))            pote-559
   62 k=ivy(5,ij)                                                       pote-560
      if (k.eq.0) go to 67                                              pote-561
      do 63 is=1,ism                                                    pote-562
      v(is,l+ity(12))=v(is,l+ity(12))+v(is,k+itx(16))*xq                pote-563
   63 v(is,l+ity(12)+insl)=v(is,l+ity(12)+insl)+v(is,k+invd+itx(16))*xq pote-564
      if (ivy(7,ij).le.mcm(2)) vdo(2,l)=-v(ism,k+invd+itx(16))*rm**(ivy(pote-565
     17,ij)+3)*xq                                                       pote-566
      go to 67                                                          pote-567
c spin-orbit transition form factor for dirac equation.                 pote-568
   64 il=itx(6)+4*(l+intv)                                              pote-569
      rr=0.d0                                                           pote-570
      do 65 is=1,ism                                                    pote-571
      rr=rr+wv(8,1)                                                     pote-572
      v(is,il+1)=-xq*v(is,ki+9)*(1.d0+wvx(6))                           pote-573
      v(is,il+2)=-xq*v(is,ki+10)*(1.d0+wvx(5))                          pote-574
      v(is,il+3)=xq*v(is,ki+5)/rr*(1.d0+wvx(6))                         pote-575
   65 v(is,il+4)=xq*v(is,ki+6)/rr*(1.d0+wvx(5))                         pote-576
      if (ivy(5,ij).eq.0) go to 67                                      pote-577
      rr=0.d0                                                           pote-578
      do 66 is=1,ism                                                    pote-579
      rr=rr+wv(8,1)                                                     pote-580
      v(is,il+1)=v(is,il+1)-xq*v(is,ki+11)                              pote-581
   66 v(is,il+3)=v(is,il+3)+xq*v(is,ki+8)/rr                            pote-582
      if (ivy(7,ij).le.mcm(2)) vdo(2,l)=xp*v(ism,ki+8)*rr**(ivy(7,ij)+1 pote-583
     1)                                                                 pote-584
   67 continue                                                          pote-585
c output of potentials.                                                 pote-586
   68 if (.not.lo(51)) go to 77                                         pote-587
      if (lo(100)) go to 74                                             pote-588
      do 69 j=1,npx                                                     pote-589
      write (mw,1006) j                                                 pote-590
      write (mw,1007) (i,v(i,j+ity(1)),v(i,j+ity(2)),i=1,ism)           pote-591
      if (lo(133)) write (mw,1008) (i,v(i,j+ity(9)),i=1,ism)            pote-592
      if (lo(129)) write (mw,1009) (i,v(i,j+ity(3)),i=1,ism)            pote-593
      if (lo(130)) write (mw,1010) (i,v(i,j+ity(4)),i=1,ism)            pote-594
      write (67,1007) (i,v(i,j+ity(1)),v(i,j+ity(2)),i=1,ism)           ak000000
      if (lo(133)) write (67,1008) (i,v(i,j+ity(9)),i=1,ism)            ak000000
      if (lo(129)) write (67,1009) (i,v(i,j+ity(3)),i=1,ism)            ak000000
      if (lo(130)) write (67,1010) (i,v(i,j+ity(4)),i=1,ism)            ak000000
      if (lo(133).and.lo(103)) write (mw,1011) (i,v(i,j+ity(10)),i=1,ismpote-595
     1)                                                                 pote-596
   69 continue                                                          pote-597
      if (ity(2).eq.ity(5)) go to 72                                    pote-598
      nvx=ity(2)-ity(5)                                                 pote-599
      write (mw,1012)                                                   pote-600
      nvb=min0(nvx,6)                                                   pote-601
      do 70 i=1,ism                                                     pote-602
      write (mw,1013) i,(j,v(i,j+ity(5)),j=1,nvb)                       pote-603
      if (nvb.ne.nvx) write (mw,1014) (j,v(i,j+ity(5)),j=7,nvx)         pote-604
   70 continue                                                          pote-605
      itmx=itx(1)                                                       pote-606
      if (lo(133)) itmx=ity(9)                                          pote-607
      if (itmx.eq.ity(6)) go to 72                                      pote-608
      mvx=itmx-ity(6)                                                   pote-609
      write (mw,1015)                                                   pote-610
      nvb=min0(mvx,6)                                                   pote-611
      do 71 i=1,ism                                                     pote-612
      write (mw,1013) i,(j,v(i,j+ity(6)),j=1,nvb)                       pote-613
      if (nvb.ne.mvx) write (mw,1014) (j,v(i,j+ity(6)),j=7,mvx)         pote-614
   71 continue                                                          pote-615
   72 if (.not.lo(133)) go to 77                                        pote-616
      if (itx(1).eq.ity(11)) go to 77                                   pote-617
      mvx=itx(1)-ity(11)                                                pote-618
      write (mw,1016)                                                   pote-619
      nvb=min0(mvx,6)                                                   pote-620
      do 73 i=1,ism                                                     pote-621
      write (mw,1013) i,(j,v(i,j+ity(11)),j=1,nvb)                      pote-622
      if (nvb.ne.mvx) write (mw,1014) (j,v(i,j+ity(11)),j=7,mvx)        pote-623
   73 continue                                                          pote-624
      go to 77                                                          pote-625
   74 n=0                                                               pote-626
      do 75 l=1,ncoll                                                   pote-627
      write (mw,1017) l                                                 pote-628
      write (mw,1018) (i,(v(i,n+j),j=1,6),i=1,ism)                      pote-629
      write (mw,1019) l                                                 pote-630
      write (mw,1018) (i,(v(i,n+j),j=7,12),i=1,ism)                     pote-631
      if (lo(101).or.lo(103)) write (mw,1020) l,(i,(v(i,n+j),j=13,14),i=pote-632
     11,ism)                                                            pote-633
   75 n=n+14                                                            pote-634
      l=intv+insl                                                       pote-635
      if (l.eq.0) go to 77                                              pote-636
      n=itx(2)                                                          pote-637
      do 76 k=1,l                                                       pote-638
      if (k.le.intv) write (mw,1021) k                                  pote-639
      if (k.gt.intv) write (mw,1022) k                                  pote-640
      write (mw,1023) (i,(v(i,n+j),j=1,4),i=1,ism)                      pote-641
   76 n=n+4                                                             pote-642
   77 idt=idy                                                           pote-643
      return                                                            pote-644
 1000 format ('<potenti.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 pote-645
 1001 format (2x,3a8,' potential ***',i2,' ***',5x,i5)                  pote-646
 1002 format (2x,f10.5,1p,d20.6,0p,f10.5,1p,d20.6,a4,i6)                pote-647
 1003 format (f10.5,1p,d20.6,0p,f10.5,1p,d20.6,a4,i6)                   pote-648
 1004 format (2x,3a8,' transition potential ***',i2,' ***',5x,i5)       pote-649
 1005 format (' form factor',i4,'  potential',i3,'  ratio of correcting pote-650
     1deformation',1p,d15.6)                                            pote-651
 1006 format (//' potential ****',i2,' ****')                           pote-652
 1007 format (//' central potential:'//(3(5x,i5,1p,2d14.5,' i')))       pote-653
 1008 format (//' coulomb potential:'//(6(2x,i4,1p,d14.5)))             pote-654
 1009 format (//' real spin-orbit potential:'//(6(2x,i4,1p,d14.5)))     pote-655
 1010 format (//' imaginary spin-orbit potential:'//(6(2x,i4,1p,d14.5)))pote-656
 1011 format (//' coulomb spin-orbit potential:'//(6(2x,i4,1p,d14.5)))  pote-657
 1012 format (//' real multipoles:'/)                                   pote-658
 1013 format (4x,i4,6(i4,1p,d14.5))                                     pote-659
 1014 format ((8x,6(i4,1p,d14.5)))                                      pote-660
 1015 format (//' imaginary multipoles:'/)                              pote-661
 1016 format (//' coulomb multipoles:'/)                                pote-662
 1017 format (//' potentials of schroedinger''s equation for channel',i3pote-663
     1/15x,'central',27x,'spin-orbit',28x,'d(r)')                       pote-664
 1018 format (2x,i3,1p,2d14.7,' i',5x,2d14.7,' i',5x,2d14.7,' i')       pote-665
 1019 format (/17x,'e(r)',28x,'sqrt(d(r))',25x,'d(r)**(-1)',3x,'for chanpote-666
     1nel',i3)                                                          pote-667
 1020 format (/45x,'tensor potential',36x,'for channel',i3/(3(2x,i3,1p,2pote-668
     1d14.7,' i')))                                                     pote-669
 1021 format (//' scalar and vector multipoles',i6/)                    pote-670
 1022 format (//' tensor multipoles',i6/)                               pote-671
 1023 format (5x,i5,1p,2d26.7,' i',10x,2d16.7,' i')                     pote-672
      end                                                               pote-673
c 02/06/07                                                      ecis06  rotp-000
      subroutine rotp(beta,nbeta,ip,ivy,val,id1,ism,wv,invz,iq1,iny,pgn,rotp-001
     1xgn,lo,v,va,iv,pp,b,p)                                            rotp-002
c input:     beta:    vibrational deformations. from beta(1,nbt1+1),    rotp-003
c                     static deformations (rotational model).           rotp-004
c            nbeta:   quantum numbers of deformations (in equivalence   rotp-005
c                     by call with beta).                               rotp-006
c            ip:      potential number (schroedinger equation), address rotp-007
c                     to temporarily storage of dirac potentials in v.  rotp-008
c            ivy:     description of form factors                       rotp-009
c                     (see third part of iq in redm).                   rotp-010
c            val:     optical parameters..                              rotp-011
c            id1:     first dimension of the working space p.           rotp-012
c            ism:     number of steps for integration.                  rotp-013
c            wv:      informations for rotz, step size in wv(8).        rotp-014
c            invz:    number of transition form factors.                rotp-015
c            iq1:     iny + number of transition form factors.          rotp-016
c            iny:     1 + number of derivatives of central              rotp-017
c                     potentials ( schroedinger: 1, dirac: 2)           rotp-018
c            pgn,xgn: weights, abscissae of legendre integral.          rotp-019
c            lo(i):   logical controls:                                 rotp-020
c               lo(1)  =.true. rotational model-(.f.:vibrational model).rotp-021
c               lo(3)  =.true. anharmonic vibrational or asymmetric     rotp-022
c                              rotational model.                        rotp-023
c               lo(6)  =.true. use deformation lengths.                 rotp-024
c               lo(7)  =.true. matrix element and form factors read.    rotp-025
c               lo(9)  =.true. symmetrised woods-saxon form factors whenrotp-026
c                              the radius is negative.                  rotp-027
c               lo(11) =.true. deformed coulomb potential.              rotp-028
c               lo(12) =.true. deformed imaginary potential.            rotp-029
c               lo(13) =.true. deformed real spin-orbit or tensor.      rotp-030
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. rotp-031
c               lo(17) =.true. folding model.                           rotp-032
c               lo(19) =.true. deformed coulomb spin-orbit potential.   rotp-033
c               lo(99) =.true. schroedinger equivalent to dirac         rotp-034
c                              equation.                                rotp-035
c               lo(100)=.true. dirac equation.                          rotp-036
c               lo(101)=.true. there is a real spin-orbit potential.    rotp-037
c               lo(102)=.true. there is an imaginary spin-orbit         rotp-038
c                              potential.                               rotp-039
c               lo(103)=.true. there is a coulomb spin-orbit potential. rotp-040
c               lo(109)=.true. for dirac potentials.                    rotp-041
c output:    v:       potentials and transition form factors,           rotp-042
c                     only potentials and derivatives for dirac.        rotp-043
c            va:      transition form factors for dirac equation.       rotp-044
c working areas:                                                        rotp-045
c            iv:      order of derivative of the iq1 form factors.      rotp-046
c            pp:      intermediate results, weights, .... in rotd.      rotp-047
c            b:       for deformations.                                 rotp-048
c            p:       weights computed in rotd.                         rotp-049
c                                                                       rotp-050
c for the common  /coupl/ see calx.                                     rotp-051
c for the common  /dcons/ see calc.                                     rotp-052
c for the common  /pote1/ see redm.                                     rotp-053
c                                                                       rotp-054
c significance of the quantities in common /coupl/:                     rotp-055
c  iqm:       maximum l-value of deformation in rotational model.       rotp-056
c  nbt1:      number of phonons (vibrations).                           rotp-057
c   used:     iqm,nbt1.                                                 rotp-058
c                                                                       rotp-059
c significance of the quantities in common /dcons/:                     rotp-060
c  ccz:       coulomb alpha constant.                                   rotp-061
c   used:     ccz.                                                      rotp-062
c                                                                       rotp-063
c significance of the quantities in common /pote1/:                     rotp-064
c  itx(16):   starting address of different form factors (see redm).    rotp-065
c  imax:      maximum angular momentum.                                 rotp-066
c  inls:      number of spin-orbit form factors not taking into account rotp-067
c             multiplication by 2.                                      rotp-068
c  invd:      idem for coulomb spin-orbit.                              rotp-069
c   used:     itx,imax,inls,invd.                                       rotp-070
c                                                                       rotp-071
c***********************************************************************rotp-072
      implicit real*8 (a-h,o-z)                                         rotp-073
      logical lo(150),lq(8,5)                                           rotp-074
      dimension beta(9,*),nbeta(18,*),v(ism,*),va(ism,11,*),ivy(7,*),iv(rotp-075
     1*),pp(*),b(10,*),p(id1,*),val(4,9),pgn(10),xgn(10),iz(8,2),ep(8),zrotp-076
     2z(2),dd(2),q(8,36),vr(7,10),ldl(8),srd(4),wv(22)                  rotp-077
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   rotp-078
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            rotp-079
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              rotp-080
      common /inout/ mr,mw,ms                                           rotp-081
      data ldl /7,12,7,12,13,14,11,19/                                  rotp-082
      data srd /1.d0,1.d0,2.d0,6.d0/                                    rotp-083
c checks of diffusenesses.                                              rotp-084
      do 2 i=1,8                                                        rotp-085
      j=ldl(i)                                                          rotp-086
      lq(i,5)=.not.lo(j)                                                rotp-087
      if (j.eq.7) lq(i,5)=lo(j)                                         rotp-088
      lq(i,1)=val(1,i).eq.0.d0                                          rotp-089
      lq(i,2)=(i.le.6).or.(val(1,i)*val(3,i).ne.0.d0)                   rotp-090
      lq(i,3)=lq(i,1).or.(.not.lq(i,2))                                 rotp-091
      lq(i,2)=lq(i,2).or.lq(i,1)                                        rotp-092
      if (lq(i,1)) go to 2                                              rotp-093
      lq(i,4)=(.not.lo(9)).or.(val(2,i).ge.0.d0)                        rotp-094
      if (.not.lq(i,2)) go to 1                                         rotp-095
      if (val(3,i).ge.0.02d0*wv(8)) go to 1                             rotp-096
      write (mw,1000) val(3,i),i,ip                                     rotp-097
      val(3,i)=dmax1(-val(3,i),0.02d0*wv(8))                            rotp-098
    1 if (val(2,i).ge.wv(8).or.lo(9)) go to 2                           rotp-099
      write (mw,1001) val(2,i),i,ip                                     rotp-100
      val(2,i)=dmax1(-val(2,i),wv(8))                                   rotp-101
    2 continue                                                          rotp-102
      lq(1,2)=lq(7,2).and.lq(8,2)                                       rotp-103
      idg=0                                                             rotp-104
      inx=iny+1                                                         rotp-105
      sr=1.d0                                                           rotp-106
      do 11 i=1,iq1                                                     rotp-107
      iv(i)=i+3                                                         rotp-108
      if (i.le.iny) go to 8                                             rotp-109
      k=mod(ivy(1,i-iny),1000)                                          rotp-110
      if (k.eq.0.or.lo(3)) go to 6                                      rotp-111
      if (k.gt.nbt1) go to 4                                            rotp-112
      iv(i)=2                                                           rotp-113
      idg=max0(idg,1)                                                   rotp-114
      do 3 j=1,8                                                        rotp-115
      if (.not.lo(6)) sr=dabs(val(2,j))                                 rotp-116
    3 b(j,i)=0.282095d0*beta(j,k)*sr                                    rotp-117
      go to 10                                                          rotp-118
    4 k1=mod(k,nbt1+1)                                                  rotp-119
      k2=k/(nbt1+1)                                                     rotp-120
      idg=max0(idg,2)                                                   rotp-121
      iv(i)=3                                                           rotp-122
      do 5 j=1,8                                                        rotp-123
      if (.not.lo(6)) sr=dabs(val(2,j))                                 rotp-124
    5 b(j,i)=0.0397887d0*beta(j,k1)*beta(j,k2)*sr*sr                    rotp-125
      go to 10                                                          rotp-126
    6 iv(i)=k+1                                                         rotp-127
      idg=max0(idg,k)                                                   rotp-128
      if (lo(1)) go to 8                                                rotp-129
      do 7 j=1,8                                                        rotp-130
      if (.not.lo(6)) sr=dabs(val(2,j))                                 rotp-131
    7 b(j,i)=sr**k*0.282095d0*beta(j,k+1)/srd(k+1)                      rotp-132
      go to 10                                                          rotp-133
    8 do 9 j=1,8                                                        rotp-134
    9 b(j,i)=1.d0                                                       rotp-135
   10 b(9,i)=b(5,i)                                                     rotp-136
   11 b(10,i)=b(6,i)                                                    rotp-137
      iv(1)=1                                                           rotp-138
c set up of form factor computation.                                    rotp-139
      ids=1                                                             rotp-140
      idr=1                                                             rotp-141
      if (lo(17).or.lo(99)) ids=0                                       rotp-142
      if (lo(109)) idr=0                                                rotp-143
      idt=idr+ids                                                       rotp-144
      do 12 i=1,8                                                       rotp-145
      idz=idg                                                           rotp-146
      if (lq(i,5)) idz=0                                                rotp-147
      iz(i,2)=idz+1                                                     rotp-148
      if (lq(i,3)) go to 12                                             rotp-149
      ep(i)=dexp(wv(8)/val(3,i))                                        rotp-150
      if ((i.eq.3).or.(i.eq.4)) idz=idz+idr                             rotp-151
      if ((i.eq.5).or.(i.eq.6).or.(i.eq.8)) idz=idz+ids                 rotp-152
      if (lo(109)) idz=max0(idz,2)                                      rotp-153
   12 iz(i,1)=idz                                                       rotp-154
c lq(i,1) is .true. if the form factor is not used.                     rotp-155
c lq(i,2) is .true. for coulomb form factor with diffuseness.           rotp-156
c lq(i,3) is .false. for any woods-saxon form factors.                  rotp-157
c lq(i,4) is .false. for symmetrised woods-saxon form factors.          rotp-158
c lq(i,5) is .false. for deformed form factors.                         rotp-159
      call rotd(nbeta,beta(1,nbt1+1),ivy,iv,pp,p,q,val,id1,invz,imax,iq1rotp-160
     1,iqm,iny,idt,lq,dd,pgn,xgn,lo)                                    rotp-161
      zz(1)=ccz*val(1,7)                                                rotp-162
      zz(2)=ccz*val(1,8)                                                rotp-163
      if (dd(1).ne.0.d0) zz(1)=zz(1)/dd(1)                              rotp-164
      if (dd(2).ne.0.d0) zz(2)=zz(2)/dd(2)                              rotp-165
      do 14 j=1,10                                                      rotp-166
      do 13 i=1,7                                                       rotp-167
   13 vr(i,j)=0.d0                                                      rotp-168
   14 continue                                                          rotp-169
      r=0.d0                                                            rotp-170
      do 52 is=1,ism                                                    rotp-171
      r=r+wv(8)                                                         rotp-172
      do 16 i=1,iq1                                                     rotp-173
      do 15 j=17,27                                                     rotp-174
   15 p(j,i)=0.d0                                                       rotp-175
   16 continue                                                          rotp-176
c integration loop.                                                     rotp-177
      do 43 j=1,idt                                                     rotp-178
      do 26 i=1,8                                                       rotp-179
      if (lq(i,3)) go to 26                                             rotp-180
      q(i,j)=q(i,j)+wv(8)                                               rotp-181
      if (p(i,j).ne.0.d0) go to 17                                      rotp-182
      if (q(i,j)+50.d0*val(3,i).gt.0.d0) p(i,j)=dexp(q(i,j)/val(3,i))   rotp-183
      go to 18                                                          rotp-184
   17 if (p(i,j).lt.1.d15) p(i,j)=p(i,j)*ep(i)                          rotp-185
   18 if ((.not.lq(i,4)).and.p(i+8,j).gt.1.d-15) p(i+8,j)=p(i+8,j)/ep(i)rotp-186
      idv=iz(i,1)                                                       rotp-187
      call wosa(vr(1,i),val(3,i),val(4,i),p(i,j),q(i,j),idv+2,lq(i,4))  rotp-188
      do 19 k=1,idv+2                                                   rotp-189
   19 vr(k,i)=vr(k,i)*val(1,i)                                          rotp-190
      if ((i.lt.3).or.(i.ge.7).or.(idt.eq.0)) go to 25                  rotp-191
      if (i.gt.4) go to 21                                              rotp-192
      if (idr.eq.0) go to 25                                            rotp-193
      do 20 k=1,idv                                                     rotp-194
   20 vr(k,i)=4.d0*vr(k+1,i)*val(3,i)                                   rotp-195
      go to 25                                                          rotp-196
   21 if (ids.eq.0) go to 25                                            rotp-197
      if (lo(100)) go to 23                                             rotp-198
      do 22 k=1,idv                                                     rotp-199
      vr(k,i+4)=vr(k,i)/r**2                                            rotp-200
   22 vr(k,i)=vr(k+1,i)/r                                               rotp-201
      go to 25                                                          rotp-202
   23 do 24 k=1,idv                                                     rotp-203
   24 vr(k,i+4)=vr(k+1,i)                                               rotp-204
   25 if (.not.lo(109)) go to 26                                        rotp-205
      vr(5,i)=vr(2,i)                                                   rotp-206
      vr(6,i)=vr(3,i)                                                   rotp-207
   26 continue                                                          rotp-208
      if (.not.lo(99)) go to 27                                         rotp-209
      call rotz(vr,xgn,wv,r,q,val,j,iv,b,p,id1,iq1,lo)                  rotp-210
      go to 43                                                          rotp-211
   27 do 29 l=1,iq1                                                     rotp-212
      k=iv(l)                                                           rotp-213
      do 28 m=1,10                                                      rotp-214
   28 p(m+16,l)=p(m+16,l)+vr(k,m)*p(l+27,j)*b(m,l)                      rotp-215
   29 continue                                                          rotp-216
      if (lq(1,2)) go to 43                                             rotp-217
c deformed coulomb potential.                                           rotp-218
      do 42 i=7,8                                                       rotp-219
      if (lq(i,2)) go to 42                                             rotp-220
      c=p(i,j)/r                                                        rotp-221
      if (i.eq.8.and.(.not.(lo(17).or.lo(100)))) go to 31               rotp-222
      if (r.lt.p(i,j)) go to 30                                         rotp-223
      p(i+16,1)=p(i+16,1)+zz(i-6)*(p(i,j)**2)*c*p(28,j)                 rotp-224
      if (.not.lo(100)) go to 32                                        rotp-225
      p(i+16,2)=p(i+16,2)+zz(i-6)*p(i,j)*c**2*p(28,j)                   rotp-226
      p(i+16,3)=p(i+16,3)+zz(i-6)*2.d0*c**3*p(28,j)                     rotp-227
      go to 32                                                          rotp-228
   30 p(i+16,1)=p(i+16,1)+(0.5d0*p(i,j)*p(i,j)-r*r/6.d0)*zz(i-6)*p(28,j)rotp-229
     1*3.d0                                                             rotp-230
      if (.not.lo(100)) go to 32                                        rotp-231
      p(i+16,2)=p(i+16,2)+r*zz(i-6)*p(28,j)                             rotp-232
      p(i+16,3)=p(i+16,3)-zz(i-6)*p(28,j)                               rotp-233
      go to 32                                                          rotp-234
   31 c1=zz(i-6)*p(28,j)                                                rotp-235
      if (r.gt.p(i,j)) c1=c1*c**3                                       rotp-236
      p(24,1)=p(24,1)+c1                                                rotp-237
   32 if (invz.eq.0) go to 42                                           rotp-238
      if (.not.lo(8*i-45)) go to 42                                     rotp-239
      do 41 k=inx,iq1                                                   rotp-240
      l=ivy(7,k-iny)+1                                                  rotp-241
      if ((ivy(i-3,k-iny).eq.0).or.(l.eq.1)) go to 41                   rotp-242
      d=l                                                               rotp-243
      n=iv(k)                                                           rotp-244
      if (r.lt.p(i,j)) go to 33                                         rotp-245
      c1=(p(i,j)**2)*(c**l)*3.d0/((d+2.d0)*(2.d0*d-1.d0))               rotp-246
      if (n.gt.1) c1=c1*(d+2.d0)/p(i,j)                                 rotp-247
      if (n.gt.2) c1=c1*(d+1.d0)/p(i,j)                                 rotp-248
      if (n.gt.3) c1=c1*d/p(i,j)                                        rotp-249
      go to 35                                                          rotp-250
   33 if (l.ne.3) go to 34                                              rotp-251
      if (n.eq.1) c1=r*r*(0.2d0+dlog(c))*0.6d0                          rotp-252
      if (n.ge.2) c1=0.6d0*r/c                                          rotp-253
      if (n.ge.3) c1=-c1/p(i,j)                                         rotp-254
      if (n.ge.4) c1=-2.d0*c1/p(i,j)                                    rotp-255
      go to 35                                                          rotp-256
   34 if (n.eq.1) c1=r*r*(1.d0/(d+2.d0)-1.d0/(c**(l-3)*(2.d0*d-1.d0)))*3rotp-257
     1.d0/(d-3.d0)                                                      rotp-258
      if (n.ge.2) c1=r/c**(l-2)*3.d0/(2.d0*d-1.d0)                      rotp-259
      if (n.ge.3) c1=-c1*(d-2.d0)/p(i,j)                                rotp-260
      if (n.eq.4) c1=-c1*(d-1.d0)/p(i,j)                                rotp-261
   35 if (i.eq.7.or.lo(17)) go to 40                                    rotp-262
      if (r.lt.p(i,j)) go to 36                                         rotp-263
      c2=-d*c1/r                                                        rotp-264
      go to 38                                                          rotp-265
   36 if (l.ne.3) go to 37                                              rotp-266
      if (n.eq.1) c2=-1.2d0*(0.3d0*r-dlog(c))*r                         rotp-267
      if (n.ge.2) c2=2.d0*c1/r                                          rotp-268
      go to 38                                                          rotp-269
   37 if (n.eq.1) c2=(2.d0/(d+2.d0)-(d-1.d0)/(c**(l-3)*(2.d0*d-1.d0)))*3rotp-270
     1.d0/(d-3.d0)*r                                                    rotp-271
      if (n.ne.1)  c2=(d-1.d0)*c1/r                                     rotp-272
   38 if (lo(100)) go to 39                                             rotp-273
      p(27,k)=p(27,k)-zz(2)*c1*p(k+27,j)*b(i,k)/r**2                    rotp-274
      p(24,k)=p(24,k)-zz(2)*c2*p(k+27,j)*b(i,k)/r                       rotp-275
      go to 41                                                          rotp-276
   39 p(27,k)=p(27,k)-zz(2)*c2*p(k+27,j)*b(i,k)                         rotp-277
      p(24,k)=p(24,k)+zz(2)*c1*p(k+27,j)*b(i,k)                         rotp-278
      go to 41                                                          rotp-279
   40 p(i+16,k)=p(i+16,k)+zz(i-6)*c1*p(k+27,j)*b(i,k)                   rotp-280
   41 continue                                                          rotp-281
   42 continue                                                          rotp-282
   43 continue                                                          rotp-283
c storage of form factors.                                              rotp-284
      if (lo(100)) go to 47                                             rotp-285
      v(is,ip+itx(1))=p(17,1)                                           rotp-286
      v(is,ip+itx(2))=p(18,1)                                           rotp-287
      v(is,ip+itx(3))=p(19,1)                                           rotp-288
      v(is,ip+itx(4))=p(20,1)                                           rotp-289
      if (lo(101)) v(is,ip+itx(5))=p(21,1)                              rotp-290
      if (lo(102)) v(is,ip+itx(6))=p(22,1)                              rotp-291
      v(is,ip+itx(7))=p(23,1)                                           rotp-292
      if (lo(103)) v(is,ip+itx(8))=p(24,1)                              rotp-293
      if (invz.le.0) go to 52                                           rotp-294
      do 46 j=1,invz                                                    rotp-295
      k=j+iny                                                           rotp-296
      v(is,j+itx(9))=p(17,k)                                            rotp-297
      v(is,j+itx(11))=p(19,k)                                           rotp-298
      if (.not.lo(12)) go to 44                                         rotp-299
      v(is,j+itx(10))=p(18,k)                                           rotp-300
      v(is,j+itx(12))=p(20,k)                                           rotp-301
   44 ij=ivy(4,j)                                                       rotp-302
      if (ij.ne.0) v(is,ij+itx(15))=p(23,k)                             rotp-303
      ij=ivy(3,j)                                                       rotp-304
      if (ij.eq.0) go to 45                                             rotp-305
      v(is,ij+itx(13))=p(21,k)                                          rotp-306
      v(is,ij+itx(13)+inls)=-p(25,k)                                    rotp-307
      if (.not.lo(14)) go to 45                                         rotp-308
      v(is,ij+itx(14))=p(22,k)                                          rotp-309
      v(is,ij+itx(14)+inls)=-p(26,k)                                    rotp-310
   45 ij=ivy(5,j)                                                       rotp-311
      if (ij.eq.0) go to 46                                             rotp-312
      v(is,ij+itx(16))=p(24,k)                                          rotp-313
      v(is,ij+itx(16)+invd)=p(27,k)                                     rotp-314
   46 continue                                                          rotp-315
      go to 52                                                          rotp-316
   47 k=ip                                                              rotp-317
      do 49 i=1,3                                                       rotp-318
      do 48 j=17,24                                                     rotp-319
      v(is,k)=p(j,i)                                                    rotp-320
   48 k=k+1                                                             rotp-321
   49 continue                                                          rotp-322
      if (invz.eq.0) go to 52                                           rotp-323
      do 51 k=1,invz                                                    rotp-324
      do 50 j=1,11                                                      rotp-325
   50 va(is,j,k)=p(j+16,k+3)                                            rotp-326
   51 continue                                                          rotp-327
   52 continue                                                          rotp-328
c coulomb potentials with diffuse charge distribution.                  rotp-329
      if (lq(7,3).and.lq(8,3)) return                                   rotp-330
      do 58 i=7,8                                                       rotp-331
      if (lq(i,3)) go to 58                                             rotp-332
      i1=ip+itx(i)                                                      rotp-333
      if (i.eq.8.and.(.not.(lo(17).or.lo(100)))) go to 53               rotp-334
      if (lo(100)) i1=ip+i-1                                            rotp-335
      call copo(v(1,i1),v(1,i1),p,ism,wv(8),0,val(1,i),val(1,9),ccz,zt,.rotp-336
     1false.,.false.)                                                   rotp-337
      if (.not.lo(100)) go to 54                                        rotp-338
      call deri(v(1,i1+8),v(1,i1),wv(8),ism,.true.)                     rotp-339
      call deri(v(1,i1+16),v(1,i1+8),wv(8),ism,.true.)                  rotp-340
      go to 54                                                          rotp-341
   53 call copo(p,v(1,i1),p,ism,wv(8),0,val(1,i),val(1,9),ccz,zt,.false.rotp-342
     1,.false.)                                                         rotp-343
      call deri(v(1,i1),p,wv(8),ism,.false.)                            rotp-344
   54 if (invz.eq.0.or.(.not.lo(8*i-45))) go to 58                      rotp-345
      do 57 j=1,invz                                                    rotp-346
      n=ivy(i-3,j)                                                      rotp-347
      l=ivy(7,j)                                                        rotp-348
      if ((n.eq.0).or.(l.eq.0)) go to 57                                rotp-349
      i1=n+itx(i+8)                                                     rotp-350
      if (lo(100)) i1=itx(5)+11*j+i                                     rotp-351
      i2=i1                                                             rotp-352
      if (.not.(lo(100).or.(i.ne.8).or.lo(17))) i2=i2+invd              rotp-353
      call copo(v(1,i2),v(1,i1),p,ism,wv(8),l,val(1,i),val(1,9),ccz,zt,.rotp-354
     1false.,.true.)                                                    rotp-355
      if ((i.eq.7).or.lo(17)) go to 57                                  rotp-356
      if (.not.lo(100)) go to 55                                        rotp-357
      call deri(v(1,i1+3),v(1,i1),wv(8),ism,.true.)                     rotp-358
      go to 57                                                          rotp-359
   55 call deri(v(1,i1),v(1,i2),wv(8),ism,.false.)                      rotp-360
      rr=0.d0                                                           rotp-361
      do 56 is=1,ism                                                    rotp-362
      rr=rr+wv(8)                                                       rotp-363
   56 v(is,i2)=-v(is,i2)/rr**2                                          rotp-364
   57 continue                                                          rotp-365
   58 continue                                                          rotp-366
      return                                                            rotp-367
 1000 format (' too small diffuseness =',1p,d15.6,' for the potential',2rotp-368
     1i4,'   changed into its minimum value.')                          rotp-369
 1001 format (' too small coulomb radius =',1p,d15.6,' for the potentialrotp-370
     1',2i4,'   changed into its minimum value.')                       rotp-371
      end                                                               rotp-372
c 02/03/07                                                      ecis06  rotd-000
      subroutine rotd(nbeta,beta,ivy,iv,pp,p,q,val,id1,invz,imax,iq1,iqmrotd-001
     1,iny,idt,lq,dd,pgn,xgn,lo)                                        rotd-002
c ***** symmetric rotational model:                                     rotd-003
c a 20-points gauss-legendre integration method is used, reduced to 10  rotd-004
c values by symmetry.                                                   rotd-005
c                                                                       rotd-006
c ***** asymmetric rotational model:                                    rotd-007
c 36 values of (theta,phi) have been chosen. the values of theta are    rotd-008
c n*pi/14. and for each value of "n" there are n+1 values of phi equi-  rotd-009
c distant between 0. and pi/2. the matrix, the elements of which are therotd-010
c rotation matrix elements for these angles and l given in nl, k in nk  rotd-011
c has been inverted. the coefficients of the 15 lowest (l,k) are stored rotd-012
c in poids. the 15 reduced rotation matrix elements for the 8 values of rotd-013
c theta are in rb.                                                      rotd-014
c                                                                       rotd-015
c ***** vibrational model:                                              rotd-016
c the angular integration is reduced to one point.                      rotd-017
c                                                                       rotd-018
c input:     nbeta:   informations on vibrations.                       rotd-019
c            beta:    static deformations.                              rotd-020
c            ivy:     informations on form factors.                     rotd-021
c            iv:      order of derivative of each form factor.          rotd-022
c            val:     optical parameters.                               rotd-023
c            id1:     first dimension of the working space p.           rotd-024
c            invz:    number of transition form factors.                rotd-025
c            imax:    maximum angular momentum.                         rotd-026
c            iq1:     iny + number of transition form factors.          rotd-027
c            iqm:     maximum multipolarity of static deform.           rotd-028
c            iny:     1 + number of derivatives of central              rotd-029
c                     potentials ( schroedinger: 1, dirac: 2).          rotd-030
c            lq:      local logical controls (see rotp).                rotd-031
c            pgn:     weight of legendre integral.                      rotd-032
c            xgn:     abscissae of legendre integral.                   rotd-033
c            lo(i):   logical controls:                                 rotd-034
c               lo(1)  =.true. rotational model-(.f.:vibrational model).rotd-035
c               lo(3)  =.true. anharmonic vibrational or asymmetric     rotd-036
c                              rotational model.                        rotd-037
c               lo(6)  =.true. use deformation lengths.                 rotd-038
c output:    p(k,j):  weight at point j of form factor i at k=i+27.     rotd-039
c            q(k,j)   radii in fermis. in rotational model, j=13,24 is  rotd-040
c                     first derivative/sin(theta) and j=25,36 2nd       rotd-041
c                     derivative + 1st derivative/tg(theta), used for   rotd-042
c                     schroedinger equivalent of dirac equation.        rotd-043
c            idt:     number of integration points.                     rotd-044
c            dd:      charge integrals.                                 rotd-045
c working area:                                                         rotd-046
c            pp:      for legendre polynomials.                         rotd-047
c***********************************************************************rotd-048
      implicit real*8 (a-h,o-z)                                         rotd-049
      logical lo(150),lq(8,5)                                           rotd-050
      dimension nbeta(18,*),beta(9,*),ivy(7,*),iv(*),pp(*),p(id1,*),q(8,rotd-051
     1*),val(4,8),dd(2),pgn(10),xgn(10),ff(660),poids(36,15),rb(15,8),nlrotd-052
     2(36),nk(36)                                                       rotd-053
      equivalence (poids(1,1),ff(1)),(rb(1,1),ff(541))                  rotd-054
      data ff(  1),ff(  2) / 5.12820512820513d-03, 2.43496936475441d-02/rotd-055
      data ff(  3),ff(  4) / 2.43496936475441d-02, 2.12528237972895d-02/rotd-056
      data ff(  5),ff(  6) / 5.53147440814732d-02, 2.12528237972895d-02/rotd-057
      data ff(  7),ff(  8) / 2.53452023906582d-02, 4.44873368571440d-02/rotd-058
      data ff(  9),ff( 10) / 4.44873368571440d-02, 2.53452023906582d-02/rotd-059
      data ff( 11),ff( 12) / 1.86559801758989d-02, 4.85184708058446d-02/rotd-060
      data ff( 13),ff( 14) / 4.12568870375796d-02, 4.85184708058446d-02/rotd-061
      data ff( 15),ff( 16) / 1.86559801758989d-02, 2.45925296747690d-02/rotd-062
      data ff( 17),ff( 18) / 3.46398560932081d-02, 4.17933479732147d-02/rotd-063
      data ff( 19),ff( 20) / 4.17933479732147d-02, 3.46398560932081d-02/rotd-064
      data ff( 21),ff( 22) / 2.45925296747690d-02, 1.19673178236678d-02/rotd-065
      data ff( 23),ff( 24) / 4.47278246564596d-02, 3.42917677140348d-02/rotd-066
      data ff( 25),ff( 26) / 3.69076912422490d-02, 3.42917677140348d-02/rotd-067
      data ff( 27),ff( 28) / 4.47278246564596d-02, 1.19673178236678d-02/rotd-068
      data ff( 29),ff( 30) / 1.22068028124735d-02, 1.07129429826274d-02/rotd-069
      data ff( 31),ff( 32) / 1.70796570854178d-02, 1.60746817649944d-02/rotd-070
      data ff( 33),ff( 34) / 1.60746817649944d-02, 1.70796570854178d-02/rotd-071
      data ff( 35),ff( 36) / 1.07129429826274d-02, 1.22068028124735d-02/rotd-072
      data ff( 37),ff( 38) / 1.16509780810355d-02, 5.02196040257258d-02/rotd-073
      data ff( 39),ff( 40) / 5.02196040257258d-02, 3.27291637647035d-02/rotd-074
      data ff( 41),ff( 42) / 9.18762267773519d-02, 3.27291637647035d-02/rotd-075
      data ff( 43),ff( 44) / 2.59023523875124d-02, 3.90112947467209d-02/rotd-076
      data ff( 45),ff( 46) / 3.90112947467209d-02, 2.59023523875124d-02/rotd-077
      data ff( 47),ff( 48) /-1.94110577743667d-03, 1.63152196117813d-02/rotd-078
      data ff( 49),ff( 50) / 4.25393417813309d-03, 1.63152196117813d-02/rotd-079
      data ff( 51),ff( 52) /-1.94110577743667d-03,-2.10440960549142d-03/rotd-080
      data ff( 53),ff( 54) /-2.95605747812527d-02,-1.76788269194279d-02/rotd-081
      data ff( 55),ff( 56) /-1.76788269194279d-02,-2.95605747812527d-02/rotd-082
      data ff( 57),ff( 58) /-2.10440960549142d-03,-2.76725877126884d-02/rotd-083
      data ff( 59),ff( 60) /-2.18051394343160d-02,-3.71237658735663d-02/rotd-084
      data ff( 61),ff( 62) /-3.47941600457989d-02,-3.71237658735663d-02/rotd-085
      data ff( 63),ff( 64) /-2.18051394343160d-02,-2.76725877126884d-02/rotd-086
      data ff( 65),ff( 66) /-2.37727476826438d-03,-2.57698170677382d-02/rotd-087
      data ff( 67),ff( 68) /-1.69793430277171d-02,-1.76582790639056d-02/rotd-088
      data ff( 69),ff( 70) /-1.76582790639056d-02,-1.69793430277171d-02/rotd-089
      data ff( 71),ff( 72) /-2.57698170677382d-02,-2.37727476826438d-03/rotd-090
      data ff( 73),ff( 74) /               0.d+00, 1.72605997389226d-03/rotd-091
      data ff( 75),ff( 76) /-1.72605997389226d-03, 1.25329145074895d-02/rotd-092
      data ff( 77),ff( 78) /               0.d+00,-1.25329145074895d-02/rotd-093
      data ff( 79),ff( 80) / 2.24225003695212d-02, 2.96494182999275d-02/rotd-094
      data ff( 81),ff( 82) /-2.96494182999275d-02,-2.24225003695212d-02/rotd-095
      data ff( 83),ff( 84) / 3.91319410166702d-02, 4.84852241623139d-02/rotd-096
      data ff( 85),ff( 86) /               0.d+00,-4.84852241623139d-02/rotd-097
      data ff( 87),ff( 88) /-3.91319410166702d-02, 3.97624306723559d-02/rotd-098
      data ff( 89),ff( 90) / 8.10325074410309d-02, 2.28106411006477d-02/rotd-099
      data ff( 91),ff( 92) /-2.28106411006477d-02,-8.10325074410309d-02/rotd-100
      data ff( 93),ff( 94) /-3.97624306723559d-02, 5.59851854712431d-02/rotd-101
      data ff( 95),ff( 96) / 6.92750919115029d-02, 5.27666983806334d-02/rotd-102
      data ff( 97),ff( 98) /               0.d+00,-5.27666983806334d-02/rotd-103
      data ff( 99),ff(100) /-6.92750919115029d-02,-5.59851854712431d-02/rotd-104
      data ff(101),ff(102) / 1.57386702462217d-02, 4.84030198418523d-02/rotd-105
      data ff(103),ff(104) / 2.47182393346187d-02, 9.25890190803834d-03/rotd-106
      data ff(105),ff(106) /-9.25890190803834d-03,-2.47182393346187d-02/rotd-107
      data ff(107),ff(108) /-4.84030198418523d-02,-1.57386702462217d-02/rotd-108
      data ff(109),ff(110) / 1.62578391680559d-02, 5.49097361991748d-02/rotd-109
      data ff(111),ff(112) / 5.49097361991748d-02, 8.83119316755724d-03/rotd-110
      data ff(113),ff(114) / 4.65475180836232d-02, 8.83119316755724d-03/rotd-111
      data ff(115),ff(116) /-1.52665570705068d-02,-4.45213321560779d-02/rotd-112
      data ff(117),ff(118) /-4.45213321560779d-02,-1.52665570705068d-02/rotd-113
      data ff(119),ff(120) /-3.25206220517009d-02,-5.00345998670453d-02/rotd-114
      data ff(121),ff(122) /-5.61452437357254d-02,-5.00345998670453d-02/rotd-115
      data ff(123),ff(124) /-3.25206220517009d-02,-5.34880433627418d-03/rotd-116
      data ff(125),ff(126) /-2.71365320807763d-02,-2.11168478505607d-02/rotd-117
      data ff(127),ff(128) /-2.11168478505607d-02,-2.71365320807763d-02/rotd-118
      data ff(129),ff(130) /-5.34880433627418d-03, 5.38896697941338d-03/rotd-119
      data ff(131),ff(132) / 2.71262358172909d-02, 2.30796535753636d-02/rotd-120
      data ff(133),ff(134) / 2.05455707964392d-02, 2.30796535753636d-02/rotd-121
      data ff(135),ff(136) / 2.71262358172909d-02, 5.38896697941338d-03/rotd-122
      data ff(137),ff(138) / 1.18873085059175d-02, 1.57695500564231d-02/rotd-123
      data ff(139),ff(140) / 1.69343260833909d-02, 1.84154828722142d-02/rotd-124
      data ff(141),ff(142) / 1.84154828722142d-02, 1.69343260833909d-02/rotd-125
      data ff(143),ff(144) / 1.57695500564231d-02, 1.18873085059175d-02/rotd-126
      data ff(145),ff(146) /               0.d+00, 8.48270535877333d-03/rotd-127
      data ff(147),ff(148) /-8.48270535877333d-03, 5.07879724674491d-02/rotd-128
      data ff(149),ff(150) /               0.d+00,-5.07879724674491d-02/rotd-129
      data ff(151),ff(152) / 6.07576950711252d-02, 9.00787083612551d-02/rotd-130
      data ff(153),ff(154) /-9.00787083612551d-02,-6.07576950711252d-02/rotd-131
      data ff(155),ff(156) / 6.45377024914683d-02, 6.34461864848980d-02/rotd-132
      data ff(157),ff(158) /               0.d+00,-6.34461864848980d-02/rotd-133
      data ff(159),ff(160) /-6.45377024914683d-02,-5.65537884945032d-03/rotd-134
      data ff(161),ff(162) / 4.77376504465041d-02,-6.49930325424402d-03/rotd-135
      data ff(163),ff(164) / 6.49930325424402d-03,-4.77376504465041d-02/rotd-136
      data ff(165),ff(166) / 5.65537884945032d-03, 1.24655233750459d-03/rotd-137
      data ff(167),ff(168) /-8.76714858478633d-02,-1.18181266709155d-02/rotd-138
      data ff(169),ff(170) /               0.d+00, 1.18181266709155d-02/rotd-139
      data ff(171),ff(172) / 8.76714858478633d-02,-1.24655233750459d-03/rotd-140
      data ff(173),ff(174) /-3.84487336410874d-02,-7.62058619698479d-03/rotd-141
      data ff(175),ff(176) /-3.01133238640137d-02,-1.08854252444356d-02/rotd-142
      data ff(177),ff(178) / 1.08854252444356d-02, 3.01133238640137d-02/rotd-143
      data ff(179),ff(180) / 7.62058619698479d-03, 3.84487336410874d-02/rotd-144
      data ff(181),ff(182),ff(183),ff(184)/3*0.d0, 1.36660942007569d-03/rotd-145
      data ff(185),ff(186) /-2.73321884015139d-03, 1.36660942007569d-03/rotd-146
      data ff(187),ff(188) / 1.10470452782256d-02,-1.10470452782256d-02/rotd-147
      data ff(189),ff(190) /-1.10470452782256d-02, 1.10470452782256d-02/rotd-148
      data ff(191),ff(192) / 2.19899348965421d-02, 7.44598962747265d-03/rotd-149
      data ff(193),ff(194) /-5.88718490480295d-02, 7.44598962747265d-03/rotd-150
      data ff(195),ff(196) / 2.19899348965421d-02, 4.68819219798074d-02/rotd-151
      data ff(197),ff(198) / 1.75997201070024d-02,-6.44816420868098d-02/rotd-152
      data ff(199),ff(200) /-6.44816420868098d-02, 1.75997201070024d-02/rotd-153
      data ff(201),ff(202) / 4.68819219798074d-02, 3.99738678988680d-02/rotd-154
      data ff(203),ff(204) / 7.12682217154704d-02,-6.36366236436914d-02/rotd-155
      data ff(205),ff(206) /-9.52109319412941d-02,-6.36366236436914d-02/rotd-156
      data ff(207),ff(208) / 7.12682217154704d-02, 3.99738678988680d-02/rotd-157
      data ff(209),ff(210) / 3.48854645305456d-02, 1.59406059510446d-02/rotd-158
      data ff(211),ff(212) /-3.85251092517111d-03,-4.69735595564191d-02/rotd-159
      data ff(213),ff(214) /-4.69735595564191d-02,-3.85251092517111d-03/rotd-160
      data ff(215),ff(216) / 1.59406059510446d-02, 3.48854645305456d-02/rotd-161
      data ff(217),ff(218) / 2.09351688388115d-02, 4.48693101517502d-02/rotd-162
      data ff(219),ff(220) / 4.48693101517502d-02,-2.58717911400513d-02/rotd-163
      data ff(221),ff(222) /-2.81401919724747d-02,-2.58717911400513d-02/rotd-164
      data ff(223),ff(224) /-2.67091832939234d-02,-6.48487928844068d-02/rotd-165
      data ff(225),ff(226) /-6.48487928844068d-02,-2.67091832939234d-02/rotd-166
      data ff(227),ff(228) / 7.16351218404911d-03, 1.79021864804572d-02/rotd-167
      data ff(229),ff(230) / 2.15963617795819d-02, 1.79021864804572d-02/rotd-168
      data ff(231),ff(232) / 7.16351218404911d-03, 2.39109798331374d-02/rotd-169
      data ff(233),ff(234) / 4.82363267486100d-02, 4.45971408837992d-02/rotd-170
      data ff(235),ff(236) / 4.45971408837992d-02, 4.82363267486100d-02/rotd-171
      data ff(237),ff(238) / 2.39109798331374d-02,-8.59824516528979d-04/rotd-172
      data ff(239),ff(240) /-8.77138104825350d-03,-1.02303358111611d-03/rotd-173
      data ff(241),ff(242) /-4.79305557318445d-03,-1.02303358111611d-03/rotd-174
      data ff(243),ff(244) /-8.77138104825350d-03,-8.59824516528979d-04/rotd-175
      data ff(245),ff(246) /-1.06844320272751d-02,-1.45408758222938d-02/rotd-176
      data ff(247),ff(248) /-1.99395576475419d-02,-1.82297258567795d-02/rotd-177
      data ff(249),ff(250) /-1.82297258567795d-02,-1.99395576475419d-02/rotd-178
      data ff(251),ff(252) /-1.45408758222938d-02,-1.06844320272751d-02/rotd-179
      data ff(253),ff(254) /               0.d+00, 2.01805115490348d-02/rotd-180
      data ff(255),ff(256) /-2.01805115490348d-02, 8.57318720924763d-02/rotd-181
      data ff(257),ff(258) /               0.d+00,-8.57318720924763d-02/rotd-182
      data ff(259),ff(260) / 3.23094559967599d-02, 8.19417704703203d-02/rotd-183
      data ff(261),ff(262) /-8.19417704703203d-02,-3.23094559967599d-02/rotd-184
      data ff(263),ff(264) /-1.46857629097277d-02,-6.79023750172081d-02/rotd-185
      data ff(265),ff(266) /               0.d+00, 6.79023750172081d-02/rotd-186
      data ff(267),ff(268) / 1.46857629097277d-02,-6.96933563711756d-02/rotd-187
      data ff(269),ff(270) /-4.17790846324735d-02,-3.84574445723291d-02/rotd-188
      data ff(271),ff(272) / 3.84574445723291d-02, 4.17790846324735d-02/rotd-189
      data ff(273),ff(274) / 6.96933563711756d-02, 3.99606295249026d-02/rotd-190
      data ff(275),ff(276) /-3.02669933372692d-02, 1.78196010140318d-02/rotd-191
      data ff(277),ff(278) /               0.d+00,-1.78196010140318d-02/rotd-192
      data ff(279),ff(280) / 3.02669933372692d-02,-3.99606295249026d-02/rotd-193
      data ff(281),ff(282) /-1.85102966735610d-03, 5.84883614463197d-02/rotd-194
      data ff(283),ff(284) / 2.06176299500674d-02, 5.03674288697549d-03/rotd-195
      data ff(285),ff(286) /-5.03674288697549d-03,-2.06176299500674d-02/rotd-196
      data ff(287),ff(288) /-5.84883614463197d-02, 1.85102966735610d-03/rotd-197
      data ff(289),ff(290),ff(291),ff(292)/3*0.d0, 8.75524578710006d-03/rotd-198
      data ff(293),ff(294) /-1.75104915742001d-02, 8.75524578710006d-03/rotd-199
      data ff(295),ff(296) / 5.09492763472956d-02,-5.09492763472956d-02/rotd-200
      data ff(297),ff(298) /-5.09492763472956d-02, 5.09492763472956d-02/rotd-201
      data ff(299),ff(300) / 5.07686792912787d-02, 3.43411087448840d-02/rotd-202
      data ff(301),ff(302) /-1.70219576072325d-01, 3.43411087448840d-02/rotd-203
      data ff(303),ff(304) / 5.07686792912787d-02, 5.95241999935498d-02/rotd-204
      data ff(305),ff(306) /-1.56733778150275d-02,-4.38508221785223d-02/rotd-205
      data ff(307),ff(308) /-4.38508221785223d-02,-1.56733778150275d-02/rotd-206
      data ff(309),ff(310) / 5.95241999935498d-02,-6.35546557275261d-02/rotd-207
      data ff(311),ff(312) / 5.26475282909628d-02,-1.74503883012358d-02/rotd-208
      data ff(313),ff(314) / 5.67150314755984d-02,-1.74503883012358d-02/rotd-209
      data ff(315),ff(316) / 5.26475282909628d-02,-6.35546557275261d-02/rotd-210
      data ff(317),ff(318) / 1.43084825509049d-02,-7.77375076960055d-02/rotd-211
      data ff(319),ff(320) / 2.99695551646778d-02, 3.34594699804229d-02/rotd-212
      data ff(321),ff(322) / 3.34594699804229d-02, 2.99695551646778d-02/rotd-213
      data ff(323),ff(324) /-7.77375076960055d-02, 1.43084825509049d-02/rotd-214
      data ff(325),ff(326),ff(327),ff(328),ff(329),ff(330) / 6*0.d+00 / rotd-215
      data ff(331),ff(332) / 2.45227713022227d-03,-4.90455426044453d-03/rotd-216
      data ff(333),ff(334) / 4.90455426044453d-03,-2.45227713022227d-03/rotd-217
      data ff(335),ff(336) / 1.70476858680581d-02,-2.41090685616840d-02/rotd-218
      data ff(337),ff(338) /               0.d+00, 2.41090685616840d-02/rotd-219
      data ff(339),ff(340) /-1.70476858680581d-02, 2.87679007598782d-02/rotd-220
      data ff(341),ff(342) /-6.25948031834043d-03,-7.67073502036074d-02/rotd-221
      data ff(343),ff(344) / 7.67073502036074d-02, 6.25948031834043d-03/rotd-222
      data ff(345),ff(346) /-2.87679007598782d-02, 6.77534129025308d-02/rotd-223
      data ff(347),ff(348) /-2.45662401760060d-02,-9.29568496692793d-02/rotd-224
      data ff(349),ff(350) /               0.d+00, 9.29568496692793d-02/rotd-225
      data ff(351),ff(352) / 2.45662401760060d-02,-6.77534129025308d-02/rotd-226
      data ff(353),ff(354) / 1.40653464342708d-02, 3.44626025062703d-02/rotd-227
      data ff(355),ff(356) /-6.14715612078917d-02,-3.05058349395271d-02/rotd-228
      data ff(357),ff(358) / 3.05058349395271d-02, 6.14715612078917d-02/rotd-229
      data ff(359),ff(360) /-3.44626025062703d-02,-1.40653464342708d-02/rotd-230
      data ff(361),ff(362) / 2.68196038675183d-02, 2.31031610463596d-02/rotd-231
      data ff(363),ff(364) / 2.31031610463596d-02,-4.28485793267828d-02/rotd-232
      data ff(365),ff(366) /-7.35437975772992d-02,-4.28485793267828d-02/rotd-233
      data ff(367),ff(368) / 8.24684503593131d-03, 1.06081754814925d-02/rotd-234
      data ff(369),ff(370) / 1.06081754814925d-02, 8.24684503593131d-03/rotd-235
      data ff(371),ff(372) / 2.51256208268608d-02, 4.43395667660788d-02/rotd-236
      data ff(373),ff(374) / 5.39942159127383d-02, 4.43395667660788d-02/rotd-237
      data ff(375),ff(376) / 2.51256208268608d-02,-2.19715194066651d-02/rotd-238
      data ff(377),ff(378) /-3.13725579969708d-02,-4.08834934180796d-02/rotd-239
      data ff(379),ff(380) /-4.08834934180796d-02,-3.13725579969708d-02/rotd-240
      data ff(381),ff(382) /-2.19715194066651d-02,-1.88427973024923d-03/rotd-241
      data ff(383),ff(384) /-2.16035578956301d-02,-1.17587068801884d-02/rotd-242
      data ff(385),ff(386) /-1.12062882635935d-02,-1.17587068801884d-02/rotd-243
      data ff(387),ff(388) /-2.16035578956301d-02,-1.88427973024923d-03/rotd-244
      data ff(389),ff(390) / 5.74971871310925d-03, 2.25181635560216d-02/rotd-245
      data ff(391),ff(392) / 1.76219271299887d-02, 1.69776491290416d-02/rotd-246
      data ff(393),ff(394) / 1.69776491290416d-02, 1.76219271299887d-02/rotd-247
      data ff(395),ff(396) / 2.25181635560216d-02, 5.74971871310925d-03/rotd-248
      data ff(397),ff(398) /               0.d+00, 3.55735538800802d-02/rotd-249
      data ff(399),ff(400) /-3.55735538800802d-02, 8.33786715099005d-02/rotd-250
      data ff(401),ff(402) /               0.d+00,-8.33786715099005d-02/rotd-251
      data ff(403),ff(404) /-4.89348970296868d-02,-2.91035565005004d-04/rotd-252
      data ff(405),ff(406) / 2.91035565005004d-04, 4.89348970296868d-02/rotd-253
      data ff(407),ff(408) /-2.62016346104983d-02,-8.33457375352782d-02/rotd-254
      data ff(409),ff(410) /               0.d+00, 8.33457375352782d-02/rotd-255
      data ff(411),ff(412) / 2.62016346104983d-02, 2.62738780028789d-02/rotd-256
      data ff(413),ff(414) / 8.32340348860637d-02, 3.18724837249571d-02/rotd-257
      data ff(415),ff(416) /-3.18724837249571d-02,-8.32340348860637d-02/rotd-258
      data ff(417),ff(418) /-2.62738780028789d-02, 2.62547109771934d-02/rotd-259
      data ff(419),ff(420) / 7.98302855528211d-03, 4.48364778698653d-03/rotd-260
      data ff(421),ff(422) /               0.d+00,-4.48364778698653d-03/rotd-261
      data ff(423),ff(424) /-7.98302855528211d-03,-2.62547109771934d-02/rotd-262
      data ff(425),ff(426) /-2.51077741509568d-02,-2.87429639697600d-02/rotd-263
      data ff(427),ff(428) /-1.79981066009081d-02,-7.87642513464656d-03/rotd-264
      data ff(429),ff(430) / 7.87642513464656d-03, 1.79981066009081d-02/rotd-265
      data ff(431),ff(432) / 2.87429639697600d-02, 2.51077741509568d-02/rotd-266
      data ff(433),ff(434),ff(435),ff(436)/3*0.d0, 2.38959949710526d-02/rotd-267
      data ff(437),ff(438) /-4.77919899421051d-02, 2.38959949710526d-02/rotd-268
      data ff(439),ff(440) / 7.91176151667601d-02,-7.91176151667601d-02/rotd-269
      data ff(441),ff(442) /-7.91176151667601d-02, 7.91176151667601d-02/rotd-270
      data ff(443),ff(444) /-1.24626161171327d-02, 5.33272858981795d-02/rotd-271
      data ff(445),ff(446) /-8.17293395620937d-02, 5.33272858981795d-02/rotd-272
      data ff(447),ff(448) /-1.24626161171327d-02,-1.44916866191644d-02/rotd-273
      data ff(449),ff(450) /-9.04220344262881d-02, 1.04913721045452d-01/rotd-274
      data ff(451),ff(452) / 1.04913721045452d-01,-9.04220344262881d-02/rotd-275
      data ff(453),ff(454) /-1.44916866191644d-02,-5.73533998264151d-02/rotd-276
      data ff(455),ff(456) / 7.23959359228724d-02,-1.77393445770836d-02/rotd-277
      data ff(457),ff(458) / 5.39361696125263d-03,-1.77393445770836d-02/rotd-278
      data ff(459),ff(460) / 7.23959359228724d-02,-5.73533998264151d-02/rotd-279
      data ff(461),ff(462) / 5.42648795710159d-02,-2.39248769146420d-02/rotd-280
      data ff(463),ff(464) / 7.38288973327365d-04,-3.10782916297012d-02/rotd-281
      data ff(465),ff(466) /-3.10782916297012d-02, 7.38288973327365d-04/rotd-282
      data ff(467),ff(468) /-2.39248769146420d-02, 5.42648795710159d-02/rotd-283
      data ff(469),ff(470),ff(471),ff(472),ff(473),ff(474) / 6*0.d+00 / rotd-284
      data ff(475),ff(476) / 1.58592251779111d-02,-3.17184503558222d-02/rotd-285
      data ff(477),ff(478) / 3.17184503558222d-02,-1.58592251779111d-02/rotd-286
      data ff(479),ff(480) / 6.36434740587254d-02,-9.00054641703897d-02/rotd-287
      data ff(481),ff(482) /               0.d+00, 9.00054641703897d-02/rotd-288
      data ff(483),ff(484) /-6.36434740587254d-02, 2.20893694492763d-02/rotd-289
      data ff(485),ff(486) / 2.93554190800171d-02,-1.48336186023447d-01/rotd-290
      data ff(487),ff(488) / 1.48336186023447d-01,-2.93554190800171d-02/rotd-291
      data ff(489),ff(490) /-2.20893694492763d-02, 4.17889616928183d-02/rotd-292
      data ff(491),ff(492) /-9.17122054842361d-02, 7.52722761872573d-02/rotd-293
      data ff(493),ff(494) /               0.d+00,-7.52722761872573d-02/rotd-294
      data ff(495),ff(496) / 9.17122054842361d-02,-4.17889616928183d-02/rotd-295
      data ff(497),ff(498) /-6.41790551032870d-02, 5.94260666825252d-02/rotd-296
      data ff(499),ff(500) / 7.67785691121092d-03, 2.62939467857734d-02/rotd-297
      data ff(501),ff(502) /-2.62939467857734d-02,-7.67785691121092d-03/rotd-298
      data ff(503),ff(504) /-5.94260666825252d-02, 6.41790551032870d-02/rotd-299
      data ff(505),ff(506),ff(507),ff(508),ff(509),ff(510) / 6*0.d+00 / rotd-300
      data ff(511),ff(512),ff(513),ff(514)                 / 4*0.d+00 / rotd-301
      data ff(515),ff(516) / 6.25351913613187d-03,-1.25070382722637d-02/rotd-302
      data ff(517),ff(518) / 1.25070382722637d-02,-1.25070382722637d-02/rotd-303
      data ff(519),ff(520) / 6.25351913613187d-03, 3.11758837931106d-02/rotd-304
      data ff(521),ff(522) /-5.04436396065700d-02, 1.92677558134594d-02/rotd-305
      data ff(523),ff(524) / 1.92677558134594d-02,-5.04436396065700d-02/rotd-306
      data ff(525),ff(526) / 3.11758837931106d-02, 3.58893219026970d-02/rotd-307
      data ff(527),ff(528) /-1.67264809607312d-02,-9.33778447285944d-02/rotd-308
      data ff(529),ff(530) / 1.48430007573257d-01,-9.33778447285944d-02/rotd-309
      data ff(531),ff(532) /-1.67264809607312d-02, 3.58893219026970d-02/rotd-310
      data ff(533),ff(534) / 4.68575275756458d-02,-4.50757375114331d-02/rotd-311
      data ff(535),ff(536) /-3.00076119100051d-02, 2.82258218457924d-02/rotd-312
      data ff(537),ff(538) / 2.82258218457924d-02,-3.00076119100051d-02/rotd-313
      data ff(539),ff(540) /-4.50757375114331d-02, 4.68575275756458d-02/rotd-314
      data ff(541),ff(542),ff(543),ff(544) / 2*1.d+00, 0.d+00, 1.d+00 / rotd-315
      data ff(545),ff(546),ff(547),ff(548) / 2*0.d+00, 1.d+00, 0.d+00 / rotd-316
      data ff(549),ff(550),ff(551),ff(552) / 2*0.d+00, 1.d+00, 0.d+00 / rotd-317
      data ff(553),ff(554),ff(555),ff(556) / 3*0.d+00, 1.d+00         / rotd-318
      data ff(557),ff(558) / 9.25726650926814d-01, 3.03219677861538d-02/rotd-319
      data ff(559),ff(560) / 7.63148756611001d-01, 1.10652387063757d-01/rotd-320
      data ff(561),ff(562) / 1.28207234895501d-03, 5.36257386538795d-01/rotd-321
      data ff(563),ff(564) / 2.17289580469363d-01, 8.13196358030030d-03/rotd-322
      data ff(565),ff(566) / 5.76608786636350d-05, 2.78047174877667d-01/rotd-323
      data ff(567),ff(568) / 3.29131159509191d-01, 2.49657214768430d-02/rotd-324
      data ff(569),ff(570) / 5.20868271692270d-04, 2.66389008100408d-06/rotd-325
      data ff(571),ff(572) /               1.d+00, 7.17617351394050d-01/rotd-326
      data ff(573),ff(574) / 1.15282233550037d-01, 2.13774427323495d-01/rotd-327
      data ff(575),ff(576) / 3.48423989314638d-01, 1.85320103458231d-02/rotd-328
      data ff(577),ff(578) /-2.35732455017163d-01, 4.90294315725551d-01/rotd-329
      data ff(579),ff(580) / 9.85729671840697d-02, 3.16881041332955d-03/rotd-330
      data ff(581),ff(582) /-4.09576022206791d-01, 4.20201210269288d-01/rotd-331
      data ff(583),ff(584) / 2.34245007796887d-01, 2.41313741208102d-02/rotd-332
      data ff(585),ff(586) / 5.56591156140697d-04,               1.d+00/rotd-333
      data ff(587),ff(588) / 4.16890700467236d-01, 2.38053374687832d-01/rotd-334
      data ff(589),ff(590) /-2.82554557772787d-01, 5.03833139973589d-01/rotd-335
      data ff(591),ff(592) / 7.90217156752737d-02,-3.59733444374334d-01/rotd-336
      data ff(593),ff(594) / 2.89718584757935d-01, 3.03418532856755d-01/rotd-337
      data ff(595),ff(596) / 2.79017946123459d-02, 7.08378251175649d-02/rotd-338
      data ff(597),ff(598) /-1.72370094784044d-01, 4.12885596178737d-01/rotd-339
      data ff(599),ff(600) / 1.55306184423031d-01, 1.01200845906307d-02/rotd-340
      data ff(601),ff(602) /               1.d+00, 8.31092995327642d-02/rotd-341
      data ff(603),ff(604) / 3.74319061007963d-01,-4.21630141495484d-01/rotd-342
      data ff(605),ff(606) / 4.15874017677357d-01, 1.95380697242947d-01/rotd-343
      data ff(607),ff(608) / 1.11600329703613d-01,-1.97772479536753d-01/rotd-344
      data ff(609),ff(610) / 4.29387782672098d-01, 1.08476318674788d-01/rotd-345
      data ff(611),ff(612) / 2.63594691134320d-01,-2.34078763472890d-01/rotd-346
      data ff(613),ff(614) / 7.77527093709932d-02, 3.57086142014797d-01/rotd-347
      data ff(615),ff(616) / 6.18663570444226d-02,               1.d+00/rotd-348
      data ff(617),ff(618) /-2.17617351394050d-01, 4.97090202145758d-01/rotd-349
      data ff(619),ff(620) /-1.75906698838214d-01, 1.01968005344553d-01/rotd-350
      data ff(621),ff(622) / 3.44562631700107d-01, 3.21522932835539d-01/rotd-351
      data ff(623),ff(624) /-3.16879195937032d-01, 2.47505734203973d-01/rotd-352
      data ff(625),ff(626) / 2.54047379389696d-01,-2.23915517573357d-01/rotd-353
      data ff(627),ff(628) / 2.47297362843729d-01,-3.04922989721535d-01/rotd-354
      data ff(629),ff(630) / 3.15711860946547d-01, 1.92409975848431d-01/rotd-355
      data ff(631),ff(632) /               1.d+00,-4.25726650926814d-01/rotd-356
      data ff(633),ff(634) / 5.82050467909641d-01, 2.00043214171989d-01/rotd-357
      data ff(635),ff(636) /-2.45486828370620d-01, 4.72409970427464d-01/rotd-358
      data ff(637),ff(638) /-3.40709996864496d-02, 5.77157388195865d-02/rotd-359
      data ff(639),ff(640) /-1.44294709220167d-01, 4.07841145692130d-01/rotd-360
      data ff(641),ff(642) /-9.23304365056544d-02, 7.92778608560820d-02/rotd-361
      data ff(643),ff(644) /-3.36435261948797d-02,-7.14935648162744d-02/rotd-362
      data ff(645),ff(646) / 3.61684038642514d-01,               1.d+00/rotd-363
      data ff(647),ff(648) /              -5.d-01, 6.12372435695795d-01/rotd-364
      data ff(649),ff(650) /             3.75d-01,-3.95284707521047d-01/rotd-365
      data ff(651),ff(652) / 5.22912516583797d-01,           -3.125d-01/rotd-366
      data ff(653),ff(654) / 3.20217211436237d-01,-3.50780380010057d-01/rotd-367
      data ff(655),ff(656) / 4.74958879799083d-01,         2.734375d-01/rotd-368
      data ff(657),ff(658) /-2.77316239832795d-01, 2.90851726077911d-01/rotd-369
      data ff(659),ff(660) /-3.23629924643875d-01, 4.43148525027868d-01/rotd-370
      data nl/0,2,2,4,4,4,6,6,6,6,8,8,8,8,8,10,10,10,10,10,10,12,12,12,1rotd-371
     12,12,12,12,14,14,14,14,14,14,14,14/                               rotd-372
      data nk/0,0,2,0,2,4,0,2,4,6,0,2,4,6,8,0,2,4,6,8,10,0,2,4,6,8,10,12rotd-373
     1,0,2,4,6,8,10,12,14/                                              rotd-374
      data pi /3.1415926535897932d0/                                    rotd-375
      dd(1)=0.d0                                                        rotd-376
      dd(2)=0.d0                                                        rotd-377
      if (lo(1)) go to 4                                                rotd-378
      idt=1                                                             rotd-379
      do 2 j=1,8                                                        rotd-380
      if (lq(j,1)) go to 2                                              rotd-381
      if (lq(j,3)) go to 1                                              rotd-382
      p(j,1)=0.d0                                                       rotd-383
      q(j,1)=-val(2,j)                                                  rotd-384
      p(j+8,1)=1.d-16                                                   rotd-385
      if (lq(j,4)) go to 2                                              rotd-386
      q(j,1)=val(2,j)                                                   rotd-387
      if (q(j,1).gt.-36.d0*val(3,j)) p(j+8,1)=dexp(q(j,1)/val(3,j))     rotd-388
      go to 2                                                           rotd-389
    1 p(j,1)=val(2,j)                                                   rotd-390
      dd(j-6)=p(j,1)**3                                                 rotd-391
    2 continue                                                          rotd-392
      do 3 i=1,iq1                                                      rotd-393
    3 p(i+27,1)=1.d0                                                    rotd-394
      return                                                            rotd-395
    4 if (lo(3)) go to 18                                               rotd-396
c *** symmetric rotational model ***************                        rotd-397
      idt=10                                                            rotd-398
      iq=iqm                                                            rotd-399
      if (invz.ne.0) iq=max0(iq,imax)                                   rotd-400
      iq2=iqm/2                                                         rotd-401
      sr=1.d0                                                           rotd-402
      do 6 j=1,8                                                        rotd-403
      if (lq(j,1)) go to 6                                              rotd-404
      if (lo(6)) sr=1.d0/val(2,j)                                       rotd-405
      if (.not.lq(j,4)) sr=dabs(sr)                                     rotd-406
      do 5 i=1,iq2                                                      rotd-407
    5 p(16+j,2*i)=sr*beta(j,i)*dsqrt(dfloat(4*i+1)/(4.d0*pi))           rotd-408
    6 continue                                                          rotd-409
      do 17 i=1,10                                                      rotd-410
      pp(2)=xgn(i)                                                      rotd-411
      pp(1)=1.d0                                                        rotd-412
      do 7 j=2,iq                                                       rotd-413
      c=1.d0/dfloat(j)                                                  rotd-414
    7 pp(j+1)=(2.d0-c)*pp(2)*pp(j)+(c-1.d0)*pp(j-1)                     rotd-415
      c1=1.d0-pp(2)**2                                                  rotd-416
      do 11 j=1,8                                                       rotd-417
      if (lq(j,1)) go to 11                                             rotd-418
      p(j,i)=0.d0                                                       rotd-419
      q(j,i+12)=0.d0                                                    rotd-420
      q(j,i+24)=0.d0                                                    rotd-421
      q(j,i)=1.d0                                                       rotd-422
      do 8 k=2,iqm,2                                                    rotd-423
      c=k                                                               rotd-424
      q(j,i)=q(j,i)+p(16+j,k)*pp(k+1)                                   rotd-425
      q(j,i+12)=q(j,i+12)-c*p(16+j,k)*(pp(2)*pp(k+1)-pp(k))/c1          rotd-426
    8 q(j,i+24)=q(j,i+24)-p(16+j,k)*pp(k+1)*c*(c+1.d0)                  rotd-427
      c2=val(2,j)                                                       rotd-428
      if (.not.lq(j,4)) c2=-c2                                          rotd-429
      do 9 k=1,3                                                        rotd-430
    9 q(j,i+12*k-12)=-q(j,i+12*k-12)*c2                                 rotd-431
      if (lq(j,3)) go to 10                                             rotd-432
      p(j+8,i)=1.d-16                                                   rotd-433
      if (lq(j,4)) go to 11                                             rotd-434
      if (q(j,i).gt.-36.d0*val(3,j)) p(j+8,i)=dexp(q(j,i)/val(3,j))     rotd-435
      go to 11                                                          rotd-436
   10 p(j,i)=-q(j,i)                                                    rotd-437
      dd(j-6)=dd(j-6)+pgn(i)*(p(j,i)**3)                                rotd-438
   11 continue                                                          rotd-439
      do 16 ij=1,iq1                                                    rotd-440
      k=1                                                               rotd-441
      if (ij.gt.iny) k=ivy(1,ij-iny)/1000                               rotd-442
      c=pp(k)                                                           rotd-443
      if ((iv(ij).eq.1).or.(ij.le.iny)) go to 16                        rotd-444
      kb=mod(ivy(1,ij-iny),1000)                                        rotd-445
      kl=nbeta(17,kb)                                                   rotd-446
      kk=nbeta(18,kb)                                                   rotd-447
      if (ivy(6,ij-iny).lt.0) kl=mod(kl,2)                              rotd-448
      if (kk.ne.0) go to 12                                             rotd-449
      c=c*pp(kl+1)*dsqrt(dfloat(2*kl+1))                                rotd-450
      go to 16                                                          rotd-451
c computation of y(k-1,kk) * y(kl,kk)                                   rotd-452
   12 c=dsqrt(2.d0*kl+1.d0)                                             rotd-453
      do 13 kb=1,kk                                                     rotd-454
   13 c=c*c1*dfloat(2*kb-1)**2/dsqrt(dfloat((kl+kb)*(k-kb)*(kl-kb+1)*(k+rotd-455
     1kb-1)))                                                           rotd-456
      kz=k-1-kk                                                         rotd-457
      do 15 j=1,2                                                       rotd-458
      if (kz.le.0) go to 15                                             rotd-459
      d=0.d0                                                            rotd-460
      do 14 kb=1,kz                                                     rotd-461
      c2=d                                                              rotd-462
      d=c                                                               rotd-463
   14 c=c2+(d*pp(2)-c2)*dfloat(2*(kk+kb)-1)/dfloat(kb)                  rotd-464
   15 kz=kl-kk                                                          rotd-465
   16 p(ij+27,i)=pgn(i)*c*dsqrt(dfloat(2*k-1))                          rotd-466
   17 continue                                                          rotd-467
      return                                                            rotd-468
c *** asymmetric rotational model ***************                       rotd-469
   18 idt=36                                                            rotd-470
      do 21 j=1,8                                                       rotd-471
      do 20 i=1,iqm                                                     rotd-472
      if (nk(i+1).eq.0) go to 19                                        rotd-473
      p(16+j,i+1)=p(16+j,i)*dsin(pi*beta(j,i)/180.d0)                   rotd-474
      p(16+j,i)=p(16+j,i)*dcos(pi*beta(j,i)/180.d0)                     rotd-475
      go to 20                                                          rotd-476
   19 p(16+j,i+1)=beta(j,i)*dsqrt(dfloat(2*nl(i+1)+1)/(4.d0*pi))        rotd-477
   20 continue                                                          rotd-478
   21 continue                                                          rotd-479
      sr=1.d0                                                           rotd-480
      do 23 j=1,8                                                       rotd-481
      if (lq(j,1)) go to 23                                             rotd-482
      if (lo(6)) sr=1.d0/val(2,j)                                       rotd-483
      if (.not.lq(j,4)) sr=dabs(sr)                                     rotd-484
      do 22 i=1,iqm                                                     rotd-485
      if (nk(i+1).ne.0) p(16+j,i+1)=p(16+j,i+1)*1.414213562d0           rotd-486
   22 p(16+j,i+1)=sr*p(16+j,i+1)                                        rotd-487
   23 continue                                                          rotd-488
      i=0                                                               rotd-489
      do 29 l=1,8                                                       rotd-490
      phi=pi/dfloat(4*max0(1,l-1))                                      rotd-491
      do 28 m=1,l                                                       rotd-492
      i=i+1                                                             rotd-493
      do 24 j=1,iq1                                                     rotd-494
      k=1                                                               rotd-495
      if (j.gt.iny) k=ivy(1,j-iny)/1000                                 rotd-496
   24 p(j+27,i)=poids(i,k)                                              rotd-497
      do 27 j=1,8                                                       rotd-498
      if (lq(j,1)) go to 27                                             rotd-499
      p(j,i)=0.d0                                                       rotd-500
      r=1.d0                                                            rotd-501
      do 25 k=1,iqm                                                     rotd-502
   25 r=r+p(16+j,k+1)*rb(k+1,l)*dcos(dfloat(nk(k+1)*nk(i))*phi)         rotd-503
      q(j,i)=-r*val(2,j)                                                rotd-504
      if (lq(j,3)) go to 26                                             rotd-505
      p(j+8,i)=1.d-16                                                   rotd-506
      if (lq(j,4)) go to 27                                             rotd-507
      q(j,i)=-q(j,i)                                                    rotd-508
      if (q(j,i).gt.-36.d0*val(3,j)) p(j+8,i)=dexp(q(j,i)/val(3,j))     rotd-509
      go to 27                                                          rotd-510
   26 p(j,i)=r*dabs(val(2,j))                                           rotd-511
      dd(j-6)=dd(j-6)+poids(i,1)*(p(j,i)**3)                            rotd-512
   27 continue                                                          rotd-513
   28 continue                                                          rotd-514
   29 continue                                                          rotd-515
      return                                                            rotd-516
      end                                                               rotd-517
c 29/10/06                                                      ecis06  rotz-000
      subroutine rotz(vr,xgn,wv,r,q,val,j,iv,b,p,id1,iq1,lo)            rotz-001
c deformation of the schroedinger equation which is equivalent to the   rotz-002
c dirac equation only for elastic scattering:                           rotz-003
c     no asymmetric rotational model,                                   rotz-004
c     no diffuseness of coulomb charge and no coulomb deformation,      rotz-005
c     no vibrational band in rotational model,                          rotz-006
c     only first order vibrational model.                               rotz-007
c input:     vr(i,j): potential for i=1, -1rst derivative for i=5       rotz-008
c                     and second derivative for i=6.                    rotz-009
c            xgn:     abscissae for legendre integration.               rotz-010
c            wv:      mass in wv(6), energy in wv(7).                   rotz-011
c            r:       radius.                                           rotz-012
c            q(i,j,k):derivatives dr/dtheta for k=2 and 3.              rotz-013
c            val:     optical model.                                    rotz-014
c            j:       point of legendre angular integral.               rotz-015
c            iv:      number of phonons plus one.                       rotz-016
c            b:       deformations.                                     rotz-017
c            p(i,j):  previous results for i=17 to 26 and weights       rotz-018
c                     for i=28 and up in the rotational model.          rotz-019
c            id1:     first dimension of p.                             rotz-020
c            iq1:     number of transition form factors plus 3.         rotz-021
c            lo(i):   logical controls:                                 rotz-022
c               lo(1)  =.true. rotational model-(.f.:vibrational model).rotz-023
c output:    p(i,j)   for i=17 to 26, potential for j=1 and             rotz-024
c                     transition form factors for j=4 to iq1.           rotz-025
c                                                                       rotz-026
c for the common  /dcons/ see calc.                                     rotz-027
c                                                                       rotz-028
c significance of the quantities in common /dcons/:                     rotz-029
c  ccz:       coulomb alpha constant.                                   rotz-030
c   used:     ccz.                                                      rotz-031
c                                                                       rotz-032
c***********************************************************************rotz-033
      implicit real*8 (a-h,o-z)                                         rotz-034
      logical lo(150)                                                   rotz-035
      dimension vr(6,10),xgn(10),wv(22),q(8,12,*),val(32),iv(*),b(10,*),rotz-036
     1p(id1,*)                                                          rotz-037
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            rotz-038
      common /inout/ mr,mw,ms                                           rotz-039
      xp=chb**2/(2.d0*wv(6))                                            rotz-040
      do 2 i=7,8                                                        rotz-041
      if (r.gt.val(4*i-2)) go to 1                                      rotz-042
      vr(1,i)=ccz*val(4*i-3)*(1.5d0-.5d0*(r*r)/val(4*i-2)**2)/val(4*i-2)rotz-043
      vr(6,i)=-ccz*val(4*i-3)/val(4*i-2)**3                             rotz-044
      vr(5,i)=-vr(6,i)*r                                                rotz-045
      go to 2                                                           rotz-046
    1 vr(1,i)=ccz*val(3*i-2)/r                                          rotz-047
      vr(5,i)=vr(1,i)/r                                                 rotz-048
      vr(6,i)=2.d0*vr(5,i)/r                                            rotz-049
    2 continue                                                          rotz-050
c computation of d(r) and inverse                                       rotz-051
      c1=wv(7)+wv(6)+vr(1,1)-vr(1,3)-vr(1,7)                            rotz-052
      c2=vr(1,2)-vr(1,4)                                                rotz-053
      dd=c1**2+c2**2                                                    rotz-054
      dr=c1/dd                                                          rotz-055
      di=-c2/dd                                                         rotz-056
      c3=wv(7)-wv(6)-vr(1,1)-vr(1,3)-vr(1,7)                            rotz-057
      c4=-vr(1,2)-vr(1,4)                                               rotz-058
      c5=(c1*c3-c2*c4-wv(7)**2+wv(6)**2)/(2.d0*wv(6))                   rotz-059
      c6=(c1*c4+c2*c3)/(2.d0*wv(6))                                     rotz-060
      d1=vr(5,3)-vr(5,1)+vr(5,7)                                        rotz-061
      d2=vr(5,4)-vr(5,2)                                                rotz-062
      cr=d1*dr-d2*di+(vr(5,5)+vr(5,8))/wv(6)                            rotz-063
      ci=d2*dr+d1*di+vr(5,6)/wv(6)                                      rotz-064
      cc=vr(1,7)*wv(7)/wv(6)                                            rotz-065
      br=vr(6,1)-vr(6,7)-vr(6,3)                                        rotz-066
      bi=vr(6,2)-vr(6,4)                                                rotz-067
c square of gradient  and laplacian     radial term.                    rotz-068
      er=br*dr-bi*di+(vr(5,5)+vr(5,8))/wv(6)*(cr+cr-(vr(5,5)+vr(5,8))/wvrotz-069
     1(8))-vr(5,6)/wv(6)*(ci+ci-vr(5,6)/wv(6))-(vr(6,5)+vr(6,8))/wv(6)+2rotz-070
     2.d0*cr/r                                                          rotz-071
      ei=br*di+bi*dr+(vr(5,5)+vr(5,8))/wv(6)*(ci+ci-vr(5,6)/wv(6))+vr(5,rotz-072
     16)/wv(6)*(cr+cr-(vr(5,5)+vr(5,8))/wv(6))-vr(6,6)/wv(6)+2.d0*ci/r  rotz-073
      c5=c5-(.75d0*(cr**2-ci**2)-.5d0*er)*xp                            rotz-074
      c6=c6-(1.5d0*cr*ci-.5d0*ei)*xp                                    rotz-075
      if (.not.lo(1)) go to 5                                           rotz-076
c rotational model.                                                     rotz-077
      c=1.d0-xgn(j)**2                                                  rotz-078
      do 3 i=1,8                                                        rotz-079
      vr(4,i)=(vr(6,i)*q(i,j,2)**2*c+vr(5,i)*q(i,j,3))/r**2             rotz-080
    3 vr(3,i)=vr(5,i)*q(i,j,2)/r                                        rotz-081
c square of gradient is d/dr.d/dr + 1/r**2 d/dth.d/dth.                 rotz-082
      c3=vr(3,1)-vr(3,3)-vr(3,7)                                        rotz-083
      c4=vr(3,2)-vr(3,4)                                                rotz-084
      c7=c3*dr-c4*di                                                    rotz-085
      c8=c3*di+c4*dr                                                    rotz-086
      c3=(vr(3,5)+vr(3,8))/wv(6)                                        rotz-087
      c4=vr(3,6)/wv(6)                                                  rotz-088
      c5=c5-(.75d0*(c7**2-c8**2)+.5d0*(c7*c3-c8*c4)+.75d0*(c3**2-c4**2))rotz-089
     1*c*xp                                                             rotz-090
      c6=c6-(1.5d0*c7*c8+.5d0*(c7*c4+c8*c3)+1.5d0*c3*c4)*c*xp           rotz-091
c laplacian is d**2/dr**2 + 2/r d/dr + 1/r**2 (d**2/dth**2+d/dth/tg ).  rotz-092
      c3=vr(4,1)-vr(4,3)-vr(4,7)                                        rotz-093
      c4=vr(4,2)-vr(4,4)                                                rotz-094
      c5=c5+.5d0*(c3*dr-c4*di+(vr(4,5)+vr(4,8))/wv(6))*xp               rotz-095
      c6=c6+.5d0*(c4*dr+c3*di+vr(4,6)/wv(6))*xp                         rotz-096
c c5 + i c6   central term,                                             rotz-097
c cr + i ci   spin-orbit term,                                          rotz-098
c dr + i di   1/denominator.                                            rotz-099
      p(17,1)=p(17,1)+(c5+cc)*p(28,j)                                   rotz-100
      p(18,1)=p(18,1)+c6*p(28,j)                                        rotz-101
      p(21,1)=p(21,1)+.5d0*xp*(cr-vr(5,8)/wv(6))*p(28,j)/r              rotz-102
      p(22,1)=p(22,1)+.5d0*xp*ci*p(28,j)/r                              rotz-103
      p(23,1)=p(23,1)+cc*p(28,j)                                        rotz-104
      p(24,1)=p(24,1)+vr(5,8)/r*p(28,j)                                 rotz-105
      if (iq1.lt.4) return                                              rotz-106
c logarithm of d(r) c9 + i c0.                                          rotz-107
      c9=.5d0*dlog(c1**2+c2**2)-(vr(1,5)+vr(1,8))/wv(6)                 rotz-108
      c0=datan2(c2,c1)-vr(1,6)/wv(6)                                    rotz-109
      do 4 i=4,iq1                                                      rotz-110
      if (iv(i).gt.1) go to 7                                           rotz-111
      p(17,i)=p(17,i)+(c5+cc)*p(i+27,j)                                 rotz-112
      p(18,i)=p(18,i)+c6*p(i+27,j)                                      rotz-113
      p(21,i)=p(21,i)+.5d0*xp*(cr-vr(5,8)/wv(6))*p(i+27,j)/r            rotz-114
      p(22,i)=p(22,i)+.5d0*xp*ci*p(i+27,j)/r                            rotz-115
      p(23,i)=p(23,1)+cc*p(i+27,j)                                      rotz-116
      p(24,i)=p(24,1)+vr(5,8)/r*p(i+27,j)                               rotz-117
      p(25,i)=p(25,i)-.5d0*xp*c9*p(i+27,j)/r**2                         rotz-118
    4 p(26,i)=p(26,i)-.5d0*xp*c0*p(i+27,j)/r**2                         rotz-119
      return                                                            rotz-120
c computation of zeroth order.                                          rotz-121
    5 p(17,1)=c5+cc                                                     rotz-122
      p(18,1)=c6                                                        rotz-123
      p(21,1)=.5d0*(cr-vr(5,8)/wv(6))*xp/r                              rotz-124
      p(22,1)=.5d0*ci*xp/r                                              rotz-125
      p(23,1)=cc                                                        rotz-126
      p(24,1)=vr(5,8)/r                                                 rotz-127
      if (iq1.lt.4) return                                              rotz-128
      do 6 i=4,iq1                                                      rotz-129
c computation of first order.                                           rotz-130
      if (iv(i).ne.2) go to 8                                           rotz-131
      c1r=vr(5,1)*b(1,i)-vr(5,3)*b(3,i)                                 rotz-132
      c2r=vr(5,2)*b(2,i)-vr(5,4)*b(4,i)                                 rotz-133
      drr=-(dr*dr-di*di)*c1r+2.d0*dr*di*c2r                             rotz-134
      dir=-(dr*dr-di*di)*c2r-2.d0*dr*di*c1r                             rotz-135
      c3r=-vr(5,1)*b(1,i)-vr(5,3)*b(3,i)                                rotz-136
      c4r=-vr(5,2)*b(2,i)-vr(5,4)*b(4,i)                                rotz-137
      c5r=(c1r*c3-c2r*c4+c1*c3r-c2*c4r)/(2.d0*wv(6))                    rotz-138
      c6r=(c1r*c4+c2r*c3+c1*c4r+c2*c3r)/(2.d0*wv(6))                    rotz-139
      d1r=vr(6,3)*b(3,i)-vr(6,1)*b(1,i)                                 rotz-140
      d2r=vr(6,4)*b(4,i)-vr(6,2)*b(2,i)                                 rotz-141
      crr=d1r*dr-d2r*di+d1*drr-d2*dir+vr(6,5)*b(5,i)/wv(6)              rotz-142
      cir=d2r*dr+d1r*di+d2*drr+d1*dir+vr(6,6)*b(6,i)/wv(6)              rotz-143
      ar=br*drr-bi*dir+(vr(5,5)+vr(5,8))/wv(6)*(crr+crr-vr(6,5)*b(5,i)/wrotz-144
     1v(8))-vr(5,6)/wv(6)*(cir+cir-vr(6,6)*b(6,i)/wv(6))+vr(6,5)*b(5,i)/rotz-145
     2wv(6)*(cr+cr-(vr(5,5)+vr(5,8))/wv(6))-vr(6,6)*b(6,i)/wv(6)*(ci+ci-rotz-146
     3vr(5,6)/wv(6))+2.d0*crr/r                                         rotz-147
      ai=br*dir+bi*drr+(vr(5,5)+vr(5,8))/wv(6)*(cir+cir-vr(6,6)*b(6,i)/wrotz-148
     1v(8))+vr(5,6)/wv(6)*(crr+crr-vr(6,5)*b(5,i)/wv(6))+vr(6,5)*b(5,i)/rotz-149
     2wv(6)*(ci+ci-vr(5,6)/wv(6))+vr(6,6)*b(6,i)/wv(6)*(cr+cr-vr(6,5)/wvrotz-150
     3(8))+2.d0*cir/r                                                   rotz-151
      p(17,i)=c5r-(1.5d0*(cr*crr-ci*cir)-.5d0*ar)*xp                    rotz-152
      p(18,i)=c6r-(1.5d0*(crr*ci+cr*cir)-.5d0*ai)*xp                    rotz-153
      p(21,i)=.5d0*crr*xp/r                                             rotz-154
      p(22,i)=.5d0*cir*xp/r                                             rotz-155
      p(23,i)=0.d0                                                      rotz-156
      p(24,i)=0.d0                                                      rotz-157
      p(25,i)=-.5d0*xp*(c1r*dr-c2r*di-vr(5,5)*b(5,i)/wv(6))/r**2        rotz-158
    6 p(26,i)=-.5d0*xp*(c1r*di+c2r*dr-vr(5,6)*b(6,i)/wv(6))/r**2        rotz-159
      return                                                            rotz-160
    7 write (mw,1000)                                                   rotz-161
      go to 9                                                           rotz-162
    8 write (mw,1001)                                                   rotz-163
    9 write (mw,1002)                                                   rotz-164
      stop                                                              rotz-165
 1000 format (' no vibrational band in rotational model.')              rotz-166
 1001 format (' only first order vibrational model.')                   rotz-167
 1002 format (//' in rotz  ...  stop  ...')                             rotz-168
      end                                                               rotz-169
c 15/11/06                                                      ecis06  wosa-000
      subroutine wosa(v,a,p,cc,r,n,lx)                                  wosa-001
c computation of woods-saxon form-factors at some power and their       wosa-002
c derivatives.                                                          wosa-003
c limited to the sixth derivative (the fourth one only is used in ecis).wosa-004
c input:     a:       diffuseness.                                      wosa-005
c            p:       the wood-saxon parameters are at the power (1+p). wosa-006
c            cc:      value of exp(-(r-rr/a) where r is the radius.     wosa-007
c            r:       value of radius of the form factor.               wosa-008
c            n:       number of values (one plus highest derivative).   wosa-009
c            lx:      logical false for symmetrised form-factors.       wosa-010
c output:    v:       form-factors and its derivatives.                 wosa-011
c***********************************************************************wosa-012
      implicit real*8 (a-h,o-z)                                         wosa-013
      logical lx                                                        wosa-014
      dimension v(7),vv(7,2)                                            wosa-015
      common /inout/ mr,mw,ms                                           wosa-016
      if (n.gt.7) go to 6                                               wosa-017
      c=cc                                                              wosa-018
      k=1                                                               wosa-019
c form-factor and its derivatives.                                      wosa-020
    1 b=1.d0/(1.d0+c)                                                   wosa-021
      v(1)=b**(p+1.d0)                                                  wosa-022
      if (n.eq.1) go to 2                                               wosa-023
      v(2)=b*(p+1.d0)*c*v(1)/a                                          wosa-024
      if (n.eq.2) go to 2                                               wosa-025
      v(3)=b*(p*c+c-1.d0)*v(2)/a                                        wosa-026
      if (n.eq.3) go to 2                                               wosa-027
      v(4)=b*((p*c+c-2.d0)*v(3)-v(2)/a)/a                               wosa-028
      if (n.eq.4) go to 2                                               wosa-029
      v(5)=b*((p*c+2.d0*c-2.d0)*v(4)-(p*c+c+1.d0)*v(3)/a)/a             wosa-030
      if (n.eq.5) go to 2                                               wosa-031
      v(6)=b*((p*c+2.d0*c-3.d0)*v(5)-((p*c+c+3.d0)*v(4)+v(3)/a)/a)/a    wosa-032
      if (n.eq.6) go to 2                                               wosa-033
      v(7)=b*((p*c+3.d0*c-3.d0)*v(6)-((2.d0*p*c+3.d0*c+3.d0)*v(5)-(p*c+cwosa-034
     1-1.d0)*v(4)/a)/a)/a                                               wosa-035
    2 if (lx) return                                                    wosa-036
c storage of intermediate results for symmetrisation.                   wosa-037
      do 3 i=1,n                                                        wosa-038
    3 vv(i,k)=v(i)                                                      wosa-039
      c=dexp(-2.d0*dabs(r)/a)/c                                         wosa-040
      k=k+1                                                             wosa-041
      if (k.eq.2) go to 1                                               wosa-042
c symmetrisation.                                                       wosa-043
      do 5 l=1,7                                                        wosa-044
      v(l)=vv(l,1)*vv(1,2)                                              wosa-045
      if (l.eq.1) go to 5                                               wosa-046
      a1=1.d0                                                           wosa-047
      do 4 j=2,l                                                        wosa-048
      a1=-a1*dfloat(l-j+1)/dfloat(j-1)                                  wosa-049
    4 v(l)=v(l)+a1*vv(l-j+1,1)*vv(j,2)                                  wosa-050
    5 continue                                                          wosa-051
      return                                                            wosa-052
    6 write (mw,1000) n                                                 wosa-053
      stop                                                              wosa-054
 1000 format (5x,i5,' values asked in subroutine wosa too large (limitatwosa-055
     1ion to 7.'///' in wosa  ...  stop  ...')                          wosa-056
      end                                                               wosa-057
c 21/04/07                                                      ecis06  copo-000
      subroutine copo(w,v,q,ism,h,l,val,vac,ccz,zt,lt,lz)               copo-001
c computes the coulomb potential of the charge distribution stored in v.copo-002
c input:     v:       charge distribution unnormalised.                 copo-003
c            h:       step size.                                        copo-004
c            ism:     number of points.                                 copo-005
c            l:       angular momentum, return 0 if l is negative.      copo-006
c            val:     product of charges is in val(1).                  copo-007
c            vac:     parameter of charge distribution.                 copo-008
c            lt:      logical  .true.  form factor already normalised   copo-009
c                    .false.  normalisation stored from the central.    copo-010
c            lz:      logical  .true. to use the normalisation stored   copo-011
c                     even if l=0.                                      copo-012
c output:    w:       form factor which can be at the same place as v.  copo-013
c            zt:      normalisation factor.                             copo-014
c working area:                                                         copo-015
c            q:       which can be at the same place as w.              copo-016
c***********************************************************************copo-017
      implicit real*8 (a-h,o-z)                                         copo-018
      dimension w(*),v(*),q(ism,5)                                      copo-019
      logical lt,lz                                                     copo-020
      if (l.ge.0) go to 2                                               copo-021
      do 1 is=1,ism                                                     copo-022
    1 v(is)=0.d0                                                        copo-023
      return                                                            copo-024
    2 rr=0.d0                                                           copo-025
      do 3 is=1,ism                                                     copo-026
      rr=rr+h                                                           copo-027
      v(is)=v(is)*(1.d0+vac*rr*rr)                                      copo-028
      q(is,4)=rr**l                                                     copo-029
      q(is,3)=q(is,4)/rr                                                copo-030
      q(is,5)=q(is,4)*rr                                                copo-031
    3 q(is,1)=q(is,5)*rr                                                copo-032
      v(ism)=0.d0                                                       copo-033
      v(ism-1)=0.d0                                                     copo-034
      q(1,1)=q(1,1)*v(1)                                                copo-035
      q(ism,2)=0.d0                                                     copo-036
      do 4 is=2,ism                                                     copo-037
      js=ism+1-is                                                       copo-038
      q(is,1)=q(is-1,1)+q(is,1)*v(is)                                   copo-039
    4 q(js,2)=q(js+1,2)+v(js+1)/q(js+1,3)                               copo-040
      c=dfloat(2*l+1)                                                   copo-041
      zz=1.d0/c                                                         copo-042
      if (lt) go to 6                                                   copo-043
      if (l.ne.0.or.lz) go to 5                                         copo-044
      zt=ccz*val/q(ism,1)                                               copo-045
    5 zz=zt*zz                                                          copo-046
    6 c=c*h/12.d0                                                       copo-047
      do 7 is=1,ism                                                     copo-048
    7 w(is)=(q(is,1)/q(is,5)+q(is,2)*q(is,4)+c*v(is))*zz                copo-049
      return                                                            copo-050
      end                                                               copo-051
c 08/05/07                                                      ecis06  stdp-000
      subroutine stdp(v,ivy,ism,val,nval,nx,idx,x,wv,pgn,xgn,npp,izz,p,lstdp-001
     1o)                                                                stdp-002
c computes form factors independently of models.                        stdp-003
c input:     ivy:     table of form factors (see redm).                 stdp-004
c            ism:     number of integration steps.                      stdp-005
c            val,nval:for optical model parameters to use here.         stdp-006
c            nx:      length of working space.                          stdp-007
c            wv:      step size in wv(8,*).                             stdp-008
c            pgn:     weights of gauss-legendre integration             stdp-009
c            xgn:   : abscissae of gauss-legendre integration.          stdp-010
c            npp:     number of optical potentials.                     stdp-011
c            aconv:   value below which the folding is neglected.       stdp-012
c            lo(i):   logical controls:                                 stdp-013
c               lo(6)  =.true. use deformation lengths.                 stdp-014
c               lo(9)  =.true. symmetrised woods-saxon form factors whenstdp-015
c                              the radius is negative.                  stdp-016
c               lo(12) =.true. deformed imaginary potential.            stdp-017
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. stdp-018
c               lo(100)=.true. dirac equation.                          stdp-019
c output:    v:       elastic and inelastic form factors in the sequencestdp-020
c                     central-real, spin-orbit-real, transition real,   stdp-021
c                     transition spin-orbit-real, imaginary potentials  stdp-022
c                     followed by coulomb, coulomb transition potentialsstdp-023
c            idx:     length of working field used.                     stdp-024
c working areas:                                                        stdp-025
c            x,p:     to compute bound functions, fold coulomb potentialstdp-026
c                     and compute rotational form factors and bessel    stdp-027
c                     functions, in equivalence by call.                stdp-028
c            izz:     for folding.                                      stdp-029
c                                                                       stdp-030
c for the common  /dcons/ see calc.                                     stdp-031
c for the common  /pote1/ see redm.                                     stdp-032
c                                                                       stdp-033
c significance of the quantities in common /dcons/:                     stdp-034
c  ccz:       coulomb alpha constant.                                   stdp-035
c   used:     ccz.                                                      stdp-036
c                                                                       stdp-037
c significance of the quantities in common /pote1/:                     stdp-038
c  itx(16):   starting address of different form factors (see redm).    stdp-039
c  imax:      maximum angular momentum.                                 stdp-040
c  intc:      number of form factors without deformed spin-orbit        stdp-041
c             including correction terms.                               stdp-042
c  inls:      number of spin-orbit form factors not taking into account stdp-043
c             multiplication by 2.                                      stdp-044
c  invd:      idem for coulomb spin-orbit.                              stdp-045
c  itxm:      total number of form factors.                             stdp-046
c   used:     itx,imax,intc,inls,invd,itxm.                             stdp-047
c                                                                       stdp-048
c***********************************************************************stdp-049
      implicit real*8 (a-h,o-z)                                         stdp-050
      logical lo(150),lt(9)                                             stdp-051
      dimension v(ism,*),ivy(7,*),val(*),nval(2,*),x(3,*),wv(22,*),pgn(1stdp-052
     10),xgn(10),izz(4,*),p(*),nij(3),itz(10),zb(77),zb1(40),zb2(37),y(3stdp-053
     2),vr(7),cl(8)                                                     stdp-054
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            stdp-055
      common /inout/ mr,mw,ms                                           stdp-056
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              stdp-057
      equivalence (zb1,zb),(zb2,zb(41))                                 stdp-058
      data nij /1,24,11/                                                stdp-059
      data pis2 /1.5707963267949d0/                                     stdp-060
      data itz /3,3,3,3,4,5,3,3,5,5/                                    stdp-061
      data zb1 /4.49340945790906d0,7.72525183693771d0,5.76345919689455d0stdp-062
     1,9.09501133047635d0,12.3229409705666d0,6.98793200050052d0,10.41711stdp-063
     285473794d0,13.6980231532492d0,16.9236212852138d0,8.18256145257124dstdp-064
     30,11.7049071545704d0,15.0396647076165d0,18.3012559595420d0,21.5254stdp-065
     4177333999d0,9.35581211104275d0,12.9665301727743d0,16.3547096393505stdp-066
     5d0,19.6531521018212d0,22.9045506479037d0,26.1277501372255d0,10.512stdp-067
     68354080940d0,14.2073924588425d0,17.6479748701659d0,20.983463068944stdp-068
     78d0,24.2627680423970d0,27.5078683649043d0,30.7303807316466d0,11.65stdp-069
     870321925164d0,15.4312892102684d0,18.9229991985461d0,22.29534801913stdp-070
     908d0,25.6028559538106d0,28.8703733470427d0,32.1111962396826d0,35.3stdp-071
     a331941827165d0,12.7907817119721d0,16.6410028815122d0,20.1824707649stdp-072
     b492d0,23.5912748179830d0,26.9270407788180d0/                      stdp-073
      data zb2 /30.2172627093614d0,33.4768008195015d0,36.7145291272447d0stdp-074
     1,39.9361278108677d0,13.9158226105049d0,17.8386431992053d0,21.42848stdp-075
     269721154d0,24.8732139238751d0,28.2371343599681d0,31.5501883818318dstdp-076
     30,34.8286965376857d0,38.0824790873276d0,41.3178646902445d0,44.5391stdp-077
     4446334095d0,15.0334693037434d0,19.0258535361278d0,22.6627206581361stdp-078
     5d0,26.1427676433791d0,29.5346341078439d0,32.8705345976875d0,36.168stdp-079
     61571359112d0,39.4382144800081d0,42.6876512846611d0,45.921201763835stdp-080
     76d0,49.1422214247461d0,16.1447429423013d0,20.2039426328117d0,23.88stdp-081
     865307559684d0,27.4012592588663d0,30.8207940864510d0,34.17947466648stdp-082
     932d0,37.4962736357858d0,40.7827470981251d0,44.0464252109438d0,47.2stdp-083
     a924656052694d0,50.5245397255712d0,53.7453428657930d0/             stdp-084
c meaning of internal logical lt:                                       stdp-085
c lt(1) spin-orbit transition (schroedinger),                           stdp-086
c lt(2) spin-orbit potential derivative,                                stdp-087
c lt(3) form factor given by points or bound state,                     stdp-088
c lt(4) computation of a coulomb potential from the charge density,     stdp-089
c lt(5) zero diffuseness coulomb,                                       stdp-090
c lt(6) surface potential,                                              stdp-091
c lt(7) first or second passage in woods-saxon/bessel loop,             stdp-092
c lt(8) woods-saxon form factor,                                        stdp-093
c lt(9) not symmetric.                                                  stdp-094
      idx=0                                                             stdp-095
      hm=1000.d0                                                        stdp-096
      nfo=0                                                             stdp-097
      n=itxm                                                            stdp-098
      if (lo(100)) n=n-itx(7)                                           stdp-099
      do 2 i=1,n                                                        stdp-100
      do 1 j=1,4                                                        stdp-101
    1 izz(j,i)=0                                                        stdp-102
    2 continue                                                          stdp-103
      if (intc.eq.0) go to 8                                            stdp-104
      ntt=24*npp                                                        stdp-105
      do 7 i=1,intc                                                     stdp-106
      if (lo(100)) go to 5                                              stdp-107
      do 3 j=9,12                                                       stdp-108
      if ((.not.lo(12)).and.(mod(j,2).eq.0)) go to 3                    stdp-109
      k=itx(j)+i                                                        stdp-110
      izz(3,k)=ivy(7,i)                                                 stdp-111
    3 continue                                                          stdp-112
      k=ivy(3,i)                                                        stdp-113
      if (k.eq.0) go to 4                                               stdp-114
      izz(3,k+itx(13))=ivy(7,i)                                         stdp-115
      if (lo(14)) izz(3,k+itx(10))=ivy(7,i)                             stdp-116
    4 k=ivy(4,i)                                                        stdp-117
      if (k.ne.0) izz(3,k+itx(15))=ivy(7,i)                             stdp-118
      k=ivy(5,i)                                                        stdp-119
      if (k.ne.0) izz(3,k+itx(16))=ivy(7,i)                             stdp-120
      go to 7                                                           stdp-121
    5 do 6 j=1,11                                                       stdp-122
    6 izz(3,ntt+j)=ivy(7,i)                                             stdp-123
    7 ntt=ntt+11                                                        stdp-124
    8 nma=nval(1,1)                                                     stdp-125
    9 if (nma.ge.nval(1,2)) go to 97                                    stdp-126
      i1=nval(1,nma)                                                    stdp-127
      iv=nval(2,nma)                                                    stdp-128
      itv=mod(i1-1,8)+1                                                 stdp-129
      j1=(i1-1)/8                                                       stdp-130
      itt=itv                                                           stdp-131
      lt(1)=(itv-5)*(itv-6)*(itv-8).eq.0                                stdp-132
      inl=0                                                             stdp-133
      if (j1.gt.npp) itt=itv+8                                          stdp-134
      if (lo(100)) go to 10                                             stdp-135
      ji=1                                                              stdp-136
      ij=1                                                              stdp-137
      if (j1.gt.npp) j1=j1-npp                                          stdp-138
      l1=j1+itx(itt)                                                    stdp-139
      if ((itt.eq.13).or.(itt.eq.14)) inl=inls                          stdp-140
      if (itt.eq.16) inl=invd                                           stdp-141
      if (inl.ne.0) ij=2                                                stdp-142
      go to 13                                                          stdp-143
   10 if (j1.le.npp) go to 11                                           stdp-144
      ji=3                                                              stdp-145
      if (lt(1)) inl=4                                                  stdp-146
      if (itt.eq.16) inl=3                                              stdp-147
      l1=24*npp+11*(j1-npp-1)+itv                                       stdp-148
      go to 12                                                          stdp-149
   11 inl=8                                                             stdp-150
      ji=2                                                              stdp-151
      l1=itv+24*(j1-1)                                                  stdp-152
   12 ij=1+inl/3                                                        stdp-153
   13 if (iv.ne.16) go to 16                                            stdp-154
c form factor copied.                                                   stdp-155
      l3=0                                                              stdp-156
      l2=l1+nij(ji)*(nval(2,nma+1)-i1)/8                                stdp-157
      do 15 j=1,ij                                                      stdp-158
      do 14 is=1,ism                                                    stdp-159
   14 v(is,l1+l3)=v(is,l2+l3)*val(nma+3)                                stdp-160
   15 l3=l3+inl                                                         stdp-161
      izz(1,l1)=-nval(1,nma+1)                                          stdp-162
      izz(2,l1)=izz(2,l2)                                               stdp-163
      izz(4,l1)=izz(4,l2)                                               stdp-164
      go to 96                                                          stdp-165
   16 j=max0(iv,1)                                                      stdp-166
      nmb=nma+itz(j)                                                    stdp-167
      lt(7)=.false.                                                     stdp-168
      if (iv.ge.7) go to 19                                             stdp-169
      if (val(nmb).ne.0.d0) go to 19                                    stdp-170
c zero form factors and go to next.                                     stdp-171
      l2=l1                                                             stdp-172
      do 18 j=1,ij                                                      stdp-173
      do 17 is=1,ism                                                    stdp-174
   17 v(is,l2)=0.d0                                                     stdp-175
   18 l2=l2+inl                                                         stdp-176
      go to 96                                                          stdp-177
   19 lt(1)=lt(1).and.(.not.lo(100))                                    stdp-178
      lt(2)=lt(1).and.(itv.eq.itt).and.(nval(1,nma+1).eq.0)             stdp-179
      lt(3)=.false.                                                     stdp-180
      lt(4)=itv.gt.6                                                    stdp-181
      lt(8)=(iv.gt.0).and.(iv.lt.7)                                     stdp-182
      k=iabs(nval(1,nma+2))                                             stdp-183
      hh=wv(8,k)                                                        stdp-184
      h=hh                                                              stdp-185
      hm=dmin1(h,hm)                                                    stdp-186
      izz(1,l1)=-nval(1,nma+1)                                          stdp-187
      izz(2,l1)=itt                                                     stdp-188
      izz(4,l1)=k                                                       stdp-189
      if (nval(1,nma+1).eq.0) go to 20                                  stdp-190
      ij=1                                                              stdp-191
      nfo=max0(nfo,nval(1,nma+1))                                       stdp-192
   20 l=izz(3,l1)                                                       stdp-193
      ji=ij                                                             stdp-194
      if (lt(2)) ji=ji+1                                                stdp-195
      if ((iv.gt.0).and.(iv.lt.9)) go to 28                             stdp-196
      ap=val(nmb)                                                       stdp-197
      if (iv.ge.9) go to 33                                             stdp-198
      lt(2)=lt(2).and.(nval(2,nma+1).ne.0)                              stdp-199
      lt(4)=lt(4).and.((nval(2,nma+1).ne.0))                            stdp-200
c form factor interpolated.                                             stdp-201
      ir=0                                                              stdp-202
      do 25 is=1,ism                                                    stdp-203
      x0=is*h*val(nmb+1)                                                stdp-204
   21 if (x0.lt.val(nmb+ir+6)) go to 22                                 stdp-205
      if (ir.ge.-2*iv-8) go to 22                                       stdp-206
      ir=ir+2                                                           stdp-207
      go to 21                                                          stdp-208
   22 v(is,l1)=0.d0                                                     stdp-209
      do 24 k=2,8,2                                                     stdp-210
      x1=1.d0                                                           stdp-211
      do 23 j=2,8,2                                                     stdp-212
      if (k.eq.j) go to 23                                              stdp-213
      x1=x1*(x0-val(nmb+ir+j))/(val(nmb+ir+k)-val(nmb+ir+j))            stdp-214
   23 continue                                                          stdp-215
   24 v(is,l1)=v(is,l1)+x1*val(nmb+ir+k+1)                              stdp-216
   25 v(is,l1)=val(nmb)*v(is,l1)                                        stdp-217
      if (ij.eq.1) go to 31                                             stdp-218
   26 l2=l1                                                             stdp-219
      do 27 j=2,ij                                                      stdp-220
      call deri(v(1,l2+inl),v(1,l2),h,ism,.true.)                       stdp-221
   27 l2=l2+inl                                                         stdp-222
      if (iv.gt.0) go to 94                                             stdp-223
      go to 31                                                          stdp-224
   28 if (lt(8)) go to 37                                               stdp-225
c bound state form factor.                                              stdp-226
      k=nval(1,nmb)                                                     stdp-227
      ivm=nval(2,nmb-1)                                                 stdp-228
      ivx=iv                                                            stdp-229
      jv=nval(1,nmb+1)/2+1                                              stdp-230
      nmc=nmb+3                                                         stdp-231
      if (k.eq.1) go to 29                                              stdp-232
      jv=jv+ism                                                         stdp-233
      if (jv.gt.nx) call memo('stdf',nx,jv)                             stdp-234
      idx=idx-2*jv                                                      stdp-235
      call stbf(p,nval(2,nmb),ism,val(nmc+3),ivm,nx-jv,idx,p(jv+1),ivx,hstdp-236
     1h,izz(1,itxm+1),lo)                                               stdp-237
      nmc=nmc+8*iv-50                                                   stdp-238
      if (k.eq.3) ivx=ivx-1                                             stdp-239
      nmb=nmb+2                                                         stdp-240
   29 call stbf(v(1,l1),nval(2,nmb),ism,val(nmc),ivm,nx-jv,idx,p(jv+1),istdp-241
     1vx,hh,izz(1,itxm+1),lo)                                           stdp-242
      if (k.eq.1) go to 96                                              stdp-243
      idx=idx+jv                                                        stdp-244
      do 30 is=1,ism                                                    stdp-245
   30 v(is,l1)=v(is,l1)*p(is)*val(nmb+3)                                stdp-246
      go to 96                                                          stdp-247
   31 lt(3)=.true.                                                      stdp-248
      if (.not.lt(2).or.lt(4)) go to 32                                 stdp-249
      idx=max0(idx,ism)                                                 stdp-250
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-251
      call deri(p,v(1,l1),h,ism,.true.)                                 stdp-252
   32 if (lt(2).or.(nval(2,nma+1).ne.0)) go to 52                       stdp-253
      if (ij.eq.1) go to 96                                             stdp-254
      go to 94                                                          stdp-255
c bessel expansion.                                                     stdp-256
   33 nmc=nmb+1                                                         stdp-257
      l2x=nval(2,nma+2)                                                 stdp-258
      ll=nval(1,nma+3)                                                  stdp-259
      if (iv.eq.9) go to 34                                             stdp-260
      jl=nval(2,nma+3)                                                  stdp-261
      lj=ji+jl-1                                                        stdp-262
      if (val(nmc).eq.0.d0) val(nmc)=1.d0                               stdp-263
      go to 52                                                          stdp-264
   34 lj=ll+ji+nval(2,nma+3)                                            stdp-265
      idx=max0(idx,3*max0(l2x,lj))                                      stdp-266
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-267
c computation of zeros of bessel functions - the l+1 zeros for l=1 to   stdp-268
c l=11 are in data zb. the others are computed with mc mahon's formula  stdp-269
c page 371, handbook of math. functions, abramovitz and stegun.         stdp-270
      if (val(nmc).eq.0.d0) val(nmc)=ism*h                              stdp-271
      do 36 ii=1,l2x                                                    stdp-272
      if ((ll.ne.0).and.((ll.lt.12).and.(ii.le.ll+1))) go to 35         stdp-273
      x(1,ii)=(2*ii+ll)*pis2                                            stdp-274
      if (ll.eq.0) go to 36                                             stdp-275
      a1=2.d0*x(1,ii)                                                   stdp-276
      a2=dfloat(ll*(ll+1))                                              stdp-277
      x(1,ii)=x(1,ii)-a2*(1.d0+(7.d0*a2-6.d0+((166.d0*a2-408.d0)*a2+360.stdp-278
     1d0+(((6949.d0*a2-33252.d0)*a2+81180.d0)*a2-75600.d0)/(7.d0*a1**2))stdp-279
     2/(5.d0*a1**2))/(3.d0*a1**2))/a1                                   stdp-280
      go to 36                                                          stdp-281
   35 k=(ll*(ll+1))/2+ii-1                                              stdp-282
      x(1,ii)=zb(k)                                                     stdp-283
   36 x(1,ii)=x(1,ii)/val(nmc)                                          stdp-284
      lm=ll+1                                                           stdp-285
      lt(6)=lt(2).and.(nval(2,nma+1).eq.0)                              stdp-286
      go to 52                                                          stdp-287
c woods-saxon and its derivatives to some power.                        stdp-288
   37 nmc=nmb+4                                                         stdp-289
      lt(5)=((val(nmb+2).eq.0.d0).and.lt(4))                            stdp-290
      lt(4)=((val(nmb+2).ne.0.d0).and.lt(4))                            stdp-291
      lt(6)=(((itv.eq.3).or.(itv.eq.4)).and.(.not.lo(100)))             stdp-292
      lt(9)=(.not.lo(9)).or.(val(nmb+1).ge.0.d0).or.lt(5)               stdp-293
      if (itv.gt.6) nmc=nmc+1                                           stdp-294
      if (lt(5)) go to 38                                               stdp-295
      sep=dexp(hh/val(nmb+2))                                           stdp-296
      if (val(nmb+2).gt.0.02d0*h)  go to 39                             stdp-297
      write (mw,1000) val(nmb+2),nma,i                                  stdp-298
      val(nmb+2)=dmax1(-val(nmb+2),0.02d0*h)                            stdp-299
      go to 39                                                          stdp-300
   38 if (val(nmb+1).ge.h) go to 39                                     stdp-301
      write (mw,1001) val(nmb+1),nma,i                                  stdp-302
      val(nmb+1)=dmax1(-val(nmb+1),h)                                   stdp-303
   39 if (iv.le.4) go to 49                                             stdp-304
c initialisation of do loops for deformed potentials.                   stdp-305
      iqm=nval(2,nma+2)                                                 stdp-306
      ix=20                                                             stdp-307
      iq=max0(l,iqm)                                                    stdp-308
      if (iv.eq.6) iq=max0(iq,nval(2,nma+2))                            stdp-309
      idx=max0(idx,3*iq+120)                                            stdp-310
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-311
      a2=0.d0                                                           stdp-312
      a1=1.d0                                                           stdp-313
      if (lo(6)) a1=dabs(val(nmb+1))                                    stdp-314
      do 40 i=1,iqm                                                     stdp-315
   40 x(1,40+i)=val(nmc+i-1)*dsqrt(dfloat(2*i+1)/(8.d0*pis2))/a1        stdp-316
      do 48 ii=1,20                                                     stdp-317
      i=1+mod(ii-1,10)                                                  stdp-318
      x(2,22)=xgn(i)                                                    stdp-319
      if (i.ne.ii) x(2,22)=-x(2,22)                                     stdp-320
      x(2,21)=1.d0                                                      stdp-321
      do 41 j=2,iq                                                      stdp-322
   41 x(2,j+21)=(dfloat(2*j-1)*x(2,22)*x(2,j+20)+dfloat(1-j)*x(2,j+19))/stdp-323
     1dfloat(j)                                                         stdp-324
      x(3,ii+20)=0.5d0*pgn(i)                                           stdp-325
      x(2,ii)=0.d0                                                      stdp-326
      a5=x(2,l+21)                                                      stdp-327
      if (iv.eq.5) go to 46                                             stdp-328
      kl=nval(2,nma+2)                                                  stdp-329
      if (nval(1,nma+3).ne.0) go to 42                                  stdp-330
      a5=a5*x(2,kl+21)*dsqrt(dfloat(2*kl+1))                            stdp-331
      go to 46                                                          stdp-332
c computation of y(l,kk) * y(kl,kk).                                    stdp-333
   42 a5=dsqrt(dfloat(2*kl+1))                                          stdp-334
      kk=nval(1,nma+3)                                                  stdp-335
      do 43 n=1,kk                                                      stdp-336
   43 a5=a5*(1.d0-xgn(i)**2)*dfloat(2*n-1)**2/dsqrt(dfloat((kl+n)*(l+n)*stdp-337
     1(kl-n+1)*(l-n+1)))                                                stdp-338
      kz=l-kk                                                           stdp-339
      do 45 j=1,2                                                       stdp-340
      if (kz.le.0) go to 45                                             stdp-341
      a4=0.d0                                                           stdp-342
      do 44 k=1,kz                                                      stdp-343
      a3=a4                                                             stdp-344
      a4=a5                                                             stdp-345
   44 a5=a3+(a4*x(2,22)-a3)*(2.d0*(kk+k)-1.d0)/k                        stdp-346
   45 kz=kl-kk                                                          stdp-347
   46 x(3,ii)=x(3,ii+20)*a5*dsqrt(2.d0*l+1.d0)                          stdp-348
      rr=1.d0                                                           stdp-349
      do 47 k=1,iqm                                                     stdp-350
   47 rr=rr+x(1,40+k)*x(2,k+21)                                         stdp-351
      x(2,ii)=-rr*dabs(val(nmb+1))                                      stdp-352
      x(1,ii)=0.d0                                                      stdp-353
      x(1,20+ii)=1.d-16                                                 stdp-354
      if (.not.lt(5)) go to 48                                          stdp-355
      x(2,ii)=dabs(x(2,ii))                                             stdp-356
      a2=a2+x(2,ii)**3*x(3,20+ii)                                       stdp-357
   48 continue                                                          stdp-358
      go to 50                                                          stdp-359
c initialisation of do loops for not deformed potentials.               stdp-360
   49 iqm=0                                                             stdp-361
      ix=1                                                              stdp-362
      idx=max0(idx,33)                                                  stdp-363
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-364
      x(1,1)=0.d0                                                       stdp-365
      x(2,1)=-dabs(val(nmb+1))                                          stdp-366
      x(3,1)=1.d0                                                       stdp-367
      if (.not.lt(5)) go to 50                                          stdp-368
      x(2,1)=-x(2,1)                                                    stdp-369
      a2=x(2,1)**3                                                      stdp-370
   50 iv1=1+mod(iv-1,4)                                                 stdp-371
      ap=val(nmb)                                                       stdp-372
      an=val(nmb+1)                                                     stdp-373
      if (lo(6)) an=an/dabs(val(nmb+1))                                 stdp-374
      if (.not.lt(9)) an=-an                                            stdp-375
      if (iv1.gt.1) ap=ap*an/dsqrt(8.d0*pis2)                           stdp-376
      if (iv1.gt.2) ap=ap*an*0.5d0                                      stdp-377
      if (iv1.gt.3) ap=ap*an/3.d0                                       stdp-378
      if (val(nmb+3).gt.-1.d0) go to 51                                 stdp-379
      write (mw,1002) val(nmb+3),nma                                    stdp-380
      val(nmb+3)=-.8d0                                                  stdp-381
   51 a1=val(nmb+3)                                                     stdp-382
      a5=dfloat(l+1)                                                    stdp-383
      iv2=iv1                                                           stdp-384
      iv3=iv2-1                                                         stdp-385
      iv2=iv3+ji                                                        stdp-386
      if (lt(6)) iv2=iv2+1                                              stdp-387
      if (itv.gt.6) ap=ap*ccz                                           stdp-388
      if (lt(5)) ap=ap/a2                                               stdp-389
   52 if (lt(4)) ji=1                                                   stdp-390
      rr=0.d0                                                           stdp-391
      an=0.d0                                                           stdp-392
      a6=0.d0                                                           stdp-393
      do 87 is=1,ism                                                    stdp-394
      rr=rr+hh                                                          stdp-395
      if (lt(3)) go to 86                                               stdp-396
      do 53 i=1,3                                                       stdp-397
   53 y(i)=0.d0                                                         stdp-398
      if (iv.ge.9) go to 67                                             stdp-399
c integration loop.                                                     stdp-400
      do 66 i=1,ix                                                      stdp-401
      if (lt(5)) go to 57                                               stdp-402
      x(2,i)=x(2,i)+hh                                                  stdp-403
      if (x(1,i).ne.0.d0) go to 54                                      stdp-404
      if (x(2,i)+50.d0*val(nmb+2).gt.0.d0) x(1,i)=dexp(x(2,i)/val(nmb+2)stdp-405
     1)                                                                 stdp-406
      go to 55                                                          stdp-407
   54 if (x(1,i).lt.1.d15) x(1,i)=x(1,i)*sep                            stdp-408
   55 call wosa(vr(1),val(nmb+2),a1,x(1,i),x(2,i),iv2,lt(9))            stdp-409
      if (lt(6)) vr(iv1)=vr(iv2)*4.d0*val(nmb+2)                        stdp-410
      if (lt(4)) a6=a6+vr(1)*rr**2*x(3,i+20)*(1.d0+val(nmb+4)*rr**2)    stdp-411
      do 56 j=1,ji                                                      stdp-412
   56 y(j)=y(j)+vr(iv3+j)*x(3,i)                                        stdp-413
      go to 66                                                          stdp-414
c deformed coulomb potential.                                           stdp-415
   57 a4=x(2,i)/rr                                                      stdp-416
      if (itv.ne.itt) go to 59                                          stdp-417
      if (a4.gt.1.d0) go to 58                                          stdp-418
      y(1)=y(1)+(x(2,i)**2)*a4*x(3,i)                                   stdp-419
      y(2)=y(2)+x(2,i)*a4**2*x(3,i)                                     stdp-420
      y(3)=y(3)+2.d0*a4**3*x(3,i)                                       stdp-421
      go to 66                                                          stdp-422
   58 y(1)=y(1)+(0.5d0*x(2,i)*x(2,i)-rr*rr/6.d0)*x(3,i)*3.d0            stdp-423
      y(2)=y(2)+rr*x(3,i)                                               stdp-424
      y(3)=y(3)-x(3,i)                                                  stdp-425
      go to 66                                                          stdp-426
   59 if (a4.gt.1.d0) go to 60                                          stdp-427
      a3=(x(2,i)**2)*(a4**(l+1))*3.d0/((a5+2.d0)*(2.d0*a5-1.d0))        stdp-428
      if (iv1.gt.1) a3=a3*(a5+2.d0)/x(2,i)                              stdp-429
      if (iv1.gt.2) a3=a3*(a5+1.d0)/x(2,i)                              stdp-430
      if (iv1.gt.3) a3=a3*a5/x(2,i)                                     stdp-431
      go to 62                                                          stdp-432
   60 if (l.ne.2) go to 61                                              stdp-433
      if (iv1.eq.1) a3=rr*rr*(0.2d0+dlog(a4))*0.6d0                     stdp-434
      if (iv1.ge.2) a3=0.6d0*rr/a4                                      stdp-435
      if (iv1.ge.3) a3=-a3/x(2,i)                                       stdp-436
      if (iv1.ge.4) a3=-2.d0*a3/x(2,i)                                  stdp-437
      go to 62                                                          stdp-438
   61 if (iv1.eq.1) a3=rr*rr*(1.d0/(a5+2.d0)-1.d0/(a4**(l-2)*(2.d0*a5-1.stdp-439
     1d0)))*3.d0/(a5-3.d0)                                              stdp-440
      if (iv1.ge.2) a3=rr/a4**(l-1)*3.d0/(2.d0*a5-1.d0)                 stdp-441
      if (iv1.ge.3) a3=-a3*(a5-2.d0)/x(2,i)                             stdp-442
      if (iv1.eq.4) a3=-a3*(a5-1.d0)/x(2,i)                             stdp-443
   62 y(1)=y(1)+a3*x(3,i)                                               stdp-444
      if (ji.eq.1) go to 66                                             stdp-445
      if (a4.gt.1.d0) go to 63                                          stdp-446
      a3=-a5*a3/rr                                                      stdp-447
      go to 65                                                          stdp-448
   63 if (l.ne.2) go to 64                                              stdp-449
      if (iv2.eq.1) a3=-1.2d0*(0.3d0*rr-dlog(a4))*rr                    stdp-450
      if (iv2.ge.2) a3=2.d0*a3/rr                                       stdp-451
      go to 65                                                          stdp-452
   64 if (iv2.eq.1) a3=(2.d0/(a5+2.d0)-(a5-1.d0)/(a4**(l-2)*(2.d0*a5-1.dstdp-453
     10)))*3.d0/(a5-3.d0)*rr                                            stdp-454
      if (iv2.ne.1) a3=(a5-1.d0)*a3/rr                                  stdp-455
   65 y(2)=y(2)-a3*x(3,i)                                               stdp-456
   66 continue                                                          stdp-457
      go to 84                                                          stdp-458
c computation of bessel functions.                                      stdp-459
   67 if (iv.gt.9) go to 76                                             stdp-460
      if (rr.gt.val(nmc)) go to 87                                      stdp-461
      do 75 ii=1,l2x                                                    stdp-462
      a1=rr*x(1,ii)                                                     stdp-463
      x(2,1)=dsin(a1)/a1                                                stdp-464
      if (lj.eq.1) go to 72                                             stdp-465
      k=idint(1.d0+a1)                                                  stdp-466
      if (k.lt.lj) go to 69                                             stdp-467
      x(2,2)=(x(2,1)-dcos(a1))/a1                                       stdp-468
      if (lj.eq.2) go to 72                                             stdp-469
      do 68 j=3,lj                                                      stdp-470
   68 x(2,j)=(2*j-3)*x(2,j-1)/a1-x(2,j-2)                               stdp-471
      go to 72                                                          stdp-472
   69 a3=lj                                                             stdp-473
      a4=dmax1(dsqrt(10.5d0*a1)-0.5d0,a3)                               stdp-474
      k=idint(a4+3.d0+21.d0*a1/(a4+a4+1.d0))                            stdp-475
      a2=0.d0                                                           stdp-476
   70 a2=a1/(2.d0*k+1.d0-a2*a1)                                         stdp-477
      if (k.le.lj) x(2,k+1)=a2                                          stdp-478
      k=k-1                                                             stdp-479
      if (k.ge.1) go to 70                                              stdp-480
      do 71 k=2,lj                                                      stdp-481
   71 x(2,k)=x(2,k)*x(2,k-1)                                            stdp-482
c computation of derivatives of bessel functions (- derivative).        stdp-483
   72 jl=lj-1                                                           stdp-484
      do 74 j=lm,lj                                                     stdp-485
      kk=ji+j-lj                                                        stdp-486
      if (kk.ge.1) y(kk)=y(kk)+val(nmc+ii)*x(2,lm)                      stdp-487
      if (kk.eq.ji) go to 75                                            stdp-488
      a3=0.d0                                                           stdp-489
      a5=0.d0                                                           stdp-490
      do 73 k=1,jl                                                      stdp-491
      a2=(a5+1.d0)*x(2,k+1)-a5*a3                                       stdp-492
      a3=x(2,k)                                                         stdp-493
      x(2,k)=x(1,ii)*a2/(2.d0*a5+1.d0)                                  stdp-494
   73 a5=a5+1.d0                                                        stdp-495
   74 jl=jl-1                                                           stdp-496
   75 continue                                                          stdp-497
      go to 84                                                          stdp-498
c computation of laguerre polynomials x**ll l(2x**2) dexp(-x**2).       stdp-499
   76 do 83 j=1,l2x,2                                                   stdp-500
      if (j.ne.1) go to 77                                              stdp-501
      a1=rr/val(nmc)                                                    stdp-502
      a2=a1*a1                                                          stdp-503
      cl(1)=a1**ll*dexp(-0.5d0*a2)                                      stdp-504
      cl(2)=(ll+1.5d0-a2)*cl(1)                                         stdp-505
      go to 78                                                          stdp-506
   77 cl(1)=(cl(2)*(dfloat(ll+2*j)-2.5d0-a2)-cl(1)*(dfloat(ll+j)-1.5d0))stdp-507
     1/dfloat(j-1)                                                      stdp-508
      cl(2)=(cl(1)*(dfloat(ll+2*j)-0.5d0-a2)-cl(2)*(dfloat(ll+j)-0.5d0))stdp-509
     1/dfloat(j)                                                        stdp-510
   78 if (jl.ne.0) go to 79                                             stdp-511
      y(1)=y(1)+cl(1)*val(nmc+j)                                        stdp-512
      if (j.lt.l2x) y(1)=y(1)+cl(2)*val(nmc+j+1)                        stdp-513
   79 if (lj.eq.0) go to 83                                             stdp-514
      do 80 l=3,6                                                       stdp-515
   80 cl(l)=0.d0                                                        stdp-516
c -derivative of laguerre polynomials x**ll l(2x**2) dexp(-x**2).       stdp-517
      do 82 k=1,lj                                                      stdp-518
      do 81 l=1,6                                                       stdp-519
   81 cl(l+2)=cl(l)                                                     stdp-520
      cl(1)=((dfloat(ll+2*j+k)-a2)*cl(3)-dfloat(2*j)*cl(4)-dfloat(2*(k-1stdp-521
     1)*(k-2))*cl(7))/a1+dfloat(4*(k-1))*cl(5)                          stdp-522
      cl(2)=-((dfloat(ll+2*j+1-k)-a2)*cl(4)-dfloat(2*j+1+2*ll)*cl(3)-dflstdp-523
     1oat(2*(k-1)*(k-2))*cl(8))/a1-dfloat(4*(k-1))*cl(6)                stdp-524
      if (k.lt.jl) go to 83                                             stdp-525
      y(k+1-jl)=y(k+1-jl)+cl(1)*val(nmc+j)                              stdp-526
      if (j.lt.l2x) y(k+1-jl)=y(k+1-jl)+cl(2)*val(nmc+j+1)              stdp-527
   82 continue                                                          stdp-528
   83 continue                                                          stdp-529
   84 l2=l1                                                             stdp-530
      do 85 j=1,ji                                                      stdp-531
      v(is,l2)=ap*y(j)                                                  stdp-532
   85 l2=l2+inl                                                         stdp-533
      go to 87                                                          stdp-534
   86 y(1)=v(is,l1)/ap                                                  stdp-535
      if (lt(2).and.(.not.lt(4))) v(is,l1)=p(is)                        stdp-536
   87 an=an+ap*y(1)*rr**(l+2)                                           stdp-537
      if (lt(7)) go to 94                                               stdp-538
      if (.not.lt(4)) go to 89                                          stdp-539
c folding of charge distribution with coulomb potential.                stdp-540
      idx=max0(idx,5*ism)                                               stdp-541
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-542
      a7=0.d0                                                           stdp-543
      if (lt(8)) a7=val(nmb+4)                                          stdp-544
      call copo(v(1,l1),v(1,l1),x,ism,hh,l,ap,a7,ccz,a6,.true.,.false.) stdp-545
      if (a6.eq.0.d0) a6=dabs(v(ism,l1)*dfloat(2*l+1)*(ism*hh)**(l+1)/(cstdp-546
     1cz*val(nmb)))                                                     stdp-547
      do 88 is=1,ism                                                    stdp-548
   88 v(is,l1)=v(is,l1)/a6                                              stdp-549
   89 if (nval(2,nma+1).eq.0) go to 93                                  stdp-550
      an=dabs(an*hh/ap)                                                 stdp-551
      if (itv.gt.6) an=dabs(v(ism,l1)*dfloat(2*l+1)*(ism*hh)**(l+1)/(cczstdp-552
     1*val(nmb)))                                                       stdp-553
      if (lt(2).and.(itt.eq.8).and.(nval(1,nma+1).eq.0).and.(val(nmb+2).stdp-554
     1eq.0.d0).and.lt(8)) an=an*hh*ism                                  stdp-555
      if (nval(2,nma+1).gt.0) go to 90                                  stdp-556
      nval(2,nma+1)=-nval(2,nma+1)                                      stdp-557
      ap=val(nmb)                                                       stdp-558
      val(nmb)=ap*an                                                    stdp-559
      write (mw,1003) ap,val(nmb),itt,j1                                stdp-560
      go to 93                                                          stdp-561
   90 l2=l1                                                             stdp-562
      do 92 j=1,ij                                                      stdp-563
      do 91 is=1,ism                                                    stdp-564
   91 v(is,l2)=v(is,l2)/an                                              stdp-565
   92 l2=l2+inl                                                         stdp-566
   93 if (.not.lt(4)) go to 94                                          stdp-567
      lt(4)=.false.                                                     stdp-568
      lt(7)=.true.                                                      stdp-569
      if (lt(2)) go to 31                                               stdp-570
      if (ij.ne.1) go to 26                                             stdp-571
   94 if (.not.lt(1).or.(nval(1,nma+1).ne.0)) go to 96                  stdp-572
      rr=0.d0                                                           stdp-573
      do 95 is=1,ism                                                    stdp-574
      rr=rr+h                                                           stdp-575
      a1=v(is,l1+inl)                                                   stdp-576
      v(is,l1+inl)=-v(is,l1)/rr**2                                      stdp-577
   95 v(is,l1)=a1/rr                                                    stdp-578
   96 nma=nval(2,i1-6)+1                                                stdp-579
      go to 9                                                           stdp-580
   97 if (nfo.eq.0) return                                              stdp-581
c folding.                                                              stdp-582
      nnf=ism*itxm+1                                                    stdp-583
      if (lo(100)) nnf=nnf-ism*itx(7)                                   stdp-584
      do 98 i=1,nnf                                                     stdp-585
   98 p(i)=0.d0                                                         stdp-586
      n1=nval(2,1)                                                      stdp-587
      ist=0                                                             stdp-588
      do 99 n=1,nfo                                                     stdp-589
      is=5+ism+idint(2.d0*(dabs(val(n1+3*n-2))+2.d0*dabs(val(n1+3*n-1)))stdp-590
     1/hm)                                                              stdp-591
      if (val(n1+3*n-3)*val(n1+3*n-2).eq.0.d0) is=ism+5                 stdp-592
   99 ist=max0(is,ist)                                                  stdp-593
      idy=nnf+2*ist*(imax+1)                                            stdp-594
      idx=max0(idy,idx)                                                 stdp-595
      if (idx.gt.2*nx) call memo('stdf',nx,(idx+1)/2)                   stdp-596
      call fold(v,p,val(n1),nfo,1,ism,ist,ivy,intc,p(nnf),pgn,xgn,wv,izzstdp-597
     1,lo)                                                              stdp-598
      return                                                            stdp-599
 1000 format (' too small diffuseness =',d15.8,'   changed into minimum stdp-600
     1value in stdp for nma =',i5,' and i =',i2)                        stdp-601
 1001 format (' too small coulomb radius =',d15.8,'   changed into minimstdp-602
     1um value in stdp for nma =',i5,' and i =',i2)                     stdp-603
 1002 format (' power 1+',d15.6,'  changed to .2 for nma =',i4)         stdp-604
 1003 format (' strength',d15.6,' replaced by the integral',d15.6,' for stdp-605
     1the form factor',i4,' of the potential',i4)                       stdp-606
      end                                                               stdp-607
c 20/05/07                                                      ecis06  stbf-000
      subroutine stbf(v,ivx,ism,val,ivm,nx,idx,xx,iv,hh,iex,lo)         stbf-001
c computes bound state form factors.                                    stbf-002
c input:     ivx:     table of quantum numbers.                         stbf-003
c            ism:     number of integration steps.                      stbf-004
c            val(j):  oscillator parameter or binding energy for j=1,   stbf-005
c                     total mass for j=2,                               stbf-006
c                     mass of bound particle for j=3,                   stbf-007
c                     product of charges for j=4,                       stbf-008
c                     real potential for unbound states or starting     stbf-009
c                     value for the search on bound state for j=5,      stbf-010
c                     reduced radius of real potential for j=6,         stbf-011
c                     diffuseness of radius of real potential for j=7,  stbf-012
c                     depth of spin-orbit potential for j=8,            stbf-013
c                     reduced radius of spin-orbit potential for j=9,   stbf-014
c                     diffuseness of spin-orbit potential for j=10,     stbf-015
c                     reduced radius of coulomb potential for j=11.     stbf-016
c            ivm:     step factor for woods-saxon wave functions.       stbf-017
c            nx:      length of working space.                          stbf-018
c            iv:      iv=8 for solution in a woods-saxon potential.     stbf-019
c            hh:      step size for integration.                        stbf-020
c            lo(i):   logical controls:                                 stbf-021
c               lo(51) =.true. output of potentials.                    stbf-022
c               lo(47) =.true. no recoil correction for bound states.   stbf-023
c output:    v(ism):  bound state wave function.                        stbf-024
c            idx:     length of working field used.                     stbf-025
c working area:                                                         stbf-026
c            xx:      to compute bound functions.                       stbf-027
c            iex:     for coulomb function, in equivalence with xx.     stbf-028
c                                                                       stbf-029
c for the common  /dcons/ see calc.                                     stbf-030
c                                                                       stbf-031
c significance of the quantities in common /dcons/:                     stbf-032
c  ccz:       coulomb alpha constant.                                   stbf-033
c  ck:        h-bar*c.                                                  stbf-034
c   used:     ccz,ck.                                                   stbf-035
c                                                                       stbf-036
c***********************************************************************stbf-037
      implicit real*8 (a-h,o-z)                                         stbf-038
      logical lo(150)                                                   stbf-039
      dimension v(*),ivx(4),val(11),xx(*),iex(*)                        stbf-040
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            stbf-041
      common /inout/ mr,mw,ms                                           stbf-042
      l=ivx(2)                                                          stbf-043
      h=hh                                                              stbf-044
      if ((.not.lo(47)).and.(val(3).ne.val(2))) h=h*val(2)/(val(2)-val(3stbf-045
     1))                                                                stbf-046
      if (iv.eq.8) go to 7                                              stbf-047
      n=ivx(1)                                                          stbf-048
c computation of the normalisation of laguerre polynomials              stbf-049
      a1=2.256758334191d0                                               stbf-050
      a3=l                                                              stbf-051
      if (l.eq.0) go to 2                                               stbf-052
      do 1 i=1,l                                                        stbf-053
    1 a1=a1/(dfloat(i)+.5d0)                                            stbf-054
    2 if (n.eq.0) go to 4                                               stbf-055
      do 3 i=1,n                                                        stbf-056
      a2=dfloat(i)                                                      stbf-057
    3 a1=a1*(a2+a3+.5d0)/a2                                             stbf-058
    4 a1=dsqrt(a1)                                                      stbf-059
c computation of laguerre polynomials                                   stbf-060
      rr=0.d0                                                           stbf-061
      do 6 is=1,ism                                                     stbf-062
      rr=rr+h                                                           stbf-063
      x1=(val(1)*rr)**2                                                 stbf-064
      x3=a1*dexp(.5d0*(a3*dlog(x1)-x1))                                 stbf-065
      if (n.eq.0) go to 6                                               stbf-066
      x2=x3                                                             stbf-067
      do  5 i=1,n                                                       stbf-068
      a2=dfloat(i)                                                      stbf-069
      x2=2.d0*x2*dfloat(i-n-1)*x1/(a2*(2.d0*(a3+a2)+1.d0))              stbf-070
    5 x3=x3+x2                                                          stbf-071
    6 v(is)=x3                                                          stbf-072
      return                                                            stbf-073
c bound state in woods-saxon potential                                  stbf-074
c control of storage and step size                                      stbf-075
    7 ireb=ivm                                                          stbf-076
      if (ireb.eq.0) ireb=4                                             stbf-077
      kn=ireb*ism                                                       stbf-078
      idx=max0(idx,3*kn+3)                                              stbf-079
      if (idx.gt.nx) call memo('stbf',nx,idx)                           stbf-080
      a4=ireb                                                           stbf-081
      a4=h/a4                                                           stbf-082
      y3=(val(2)-val(3))**0.33333333333333d0                            stbf-083
      a2=y3*val(6)                                                      stbf-084
      kr=idint(a2/a4)                                                   stbf-085
      y2=val(1)                                                         stbf-086
      if (y2.eq.0.d0) y2=0.01d0                                         stbf-087
      jl=ivx(4)                                                         stbf-088
      if (ivx(3).eq.0) jl=2*l                                           stbf-089
      if (lo(51)) write (mw,1000) ivx,kn,ireb,kr,y2,(val(i),i=2,11)     stbf-090
      a1=a4*a4                                                          stbf-091
      y1=val(3)*(val(2)-val(3))/val(2)                                  stbf-092
      y5=ck*y1*a1                                                       stbf-093
      a5=y2*y5                                                          stbf-094
      rr=dsqrt(dabs(a5))/a4                                             stbf-095
      x5=0.5d0*ck*ccz*y1*val(4)/rr                                      stbf-096
      if (val(1).gt.0.d0) go to 8                                       stbf-097
c matching of unbound functions                                         stbf-098
      idx=max0(idx,6*l+6)                                               stbf-099
      if (idx.gt.nx) call memo('stbf',nx,idx)                           stbf-100
      call fcou(l,x5,rr*a4*kn,xx(l+2),xx(2*l+3),xx(3*l+4),xx(4*l+5),iex,stbf-101
     1xx(5*l+6))                                                        stbf-102
      z1=xx(2*l+2)*1.d-1**iex(l+1)                                      stbf-103
      z2=xx(4*l+4)*1.d1**iex(l+1)                                       stbf-104
      call fcou(l,x5,rr*a4*(kn-2),xx(l+2),xx(2*l+3),xx(3*l+4),xx(4*l+5),stbf-105
     1iex,xx(5*l+6))                                                    stbf-106
      z3=xx(2*l+2)*1.d-1**iex(l+1)                                      stbf-107
      z4=xx(4*l+4)*1.d1**iex(l+1)                                       stbf-108
    8 x1=y3*val(11)                                                     stbf-109
      a3=y3*val(9)                                                      stbf-110
      y3=2.d0*val(8)*y5                                                 stbf-111
      y4=ivx(3)*(ivx(3)+2)-jl*(jl+2)+4*l*(l+1)                          stbf-112
      y4=.25d0*y4                                                       stbf-113
      a6=dfloat(l*(l+1))                                                stbf-114
      a6=a6*a1                                                          stbf-115
      x4=x5*2.d0*a1*rr                                                  stbf-116
      x3=0.d0                                                           stbf-117
      k1=kn+1                                                           stbf-118
      k2=kn+2                                                           stbf-119
c computation of optical potentials                                     stbf-120
      do 10 i=1,k1                                                      stbf-121
      x3=x3+a4                                                          stbf-122
      x2=dexp((x3-a3)/val(10))                                          stbf-123
      xx(k2+i)=a6/(x3*x3)+y4*y3*x2/((1.d0+x2)**2*x3*val(10))+a5         stbf-124
      xx(2*k2+i)=-1.d0/(1.d0+dexp((x3-a2)/val(7)))                      stbf-125
      if (x3.gt.x1) go to 9                                             stbf-126
      xx(k2+i)=xx(k2+i)+x4*(1.5d0-0.5d0*x3*x3/(x1*x1))/x1               stbf-127
      go to 10                                                          stbf-128
    9 xx(k2+i)=xx(k2+i)+x4/x3                                           stbf-129
   10 continue                                                          stbf-130
      if (val(1).lt.0.d0) go to 15                                      stbf-131
c matching conditions                                                   stbf-132
      x1=(x3-a4)*rr                                                     stbf-133
      x3=x3*rr                                                          stbf-134
      a6=a6/a1                                                          stbf-135
      n=idint(5.d0*(x3-x1)+1.d0)                                        stbf-136
      y3=n                                                              stbf-137
      y3=(x3-x1)/y3                                                     stbf-138
      ig=idint(1.d0/y3)                                                 stbf-139
      jg=min0(100,ig)                                                   stbf-140
      a5=y3*y3                                                          stbf-141
      a3=1.d0                                                           stbf-142
      do 12 i=1,20                                                      stbf-143
      m=2*i*jg                                                          stbf-144
      a4=x3+y3*dfloat(m)                                                stbf-145
      y1=dexp(y3)                                                       stbf-146
      y4=0.5d0/y3+0.5d0                                                 stbf-147
      y2=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-148
      do 11 j=1,m                                                       stbf-149
      y1=(2.d0+y2/(1.d0-y2/12.d0))-1.d0/y1                              stbf-150
      a2=y2                                                             stbf-151
      a4=a4-y3                                                          stbf-152
      y2=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-153
      a1=y1*(1.d0-a2/12.d0)/(1.d0-y2/12.d0)                             stbf-154
   11 y4=y4/(a1*a1)+1.d0                                                stbf-155
      if (dabs(y1-a3).lt.0.1d-4*dabs(y1-1.d0)) go to 13                 stbf-156
   12 a3=y1                                                             stbf-157
      if (lo(51)) write (mw,1001)                                       stbf-158
   13 y4=(y4-0.5d0)*y3                                                  stbf-159
      if (lo(51)) write (mw,1002) i,m                                   stbf-160
      x2=1.d0/y1                                                        stbf-161
      x3=1.d0                                                           stbf-162
      x4=y2                                                             stbf-163
      do 14 i=1,n                                                       stbf-164
      x1=x2                                                             stbf-165
      x2=x3                                                             stbf-166
      x3=(2.d0+x4/(1.d0-x4/12.d0))*x2-x1                                stbf-167
      a4=a4-y3                                                          stbf-168
   14 x4=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-169
      a3=x3*(1.d0-y2/12.d0)/(1.d0-x4/12.d0)                             stbf-170
      go to 16                                                          stbf-171
   15 kr=k1                                                             stbf-172
   16 ks=idint(2.d0+dsqrt(a6/12.d0))                                    stbf-173
c starting values                                                       stbf-174
      do 17 i=1,ks                                                      stbf-175
   17 xx(i)=0.d0                                                        stbf-176
      xx(ks)=1.d0                                                       stbf-177
      if (l.eq.1) xx(ks-1)=-.2d0                                        stbf-178
      a4=val(5)                                                         stbf-179
      ik=2*ivx(1)                                                       stbf-180
      ist=0                                                             stbf-181
      x1=0.d0                                                           stbf-182
      y1=-1.d0                                                          stbf-183
      in1=0                                                             stbf-184
      in2=0                                                             stbf-185
c search for the eigenvalue                                             stbf-186
   18 x3=x1+a4                                                          stbf-187
   19 ist=ist+1                                                         stbf-188
      in3=0                                                             stbf-189
      x4=x3*y5                                                          stbf-190
c upwards integration                                                   stbf-191
      do 20 i=ks,kr                                                     stbf-192
      x5=x4*xx(2*k2+i-1)+xx(k2+i-1)                                     stbf-193
      xx(i+1)=(2.d0+x5/(1.d0-x5/12.d0))*xx(i)-xx(i-1)                   stbf-194
      if (xx(i+1)*xx(i).lt.0.d0) in3=in3+2                              stbf-195
   20 continue                                                          stbf-196
      if (val(1).lt.0.d0) go to 29                                      stbf-197
      a1=xx(kr)                                                         stbf-198
      a2=xx(kr+1)                                                       stbf-199
      xx(k2)=1.d0                                                       stbf-200
      xx(k1)=a3*(1.d0-(x4*xx(3*kn+4)+xx(2*kn+2))/12.d0)/(1.d0-(x4*xx(3*kstbf-201
     1n+5)+xx(2*kn+3))/12.d0)                                           stbf-202
c backwards integration                                                 stbf-203
      do 21 i=kr,kn                                                     stbf-204
      j=kn+kr-i                                                         stbf-205
      x5=x4*xx(2*k2+j)+xx(k2+j)                                         stbf-206
      if (xx(j+1)*xx(j+2).lt.0.d0) in3=in3+2                            stbf-207
   21 xx(j)=(2.d0+x5/(1.d0-x5/12.d0))*xx(j+1)-xx(j+2)                   stbf-208
      y3=a1/a2-xx(kr)/xx(kr+1)                                          stbf-209
      if (y3.gt.0.d0) in3=in3+1                                         stbf-210
      if (lo(51)) write (mw,1003) ist,in3,x3,y3                         stbf-211
      if (dabs(y3).le.1.d-10.or.x2.eq.x3.or.x1.eq.x3) go to 27          stbf-212
      if (in2.ne.0) go to 24                                            stbf-213
      if (in3.gt.ik) go to 22                                           stbf-214
      y1=y3                                                             stbf-215
      x1=x3                                                             stbf-216
      in1=in3                                                           stbf-217
      a4=x1                                                             stbf-218
      go to 18                                                          stbf-219
   22 if (lo(51)) write (mw,1004) ik,in1,in3                            stbf-220
      x2=x3                                                             stbf-221
      in2=in3                                                           stbf-222
      y2=y3                                                             stbf-223
c interpolation of solution                                             stbf-224
   23 x3=x1+0.5d0*(x2-x1)                                               stbf-225
      if (in2.eq.in1+1) x3=(y1*x2-y2*x1)/(y1-y2)                        stbf-226
      go to 19                                                          stbf-227
   24 x4=(y1*y2*x3*(x2-x1)+y1*y3*x2*(x1-x3)+y2*y3*x1*(x3-x2))/(y1*y2*(x2stbf-228
     1-x1)+y1*y3*(x1-x3)+y2*y3*(x3-x2))                                 stbf-229
      if (in2.gt.in1+2) x4=1.d20                                        stbf-230
      if (in3.gt.ik) go to 25                                           stbf-231
      x1=x3                                                             stbf-232
      y1=y3                                                             stbf-233
      in1=in3                                                           stbf-234
      go to 26                                                          stbf-235
   25 x2=x3                                                             stbf-236
      y2=y3                                                             stbf-237
      in2=in3                                                           stbf-238
   26 if ((x1-x4)*(x4-x2).lt.0.d0) go to 23                             stbf-239
      x3=x4                                                             stbf-240
      go to 19                                                          stbf-241
   27 y3=a1/xx(kr)                                                      stbf-242
      do 28 i=kr,k2                                                     stbf-243
   28 xx(i)=y3*xx(i)                                                    stbf-244
   29 do 30 i=1,kn                                                      stbf-245
   30 xx(i)=(xx(i)+10.d0*xx(i+1)+xx(i+2))/12.d0                         stbf-246
      if (val(1).gt.0.d0) go to 31                                      stbf-247
      x1=xx(kn)*z4-xx(kn-2)*z2                                          stbf-248
      x2=xx(kn-2)*z1-xx(kn)*z3                                          stbf-249
      x3=z1*z4-z2*z3                                                    stbf-250
      y2=datan2(x2,x1)                                                  stbf-251
      y1=(x1**2+x2**2)/x3**2                                            stbf-252
      x3=val(5)                                                         stbf-253
      go to 33                                                          stbf-254
   31 y1=0.d0                                                           stbf-255
      do 32 i=1,kn                                                      stbf-256
   32 y1=y1+xx(i)**2                                                    stbf-257
      y1=y1-0.5d0*xx(kn)**2                                             stbf-258
      y2=y4*xx(kn)**2/rr                                                stbf-259
      y3=ireb                                                           stbf-260
      y1=y1*h/y3+y2                                                     stbf-261
      y2=100.d0*y2/y1                                                   stbf-262
   33 y1=1.d0/dsqrt(y1)                                                 stbf-263
      is=0                                                              stbf-264
      rr=0.d0                                                           stbf-265
      do 34 i=ireb,kn,ireb                                              stbf-266
      is=is+1                                                           stbf-267
      rr=rr+h                                                           stbf-268
   34 v(is)=y1*xx(i)/rr                                                 stbf-269
      if (lo(51)) write (mw,1005) x3,y2,(is,v(is),is=1,ism)             stbf-270
      return                                                            stbf-271
 1000 format (//' woods-saxon potential eigenfunction with n =',i2,3x,'lstbf-272
     1 =',i3,3x,'2*s =',i2,3x,'2*j =',i3,3x,i4,' steps (divided by',i3,'stbf-273
     2) matching at the',i4,'th'/' **** binding energy',f12.6,' mev ****stbf-274
     3',4x,'total mass',f12.6,4x,'particle mass',f12.6,4x,'product of chstbf-275
     4arges',f8.2/' search on depth of real potential from',f12.6,' withstbf-276
     5 reduced radius',f10.6,' fermi and diffuseness',f10.6,' fermi'/' sstbf-277
     6pin-orbit potential depth:',f12.6,' mev radius:',f10.6,' fermi difstbf-278
     7fuseness:',f9.6,' fermi coulomb radius:',f10.6,' fermi')          stbf-279
 1001 format (10x,'no convergence on matching values')                  stbf-280
 1002 format (10x,'matching value obtained for i=',i3,' with',i6,' pointstbf-281
     1s')                                                               stbf-282
 1003 format (2x,i3,5x,'2*n (+0/1) =',i3,5x,'v =',d20.10,5x,'d =',d20.10stbf-283
     1)                                                                 stbf-284
 1004 format (' interpolation for 2*n =',i4,5x,'between',i4,' and',i4)  stbf-285
 1005 format (//' depth used',d20.10,' mev',15x,'tail percentage or phasstbf-286
     1e-shift',f10.5//(6(i6,d15.6)))                                    stbf-287
      end                                                               stbf-288
c 28/02/07                                                      ecis06  deri-000
      subroutine deri(x,y,h,n,lt)                                       deri-001
c numerical derivation of the function y known in n points with step h  deri-002
c it needs at least 7 points and returns in x the value of -d(y)/dr     deri-003
c if lt is false, the result is divided by r..                          deri-004
c input:     y:       function to be derived.                           deri-005
c            h:       step size of y.                                   deri-006
c            n:       number of points of y.                            deri-007
c            lt:      if lt=.false., the result is divided by r.        deri-008
c output:    x:       result.                                           deri-009
c***********************************************************************deri-010
      implicit real*8 (a-h,o-z)                                         deri-011
      logical lt                                                        deri-012
      dimension x(*),y(*)                                               deri-013
      common /inout/ mr,mw,ms                                           deri-014
      n3=n-3                                                            deri-015
      if (n3.ge.4) go to 1                                              deri-016
      write (mw,1000) n                                                 deri-017
      stop                                                              deri-018
    1 hh=-h*60.d0                                                       deri-019
      x(1)=(-147.d0*y(1)+360.d0*y(2)-450.d0*y(3)+400.d0*y(4)-225.d0*y(5)deri-020
     1+72.d0*y(6)-10.d0*y(7))/hh                                        deri-021
      x(2)=(-10.d0*y(1)-77.d0*y(2)+150.d0*y(3)-100.d0*y(4)+50.d0*y(5)-15deri-022
     1.d0*y(6)+2.d0*y(7))/hh                                            deri-023
      x(3)=(2.d0*y(1)-24.d0*y(2)-35.d0*y(3)+80.d0*y(4)-30.d0*y(5)+8.d0*yderi-024
     1(6)-y(7))/hh                                                      deri-025
      do 2 i=4,n3                                                       deri-026
    2 x(i)=(45.d0*(y(i+1)-y(i-1))-9.d0*(y(i+2)-y(i-2))+y(i+3)-y(i-3))/hhderi-027
      x(n-2)=(y(n-6)-8.d0*y(n-5)+30.d0*y(n-4)-80.d0*y(n3)+35.d0*y(n-2)+2deri-028
     14.d0*y(n-1)-2.d0*y(n))/hh                                         deri-029
      x(n-1)=(-2.d0*y(n-6)+15.d0*y(n-5)-50.d0*y(n-4)+100.d0*y(n3)-150.d0deri-030
     1*y(n-2)+77.d0*y(n-1)+10.d0*y(n))/hh                               deri-031
      x(n)=(10.d0*y(n-6)-72.d0*y(n-5)+225.d0*y(n-4)-400.d0*y(n3)+450.d0*deri-032
     1y(n-2)-360.d0*y(n-1)+147.d0*y(n))/hh                              deri-033
      if (lt) return                                                    deri-034
      r=0.d0                                                            deri-035
      do 3 i=1,n                                                        deri-036
      r=r+h                                                             deri-037
    3 x(i)=x(i)/r                                                       deri-038
      return                                                            deri-039
 1000 format (5x,i5,' points insufficient for derivation'///' in deri  .deri-040
     1..  stop  ...')                                                   deri-041
      end                                                               deri-042
c 20/08/06                                                      ecis06  fold-000
      subroutine fold(v1,v2,val,nfo,ip,ism,ist,ivy,invz,fr,pgn,xgn,wv,izfold-001
     1z,lo)                                                             fold-002
c v1 are the potentials and form factors, unfolded as input, folded as  fold-003
c output. v2 are working fields in which 0. are stored before the call. fold-004
c input:     v1:      potentials or form factors to be folded.          fold-005
c            val(i,j):folding parameters for the folding sets j.        fold-006
c            nfo:     number of sets of folding parameters              fold-007
c            ip:      potential to be folded if lo(7)=.false.           fold-008
c            ism:     number of points.                                 fold-009
c            ist:     maximum number of steps for folding functions.    fold-010
c            ivy:     table of form factors (see redm).                 fold-011
c            invz:    number of transition form factors to fold.        fold-012
c            pgn:     weights of gauss-legendre integration.            fold-013
c            xgn:   : abscissae of gauss-legendre integration.          fold-014
c            wv(j):   step size for j=8.                                fold-015
c            lo(i):   logical controls:                                 fold-016
c               lo(7)  =.true. matrix element and form factors read.    fold-017
c               lo(11) =.true. deformed coulomb potential.              fold-018
c               lo(12) =.true. deformed imaginary potential.            fold-019
c               lo(13) =.true. deformed real spin-orbit or tensor.      fold-020
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. fold-021
c               lo(19) =.true. deformed coulomb spin-orbit potential.   fold-022
c               lo(100)=.true. dirac equation.                          fold-023
c               lo(101)=.true. there is a real spin-orbit potential.    fold-024
c               lo(102)=.true. there is an imaginary spin-orbit         fold-025
c                              potential.                               fold-026
c               lo(103)=.true. there is a coulomb spin-orbit potential. fold-027
c output:    v1:     :potentials or form factors folded.                fold-028
c working areas:                                                        fold-029
c            v2:      area initialised to 0.                            fold-030
c            fr(i,*): gaussian or saxon folding functions for j=1,imt.  fold-031
c                     for yukawa or hulthen folding: h-functions for    fold-032
c                     j=1,imt, j-functions for j=imt+1,2*imt;           fold-033
c                     these functions are multiplied by                 fold-034
c                     r*r*exp(+\-r/va). integrals with h and j-functionsfold-035
c                     for j=2*imt+1,2*imt+2.                            fold-036
c            izz(i,*):address of folding parameters below for i=1,      fold-037
c                     type of form factor from 1 to 16 for i=2,         fold-038
c                     angular momentum for i=3,                         fold-039
c                     address of step size for i=4.                     fold-040
c                    (this part is an input with external form factors) fold-041
c                                                                       fold-042
c for the common  /conve/ see calx.                                     fold-043
c for the common  /pote1/ see redm.                                     fold-044
c                                                                       fold-045
c significance of the quantities in common /conve/:                     fold-046
c  aconv:     convergence criterion for potential and function.         fold-047
c   used:     aconv.                                                    fold-048
c                                                                       fold-049
c significance of the quantities in common /pote1/:                     fold-050
c  itx(16):   starting address of different form factors (see redm).    fold-051
c  intc:      number of form factors without deformed spin-orbit        fold-052
c             including correction terms.                               fold-053
c  inls:      number of spin-orbit form factors not taking into account fold-054
c             multiplication by 2.                                      fold-055
c  invd:      idem for coulomb spin-orbit.                              fold-056
c  itxm:      total number of form factors.                             fold-057
c   used:     itx,intc,inls,invd,itxm.                                  fold-058
c                                                                       fold-059
c folding conventions : val(*,1-3) real potential, imaginary, coulomb.  fold-060
c if val(1,*)=0  no folding.                                            fold-061
c if val(3,*)=0 gaussian form factor with range val(2,*).               fold-062
c if val(2,*)=0 hulthen form factor with ranges val(1,*) and val(3,*).  fold-063
c if val(2,*)=val(3,*)=0 yukawa form factor with range val(1,*).        fold-064
c all other cases  saxon form factor with radius val(2,*) and diffuse-  fold-065
c ness val(3,*) - all form factors are normalised - val(1,*) is used    fold-066
c only for hulthen form factor.                                         fold-067
c the diffuseness of a saxon form factor and the ranges of a hulthen or fold-068
c yukawa form factor are positive by taking the absolute value.         fold-069
c                                                                       fold-070
c***********************************************************************fold-071
      implicit real*8 (a-h,o-z)                                         fold-072
      logical lo(150)                                                   fold-073
      dimension v1(ism,*),v2(ism,*),val(3,3),ivy(7,*),fr(ist,*),pgn(10),fold-074
     1xgn(10),wv(22,*),izz(4,*),mm(3)                                   fold-075
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       fold-076
      common /inout/ mr,mw,ms                                           fold-077
      common /pote1/ itx(16),imax,intc,inls,invc,invd,itxm              fold-078
      data pim2 /6.2831853070d0/                                        fold-079
      ac=-dlog(aconv)                                                   fold-080
      jsl=ism+1                                                         fold-081
      itxn=itxm                                                         fold-082
      if (lo(100)) itxn=itxn-itx(2)                                     fold-083
      if (lo(7)) go to 9                                                fold-084
c initialisation of the table izz when potentials are not external.     fold-085
      mm(1)=1                                                           fold-086
      mm(2)=2                                                           fold-087
      mm(3)=3                                                           fold-088
      if ((val(1,2).eq.val(1,1)).and.(val(2,2).eq.val(2,1)).and.(val(3,2fold-089
     1).eq.val(3,1))) mm(2)=1                                           fold-090
      if ((val(1,3).eq.val(1,2)).and.(val(2,3).eq.val(2,2)).and.(val(3,3fold-091
     1).eq.val(3,2))) mm(3)=2                                           fold-092
      if ((val(1,3).eq.val(1,1)).and.(val(2,3).eq.val(2,1)).and.(val(3,3fold-093
     1).eq.val(3,1))) mm(3)=1                                           fold-094
      nfox=max0(mm(1),mm(2),mm(3))                                      fold-095
      do 2 j=1,itxn                                                     fold-096
      do 1 i=1,3                                                        fold-097
    1 izz(i,j)=0                                                        fold-098
    2 izz(4,j)=ip                                                       fold-099
      do 3 i=1,8                                                        fold-100
      if ((i.eq.5).and.(.not.lo(101))) go to 3                          fold-101
      if ((i.eq.6).and.(.not.lo(102))) go to 3                          fold-102
      if ((i.eq.8).and.(.not.lo(103))) go to 3                          fold-103
      m=mod(i+1,2)+1                                                    fold-104
      if (i.gt.6) m=3                                                   fold-105
      n=i                                                               fold-106
      if (.not.lo(100)) n=1+itx(i)                                      fold-107
      izz(1,n)=-mm(m)                                                   fold-108
      izz(2,n)=i                                                        fold-109
    3 continue                                                          fold-110
      if (invz.eq.0) go to 9                                            fold-111
      ij=itx(3)-itx(7)                                                  fold-112
      do 8 j=1,intc                                                     fold-113
      do 7 i=1,8                                                        fold-114
      m=mod(i+1,2)+1                                                    fold-115
      n=i+ij                                                            fold-116
      if (i.gt.6) go to 5                                               fold-117
      if (i.gt.4) go to 4                                               fold-118
      if ((m.eq.2).and.(.not.lo(12))) go to 7                           fold-119
      if (.not.lo(100)) n=j+itx(i+8)                                    fold-120
      go to 6                                                           fold-121
    4 if (.not.lo(8+i)) go to 7                                         fold-122
      if (.not.lo(100)) n=ivy(3,j)+itx(i+8)                             fold-123
      go to 6                                                           fold-124
    5 if (.not.lo(8*i-45)) go to 7                                      fold-125
      if (.not.lo(100)) n=itx(i+8)+ivy(i-3,j)                           fold-126
      m=3                                                               fold-127
    6 izz(1,n)=-mm(m)                                                   fold-128
      izz(2,n)=i+8                                                      fold-129
      izz(3,n)=ivy(7,j)                                                 fold-130
    7 continue                                                          fold-131
    8 ij=ij+11                                                          fold-132
c classification of step sizes.                                         fold-133
    9 do 11 i=2,itxn                                                    fold-134
      if (izz(1,i).eq.0) go to 11                                       fold-135
      do 10 j=2,i                                                       fold-136
      if (izz(1,j-1).ne.izz(1,i)) go to 10                              fold-137
      if (izz(4,j-1).eq.izz(4,i)) go to 10                              fold-138
      i1=izz(4,i)                                                       fold-139
      j1=izz(4,j-1)                                                     fold-140
      if (wv(8,i1).ne.wv(8,j1)) go to 10                                fold-141
      izz(4,i)=j1                                                       fold-142
      go to 11                                                          fold-143
   10 continue                                                          fold-144
   11 continue                                                          fold-145
      nfot=-nfo                                                         fold-146
c for external potentials, add 1 for dummy folding.                     fold-147
      if (lo(7)) nfox=nfo+1                                             fold-148
c loop on foldings.                                                     fold-149
      do 64 ii=1,nfox                                                   fold-150
      if (ii.gt.nfo) go to 54                                           fold-151
      ic=0                                                              fold-152
      do 12 j=1,3                                                       fold-153
      if (val(j,ii).ne.0.d0) ic=ic+2**(3-j)                             fold-154
      if (val(j,ii).ge.0.d0) go to 12                                   fold-155
      write (mw,1000) val(j,ii),j,ii                                    fold-156
      val(j,ii)=-val(j,ii)                                              fold-157
   12 continue                                                          fold-158
      if (ic.lt.4) go to 64                                             fold-159
      ih=0                                                              fold-160
   13 imt=1                                                             fold-161
      jh=0                                                              fold-162
      kh=0                                                              fold-163
c separation of foldings with respect to the step size.                 fold-164
      do 14 j=1,itxn                                                    fold-165
      if (izz(1,j)+ii.ne.0) go to 14                                    fold-166
      if (izz(4,j).lt.ih) go to 14                                      fold-167
      kh=kh+1                                                           fold-168
      if ((jh.ne.0).and.(izz(4,j).gt.ih)) go to 14                      fold-169
      jh=jh+1                                                           fold-170
      ih=izz(4,j)                                                       fold-171
      izz(1,j)=nfot-1                                                   fold-172
      imt=max0(imt,izz(3,j)+1)                                          fold-173
   14 continue                                                          fold-174
      if (jh.eq.0) go to 64                                             fold-175
      nfot=nfot-1                                                       fold-176
      hh=wv(8,ih)                                                       fold-177
c computation of the strength of the folding functions.                 fold-178
      cn=1.d0                                                           fold-179
      if (ic.gt.5) go to 15                                             fold-180
c yukawa folding.                                                       fold-181
      if (val(3,ii).eq.val(1,ii)) val(3,ii)=.99d0*val(1,ii)             fold-182
      cn=hh/(2.d0*pim2*(val(1,ii)**2-val(3,ii)**2))                     fold-183
      jst=ism+5                                                         fold-184
      go to 18                                                          fold-185
   15 if (ic.eq.7) go to 16                                             fold-186
c gaussian folding.                                                     fold-187
      isy=1+idint(val(2,ii)*dsqrt(ac)/hh)                               fold-188
      cn=hh/(0.5d0*pim2*dsqrt(0.5d0*pim2)*val(2,ii)**3)                 fold-189
      go to 18                                                          fold-190
c saxon folding.                                                        fold-191
   16 is=1+idint((val(2,ii)+10.d0*val(3,ii))/hh)                        fold-192
      isy=1+idint((val(2,ii)+2.d0*val(3,ii)*ac)/hh)                     fold-193
      cn=0.d0                                                           fold-194
      do 17 k=1,is                                                      fold-195
      rr=hh*k                                                           fold-196
   17 cn=cn+rr*rr/(1.d0+dexp((rr-val(2,ii))/val(3,ii)))                 fold-197
      cn=.5d0/(pim2*cn)                                                 fold-198
c gaussian or saxon folding.                                            fold-199
   18 an=dfloat(imt-1)                                                  fold-200
      if (ic.lt.6) go to 36                                             fold-201
c do loop on the points of potentials.                                  fold-202
      fs=0.d0                                                           fold-203
      is=0                                                              fold-204
   19 is=is+1                                                           fold-205
      jst=is+isy                                                        fold-206
      jsm=min0(ism,jst)                                                 fold-207
      r=val(2,ii)                                                       fold-208
      a=val(3,ii)                                                       fold-209
      x1=hh*dfloat(is)                                                  fold-210
      if (jst.le.ism) go to 20                                          fold-211
      jsz=max0(ism,1+is+2*idint((r+2.d0*a)/hh))                         fold-212
      jst=min0(jst,jsz+4)                                               fold-213
      isz=jsz-1                                                         fold-214
      isx=jst-jsz                                                       fold-215
c loop on the points of the folding function for which the symmetry     fold-216
c between the two arguments is used.                                    fold-217
   20 ji=is-1                                                           fold-218
   21 ji=ji+1                                                           fold-219
      a3=hh*ji                                                          fold-220
      a4=2.d0*x1*a3                                                     fold-221
      y=x1*x1+a3*a3                                                     fold-222
      if (a.eq.0.d0) go to 25                                           fold-223
c saxon folding function  by a 20-points gaussian integration           fold-224
c the saxon form factor itself is the variable.                         fold-225
      do 22 k=1,imt                                                     fold-226
   22 fr(ji,k)=0.d0                                                     fold-227
      r1=dmin1(70.d0,(dabs(x1-a3)-r)/a)                                 fold-228
      r2=dmin1(70.d0,(x1+a3-r)/a)                                       fold-229
      e1=1.d0/(1.d0+dexp(r1))                                           fold-230
      e2=1.d0/(1.d0+dexp(r2))                                           fold-231
      em=0.5d0*(e1+e2)                                                  fold-232
      es=0.5d0*(e1-e2)                                                  fold-233
      p1=es*2.d0*a*pim2/a4                                              fold-234
      do 24 ij=1,10                                                     fold-235
      pp=p1*pgn(ij)                                                     fold-236
      e1=1.d0/(em+es*xgn(ij))-1.d0                                      fold-237
      e2=1.d0/(em-es*xgn(ij))-1.d0                                      fold-238
      u1=r+a*dlog(e1)                                                   fold-239
      u2=r+a*dlog(e2)                                                   fold-240
      r1=pp*u1*(1.d0+e1)/e1                                             fold-241
      r2=pp*u2*(1.d0+e2)/e2                                             fold-242
      fr(ji,1)=fr(ji,1)+r1+r2                                           fold-243
      if (imt.eq.1) go to 24                                            fold-244
      e1=(y-u1*u1)/a4                                                   fold-245
      e2=(y-u2*u2)/a4                                                   fold-246
      r3=r1*e1                                                          fold-247
      r4=r2*e2                                                          fold-248
      fr(ji,2)=fr(ji,2)+r3+r4                                           fold-249
      if (imt.eq.2) go to 24                                            fold-250
c recurrence for legendre polynomials.                                  fold-251
      do 23 k=3,imt                                                     fold-252
      r5=r1                                                             fold-253
      r6=r2                                                             fold-254
      r1=r3                                                             fold-255
      r2=r4                                                             fold-256
      r3=(dfloat(2*k-3)*r1*e1-r5*dfloat(k-2))/dfloat(k-1)               fold-257
      r4=(dfloat(2*k-3)*r2*e2-r6*dfloat(k-2))/dfloat(k-1)               fold-258
   23 fr(ji,k)=fr(ji,k)+r3+r4                                           fold-259
   24 continue                                                          fold-260
      go to 29                                                          fold-261
c gaussian folding function.                                            fold-262
   25 a4=a4/(r*r)                                                       fold-263
      y=y/(r*r)                                                         fold-264
      b1=dexp(a4-y)                                                     fold-265
      b2=0.d0                                                           fold-266
      if (a4+y.lt.50.) b2=dexp(-a4-y)                                   fold-267
      dn=1.d0/a4                                                        fold-268
   26 fr(ji,1)=pim2*(b1-b2)*dn                                          fold-269
      if (imt.eq.1) go to 29                                            fold-270
c downwards recurrence for small arguments.                             fold-271
      q=dmax1(dsqrt(10.5d0*a4)-0.5d0,an)                                fold-272
      k=idint(q+3.d0+21.d0*a4/(q+q+1.d0))                               fold-273
      a1=0.d0                                                           fold-274
   27 a1=a4/(2.d0*k+1.d0+a4*a1)                                         fold-275
      if (k.lt.imt) fr(ji,k+1)=a1                                       fold-276
      k=k-1                                                             fold-277
      if (k.gt.0) go to 27                                              fold-278
      do 28 k=2,imt                                                     fold-279
   28 fr(ji,k)=fr(ji,k)*fr(ji,k-1)                                      fold-280
   29 if (ic.lt.6) go to 39                                             fold-281
      if (ji.lt.jst) go to 21                                           fold-282
      ik=1                                                              fold-283
      go to 46                                                          fold-284
   30 ik=2                                                              fold-285
      if (jst.le.ism) go to 46                                          fold-286
c form the coulomb potentials,asymptotic correction.                    fold-287
c the form factors are assumed to decrease as (r)**(-l-1).              fold-288
      a1=dfloat(ism)                                                    fold-289
      do 32 i=jsl,jst                                                   fold-290
      y=a1/dfloat(i)                                                    fold-291
      a4=dfloat(ism*i)*hh**2                                            fold-292
      do 31 j=1,imt                                                     fold-293
      fr(i,j)=fr(i,j)*a4                                                fold-294
   31 a4=a4*y                                                           fold-295
   32 continue                                                          fold-296
c correction of the last value by sum between ism and jsz and a pade    fold-297
c approximation limited to four terms (between jsz+1 and jst).          fold-298
      do 35 i=1,imt                                                     fold-299
      a1=0.d0                                                           fold-300
      a2=0.d0                                                           fold-301
      a3=0.d0                                                           fold-302
      a4=0.d0                                                           fold-303
      y=0.d0                                                            fold-304
      if (jsl.gt.isz) go to 34                                          fold-305
      do 33 j=jsl,isz                                                   fold-306
   33 y=y+fr(j,i)                                                       fold-307
   34 if (isx.eq.0.or.fr(jsz,i).eq.0.d0) go to 35                       fold-308
      a1=-fr(jsz+1,i)/fr(jsz,i)                                         fold-309
      if (isx.eq.1.or.fr(jsz+1,i).eq.0.d0) go to 35                     fold-310
      b1=fr(jsz+2,i)/fr(jsz+1,i)                                        fold-311
      a2=-a1-b1                                                         fold-312
      if (isx.eq.2.or.a2.eq.0.d0) go to 35                              fold-313
      b2=fr(jsz+3,i)/fr(jsz+1,i)                                        fold-314
      c1=-(b1*a1+b2)/a2                                                 fold-315
      a3=b1-c1                                                          fold-316
      if (isx.eq.3.or.a3.eq.0.d0) go to 35                              fold-317
      a4=c1-(b2+(b2*a1+fr(jsz+4,i)/fr(jsz+1,i))/a2)/a3                  fold-318
   35 fr(jsl,i)=y+fr(jsz,i)/(1.d0+a1/(1.d0+a2/(1.d0+a3/(1.d0+a4))))     fold-319
      go to 46                                                          fold-320
c loop on the two yukawa form factors.                                  fold-321
   36 fs=1.d0                                                           fold-322
      va=val(1,ii)                                                      fold-323
   37 if (va.eq.0.d0) go to 53                                          fold-324
c computation of bessel functions multiplied by r*r and exp(r/va).      fold-325
      ji=0                                                              fold-326
      b1=1.d0                                                           fold-327
      b2=1.d0                                                           fold-328
      b4=dexp(-hh/va)                                                   fold-329
   38 ji=ji+1                                                           fold-330
      a2=hh*dfloat(ji)                                                  fold-331
      a4=a2/va                                                          fold-332
      b2=b2*b4**2                                                       fold-333
      fr(ji,imt+1)=fs*a2                                                fold-334
      dn=a2*va                                                          fold-335
      go to 26                                                          fold-336
c upwards recurrence for the irregular function.                        fold-337
   39 fr(ji,imt+2)=fr(ji,imt+1)*(1.d0+1.d0/a4)                          fold-338
      if (imt.eq.2) go to 41                                            fold-339
      do 40 k=3,imt                                                     fold-340
   40 fr(ji,k+imt)=fr(ji,k-2+imt)+fr(ji,k-1+imt)*(2*k-3)/a4             fold-341
   41 if (ji.lt.jst) go to 38                                           fold-342
c corrections for singular first derivative (yukawa form factor).       fold-343
      vr=-fs*hh*pim2/6.d0                                               fold-344
      ik=1                                                              fold-345
      go to 46                                                          fold-346
c correction for coulomb potentials.                                    fold-347
   42 a6=dfloat(ism)                                                    fold-348
      do 44 i=jsl,jst                                                   fold-349
      y=a6/dfloat(i)                                                    fold-350
      a1=y                                                              fold-351
      do 43 j=1,imt                                                     fold-352
      fr(i,j+imt)=fr(i,j+imt)*a1                                        fold-353
   43 a1=a1*y                                                           fold-354
   44 continue                                                          fold-355
c estimation of the last value by a pade of four terms.                 fold-356
      do 45 i=1,imt                                                     fold-357
      a6=-fr(jsl+1,i+imt)/fr(jsl,i+imt)                                 fold-358
      if (i.eq.1) go to 45                                              fold-359
      b2=fr(jsl+2,i+imt)/fr(jsl+1,i+imt)                                fold-360
      a2=-a6-b2                                                         fold-361
      b3=fr(jsl+3,i+imt)/fr(jsl+1,i+imt)                                fold-362
      c1=-(b2*a6+b3)/a2                                                 fold-363
      a4=b2-c1                                                          fold-364
      a1=c1-(b3+(b3*a6+fr(jsl+4,i+imt)/fr(jsl+1,i+imt))/a2)/a4          fold-365
      a6=a6/(1.d0+b4*a2/(1.d0+b4*a4/(1.d0+b4*a1)))                      fold-366
   45 fr(jsl,i+imt)=fr(jsl,i+imt)/(1.d0+b4*a6)                          fold-367
      ik=2                                                              fold-368
c folding of the potentials.                                            fold-369
   46 do 51 k=1,itxn                                                    fold-370
      if (izz(1,k).ne.nfot) go to 51                                    fold-371
      if ((ik.eq.1).and.mod(izz(2,k),8).gt.6) go to 51                  fold-372
      if ((ik.eq.2).and.mod(izz(2,k),8).le.6) go to 51                  fold-373
      n=izz(3,k)+1                                                      fold-374
      if (ic.lt.6) go to 48                                             fold-375
      do 47 js=is,jsm                                                   fold-376
      b1=(hh*dfloat(js))**2                                             fold-377
      if (js.eq.is) go to 47                                            fold-378
      v2(js,k)=v2(js,k)+v1(is,k)*fr(js,n)*x1**2                         fold-379
   47 v2(is,k)=v2(is,k)+v1(js,k)*fr(js,n)*b1                            fold-380
      if ((ik.eq.2).and.(jst.gt.ism)) v2(is,k)=v2(is,k)+v1(ism,k)*fr(jslfold-381
     1,n)                                                               fold-382
      go to 51                                                          fold-383
   48 b2=0.d0                                                           fold-384
      b3=fr(jsl,n+imt)*v1(ism,k)                                        fold-385
      do 49 is=1,ism                                                    fold-386
      js=jsl-is                                                         fold-387
      fr(js,2*imt+1)=b3*b4                                              fold-388
      b2=b2*b4+fr(is,n)*v1(is,k)                                        fold-389
      b3=b3*b4+fr(js,n+imt)*v1(js,k)                                    fold-390
   49 fr(is,2*imt+2)=b2                                                 fold-391
      do 50 is=1,ism                                                    fold-392
      rr=(is*hh)**2                                                     fold-393
   50 v2(is,k)=v2(is,k)+(fr(is,n)*fr(is,2*imt+1)+fr(is,n+imt)*fr(is,2*imfold-394
     1t+2))/rr+v1(is,k)*vr                                              fold-395
   51 continue                                                          fold-396
      if (ic.lt.6) go to 52                                             fold-397
      if (ik.eq.1) go to 30                                             fold-398
      if (is.lt.ism) go to 19                                           fold-399
   52 if (ik.eq.1) go to 42                                             fold-400
   53 fs=-fs                                                            fold-401
      if (fs.ge.0.d0) go to 55                                          fold-402
      va=val(3,ii)                                                      fold-403
      go to 37                                                          fold-404
c transfer of potentials from working space.                            fold-405
   54 nfot=1                                                            fold-406
   55 do 63 j=1,itxn                                                    fold-407
      if (izz(1,j).ne.nfot) go to 63                                    fold-408
      if (nfot.eq.1) go to 57                                           fold-409
      do 56 is=1,ism                                                    fold-410
   56 v1(is,j)=cn*v2(is,j)                                              fold-411
      go to 58                                                          fold-412
c step size for dummy folding.                                          fold-413
   57 ih=izz(4,j)                                                       fold-414
      hh=wv(8,ih)                                                       fold-415
   58 if (.not.lo(100).or.(izz(2,j).gt.8)) go to 59                     fold-416
      call deri(v1(1,j+8),v1(1,j),hh,ism,.true.)                        fold-417
      call deri(v1(1,j+16),v1(1,j+8),hh,ism,.true.)                     fold-418
      go to 63                                                          fold-419
   59 ix=mod(izz(2,j)-1,8)+1                                            fold-420
      if ((ix.lt.5).or.(ix.eq.7)) go to 63                              fold-421
      iml=0                                                             fold-422
      inl=0                                                             fold-423
      if (lo(100)) go to 60                                             fold-424
      if (izz(2,j).le.8) go to 61                                       fold-425
      inl=inls                                                          fold-426
      if (ix.eq.8) inl=invd                                             fold-427
      go to 61                                                          fold-428
   60 if (izz(2,j).le.8) go to 63                                       fold-429
      iml=4                                                             fold-430
      if (ix.eq.8) iml=3                                                fold-431
   61 call deri(v2(1,j),v1(1,j),hh,ism,lo(100))                         fold-432
      do 62 is=1,ism                                                    fold-433
      if (inl.eq.0) go to 62                                            fold-434
      ay=dfloat(is)*hh                                                  fold-435
      v1(is,j+inl)=-v1(is,j)/ay**2                                      fold-436
   62 v1(is,j+iml)=v2(is,j)                                             fold-437
   63 continue                                                          fold-438
      if (kh.ne.jh.and.nfot.ne.1) go to 13                              fold-439
   64 continue                                                          fold-440
      return                                                            fold-441
 1000 format (' negative value',d15.5,4x,'of folding parameter val(',i3,fold-442
     1',',i3,')')                                                       fold-443
      end                                                               fold-444
c 28/05/07                                                      ecis06  tlnc-000
      subroutine tlnc(hh,ipi,wv,tl,ism,x,ff,lm,nn,dd,il,v,vco,lo)       tlnc-001
c transmission coefficients of uncoupled states for compound nucleus.   tlnc-002
c input:     hh:      step size for the ground state.                   tlnc-003
c            ipi,wv:  ipi and wv for this state (see calx).             tlnc-004
c            ism:     number of steps.                                  tlnc-005
c            lm:      number of coulomb functions needed.               tlnc-006
c            il:      length of working space.                          tlnc-007
c            v:       potentials real and imaginary.                    tlnc-008
c            vco:     strength of long range coulomb correction.        tlnc-009
c            lo(i):   logical controls:                                 tlnc-010
c               lo(19) =.true. deformed coulomb spin-orbit potential.   tlnc-011
c               lo(26) =.true. integration stabilised for long range    tlnc-012
c                              constant potential.                      tlnc-013
c               lo(27) =.true. numerov's method for single equations.   tlnc-014
c               lo(44) =.true. coulomb corrections.                     tlnc-015
c               lo(103)=.true. there is a coulomb spin-orbit potential. tlnc-016
c               lo(129)=.true. real spin-orbit or dirac equation.       tlnc-017
c               lo(130)=.true. imaginary spin-orbit or dirac equation.  tlnc-018
c               lo(133)=.true. store scalar and coulomb potential       tlnc-019
c                              independently.                           tlnc-020
c output:    tl:      transmission coefficients of uncoupled levels.    tlnc-021
c working areas:                                                        tlnc-022
c            x:       for the integration.                              tlnc-023
c            ff:      for coulomb functions and corrections.            tlnc-024
c            nn:      needed by subroutine fcou.                        tlnc-025
c            dd:      needed by subroutine cori.                        tlnc-026
c***********************************************************************tlnc-027
      implicit real*8 (a-h,o-z)                                         tlnc-028
      logical lo(150)                                                   tlnc-029
      dimension ipi(11),wv(22),tl(*),x(2,*),ff(lm,*),nn(*),dd(*),v(ism,*tlnc-030
     1),vco(2),fam(4),b(4),g(4),av(5)                                   tlnc-031
      if (wv(3).le.0.d0) return                                         tlnc-032
      j=0                                                               tlnc-033
      call fcou(ipi(10),wv(5),ism*wv(8)*wv(11),ff,ff(1,2),ff(1,3),ff(1,4tlnc-034
     1),nn,ff(1,5))                                                     tlnc-035
      l=ipi(10)+1                                                       tlnc-036
      do 1 jl=1,l                                                       tlnc-037
      if (nn(jl).eq.0) go to 1                                          tlnc-038
      ff(jl,1)=ff(jl,1)*1.d-15                                          tlnc-039
      ff(jl,2)=ff(jl,2)*1.d-15                                          tlnc-040
      ff(jl,3)=ff(jl,3)*1.d15                                           tlnc-041
      ff(jl,4)=ff(jl,4)*1.d15                                           tlnc-042
    1 continue                                                          tlnc-043
      jc=0                                                              tlnc-044
      if (.not.(lo(103).or.lo(44))) go to 2                             tlnc-045
      jc=5                                                              tlnc-046
      rm=ism*wv(8)*wv(11)                                               tlnc-047
      call cori(wv(5),wv(5),rm,rm,dd,ff(1,5),ff(1,5),ff,ff,dd(200),lm,lmtlnc-048
     1,il,lm,ff(1,6))                                                   tlnc-049
    2 ij=ipi(2)                                                         tlnc-050
      vpr=wv(9)**2                                                      tlnc-051
      vpc=wv(10)**2                                                     tlnc-052
      do 25 lj=1,l                                                      tlnc-053
      do 24 jl=1,ij                                                     tlnc-054
      jj=2*(lj+jl)-ij-3                                                 tlnc-055
      j=j+1                                                             tlnc-056
      tl(j)=0.d0                                                        tlnc-057
      if (jj.lt.ij+1-2*lj) go to 24                                     tlnc-058
      l1=lj-1                                                           tlnc-059
      cll=dfloat(lj*(lj-1))                                             tlnc-060
      cls=.25d0*dfloat(jj*(jj+2)-ij*ij+1)-cll                           tlnc-061
c values of long range tails of central potentials.                     tlnc-062
      f2=vco(1)**2                                                      tlnc-063
      f3=vco(2)*cls                                                     tlnc-064
      if (wv(3).gt.0.d0.and.jc.gt.0) go to 3                            tlnc-065
      f2=0.d0                                                           tlnc-066
      f3=0.d0                                                           tlnc-067
c integration region - set up of potential in five points for           tlnc-068
c transformation of matching values.                                    tlnc-069
    3 b1=hh*hh/48.d0                                                    tlnc-070
      c1=dfloat(ism-1)*hh                                               tlnc-071
      a1=wv(11)**2                                                      tlnc-072
      if (wv(3).lt.0.d0) a1=-a1                                         tlnc-073
      do 4 k=1,5                                                        tlnc-074
      av(k)=b1*(2.d0*wv(11)*wv(5)/c1-a1+(cll-f2-f3/c1)/c1**2)           tlnc-075
    4 c1=c1+0.5d0*hh                                                    tlnc-076
c computation of coulomb corrections.                                   tlnc-077
      do 5 k=1,4                                                        tlnc-078
    5 b(k)=ff(l1+1,k)                                                   tlnc-079
      if (jc.le.0) go to 9                                              tlnc-080
      if (wv(5).ne.0.d0) go to 6                                        tlnc-081
      f2=f3*wv(11)                                                      tlnc-082
      f3=0.d0                                                           tlnc-083
    6 do 7 k=1,4                                                        tlnc-084
    7 g(k)=-ff(l1+1,k+jc)*f2                                            tlnc-085
      if (f3.eq.0.d0) go to 8                                           tlnc-086
      b1=2.d0*wv(5)*dfloat(l1*(l1+1))                                   tlnc-087
      b2=dfloat(l1+1)**2+wv(5)**2                                       tlnc-088
      c1=-(dfloat(2*l1+1)*b2+2*wv(5)**2)/b1                             tlnc-089
      c2=dfloat(2*l1+3)*b2/b1                                           tlnc-090
      a1=dfloat(ism)*wv(11)*wv(8)                                       tlnc-091
      d1=(b2+dfloat(l1+1)*wv(5)/a1)/a1/b1                               tlnc-092
      d2=-wv(5)*dsqrt(b2)/b1/a1                                         tlnc-093
      a1=b2/b1/a1                                                       tlnc-094
      a3=f3*wv(11)                                                      tlnc-095
      g(1)=g(1)-a3*(c1*ff(l1+1,1+jc)+c2*ff(l1+2,1+jc)-d1*ff(l1+1,1)**2-dtlnc-096
     12*2.d0*ff(l1+1,1)*ff(l1+2,1)-a1*ff(l1+2,1)**2)                    tlnc-097
      g(2)=g(2)-a3*(c1*ff(l1+1,2+jc)+c2*ff(l1+2,2+jc)-d1*ff(l1+1,1)*ff(ltlnc-098
     11+1,3)-d2*(ff(l1+1,1)*ff(l1+2,3)+ff(l1+2,1)*ff(l1+1,3))-a1*ff(l1+2tlnc-099
     2,1)*ff(l1+2,3))                                                   tlnc-100
      g(4)=g(4)-a3*(c1*ff(l1+1,4+jc)+c2*ff(l1+2,4+jc)-d1*ff(l1+1,3)**2-dtlnc-101
     12*2.d0*ff(l1+1,3)*ff(l1+2,3)-a1*ff(l1+2,3)**2)                    tlnc-102
    8 a4=1.d0+(g(1)*g(4)-g(2)**2)                                       tlnc-103
      g(3)=b(1)                                                         tlnc-104
      b(1)=(b(1)*(1.d0-g(2))+g(1)*b(3))/a4                              tlnc-105
      b(3)=(-g(3)*g(4)+(1.d0+g(2))*b(3))/a4                             tlnc-106
      g(3)=b(2)                                                         tlnc-107
      b(2)=(b(2)*(1.d0-g(2))+g(1)*b(4))/a4                              tlnc-108
      b(4)=(-g(3)*g(4)+(1.d0+g(2))*b(4))/a4                             tlnc-109
    9 a1=(1.d0-av(2))/(2.d0+10.d0*av(2))                                tlnc-110
      b1=(1.d0-av(4))/(2.d0+10.d0*av(4))                                tlnc-111
      a2=a1*(1.d0-av(1))/(1.d0-4.d0*av(1))                              tlnc-112
      b2=b1*(1.d0-av(5))/(1.d0-4.d0*av(5))                              tlnc-113
      c1=(2.d0+10.d0*av(3))-(1.d0-av(3))*(a1+b1)                        tlnc-114
      a1=(16.d0-144.d0*av(2))/(2.d0+10.d0*av(2))                        tlnc-115
      b1=(16.d0-144.d0*av(4))/(2.d0+10.d0*av(4))                        tlnc-116
      c2=(7.d0+a1*(1.d0-av(1)))/(1.d0-4.d0*av(1))                       tlnc-117
      d2=(7.d0+b1*(1.d0-av(5)))/(1.d0-4.d0*av(5))                       tlnc-118
      d1=(b1-a1)*(1.d0-av(3))                                           tlnc-119
      a1=a2*d2+b2*c2                                                    tlnc-120
      b1=(c1*d2+d1*b2)/a1                                               tlnc-121
      b2=30.d0*hh*b2*wv(11)/a1                                          tlnc-122
      fam(1)=b1*b(1)-b2*b(2)                                            tlnc-123
      fam(3)=b1*b(3)-b2*b(4)                                            tlnc-124
      b1=(c2*c1-a2*d1)/a1                                               tlnc-125
      a2=-30.d0*hh*a2*wv(11)/a1                                         tlnc-126
      fam(2)=b1*b(1)-a2*b(2)                                            tlnc-127
      fam(4)=b1*b(3)-a2*b(4)                                            tlnc-128
      cso=2.d0*vpr*cls                                                  tlnc-129
c computation of the regular solution.                                  tlnc-130
      do 10 is=1,ism                                                    tlnc-131
      x(1,is+2)=wv(12)-cll/dfloat(is)**2+vpr*v(is,1)                    tlnc-132
   10 x(2,is+2)=vpr*v(is,2)                                             tlnc-133
      if ((.not.lo(101)).or.(cso.eq.0.d0)) go to 13                     tlnc-134
      do 11 is=1,ism                                                    tlnc-135
   11 x(1,is+2)=x(1,is+2)+cso*v(is,3)                                   tlnc-136
      if (.not.lo(102)) go to 13                                        tlnc-137
      do 12 is=1,ism                                                    tlnc-138
   12 x(2,is+2)=x(2,is+2)+cso*v(is,4)                                   tlnc-139
   13 if (.not.lo(133)) go to 17                                        tlnc-140
      if (wv(5).eq.0.d0) go to 15                                       tlnc-141
      do 14 is=1,ism                                                    tlnc-142
   14 x(1,is+2)=x(1,is+2)+vpc*v(is,5)                                   tlnc-143
   15 if (.not.lo(103)) go to 17                                        tlnc-144
      vpd=2.d0*cls*vpc                                                  tlnc-145
      if (vpd*vco(2).eq.0.d0) go to 17                                  tlnc-146
      do 16 is=1,ism                                                    tlnc-147
   16 x(1,is+2)=x(1,is+2)+vpd*v(is,6)                                   tlnc-148
   17 continue                                                          tlnc-149
      if (lo(27)) go to 19                                              tlnc-150
c modified numerov method.                                              tlnc-151
      do 18 is=1,ism                                                    tlnc-152
      a1=x(1,is+2)**2-x(2,is+2)**2                                      tlnc-153
      if (lo(26)) a1=a1-x(1,is+2)**3/30.d0                              tlnc-154
      x(2,is+2)=x(2,is+2)*(1.d0-x(1,is+2)/6.d0)                         tlnc-155
   18 x(1,is+2)=x(1,is+2)-a1/12.d0                                      tlnc-156
      go to 21                                                          tlnc-157
c numerov method.                                                       tlnc-158
   19 do 20 is=1,ism                                                    tlnc-159
      a2=(12.d0+x(1,is+2))**2+x(2,is+2)**2                              tlnc-160
      a1=12.d0*(x(1,is+2)*(12.d0+x(1,is+2))+x(2,is+2)**2)/a2            tlnc-161
      if (lo(26)) a1=a1+x(1,is+2)**3/240.d0                             tlnc-162
      x(1,is+2)=a1                                                      tlnc-163
   20 x(2,is+2)=144.d0*x(2,is+2)/a2                                     tlnc-164
   21 x(1,1)=0.d0                                                       tlnc-165
      x(2,1)=0.d0                                                       tlnc-166
      x(1,2)=1.d-15                                                     tlnc-167
      x(2,2)=0.d0                                                       tlnc-168
      do 23 is=1,ism                                                    tlnc-169
      b1=x(1,is+1)*x(1,is+2)-x(2,is+1)*x(2,is+2)                        tlnc-170
      b2=x(2,is+1)*x(1,is+2)+x(1,is+1)*x(2,is+2)                        tlnc-171
      x(1,is+2)=x(1,is+1)+x(1,is+1)-x(1,is)-b1                          tlnc-172
      x(2,is+2)=x(2,is+1)+x(2,is+1)-x(2,is)-b2                          tlnc-173
      if (dabs(x(1,is+2)).lt.1.d15) go to 23                            tlnc-174
c renormalisation of large function values.                             tlnc-175
      js=2*is+4                                                         tlnc-176
      do 22 i=3,js                                                      tlnc-177
   22 x(i,1)=x(i,1)*1.d-30                                              tlnc-178
   23 continue                                                          tlnc-179
c end of integration.                                                   tlnc-180
c matching.                                                             tlnc-181
      a1=x(1,ism)*fam(4)-fam(3)*x(1,ism+2)                              tlnc-182
      a2=x(2,ism)*fam(4)-fam(3)*x(2,ism+2)                              tlnc-183
      b1=x(1,ism)*fam(2)-fam(1)*x(1,ism+2)                              tlnc-184
      b2=x(2,ism)*fam(2)-fam(1)*x(2,ism+2)                              tlnc-185
      a2=a2+b1                                                          tlnc-186
      a1=a1-b2                                                          tlnc-187
      a3=a1*a1+a2*a2                                                    tlnc-188
      a1=-a1/a3                                                         tlnc-189
      a2=a2/a3                                                          tlnc-190
      cr=a1*b1-a2*b2                                                    tlnc-191
      ci=b1*a2+b2*a1                                                    tlnc-192
      tl(j)=dmax1(0.d0,4.d0*(ci-cr**2-ci**2))                           tlnc-193
   24 continue                                                          tlnc-194
   25 continue                                                          tlnc-195
      return                                                            tlnc-196
      end                                                               tlnc-197
c 20/08/06                                                      ecis06  quan-000
      subroutine quan(ncoll,wv,ipi,niv,iq,tq,ivq,ivz,mc,nat,at,it,nvi,kaquan-001
     1b,kbc,aa,fac,nfa,nmax,jd,lo)                                      quan-002
c input:     ncoll:   number of coupled nuclear states.                 quan-003
c            wv:      description of the channels. see calx.            quan-004
c            ipi:     projectile and target multiplicity, parity        quan-005
c                     and maximum angular momentum.  see calx.          quan-006
c            niv:     first/last address in the table of                quan-007
c                     reduced nuclear matrix elements.  see redm.       quan-008
c            iq,tq:   table of reduced nuclear matrix elements.         quan-009
c            ivq:     table of multipoles.  see redm.                   quan-010
c            ivz:     table of form factors.  see redm.                 quan-011
c            kab:     maximum number of coupled channels.               quan-012
c            kbc:     maximum number of solutions.                      quan-013
c            fac:     table of logarithms of factorials.                quan-014
c            nfa:     length of fac.                                    quan-015
c            nmax:    available length of at/nat(less 100 for 9j).      quan-016
c            jd:      first dimension of tables nat and at.             quan-017
c            lo(i):   logical controls:                                 quan-018
c               lo(12) =.true. deformed imaginary potential.            quan-019
c               lo(13) =.true. deformed real spin-orbit or tensor.      quan-020
c               lo(14) =.true. deformed imaginary spin-orbit or tensor. quan-021
c               lo(19) =.true. deformed coulomb spin-orbit potential.   quan-022
c               lo(58) =.true. output of the coefficients of each form  quan-023
c                              factor for all sets of equations.        quan-024
c               lo(100)=.true. dirac equation.                          quan-025
c               lo(101)=.true. there is a real spin-orbit potential.    quan-026
c               lo(103)=.true. there is a coulomb spin-orbit potential. quan-027
c               lo(110)=.true. derivatives are needed.                  quan-028
c               lo(123)=.true. identical particles with spin.           quan-029
c               lo(127)=.true. coulomb corrections in asymptotic region.quan-030
c               lo(128)=.true. no copy of uncoupled functions and       quan-031
c                              phase-shifts.                            quan-032
c output:    mc:      nuclear state indications. for ic=1,nc:           quan-033
c                     mc(ic,1): nuclear state numbers.                  quan-034
c                     mc(ic,2): orbital momentum lc.                    quan-035
c                     mc(ic,3): twice orbital spin.                     quan-036
c                     mc(ic,4): reference to potential or copy.         quan-037
c                     mc(ic,5): lc*(lc+1).                              quan-038
c                     mc(ic,6): eigenvalue of l.s.                      quan-039
c            nat,at:  in equivalence by call. table of coupling         quan-040
c                     coefficients. for i=1,it:                         quan-041
c                     nat(1,i): address of the real form factor,        quan-042
c                     nat(2,i): address of the imaginary form factor,   quan-043
c                     at(2,i):  geometrical coefficient,                quan-044
c                     and only for dirac equation:                      quan-045
c                     at(3,i):  idem for small components,              quan-046
c            it:      number of non zero coupling coefficients.         quan-047
c            nvi:     address in the table at(i), analogous to the niv  quan-048
c                     addresses: nvi(i1,i2,1) to nvi(i1,i2,2)           quan-049
c                     for the non derivatives couplings, nvi(i1,i2,2)+1 quan-050
c                     to nvi(i1,i2,3)  for the derivative couplings.    quan-051
c                     for small components of dirac equation, idem with quan-052
c                     nvi(i1,i2,4) to nvi(i1,i2,6).                     quan-053
c            aa:      coefficients of the symmetrisation for identical  quan-054
c                     particle and target, mc results are in mc(*,*+7), quan-055
c                     nat and at results are after the usual ones, nvi  quan-056
c                     results are in nvi(*,*,*+3), nc and ncin are      quan-057
c                     different from nic and nci.                       quan-058
c            lo(i):   logical controls: defined here: lo(110).          quan-059
c working area:                                                         quan-060
c            at(i,j): for j>it, working area used in dj9j.              quan-061
c                                                                       quan-062
c the common /noequ/ is used in cal1, quan, mtch and scam.              quan-063
c                                                                       quan-064
c for the common  /ncomp/ see calx.                                     quan-065
c for the common  /pote2/ see redm.                                     quan-066
c                                                                       quan-067
c significance of the quantities in common /ncomp/:                     quan-068
c  az(6):     deformed spin-orbit parameters. (see input description    quan-069
c             and comments in this subroutine).                         quan-070
c                                                                       quan-071
c significance of the quantities in common /noequ/:                     quan-072
c  ncxn:      number of solutions needed.                               quan-073
c  nic:       number of equations at the channel spin.                  quan-074
c  nci:       number of solutions at the channel spin.                  quan-075
c  nc:        number of equations for identical particles.              quan-076
c  ncin:      number of solutions for identical particles.              quan-077
c  nin:       number of coupling potentials.                            quan-078
c  jpi:       parity 0 or 1.                                            quan-079
c  ipj:       value of j+1 or j+1/2 where j is the channel spin.        quan-080
c  r1(2):     maximum of scattering and compound coefficient.           quan-081
c  naj:       twice the channel spin j.                                 quan-082
c   defined:  nic,nci,nc,ncin,nin.                                      quan-083
c   used:     nic,nci,nc,ncin,nin,jpi,naj.                              quan-084
c   not used: ncxn,ipj,r1.                                              quan-085
c                                                                       quan-086
c significance of the quantities in common /pote2/:                     quan-087
c  ity(5):    starting address of real central transition.              quan-088
c             ity(5)=0 is used for dirac equations.                     quan-089
c  intv:      number of transition form factors without spin-orbit,     quan-090
c             taking into account dispersion.                           quan-091
c  insl:      number of spin-orbit form transition factors not taking   quan-092
c             into account multiplication by 2.                         quan-093
c   used:     ity(5),intv,insl.                                         quan-094
c                                                                       quan-095
c***********************************************************************quan-096
      implicit real*8 (a-h,o-z)                                         quan-097
      logical lo(150),llo,llc,llp                                       quan-098
      dimension wv(22,*),ipi(11,*),niv(ncoll,ncoll,3),iq(6,*),tq(3,*),ivquan-099
     1q(3,*),ivz(4,*),mc(kab,12),nat(2*jd,*),at(jd,*),nvi(kab,kab,6),aa(quan-100
     2kbc,*),fac(*)                                                     quan-101
      character*1 ip(2)                                                 quan-102
      common /inout/ mr,mw,ms                                           quan-103
      common /ncomp/ nsp(12),acn(2),az(6),bz(12)                        quan-104
      common /noequ/ ncxn,nic,nci,nc,ncin,nin,jpi,ipj,r1(2),naj         quan-105
      common /pote2/ ity(12),invt,intv,insl,npx                         quan-106
      data ip /'+','-'/                                                 quan-107
      llc=lo(133).and.lo(11)                                            quan-108
      llp=lo(133).and.lo(19)                                            quan-109
c find quantum number of coupled channels.                              quan-110
      nc=0                                                              quan-111
      aj=.5d0*dfloat(naj)                                               quan-112
      do 6 i=1,ncoll                                                    quan-113
      nj1=naj-ipi(3,i)+1                                                quan-114
      nj2=iabs(nj1)                                                     quan-115
      nj=ipi(3,i)                                                       quan-116
      nl=ipi(2,i)                                                       quan-117
      do 5 j=1,nj                                                       quan-118
      l1=(naj-nj-nl)/2+j                                                quan-119
      l2=iabs(l1)                                                       quan-120
      do 4 k=1,nl                                                       quan-121
      if (mod(l1+ipi(1,i)+jpi,2).ne.0) go to 3                          quan-122
      if ((l1.lt.l2).or.(nj1.lt.nj2).or.(l1.gt.ipi(10,i))) go to 3      quan-123
      nc=nc+1                                                           quan-124
      mc(nc,4)=ipi(11,i)                                                quan-125
      if (lo(128)) go to 2                                              quan-126
      if (lo(100)) mc(nc,4)=i                                           quan-127
      do 1 m=nc,kab                                                     quan-128
      if (mc(m,1).ne.i) go to 1                                         quan-129
      if (mc(m,2).ne.l1) go to 1                                        quan-130
      if (mc(m,3).ne.nj1) go to 1                                       quan-131
      mc(nc,4)=-m                                                       quan-132
      go to 2                                                           quan-133
    1 continue                                                          quan-134
    2 mc(nc,1)=i                                                        quan-135
      mc(nc,2)=l1                                                       quan-136
      mc(nc,3)=nj1                                                      quan-137
      mc(nc,5)=mc(nc,2)*(mc(nc,2)+1)                                    quan-138
      mc(nc,6)=((nj1-ipi(2,i)+1)*(nj1+ipi(2,i)+1))/4-mc(nc,5)           quan-139
    3 l1=l1+1                                                           quan-140
    4 continue                                                          quan-141
    5 nj1=nj1+2                                                         quan-142
      if (i.ne.1) go to 6                                               quan-143
      ncin=nc                                                           quan-144
      if (ncin.eq.0) return                                             quan-145
    6 continue                                                          quan-146
      if (.not.lo(58)) go to 8                                          quan-147
      write (mw,1000) aj,ip(jpi+1),nc,ncin                              quan-148
      do 7 j=1,nc                                                       quan-149
      sj=0.5d0*dfloat(mc(j,3))                                          quan-150
    7 write (mw,1001) j,mc(j,1),mc(j,2),sj,mc(j,4),mc(j,5),mc(j,6)      quan-151
c computation of coupling coefficients for the form factors             quan-152
c when the spin-orbit is deformed,there is no symmetry, the total       quan-153
c table is calculated. with no spin-orbit deformation,only one half is  quan-154
c calculated. lo(110) returns .true. if they are derivative couplings.  quan-155
    8 lo(110)=.false.                                                   quan-156
      it=0                                                              quan-157
      nin=0                                                             quan-158
      invz=intv+ity(5)                                                  quan-159
      do 41 i1=1,nc                                                     quan-160
      j1=mc(i1,1)                                                       quan-161
      k1=ipi(11,j1)                                                     quan-162
      if (lo(100)) k1=j1                                                quan-163
      if (lo(127)) mc(i1,4)=k1                                          quan-164
      do 40 i2=1,i1                                                     quan-165
      j2=mc(i2,1)                                                       quan-166
      a2=wv(9,j1)*wv(9,j2)                                              quan-167
      a3=wv(10,j1)*wv(10,j2)                                            quan-168
      it1=it+1                                                          quan-169
      nvi(i2,i1,1)=it1                                                  quan-170
      k1=niv(j2,j1,1)                                                   quan-171
      k2=niv(j2,j1,2)                                                   quan-172
      if (k1.gt.k2) go to 32                                            quan-173
      if (2*(k2-k1+3+it).gt.nmax) call memo('quan',nmax,2*(k2-k1+3+it)) quan-174
      il=2*mc(i2,2)                                                     quan-175
      ilp=2*mc(i1,2)                                                    quan-176
      isj=mc(i2,3)                                                      quan-177
      isjp=mc(i1,3)                                                     quan-178
      iai=ipi(3,j2)-1                                                   quan-179
      iaip=ipi(3,j1)-1                                                  quan-180
      is=ipi(2,j2)-1                                                    quan-181
      isp=ipi(2,j1)-1                                                   quan-182
      do 22 k=k1,k2                                                     quan-183
      ni=iq(2,k)                                                        quan-184
c coefficient of a central multipole with angular momentum iq=ivq(1,ni) quan-185
c transfer of spin is=ivq(2,ni)/2 and of total momentum ij=ivq(3,ni)/2  quan-186
c noting the spin s,the orbital angular momentum l,the total spin of thequan-187
c particle j,the spin of the target ai,the eigenvalue of l.s g......    quan-188
c and "k"=sqrt(2*k+1)   the most general expression of (i2||iq||i1) is  quan-189
c  (-)**(aj+ai2+1+j1+(l2+iq-l1)/2)*"l1"*"l2"*"j1"*"j2"*"iq"*"ij"*       quan-190
c cgs(iq,l2,l1)*c6j(j1,ij,j2,ai2,aj,ai1)*c9j(l2,l1,iq,s2,s1,is,j2,j1,ij)quan-191
c in a macroscopic model, is=0 and ij=iq, the expressions used are      quan-192
c  (-)**(aj+ai2+1-s+(l1+l2+iq)/2)*"l1"*"l2"*"j1"*"j2"*"iq"*cgs(iq,l2,l1)quan-193
c    *c6j(j1,iq,j2,ai2,aj,ai1)*c6j(l1,iq,l2,j2,s,j1)                    quan-194
c for s=1/2 (-)**(aj+ai2-j2+(l1-l2+iq)/2)*"iq"*cgs(iq,j2,j1)            quan-195
c for s=0   (-)**(aj+ai2+1+(l1+l2+iq)/2)*"l1"*"l2"*"iq"*cgs(iq,l2,l1)*  quan-196
c           c6j(l1,iq,l2,ai2,aj,ai1).                                   quan-197
      iiq=2*ivq(1,ni)                                                   quan-198
      do 16 ix=2,jd                                                     quan-199
      cx=0.d0                                                           quan-200
      cmatel=0.d0                                                       quan-201
      if ((iiq.gt.il+ilp).or.(iiq.lt.iabs(il-ilp))) go to 13            quan-202
      fx=1.d0                                                           quan-203
      kk=mc(i1,2)+mc(i2,2)+ivq(1,ni)                                    quan-204
      iis=ivq(2,ni)                                                     quan-205
      if (iis.lt.0) go to 11                                            quan-206
      iij=ivq(3,ni)                                                     quan-207
      cmatel=dj6j(isj,iij,isjp,iaip,naj,iai,fac,nfa)                    quan-208
      a1=dfloat(iij+1)                                                  quan-209
      if (is.gt.1.or.iis.ne.0) go to 9                                  quan-210
      cmatel=cmatel*dcgs(iij,isjp,isj,fac,nfa)                          quan-211
      kk=kk+naj+iaip                                                    quan-212
      if (is.eq.1) kk=kk+2+il-isjp                                      quan-213
      if (is.ne.1) a1=a1*dfloat((isj+1)*(isjp+1))                       quan-214
      go to 12                                                          quan-215
    9 a1=a1*dfloat((il+1)*(ilp+1))                                      quan-216
      a1=a1*dfloat((isj+1)*(isjp+1))                                    quan-217
      kk=(naj+iaip-is)+kk                                               quan-218
      cmatel=cmatel*dcgs(iiq,ilp,il,fac,nfa)                            quan-219
      if (iis.ne.0) go to 10                                            quan-220
      fx=dj6j(il,isj,is,isjp,ilp,iij,fac,nfa)                           quan-221
      go to 12                                                          quan-222
   10 cmatel=cmatel*dj9j(il,ilp,iiq,is,isp,iis,isj,isjp,iij,at(1,it+1),1quan-223
     100)                                                               quan-224
      a1=a1*dfloat((iiq+1)*(iis+1))                                     quan-225
      kk=kk+isjp+ilp+is                                                 quan-226
      go to 12                                                          quan-227
c magnetic coulomb excitation of the particle:                          quan-228
   11 iij=iiq-2                                                         quan-229
      if (iiq.gt.il+ilp+2.or.iiq.lt.iabs(il-ilp)+2) go to 13            quan-230
      cmatel=dj6j(isj,isjp,iij,ilp,il,is,fac,nfa)*dj6j(isj,isjp,iiq-2,iaquan-231
     1ip,iai,naj,fac,nfa)*dcgs(iiq,ilp,il,fac,nfa)                      quan-232
      kk=kk+naj+iaip-is-2                                               quan-233
      a1=dfloat((iiq+1)**3)*dfloat((isj+1)*(isjp+1))*dfloat((il+1)*(ilp+quan-234
     11))*dfloat((il+ilp+iiq+2)*(il+ilp-iij))*(il-ilp+iiq)*(ilp-il+iiq)/quan-235
     2dfloat((iiq-1)*iij)**2/16.d0                                      quan-236
   12 if (mod(kk,4).eq.0) cmatel=-cmatel                                quan-237
      cmatel=tq(3,k)*cmatel*dsqrt(a1)                                   quan-238
      cx=cmatel*fx                                                      quan-239
   13 if (ix.eq.3) go to 14                                             quan-240
      it=it+1                                                           quan-241
      nat(1,it)=iq(1,k)                                                 quan-242
      nat(2,it)=0                                                       quan-243
   14 at(ix,it)=cx*a2                                                   quan-244
      if (.not.lo(100)) go to 17                                        quan-245
      if (ix.eq.3) go to 22                                             quan-246
      if (iiq.ne.iij) go to 15                                          quan-247
      at(3,it)=at(2,it)                                                 quan-248
      if (iis.ne.0) at(3,it)=-at(3,it)                                  quan-249
      go to 22                                                          quan-250
   15 il=2*isj-il                                                       quan-251
   16 ilp=2*isjp-ilp                                                    quan-252
   17 nat(1,it)=nat(1,it)+ity(5)                                        quan-253
      if (lo(133)) at(3,it)=0.d0                                        quan-254
      if (llc) at(3,it)=cx*a3                                           quan-255
      if (lo(12)) nat(2,it)=nat(1,it)                                   quan-256
      if (iq(3,k).eq.0) go to 22                                        quan-257
c deformed spin-orbit:                                                  quan-258
c form factor (1/r)(d/dr)v(r)         coefficient:  (i2||iq||i1)*g1     quan-259
c parametrisation:  (i2||iq||i1)*(az(3)*g1+az(4)*g2+az(1)).             quan-260
      a=cx*(mc(i2,6)*az(3)+mc(i1,6)*az(4)+az(1))                        quan-261
      if (dabs(a).lt.1.d-10) go to 18                                   quan-262
      it=it+1                                                           quan-263
      nat(1,it)=iq(3,k)+invz                                            quan-264
      nat(2,it)=0                                                       quan-265
      if (lo(14)) nat(2,it)=nat(1,it)                                   quan-266
      at(2,it)=2.d0*a*a2                                                quan-267
      if (lo(133)) at(3,it)=0.d0                                        quan-268
      if (llp) at(3,it)=2.d0*a*a3                                       quan-269
c form factor v(r)/r**2   coefficient: (i2||iq||i1)*(s*(iq*(iq+1)-l1*(l1quan-270
c   +1)-l2*(l2+1)+g2*(1+g1)/(2*s))+xxx)                                 quan-271
c parametrisation:   (i2||iq||i1)*az(5)*(s*(iq*(iq+1)*az(2)........     quan-272
c xxx is -sqrt(f1*f2)*c6j(l1,j1,s-1,j2,l2,iq)/(2*s*c6j(l1,j1,s,j2,l2,iq)quan-273
c  with f=(l*l+l-(j-s)*(j-s+1))*((j+s)*(j+s+1)-l*l-l)                   quan-274
c  for s=1/2  xxx=0                                                     quan-275
c  for s=1  xxx=-4*l1*l2*(l1+1)*(l2+1)/iq*iq+iq-l1*l1-l1-l2*l2-l2)      quan-276
c when j1=l1 and j2=l2 , else  xxx=0.                                   quan-277
   18 azi=dfloat(ivq(1,ni)*(ivq(1,ni)+1))                               quan-278
      aspi=dfloat(is)                                                   quan-279
      smatel=(0.5d0*dfloat(ipi(2,j1)-1)*(az(2)*azi-dfloat(mc(i1,5)+mc(i2quan-280
     1,5)))+dfloat(mc(i1,6))*(1.d0+dfloat(mc(i2,6))/aspi))*fx           quan-281
      if (is-2) 21 , 19 , 20                                            quan-282
   19 if (il.ne.isj.or.ilp.ne.isjp) go to 21                            quan-283
      a1=azi-mc(i1,5)-mc(i2,5)                                          quan-284
      if (a1.eq.0.d0) go to 20                                          quan-285
      smatel=smatel-4.d0*dfloat(mc(i1,5)*mc(i2,5))*fx/a1                quan-286
      go to 21                                                          quan-287
   20 g1=dfloat((mc(i1,3)-ipi(2,j1))/2)                                 quan-288
      g2=dfloat((mc(i1,3)+ipi(2,j1))/2)                                 quan-289
      f1=(dfloat(mc(i1,5))-g1*(g1+1.d0))*(g2*(g2+1.d0)-dfloat(mc(i1,5)))quan-290
      g1=dfloat((mc(i2,3)-ipi(2,j1))/2)                                 quan-291
      g2=dfloat((mc(i2,3)+ipi(2,j1))/2)                                 quan-292
      f2=(dfloat(mc(i2,5))-g1*(g1+1.d0))*(g2*(g2+1.d0)-dfloat(mc(i2,5)))quan-293
      f3=f1*f2                                                          quan-294
      if (f3.gt.0.d0) smatel=smatel-dsqrt(f3)*dj6j(il,isj,is-2,isjp,ilp,quan-295
     1iiq,fac,nfa)/aspi                                                 quan-296
   21 a=cmatel*az(5)*smatel                                             quan-297
      if (dabs(a).lt.1.d-10) go to 22                                   quan-298
      it=it+1                                                           quan-299
      nat(1,it)=iq(3,k)+invz+insl                                       quan-300
      nat(2,it)=0                                                       quan-301
      if (lo(14)) nat(2,it)=nat(1,it)                                   quan-302
      at(2,it)=2.d0*a*a2                                                quan-303
      if (lo(133)) at(3,it)=0.d0                                        quan-304
      if (llp) at(3,it)=2.d0*a*a3                                       quan-305
   22 continue                                                          quan-306
      llo=.false.                                                       quan-307
   23 if (it-it1) 32 , 27 , 24                                          quan-308
c  summation of coefficients related to the same form factor.           quan-309
   24 it2=it-1                                                          quan-310
      do 26 i=it1,it2                                                   quan-311
      do 25 j=i,it2                                                     quan-312
      if ((nat(1,i).ne.nat(1,j+1)).or.(nat(2,i).ne.nat(2,j+1))) go to 25quan-313
      at(2,i)=at(2,i)+at(2,j+1)                                         quan-314
      at(2,j+1)=0.d0                                                    quan-315
      if (jd.eq.2) go to 25                                             quan-316
      at(3,i)=at(3,i)+at(3,j+1)                                         quan-317
      at(3,j+1)=0.d0                                                    quan-318
   25 continue                                                          quan-319
   26 continue                                                          quan-320
c elimination of too small coefficients.                                quan-321
   27 it2=it                                                            quan-322
      it=it1-1                                                          quan-323
      nmr=0                                                             quan-324
      nmi=0                                                             quan-325
      do 28 i=it1,it2                                                   quan-326
      cx=dabs(at(2,i))                                                  quan-327
      if (jd.eq.3) cx=cx+dabs(at(3,i))                                  quan-328
      if (cx.lt.1.d-10) go to 28                                        quan-329
      it=it+1                                                           quan-330
      nat(1,it)=nat(1,i)                                                quan-331
      nat(2,it)=nat(2,i)                                                quan-332
      at(2,it)=at(2,i)                                                  quan-333
      if (jd.eq.3) at(3,it)=at(3,i)                                     quan-334
      nmr=nmr+1                                                         quan-335
      if (nat(2,it).ne.0) nmi=nmi+1                                     quan-336
   28 continue                                                          quan-337
      if (nmr.ne.0) nin=nin+1                                           quan-338
      if (nmi.ne.0) nin=nin+1                                           quan-339
      if (llo) go to 36                                                 quan-340
      if (.not.(lo(13).or.lo(19))) go to 32                             quan-341
      nvi(i2,i1,2)=it                                                   quan-342
c coefficients of the derivative coupling                               quan-343
c form factor  v(r)/r**2  coefficient: (i2||iq||i1)*(g1-g2)             quan-344
c parametrisation: (i2||iq||i1)*(g1-g2)*az(6).                          quan-345
      it2=it                                                            quan-346
      if (lo(100)) go to 30                                             quan-347
      do 29 i=it1,it2                                                   quan-348
      if (nat(1,i).gt.invz) go to 29                                    quan-349
      ij=nat(1,i)-ity(5)                                                quan-350
      if (ivz(3,ij).eq.0) go to 29                                      quan-351
      a=dfloat(mc(i2,6)-mc(i1,6))*az(6)*2.d0                            quan-352
      if (a.eq.0.d0) go to 29                                           quan-353
      lo(110)=.true.                                                    quan-354
      it=it+1                                                           quan-355
      nat(1,it)=ivz(3,ij)+invz+insl                                     quan-356
      nat(2,it)=0                                                       quan-357
      if (lo(14)) nat(2,it)=nat(1,it)                                   quan-358
      at(2,it)=at(2,i)*a                                                quan-359
      if (jd.eq.3) at(3,it)=0.d0                                        quan-360
      if (llp) at(3,it)=at(3,i)*a                                       quan-361
   29 continue                                                          quan-362
      go to 33                                                          quan-363
   30 do 31 i=it1,it2                                                   quan-364
      ij=nat(1,i)                                                       quan-365
      if (ivz(3,ij).eq.0) go to 31                                      quan-366
      lo(110)=.true.                                                    quan-367
      it=it+1                                                           quan-368
      nat(1,it)=ivz(3,ij)+intv                                          quan-369
      nat(2,it)=0                                                       quan-370
      at(2,it)=at(2,i)                                                  quan-371
      at(3,it)=at(2,it)*dfloat(mc(i2,6)-mc(i1,6))                       quan-372
   31 continue                                                          quan-373
      if (it.gt.it2) nin=nin+1                                          quan-374
      go to 33                                                          quan-375
   32 nvi(i2,i1,2)=it                                                   quan-376
   33 nvi(i2,i1,3)=it                                                   quan-377
      if (lo(100).or.(nvi(i2,i1,3).eq.nvi(i2,i1,2))) go to 38           quan-378
c copy of the coefficients and corrections in order to obtain           quan-379
c an hermitian interaction.                                             quan-380
      k1=nvi(i2,i1,1)                                                   quan-381
      k2=nvi(i2,i1,2)                                                   quan-382
      it1=it+1                                                          quan-383
      nvi(i1,i2,1)=it1                                                  quan-384
      do 34 k=k1,k2                                                     quan-385
      it=it+1                                                           quan-386
      nat(1,it)=nat(1,k)                                                quan-387
      nat(2,it)=nat(2,k)                                                quan-388
      if (jd.eq.3) at(3,it)=at(3,k)                                     quan-389
   34 at(2,it)=at(2,k)                                                  quan-390
      k1=k2+1                                                           quan-391
      k2=nvi(i2,i1,3)                                                   quan-392
      do 35 k=k1,k2                                                     quan-393
      it=it+1                                                           quan-394
      nat(1,it)=nat(1,k)-insl                                           quan-395
      nat(2,it)=0                                                       quan-396
      if (nat(2,k).ne.0) nat(2,it)=nat(2,k)-insl                        quan-397
      at(2,it)=-at(2,k)                                                 quan-398
      if (jd.eq.3) at(3,it)=-at(3,k)                                    quan-399
      it=it+1                                                           quan-400
      nat(1,it)=nat(1,k)                                                quan-401
      nat(2,it)=nat(2,k)                                                quan-402
      if (jd.eq.3) at(3,it)=at(3,k)                                     quan-403
   35 at(2,it)=at(2,k)                                                  quan-404
      llo=.true.                                                        quan-405
      go to 23                                                          quan-406
   36 nvi(i1,i2,2)=it                                                   quan-407
      do 37 k=k1,k2                                                     quan-408
      it=it+1                                                           quan-409
      nat(1,it)=nat(1,k)                                                quan-410
      nat(2,it)=nat(2,k)                                                quan-411
      if (jd.eq.3) at(3,it)=-at(3,k)                                    quan-412
   37 at(2,it)=-at(2,k)                                                 quan-413
      nvi(i1,i2,3)=it                                                   quan-414
      nin=nin+2                                                         quan-415
      if (lo(14)) nin=nin+2                                             quan-416
      go to 40                                                          quan-417
c symmetrisation of the table when there is no deformed spin-orbit.     quan-418
   38 do 39 k=1,3                                                       quan-419
   39 nvi(i1,i2,k)=nvi(i2,i1,k)                                         quan-420
   40 continue                                                          quan-421
   41 continue                                                          quan-422
      if (.not.lo(58)) go to 42                                         quan-423
c output of coupling coefficients.                                      quan-424
      write (mw,1002) ((j,i,(nvi(j,i,k),k=1,3),i=1,nc),j=1,nc)          quan-425
      if (it.eq.0) go to 42                                             quan-426
      if (jd.eq.2) write (mw,1003) (i,nat(1,i),nat(2,i),at(2,i),i=1,it) quan-427
      if (jd.eq.3) write (mw,1004) (i,nat(1,i),nat(2,i),at(2,i),at(3,i),quan-428
     1i=1,it)                                                           quan-429
   42 nci=ncin                                                          quan-430
      nic=nc                                                            quan-431
      if (.not.lo(123)) return                                          quan-432
c find quantum number of coupled channels for identical particles. not  quan-433
c used for dirac formalism (incorrect meaning of mc(*,10[3]) in mtch).  quan-434
      ncin=0                                                            quan-435
      ja=naj/2                                                          quan-436
      isi=ipi(2,1)-1                                                    quan-437
      nsm=isi+1                                                         quan-438
      nsb=jpi+1                                                         quan-439
      do 44 is=nsb,nsm,2                                                quan-440
      lp=ja+is                                                          quan-441
      lm=iabs(ja-is+1)+1                                                quan-442
      do 43 l=lm,lp                                                     quan-443
      if (mod(l+jpi,2).ne.1) go to 43                                   quan-444
      ncin=ncin+1                                                       quan-445
      mc(ncin,10)=ipi(11,1)                                             quan-446
      mc(ncin,7)=1                                                      quan-447
      mc(ncin,8)=l-1                                                    quan-448
      mc(ncin,9)=2*is-2                                                 quan-449
      mc(ncin,11)=mc(ncin,8)*(mc(ncin,8)+1)                             quan-450
      mc(ncin,12)=(ja*(ja+1)-l*(l-1)-is*(is-1))/2                       quan-451
   43 continue                                                          quan-452
   44 continue                                                          quan-453
      nc=ncin                                                           quan-454
      if (lo(58)) write (mw,1005) nci,ncin                              quan-455
      if (ncin.eq.0) return                                             quan-456
      if (nic.eq.nci) go to 46                                          quan-457
      n=nci+1                                                           quan-458
      do 45 i=n,nic                                                     quan-459
      nc=nc+1                                                           quan-460
      mc(nc,7)=mc(i,1)                                                  quan-461
      mc(nc,8)=mc(i,2)                                                  quan-462
      mc(nc,9)=mc(i,3)                                                  quan-463
      mc(nc,10)=mc(i,4)                                                 quan-464
      mc(nc,11)=mc(i,5)                                                 quan-465
   45 mc(nc,12)=mc(i,6)                                                 quan-466
   46 if (.not.lo(58)) go to 48                                         quan-467
      write (mw,1000) aj,ip(jpi+1),nc,ncin                              quan-468
      do 47 j=1,nc                                                      quan-469
      sj=0.5d0*dfloat(mc(j,9))                                          quan-470
   47 write (mw,1001) j,mc(j,7),mc(j,8),sj,mc(j,10),mc(j,11),mc(j,12)   quan-471
c computation of transformation coefficients.                           quan-472
   48 iti=it+1                                                          quan-473
      do 50 j=1,ncin                                                    quan-474
      do 49 i=1,nci                                                     quan-475
      aa(i,j)=0.d0                                                      quan-476
      if (mc(j,8).ne.mc(i,2)) go to 49                                  quan-477
      ij=mc(i,3)                                                        quan-478
      is=mc(j,9)                                                        quan-479
      aa(i,j)=dfloat(1-mod(2*mc(i,2)+naj+2*isi,4))*dsqrt((ij+1.d0)*(is+1quan-480
     1.d0))*dj6j(2*mc(i,2),isi,ij,isi,naj,is,fac,nfa)                   quan-481
   49 continue                                                          quan-482
   50 continue                                                          quan-483
      lo(110)=.false.                                                   quan-484
      nin=0                                                             quan-485
      ni=nci-ncin                                                       quan-486
      ibb=2                                                             quan-487
      if (.not.((lo(101).or.lo(103)).and.lo(100))) ibb=1                quan-488
      do 70 i1=1,nc                                                     quan-489
      if (i1.gt.ncin) go to 51                                          quan-490
      j1=1                                                              quan-491
      k1=nci                                                            quan-492
      go to 52                                                          quan-493
   51 j1=i1+ni                                                          quan-494
      k1=j1                                                             quan-495
   52 do 69 i2=1,nc                                                     quan-496
      if ((i2.gt.i1).and.(ibb.eq.1)) go to 70                           quan-497
      do 67 ib=1,ibb                                                    quan-498
      if (i2.gt.ncin) go to 53                                          quan-499
      j2=1                                                              quan-500
      k2=nci                                                            quan-501
      go to 54                                                          quan-502
   53 j2=i2+ni                                                          quan-503
      k2=j2                                                             quan-504
   54 it1=it+1                                                          quan-505
      if (ib.eq.1) nvi(i2,i1,4)=it1                                     quan-506
      do 58 l1=j1,k1                                                    quan-507
      a1=1.d0                                                           quan-508
      if (l1.le.nci) a1=aa(l1,i1)                                       quan-509
      if (a1.eq.0.d0) go to 58                                          quan-510
      do 57 l2=j2,k2                                                    quan-511
      a2=1.d0                                                           quan-512
      if (l2.le.nci) a2=aa(l2,i2)                                       quan-513
      if (a2.eq.0.d0) go to 57                                          quan-514
      m1=nvi(l2,l1,ib)                                                  quan-515
      m2=nvi(l2,l1,ib+1)                                                quan-516
      if (ib.eq.2) m1=m1+1                                              quan-517
      if (m1.gt.m2) go to 57                                            quan-518
      if (2*(m2-m1+3+it).gt.nmax) call memo('quan',nmax,2*(m2-m1+3+it)) quan-519
      do 56 m=m1,m2                                                     quan-520
      it=it+1                                                           quan-521
      nat(1,it)=nat(1,m)                                                quan-522
      nat(2,it)=nat(2,m)                                                quan-523
      do 55 ix=2,jd                                                     quan-524
   55 at(ix,it)=at(ix,m)*a1*a2                                          quan-525
   56 continue                                                          quan-526
   57 continue                                                          quan-527
   58 continue                                                          quan-528
      if (it-it1) 66 , 63 , 59                                          quan-529
c  summation of coefficients related to the same form factor.           quan-530
   59 it2=it-1                                                          quan-531
      do 62 i=it1,it2                                                   quan-532
      do 61 j=i,it2                                                     quan-533
      if ((nat(1,i).ne.nat(1,j+1)).or.(nat(2,i).ne.nat(2,j+1))) go to 61quan-534
      do 60 ix=2,jd                                                     quan-535
      at(ix,i)=at(ix,i)+at(ix,j+1)                                      quan-536
   60 at(ix,j+1)=0.d0                                                   quan-537
   61 continue                                                          quan-538
   62 continue                                                          quan-539
c elimination of too small coefficients.                                quan-540
   63 it2=it                                                            quan-541
      it=it1-1                                                          quan-542
      nmr=0                                                             quan-543
      nmi=0                                                             quan-544
      do 65 i=it1,it2                                                   quan-545
      cx=dabs(at(2,i))                                                  quan-546
      if (lo(100)) cx=cx+dabs(at(3,i))                                  quan-547
      if (cx.lt.1.d-10) go to 65                                        quan-548
      it=it+1                                                           quan-549
      nat(1,it)=nat(1,i)                                                quan-550
      nat(2,it)=nat(2,i)                                                quan-551
      do 64 ix=2,jd                                                     quan-552
   64 at(ix,it)=at(ix,i)                                                quan-553
      if (lo(100)) at(3,it)=at(3,i)                                     quan-554
      nmr=nmr+1                                                         quan-555
      if (nat(2,it).ne.0) nmi=nmi+1                                     quan-556
   65 continue                                                          quan-557
      if (nmr.ne.0) nin=nin+1                                           quan-558
      if (nmi.ne.0) nin=nin+1                                           quan-559
      if ((ib.eq.2).and.(nmr.ne.0)) lo(110)=.true.                      quan-560
   66 nvi(i2,i1,ib+4)=it                                                quan-561
   67 continue                                                          quan-562
      if (ibb.eq.2) go to 70                                            quan-563
      nvi(i2,i1,6)=it                                                   quan-564
c symmetrisation of the table when there is no deformed spin-orbit.     quan-565
      do 68 k=4,6                                                       quan-566
   68 nvi(i1,i2,k)=nvi(i2,i1,k)                                         quan-567
   69 continue                                                          quan-568
   70 continue                                                          quan-569
      if (.not.lo(58)) return                                           quan-570
c output of coupling coefficients.                                      quan-571
      write (mw,1002) ((i,j,(nvi(i,j,k),k=4,6),i=1,nc),j=1,nc)          quan-572
      if (it.lt.iti) return                                             quan-573
      if (.not.lo(100)) write (mw,1003) (i,nat(1,i),nat(2,i),at(2,i),i=iquan-574
     1ti,it)                                                            quan-575
      if (lo(100)) write (mw,1004) (i,nat(1,i),nat(2,i),at(2,i),at(3,i),quan-576
     1i=iti,it)                                                         quan-577
      return                                                            quan-578
 1000 format (/' channel spin and parity',f6.1,a1,i11,' coupled channelsquan-579
     1 and',i3,' solutions'//8x,' i',3x,' v',3x,' l',3x,' j',9x,' pot',5quan-580
     2x,' cl',6x,' cj'/)                                                quan-581
 1001 format (5x,3i5,f6.1,i11,2i9)                                      quan-582
 1002 format (/' pairs of channels n1 n2, and coupling coefficient numbequan-583
     1rs nvi(n1,n2,k),k=1,3'/(1x,6(i3,i3,',',3i4,';')))                 quan-584
 1003 format (//5x,'coefficients'/(4(2x,3i3,1p,d15.6)))                 quan-585
 1004 format (//5x,'coefficients'/(3(2x,3i3,1p,2d15.6)))                quan-586
 1005 format (/' number of solutions reduced from',i3,' to',i3)         quan-587
      end                                                               quan-588
c 08/03/07                                                      ecis06  mtch-000
      subroutine mtch(nvi,ncoll,kab,wv,mc,bg,nat,at,aa,ism,lmax2,niv,ivzmtch-001
     1,fg,lmax1,lmax3,kr,vco,vdo,fam,jd,lo)                             mtch-002
c computation of coulomb corrections as integrals from the matching     mtch-003
c point if lo(127)=.false. or from the origin if lo(127)=.true..        mtch-004
c input:     nvi:     addresses of couplings in table at.               mtch-005
c            ncoll:   number of nuclear states.                         mtch-006
c            kab:     maximum number of coupled channels.               mtch-007
c            wv:      wave numbers and coulomb parameters.              mtch-008
c            mc:      nuclear state number and angular momentum.        mtch-009
c            bg:      table of coulomb integrals from 0 to infinity     mtch-010
c                     for coupled equations or when lo(127)=.true..     mtch-011
c            nat,at:  table of coupling coefficients.                   mtch-012
c            ism:     number of integration points.                     mtch-013
c            lmax2:   first dimension of table bg.                      mtch-014
c            niv:     address in the table of reduced matrix element.   mtch-015
c            ivz:     table for use of form factors (see redm 3rd part).mtch-016
c            fg:      coulomb functions.                                mtch-017
c            lmax1:   first dimension of table fg.                      mtch-018
c            lmax3:   maximum number of coulomb integrals from the      mtch-019
c                     matching point to infinity.                       mtch-020
c            vco:     strength of tails of coulomb potentials.          mtch-021
c            vdo:     strength of tails of coulomb transitions.         mtch-022
c            fam(i,j):output of previous call from which j=1 to 10 are  mtch-023
c                     needed if uncoupled solutions are copied.         mtch-024
c            jd:      first dimension of nat,st.                        mtch-025
c            lo(i):   logical controls:                                 mtch-026
c               lo(11) =.true. deformed coulomb potential.              mtch-027
c               lo(19) =.true. deformed coulomb spin-orbit potential.   mtch-028
c               lo(29) =.true. no diagonal terms in second member.      mtch-029
c               lo(44) =.true. coulomb corrections.                     mtch-030
c               lo(57) =.true. output phase-shifts at each iteration.   mtch-031
c               lo(58) =.true. output of the coefficients of each form  mtch-032
c                              factor for all sets of equations.        mtch-033
c               lo(100)=.true. dirac equation.                          mtch-034
c               lo(125)=.true. usual coupled equations.                 mtch-035
c               lo(127)=.true. coulomb corrections in asymptotic region.mtch-036
c output:    aa:      coulomb integrals from the matching point to      mtch-037
c                     infinity for iterations lo(125)=.false..          mtch-038
c            fam(i,j):matching values and wave number for j=1 to 6,     mtch-039
c                     coefficient of central potential for j=7,         mtch-040
c                     coefficient of spin-orbit potential for j=9,      mtch-041
c                     energy for j=8, centrifugal potential for j=10.   mtch-042
c                     if lo(133)=.true.,coefficient of coulomb potentialmtch-043
c                     for j=11 and of spin-orbit coulomb for j=12.      mtch-044
c working areas:                                                        mtch-045
c            aa(1,1,i):for i=7,10 if lo(127) or lo(125)=.true.          mtch-046
c            kr:      working area in subroutine lins.                  mtch-047
c                                                                       mtch-048
c local tables la(3,11) and ba(2,11) are set for coulomb corrections    mtch-049
c limited by mcm(1)=5 and mcm(2)=4.                                     mtch-050
c                                                                       mtch-051
c for the common  /dcons/ see calc.                                     mtch-052
c for the common  /noequ/ see quan.                                     mtch-053
c for the common  /pote2/ see redm.                                     mtch-054
c                                                                       mtch-055
c significance of the quantities in common /dcons/:                     mtch-056
c  chb:       planck constant /(2*pi) in mev*fermi.                     mtch-057
c   used:     chb.                                                      mtch-058
c                                                                       mtch-059
c significance of the quantities in common /noequ/:                     mtch-060
c  ncxn:      number of solutions needed.                               mtch-061
c  nc:        number of equations for identical particles.              mtch-062
c   used:     ncxn,nc.                                                  mtch-063
c                                                                       mtch-064
c significance of the quantities in common /pote2/:                     mtch-065
c  ity(5):    starting address of real central transition.              mtch-066
c        ity(5)=0 is used for dirac equations.                          mtch-067
c  intv:      number of transition form factors without spin-orbit,     mtch-068
c             taking into account dispersion.                           mtch-069
c  insl:      number of spin-orbit form transition factors not taking   mtch-070
c                  into account multiplication by 2.                    mtch-071
c   used:     ity(5),intv,insl.                                         mtch-072
c                                                                       mtch-073
c***********************************************************************mtch-074
      implicit real*8 (a-h,o-z)                                         mtch-075
      logical lo(150),lv                                                mtch-076
      dimension nvi(kab,kab,3),wv(22,*),mc(kab,6),bg(lmax2,*),nat(2*jd,*mtch-077
     1),at(jd,*),aa(kab,kab,*),niv(ncoll,ncoll,3),ivz(4,*),fg(lmax1,4,*)mtch-078
     2,vco(2,*),vdo(2,*),fam(kab,12),b(4),c(4),g(4),ab(4,2),kr(*),av(5),mtch-079
     3la(3,11),ba(2,11),n1(4),n2(4),n3(4),n4(4)                         mtch-080
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            mtch-081
      common /pote2/ ity(12),invt,intv,insl,npx                         mtch-082
      common /noequ/ ncxn,nic,nci,nc,ncin,nin,jpi,ipj,r1(2),naj         mtch-083
      common /inout/ mr,mw,ms                                           mtch-084
      data n1,n2 /1,1,3,3,1,3,1,3/                                      mtch-085
      data n3,n4 /1,1,2,2,1,2,1,2/                                      mtch-086
      lv=lo(44).and.(lo(57).or.lo(58))                                  mtch-087
      ll4=4                                                             mtch-088
      if (lo(127)) ll4=1                                                mtch-089
      if (lv) write (mw,1000)                                           mtch-090
c loops on equations.                                                   mtch-091
      do 55 ic=1,nc                                                     mtch-092
      i1=mc(ic,1)                                                       mtch-093
      k1=mc(ic,4)                                                       mtch-094
      l1=mc(ic,2)                                                       mtch-095
      if (k1.ge.0.or.lo(127)) go to 2                                   mtch-096
c transfer of informations when uncoupled functions are not recomputed. mtch-097
      k1=-k1                                                            mtch-098
      if (.not.lo(100)) mc(ic,6)=0                                      mtch-099
      if (k1.eq.ic) go to 5                                             mtch-100
      do 1 i=1,10                                                       mtch-101
    1 fam(ic,i)=fam(k1,i)                                               mtch-102
      go to 5                                                           mtch-103
c values of long range tails of central potentials.                     mtch-104
    2 f2=vco(1,k1)**2                                                   mtch-105
      f3=vco(2,k1)*mc(ic,6)                                             mtch-106
      jc=0                                                              mtch-107
      if (i1.le.ncoll) jc=niv(i1,i1,3)                                  mtch-108
      if (wv(3,i1).gt.0.d0.and.jc.gt.0) go to 3                         mtch-109
      f2=0.d0                                                           mtch-110
      f3=0.d0                                                           mtch-111
    3 if (lo(127)) go to 5                                              mtch-112
c integration region - set up of potential in five points for           mtch-113
c transformation of matching values.                                    mtch-114
      b1=wv(8,1)*wv(8,1)/48.d0                                          mtch-115
      c1=(ism-1)*wv(8,1)                                                mtch-116
      a1=wv(11,i1)**2                                                   mtch-117
      if (wv(3,i1).lt.0.d0) a1=-a1                                      mtch-118
      do 4 i=1,5                                                        mtch-119
      av(i)=b1*(2.d0*wv(11,i1)*wv(5,i1)/c1-a1+(mc(ic,5)-f2-f3/c1)/c1**2)mtch-120
    4 c1=c1+0.5d0*wv(8,1)                                               mtch-121
c computation of coulomb corrections.                                   mtch-122
    5 az=ism*wv(8,i1)                                                   mtch-123
      do 47 ip=1,ic                                                     mtch-124
      do 7 k=1,2                                                        mtch-125
      do 6 i=1,4                                                        mtch-126
    6 ab(i,k)=0.d0                                                      mtch-127
    7 continue                                                          mtch-128
      i2=mc(ip,1)                                                       mtch-129
      ilm=1                                                             mtch-130
      if (.not.lo(44)) go to 44                                         mtch-131
      l2=mc(ip,2)                                                       mtch-132
      i3=niv(i2,i1,3)                                                   mtch-133
      if (i3.eq.0) go to 44                                             mtch-134
      ay=dsqrt(wv(11,i1)*wv(11,i2))                                     mtch-135
      aw=ay*az                                                          mtch-136
c scan the couplings between equations.                                 mtch-137
      is=0                                                              mtch-138
      if ((.not.lo(100)).and.lo(19).and.(ic.ne.ip)) ilm=2               mtch-139
      k1=nvi(ip,ic,1)                                                   mtch-140
      k2=nvi(ip,ic,2)                                                   mtch-141
      if ((.not.lo(11)).or.(k1.gt.k2)) go to 16                         mtch-142
      iml=1                                                             mtch-143
c central contribution.                                                 mtch-144
      i=1                                                               mtch-145
    8 if (vdo(1,i).eq.0.d0) go to 30                                    mtch-146
      ii=i+ity(5)                                                       mtch-147
      do 9 k=k1,k2                                                      mtch-148
      if (nat(1,k).eq.ii) go to 10                                      mtch-149
    9 continue                                                          mtch-150
      go to 30                                                          mtch-151
   10 if ((at(2,k).eq.0.d0).and.(.not.lo(100))) go to 30                mtch-152
      la1=mc(ic,2)                                                      mtch-153
      la2=mc(ip,2)                                                      mtch-154
      la3=ivz(4,i)                                                      mtch-155
      zt=at(2,k)*ay**la3*vdo(1,i)/wv(8,i1)**2                           mtch-156
      if (lo(100)) zt=zt*.5d0*dsqrt((1.d0+wv(6,i1)/wv(7,i1))*(1.d0+wv(6,mtch-157
     1i2)/wv(7,i1)))                                                    mtch-158
      im=1                                                              mtch-159
   11 if (im.lt.5) yt=zt                                                mtch-160
      if ((yt.eq.0.d0).and.(zt.eq.0.d0)) go to 14                       mtch-161
      if (is.eq.0) go to 13                                             mtch-162
      do 12 j=1,is                                                      mtch-163
      if ((la(1,j).ne.la1).or.(la(2,j).ne.la2).or.(la(3,j).ne.la3)) go tmtch-164
     1o 12                                                              mtch-165
      ba(1,j)=ba(1,j)+zt                                                mtch-166
      ba(2,j)=ba(2,j)+yt                                                mtch-167
      go to 14                                                          mtch-168
   12 continue                                                          mtch-169
   13 is=is+1                                                           mtch-170
      la(1,is)=la1                                                      mtch-171
      la(2,is)=la2                                                      mtch-172
      la(3,is)=la3                                                      mtch-173
      ba(1,is)=zt                                                       mtch-174
      ba(2,is)=yt                                                       mtch-175
   14 go to ( 15 , 30 , 20 , 30 , 27 , 28 , 29 , 30 ),im                mtch-176
   15 if (.not.lo(100)) go to 30                                        mtch-177
c vector contribution in dirac equation.                                mtch-178
      im=2                                                              mtch-179
      la1=mc(ic,3)-mc(ic,2)                                             mtch-180
      la2=mc(ip,3)-mc(ip,2)                                             mtch-181
      la3=ivz(4,i)                                                      mtch-182
      zt=at(4,k)*ay**la3*vdo(1,i)*chb**2*wv(11,i1)*wv(11,i2)/(2.d0*wv(7,mtch-183
     1i1)*(wv(6,i2)+wv(7,i1))*wv(8,i1)**2)                              mtch-184
      if ((la1-mc(ic,2))*(la2-mc(ip,2)).lt.0) zt=-zt                    mtch-185
      go to 11                                                          mtch-186
   16 if (.not.lo(19)) go to 31                                         mtch-187
      k3=nvi(ip,ic,3)                                                   mtch-188
c tensor contribution in dirac equation.                                mtch-189
      if (.not.lo(100)) go to 21                                        mtch-190
      iml=2                                                             mtch-191
      k4=k2+1                                                           mtch-192
      if (k4.gt.k3) go to 31                                            mtch-193
      i=1                                                               mtch-194
   17 if (vdo(2,i).eq.0.d0) go to 30                                    mtch-195
      do 18 k=k4,k3                                                     mtch-196
      if (nat(1,k).eq.ivz(3,i)+intv) go to 19                           mtch-197
   18 continue                                                          mtch-198
      go to 30                                                          mtch-199
   19 im=3                                                              mtch-200
      la1=mc(ic,3)-mc(ic,2)                                             mtch-201
      la2=mc(ip,2)                                                      mtch-202
      la3=ivz(4,i)+1                                                    mtch-203
      zt=.5d0*(at(4,k)+dfloat(la3)*at(2,k))*ay**la3*vdo(2,i)*chb*wv(11,imtch-204
     11)/(wv(8,i1)**2*wv(7,i1))                                         mtch-205
      if ((la1-mc(ic,2)).gt.0) zt=-zt                                   mtch-206
      go to 11                                                          mtch-207
   20 im=4                                                              mtch-208
      la1=mc(ic,2)                                                      mtch-209
      la2=mc(ip,3)-la2                                                  mtch-210
      zt=-.5d0*(at(4,k)-dfloat(la3)*at(2,k))*ay**la3*vdo(2,i)*chb*wv(11,mtch-211
     1i2)/(wv(8,i2)**2*wv(7,i1))                                        mtch-212
      if ((la2-mc(ip,2)).gt.0) zt=-zt                                   mtch-213
      go to 11                                                          mtch-214
   21 i=1                                                               mtch-215
      iml=3                                                             mtch-216
c spin-orbit contribution in schroedinger equation.                     mtch-217
      kp1=nvi(ic,ip,1)                                                  mtch-218
      kp2=nvi(ic,ip,2)                                                  mtch-219
      kp3=nvi(ic,ip,3)                                                  mtch-220
   22 if (vdo(2,i).eq.0.d0) go to 30                                    mtch-221
      ii=ivz(3,i)+ity(5)+insl+intv                                      mtch-222
      ax1=0.d0                                                          mtch-223
      ax2=0.d0                                                          mtch-224
      ax3=0.d0                                                          mtch-225
      if (k1.gt.k3) go to 24                                            mtch-226
      do 23 k=k1,k3                                                     mtch-227
      if (nat(1,k)+insl.eq.ii) ax1=at(2,k)                              mtch-228
      if ((k.le.k2).and.(nat(1,k).eq.ii)) ax2=at(2,k)                   mtch-229
      if ((k.gt.k2).and.(nat(1,k).eq.ii)) ax3=at(2,k)                   mtch-230
   23 continue                                                          mtch-231
   24 ay1=0.d0                                                          mtch-232
      ay2=0.d0                                                          mtch-233
      ay3=0.d0                                                          mtch-234
      if (kp1.gt.kp3) go to 26                                          mtch-235
      do 25 k=kp1,kp3                                                   mtch-236
      if (nat(1,k)+insl.eq.ii) ay1=at(2,k)                              mtch-237
      if ((k.le.kp2).and.(nat(1,k).eq.ii)) ay2=at(2,k)                  mtch-238
      if ((k.gt.kp2).and.(nat(1,k).eq.ii)) ay3=at(2,k)                  mtch-239
   25 continue                                                          mtch-240
   26 if ((k1.gt.k3).and.(kp1.gt.kp3)) go to 30                         mtch-241
      la1=mc(ic,2)                                                      mtch-242
      la2=mc(ip,2)                                                      mtch-243
      la3=ivz(4,i)+2                                                    mtch-244
      if (la3.gt.la1+la2) go to 30                                      mtch-245
      xt=ay**la3*vdo(2,i)/wv(8,i1)**2                                   mtch-246
      zt=(ax2-dfloat(la3-1)*ax1+dfloat(la1+1)*ax3)*xt                   mtch-247
      yt=(ay2-dfloat(la3-1)*ay1+dfloat(la2+1)*ay3)*xt                   mtch-248
      im=5                                                              mtch-249
      go to 11                                                          mtch-250
   27 la3=la3-1                                                         mtch-251
      xt=xt/ay                                                          mtch-252
      zt=ax3*wv(11,i1)*wv(5,i1)/dfloat(la1+1)*xt                        mtch-253
      yt=ay3*wv(11,i2)*wv(5,i2)/dfloat(la2+1)*xt                        mtch-254
      im=6                                                              mtch-255
      go to 11                                                          mtch-256
   28 la2=la2+1                                                         mtch-257
      yt=-ay3*dsqrt(1.d0+(wv(5,i2)/dfloat(la2))**2)*wv(11,i2)*xt        mtch-258
      zt=0.d0                                                           mtch-259
      im=7                                                              mtch-260
      go to 11                                                          mtch-261
   29 la1=la1+1                                                         mtch-262
      la2=la2-1                                                         mtch-263
      zt=-ax3*dsqrt(1.d0+(wv(5,i1)/dfloat(la1))**2)*wv(11,i1)*xt        mtch-264
      yt=0.d0                                                           mtch-265
      im=8                                                              mtch-266
      go to 11                                                          mtch-267
   30 i=i+1                                                             mtch-268
      if (i.le.intv) go to ( 8 , 17 , 22 ),iml                          mtch-269
      if (iml.eq.1) go to 16                                            mtch-270
   31 if (is.eq.0) go to 44                                             mtch-271
      do 43 ik=1,is                                                     mtch-272
      if (dabs(ba(1,ik))+dabs(ba(2,ik)).lt.1.d-8) go to 43              mtch-273
      li=la(1,ik)                                                       mtch-274
      lf=la(2,ik)                                                       mtch-275
      ll=la(3,ik)                                                       mtch-276
      ei=wv(5,i1)                                                       mtch-277
      ef=wv(5,i2)                                                       mtch-278
      xi=wv(11,i1)*az                                                   mtch-279
      xf=wv(11,i2)*az                                                   mtch-280
      l3=(li+lf-ll+3)/2                                                 mtch-281
      if (l3.le.0) go to 43                                             mtch-282
      call cora(ll,li,lf,ei,ef,xi,xf,b,c,lo(127))                       mtch-283
c order in c   (li,lf),(li,lf+1),(li+1,lf),(li+1,lf+1).                 mtch-284
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef).        mtch-285
      if (lo(127)) go to 40                                             mtch-286
      if (l3+3.gt.lmax3) go to 64                                       mtch-287
c integration region - integrals from matching point to infinity.       mtch-288
c computation of the integrals from the matching point using b and c.   mtch-289
      do 33 i=1,4                                                       mtch-290
      g(i)=0.d0                                                         mtch-291
      do 32 j=1,4                                                       mtch-292
   32 g(i)=g(i)+b(j)*fg(l3+j-1,i,i3)-c(j)*fg(l3+n3(j),n2(i),i1)*fg(l3+n4mtch-293
     1(j),n1(i),i2)                                                     mtch-294
   33 continue                                                          mtch-295
      do 35 i=1,ilm                                                     mtch-296
      do 34 j=1,4                                                       mtch-297
   34 ab(j,i)=ab(j,i)+ba(i,ik)*g(j)                                     mtch-298
   35 continue                                                          mtch-299
      if (lo(125).or.(lo(29).and.(ip.eq.ic))) go to 38                  mtch-300
      c0=-dfloat(ll+1)/az+6.d0/wv(8,i1)                                 mtch-301
      do 37 i=1,ilm                                                     mtch-302
      yt=ba(i,ik)*wv(8,i1)**2*ay/(12.d0*aw**(ll+1))                     mtch-303
c with the green's functions method,we must add h**2*fp(r)/12           mtch-304
c which is vre(ism-1)*(ki*fp(i)*g(f)+kf*f(i)*gp(f)-(ll+1)/r)/12.        mtch-305
c finite step corrections.                                              mtch-306
      do 36 j=1,4                                                       mtch-307
   36 ab(j,i)=ab(j,i)-yt*(wv(11,i1)*fg(li+1,n2(j)+1,i1)*fg(lf+1,n1(j),i2mtch-308
     1)+wv(11,i2)*fg(li+1,n2(j),i1)*fg(lf+1,n1(j)+1,i2)+c0*fg(li+1,n2(j)mtch-309
     2,i1)*fg(lf+1,n1(j),i2))                                           mtch-310
   37 continue                                                          mtch-311
      go to 43                                                          mtch-312
c correction of the potential in five points for matching values.       mtch-313
   38 c1=dfloat(ism-1)*wv(8,i1)*ay                                      mtch-314
      do 39 i=1,5                                                       mtch-315
      av(i)=av(i)+ba(1,ik)*ay*wv(8,i1)**2/c1**(ll+1)/48.d0              mtch-316
   39 c1=c1+0.5d0*wv(8,i1)*ay                                           mtch-317
      go to 43                                                          mtch-318
c computation of integrals from 0 to infinity using b.                  mtch-319
   40 ax=0.d0                                                           mtch-320
      if (l3+3.gt.lmax2) go to 65                                       mtch-321
      do 41 i=1,4                                                       mtch-322
   41 ax=ax+b(i)*bg(l3+i-1,i3)                                          mtch-323
      do 42 i=1,ilm                                                     mtch-324
   42 ab(1,i)=ab(1,i)+ba(i,ik)*ax                                       mtch-325
   43 continue                                                          mtch-326
c limitation for too large integral of irregular functions.             mtch-327
   44 if (dabs(ab(4,1)).gt.wv(11,i1)) ab(4,1)=ab(1,1)                   mtch-328
      if ((ilm.eq.2).and.(dabs(ab(4,2)).gt.wv(11,i2))) ab(4,2)=ab(1,2)  mtch-329
      if (.not.lv) go to 45                                             mtch-330
      write (mw,1001) ic,ip,l1,l2,(ab(i,1),i=1,ll4)                     mtch-331
      if (ilm.eq.2) write (mw,1001) ip,ic,l2,l1,(ab(i,2),i=1,ll4)       mtch-332
c build up of matrix of corrections.                                    mtch-333
   45 do 46 l=1,ll4                                                     mtch-334
      if (ic.ne.ip) aa(ip,ic,l)=ab(l,ilm)                               mtch-335
   46 aa(ic,ip,l)=ab(l,1)                                               mtch-336
      if (lo(127).or.(ic.eq.ip)) go to 47                               mtch-337
      aa(ip,ic,2)=ab(3,ilm)                                             mtch-338
      aa(ip,ic,3)=ab(2,ilm)                                             mtch-339
   47 continue                                                          mtch-340
      if (.not.lo(127)) go to 48                                        mtch-341
      if (jc.le.0) go to 55                                             mtch-342
      if (wv(5,i1).eq.0.d0) f2=f3*wv(11,i1)                             mtch-343
      aa(ic,ic,1)=aa(ic,ic,1)-f2*bg(l1+1,jc)*wv(11,i1)                  mtch-344
      if ((wv(5,i1).eq.0.d0).or.(f3.eq.0.d0)) go to 55                  mtch-345
      b1=2.d0*wv(5,i1)*dfloat(l1*(l1+1))                                mtch-346
      b2=dfloat(l1+1)**2+wv(5,i1)**2                                    mtch-347
      c1=-(dfloat(2*l1+1)*b2+2*wv(5,i1)**2)/b1                          mtch-348
      c2=dfloat(2*l1+3)*b2/b1                                           mtch-349
      aa(ic,ic,1)=aa(ic,ic,1)-f3*(c1*bg(l1+1,jc)+c2*bg(l1+2,jc))*wv(11,imtch-350
     11)**2                                                             mtch-351
      go to 55                                                          mtch-352
   48 if (mc(ic,4).lt.0) go to 55                                       mtch-353
c matching values.                                                      mtch-354
      do 49 k=1,4                                                       mtch-355
   49 b(k)=fg(l1+1,k,i1)                                                mtch-356
      if (jc.le.0) go to 53                                             mtch-357
      if ((.not.lo(29)).and.(f2.eq.0.d0.and.f3.eq.0.d0)) go to 53       mtch-358
      if (wv(5,i1).ne.0.d0) go to 50                                    mtch-359
      f2=f3*wv(11,i1)                                                   mtch-360
      f3=0.d0                                                           mtch-361
   50 do 51 k=1,4                                                       mtch-362
   51 g(k)=-fg(l1+1,k,jc)*f2+ab(k,1)/wv(11,i1)                          mtch-363
      if (f3.eq.0.d0) go to 52                                          mtch-364
      b1=2.d0*wv(5,i1)*dfloat(l1*(l1+1))                                mtch-365
      b2=dfloat(l1+1)**2+wv(5,i1)**2                                    mtch-366
      c1=-(dfloat(2*l1+1)*b2+2*wv(5,i1)**2)/b1                          mtch-367
      c2=dfloat(2*l1+3)*b2/b1                                           mtch-368
      a1=dfloat(ism)*wv(8,i1)*wv(11,i1)                                 mtch-369
      d1=(b2+dfloat(l1+1)*wv(5,i1)/a1)/a1/b1                            mtch-370
      d2=-wv(5,i1)*dsqrt(b2)/b1/a1                                      mtch-371
      a1=b2/b1/a1                                                       mtch-372
      a3=f3*wv(11,i1)                                                   mtch-373
      g(1)=g(1)-a3*(c1*fg(l1+1,1,jc)+c2*fg(l1+2,1,jc)-d1*fg(l1+1,1,i1)**mtch-374
     12-d2*2.d0*fg(l1+1,1,i1)*fg(l1+2,1,i1)-a1*fg(l1+2,1,i1)**2)        mtch-375
      g(2)=g(2)-a3*(c1*fg(l1+1,2,jc)+c2*fg(l1+2,2,jc)-d1*fg(l1+1,1,i1)*fmtch-376
     1g(l1+1,3,i1)-d2*(fg(l1+1,1,i1)*fg(l1+2,3,i1)+fg(l1+2,1,i1)*fg(l1+1mtch-377
     2,3,i1))-a1*fg(l1+2,1,i1)*fg(l1+2,3,i1))                           mtch-378
      g(4)=g(4)-a3*(c1*fg(l1+1,4,jc)+c2*fg(l1+2,4,jc)-d1*fg(l1+1,3,i1)**mtch-379
     12-d2*2.d0*fg(l1+1,3,i1)*fg(l1+2,3,i1)-a1*fg(l1+2,3,i1)**2)        mtch-380
   52 a4=1.d0+(g(1)*g(4)-g(2)**2)                                       mtch-381
      g(3)=b(1)                                                         mtch-382
      b(1)=(b(1)*(1.d0-g(2))+g(1)*b(3))/a4                              mtch-383
      b(3)=(-g(3)*g(4)+(1.d0+g(2))*b(3))/a4                             mtch-384
      g(3)=b(2)                                                         mtch-385
      b(2)=(b(2)*(1.d0-g(2))+g(1)*b(4))/a4                              mtch-386
      b(4)=(-g(3)*g(4)+(1.d0+g(2))*b(4))/a4                             mtch-387
   53 a1=(1.d0-av(2))/(2.d0+10.d0*av(2))                                mtch-388
      b1=(1.d0-av(4))/(2.d0+10.d0*av(4))                                mtch-389
      a2=a1*(1.d0-av(1))/(1.d0-4.d0*av(1))                              mtch-390
      b2=b1*(1.d0-av(5))/(1.d0-4.d0*av(5))                              mtch-391
      c1=(2.d0+10.d0*av(3))-(1.d0-av(3))*(a1+b1)                        mtch-392
      a1=(16.d0-144.d0*av(2))/(2.d0+10.d0*av(2))                        mtch-393
      b1=(16.d0-144.d0*av(4))/(2.d0+10.d0*av(4))                        mtch-394
      c2=(7.d0+a1*(1.d0-av(1)))/(1.d0-4.d0*av(1))                       mtch-395
      d2=(7.d0+b1*(1.d0-av(5)))/(1.d0-4.d0*av(5))                       mtch-396
      d1=(b1-a1)*(1.d0-av(3))                                           mtch-397
      a1=a2*d2+b2*c2                                                    mtch-398
      b1=(c1*d2+d1*b2)/a1                                               mtch-399
      b2=30.d0*wv(8,1)*b2*wv(11,i1)/a1                                  mtch-400
      fam(ic,1)=b1*b(1)-b2*b(2)                                         mtch-401
      fam(ic,3)=b1*b(3)-b2*b(4)                                         mtch-402
      b1=(c2*c1-a2*d1)/a1                                               mtch-403
      a2=-30.d0*wv(8,1)*a2*wv(11,i1)/a1                                 mtch-404
      fam(ic,2)=b1*b(1)-a2*b(2)                                         mtch-405
      fam(ic,4)=b1*b(3)-a2*b(4)                                         mtch-406
      fam(ic,5)=wv(11,i1)                                               mtch-407
      if (lo(100)) fam(ic,5)=fam(ic,5)*chb/(wv(7,i1)+wv(6,i1))          mtch-408
      bt=fam(ic,2)*fam(ic,3)-fam(ic,1)*fam(ic,4)                        mtch-409
      if (bt.eq.0.d0) bt=1.d0                                           mtch-410
      do 54 i=1,4                                                       mtch-411
   54 fam(ic,i)=fam(ic,i)/bt                                            mtch-412
      fam(ic,6)=fam(ic,5)/bt                                            mtch-413
      if (lo(100)) fam(ic,5)=fam(ic,5)*wv(8,i1)                         mtch-414
      fam(ic,7)=wv(9,i1)**2                                             mtch-415
      fam(ic,9)=2.d0*fam(ic,7)*dfloat(mc(ic,6))                         mtch-416
      fam(ic,8)=wv(12,i1)                                               mtch-417
      fam(ic,10)=dfloat(mc(ic,5))                                       mtch-418
      fam(ic,11)=wv(10,i1)**2                                           mtch-419
      fam(ic,12)=2.d0*fam(ic,11)*dfloat(mc(ic,6))                       mtch-420
      if (.not.lo(103)) fam(ic,12)=0.d0                                 mtch-421
      if (wv(5,i1).eq.0.d0) fam(ic,11)=0.d0                             mtch-422
   55 continue                                                          mtch-423
      do 58 ic=1,nc                                                     mtch-424
      i1=mc(ic,1)                                                       mtch-425
      do 57 l=1,ll4                                                     mtch-426
      do 56 ip=1,nc                                                     mtch-427
   56 aa(ic,ip,l)=aa(ic,ip,l)/wv(11,i1)                                 mtch-428
   57 continue                                                          mtch-429
   58 continue                                                          mtch-430
      if (.not.lo(127)) return                                          mtch-431
      if (.not.lo(125)) go to 61                                        mtch-432
c transposition if coupled equations are used.                          mtch-433
      do 60 ic=1,nc                                                     mtch-434
      do 59 ip=1,ic                                                     mtch-435
      ax=aa(ip,ic,1)                                                    mtch-436
      aa(ip,ic,1)=aa(ic,ip,1)                                           mtch-437
   59 aa(ic,ip,1)=ax                                                    mtch-438
   60 continue                                                          mtch-439
c linear system for computation of the s-matrix from the k-matrix.      mtch-440
   61 do 63 ic=1,nc                                                     mtch-441
      do 62 ip=1,nc                                                     mtch-442
      aa(ic,ip,2)=0.d0                                                  mtch-443
      aa(ic,ip,4)=0.d0                                                  mtch-444
   62 aa(ic,ip,5)=-aa(ic,ip,1)                                          mtch-445
   63 aa(ic,ic,4)=1.d0                                                  mtch-446
      call lins(aa(1,1,4),kab,aa,kab,aa(1,1,5),kab,aa(1,1,2),kab,nc,ncxnmtch-447
     1,kr,ier)                                                          mtch-448
      return                                                            mtch-449
   64 write (mw,1002) l3,li,lf,lmax3                                    mtch-450
      return                                                            mtch-451
   65 write (mw,1003) l3,lmax2                                          mtch-452
      return                                                            mtch-453
 1000 format (/' channels  l-values     coulomb integrals: f*f,g*f,f*g amtch-454
     1nd g*g:')                                                         mtch-455
 1001 format (2x,2i3,2x,2i4,3x,4d18.10)                                 mtch-456
 1002 format (' starting values',i3,' for integrals and',2i4,' for coulomtch-457
     1mb functions too large . limitation at',i4)                       mtch-458
 1003 format (' starting value',i4,' too large for coulomb integrals whimtch-459
     1ch are computed up to',i5)                                        mtch-460
      end                                                               mtch-461
c 09/03/07                                                      ecis06  lins-000
      subroutine lins(a,ia,b,ib,x,ix,y,iy,n,m,k,ier)                    lins-001
c lins: jlsb2 version 01 18/12/68 math l003 of saclay                   lins-002
c solution of double precision complex linear systems with real and     lins-003
c imaginary parts in different areas.                                   lins-004
c input:     a:       real component of matrix.                         lins-005
c            ia:      first dimension of area a.                        lins-006
c            b:       imaginary component of matrix.                    lins-007
c            ib:      first dimension of area b.                        lins-008
c            x:       real second members.                              lins-009
c            ix:      first dimension of area x.                        lins-010
c            y:       imaginary second members.                         lins-011
c            iy:      first dimension of area y.                        lins-012
c            n:       order of the system.                              lins-013
c            m:       number of second members.                         lins-014
c output:    x,y:     second members are replaced by solutions.         lins-015
c            ier:     returns diagnostic: 0 non singular matrix,        lins-016
c                                         1 singular matrix,            lins-017
c                                         2 quasi singular matrix.      lins-018
c working areas:                                                        lins-019
c            k:       working field of dimension >/= n.                 lins-020
c***********************************************************************lins-021
      implicit real*8 (a-h,o-z)                                         lins-022
      dimension a(ia,*),b(ib,*),x(ix,*),y(iy,*),k(*)                    lins-023
      common /inout/ mr,mw,ms                                           lins-024
      ier=0                                                             lins-025
      do 1 i=1,n                                                        lins-026
    1 k(i)=i                                                            lins-027
      do 14 i=1,n                                                       lins-028
      amax=dabs(a(i,i))+dabs(b(i,i))                                    lins-029
      jmax=i                                                            lins-030
      i1=i+1                                                            lins-031
      if (i.eq.n) go to 3                                               lins-032
      do 2 j=i1,n                                                       lins-033
      amay=dabs(a(i,j))+dabs(b(i,j))                                    lins-034
      if (amax.ge.amay) go to 2                                         lins-035
      amax=amay                                                         lins-036
      jmax=j                                                            lins-037
    2 continue                                                          lins-038
    3 if (amax.eq.0.d0) go to 21                                        lins-039
      if (jmax.eq.i) go to 5                                            lins-040
      do 4 i2=1,n                                                       lins-041
      aux=b(i2,i)                                                       lins-042
      b(i2,i)=b(i2,jmax)                                                lins-043
      b(i2,jmax)=aux                                                    lins-044
      aux=a(i2,i)                                                       lins-045
      a(i2,i)=a(i2,jmax)                                                lins-046
    4 a(i2,jmax)=aux                                                    lins-047
      nab=k(jmax)                                                       lins-048
      k(jmax)=k(i)                                                      lins-049
      k(i)=nab                                                          lins-050
    5 if (i.eq.1) go to 7                                               lins-051
      sr=0.d0                                                           lins-052
      si=0.d0                                                           lins-053
      t=0.d0                                                            lins-054
      i4=i-1                                                            lins-055
      do 6 it=1,i4                                                      lins-056
      pr=a(it,i)*a(i,it)-b(it,i)*b(i,it)                                lins-057
      pi=a(it,i)*b(i,it)+a(i,it)*b(it,i)                                lins-058
      sr=sr+pr                                                          lins-059
      si=si+pi                                                          lins-060
    6 t=t+dabs(pr)+dabs(pi)                                             lins-061
      era=1.d-16*(t+dabs(a(i,i)-sr)+dabs(b(i,i)-si))                    lins-062
      if (amax.gt.era) go to 7                                          lins-063
      ier=2                                                             lins-064
      write (mw,1000)                                                   lins-065
      go to 22                                                          lins-066
    7 if (i.eq.n) go to 9                                               lins-067
      do 8 j=i1,n                                                       lins-068
      aa=a(i,j)                                                         lins-069
      bb=b(i,j)                                                         lins-070
      ai=a(i,i)                                                         lins-071
      bi=b(i,i)                                                         lins-072
      d=ai*ai+bi*bi                                                     lins-073
      a(i,j)=(aa*ai+bb*bi)/d                                            lins-074
    8 b(i,j)=(bb*ai-aa*bi)/d                                            lins-075
    9 do 10 j=1,m                                                       lins-076
      aa=x(i,j)                                                         lins-077
      bb=y(i,j)                                                         lins-078
      ai=a(i,i)                                                         lins-079
      bi=b(i,i)                                                         lins-080
      d=ai*ai+bi*bi                                                     lins-081
      x(i,j)=(aa*ai+bb*bi)/d                                            lins-082
   10 y(i,j)=(bb*ai-aa*bi)/d                                            lins-083
      if (i.eq.n) go to 14                                              lins-084
      do 13 i3 =i1,n                                                    lins-085
      do 11 j3 =i1,n                                                    lins-086
      b(i3,j3)=b(i3,j3)-a(i3,i)*b(i,j3)-b(i3,i)*a(i,j3)                 lins-087
   11 a(i3,j3)=a(i3,j3)-a(i3,i)*a(i,j3)+b(i3,i)*b(i,j3)                 lins-088
      do 12 j3 =1,m                                                     lins-089
      y(i3,j3)=y(i3,j3)-a(i3,i)*y(i,j3)-b(i3,i)*x(i,j3)                 lins-090
   12 x(i3,j3)=x(i3,j3)-a(i3,i)*x(i,j3)+b(i3,i)*y(i,j3)                 lins-091
   13 continue                                                          lins-092
   14 continue                                                          lins-093
      if (n.eq.1) go to 22                                              lins-094
      do 17 kc=1,m                                                      lins-095
      j=n                                                               lins-096
   15 i=j-1                                                             lins-097
   16 x(i,kc)=x(i,kc)-x(j,kc)*a(i,j)+y(j,kc)*b(i,j)                     lins-098
      y(i,kc)=y(i,kc)-x(j,kc)*b(i,j)-y(j,kc)*a(i,j)                     lins-099
      i=i-1                                                             lins-100
      if (i.ne.0) go to 16                                              lins-101
      j=j-1                                                             lins-102
      if (j.ne.1) go to 15                                              lins-103
   17 continue                                                          lins-104
      do 20 i=1,n                                                       lins-105
   18 j=k(i)                                                            lins-106
      if (j.le.i) go to 20                                              lins-107
      k(i)=k(j)                                                         lins-108
      k(j)=j                                                            lins-109
      do 19 mp=1,m                                                      lins-110
      aux=y(j,mp)                                                       lins-111
      y(j,mp)=y(i,mp)                                                   lins-112
      y(i,mp)=aux                                                       lins-113
      aux=x(j,mp)                                                       lins-114
      x(j,mp)=x(i,mp)                                                   lins-115
   19 x(i,mp)=aux                                                       lins-116
      go to 18                                                          lins-117
   20 continue                                                          lins-118
      go to 22                                                          lins-119
   21 ier=1                                                             lins-120
      write (mw,1001)                                                   lins-121
   22 return                                                            lins-122
 1000 format (' *****  lins  ***** quasi singular matrix.')             lins-123
 1001 format (' *****  lins  *****       singular matrix.')             lins-124
      end                                                               lins-125
c 02/02/06                                                      ecis06  cora-000
      subroutine cora(lq,l1,l2,ei,fi,vi,wi,b,c,lt)                      cora-001
c coefficients for coulomb integrals                                    cora-002
c m(l1,l2,lq,r)=sum from r to infinity of h(l1)*k(l2)/r**(lq+1)         cora-003
c expressed as sum on i of b(i)*m(l+i-2,l+i-2,1) + c1(r)*h(l)*k(l)      cora-004
c + c2(r)*h(l)*k(l+1) + c3(r)*h(l+1)*k(l) + c4(r)*h(l+1)*k(l+1)         cora-005
c where h and k are regular or irregular coulomb functions              cora-006
c l=integer part of (l1+l2-lq+3)/2 and i ranges from 1 to 4.            cora-007
c input:     lq:      lq in the expressions above.                      cora-008
c            l1,l2:   l1, l2 in the expressions above.                  cora-009
c            ei,ef:   coulomb parameters.                               cora-010
c            vi,wi:   product of r with the wave numbers.               cora-011
c            lt:      .true. for only integrals from 0 to infinity.     cora-012
c output:    b(4):    coefficients b in the expressions above.          cora-013
c            c(4):    coefficients c.                                   cora-014
c                                                                       cora-015
c these results are obtained by expressing                              cora-016
c h(l1)*k(l2)/r**(lq+1)- sum on i of b(i)*h(l+i-2)*k(l+i-2)/r**2        cora-017
c as p1*h(l)*k(l) + p2*h(l)*k(l+1) + p3*h(l+1)*k(l) + p4*h(l+1)*q(l+1)  cora-018
c where p1,p2,p3,p4 are polynomial in 1/r and identification term by    cora-019
c term starting from the highest degree in 1/r with the derivative of   cora-020
c  q1*h(l)*k(l) + q2*h(l)*k(l+1) + q3*h(l+1)*k(l) + q4*h(l+1)*q(l+1)    cora-021
c this as been done using amp ( j.-m. drouffe, amp language reference   cora-022
c manual - version 6 - note cea-n-2297 1982).                           cora-023
c                                                                       cora-024
c the non relativistic results for lq=6 l2-l1=0,2,4 and all the         cora-025
c coefficients up to lq=5 have been obtained. this allow transfer of    cora-026
c angular momentum up to 5 for central term and 4 for spin-orbit.       cora-027
c                                                                       cora-028
c***********************************************************************cora-029
      implicit real*8 (a-h,o-z)                                         cora-030
      dimension b(4),c(4)                                               cora-031
      logical lt                                                        cora-032
      common /inout/ mr,mw,ms                                           cora-033
      do 1 i=1,4                                                        cora-034
      b(i)=0.d0                                                         cora-035
    1 c(i)=0.d0                                                         cora-036
      if (l1.le.l2) go to 2                                             cora-037
      ll=l1-l2+1                                                        cora-038
      e=fi                                                              cora-039
      f=ei                                                              cora-040
      v=wi                                                              cora-041
      w=vi                                                              cora-042
      go to 3                                                           cora-043
    2 ll=l2-l1+1                                                        cora-044
      e=ei                                                              cora-045
      f=fi                                                              cora-046
      v=vi                                                              cora-047
      w=wi                                                              cora-048
    3 if ((lq.gt.6).or.(ll*(lq-ll+2).le.0)) go to 71                    cora-049
      a=dfloat((l1+l2-lq+5)/2)                                          cora-050
      s=v/w                                                             cora-051
      x=e*s-f                                                           cora-052
      if (dabs(x).lt.1.d-14) x=0.d0                                     cora-053
      u=s**2-1.d0                                                       cora-054
      if (dabs(u).lt.1.d-14) u=0.d0                                     cora-055
      if ((x.eq.0.d0).and.(e.eq.0.d0)) go to 49                         cora-056
      p=s**2*(a**2+e**2)                                                cora-057
      q=a**2+f**2                                                       cora-058
      y=e*s+f                                                           cora-059
      z=e**2-f**2                                                       cora-060
      if (dabs(z).lt.1.d-14) z=0.d0                                     cora-061
      if (x.eq.0.d0.and.z.eq.0.d0) z=1.d0                               cora-062
      den=2.d0*x**2*(p-q)+8.d0*z*s**2                                   cora-063
      z=u                                                               cora-064
      if (x.eq.0.d0.and.z.eq.0.d0) z=-1.d0/(e*f)                        cora-065
      go to ( 4 , 9 , 13 , 20 , 28 , 41 ) , lq                          cora-066
    4 go to ( 5 , 6 ) , ll                                              cora-067
c multipole lq=1 l1=l2.                                                 cora-068
    5 b(1)=1.d0                                                         cora-069
      return                                                            cora-070
    6 if ((e.ne.f).or.(v.ne.w)) go to 7                                 cora-071
c multipole lq=1 l1=l2-1 with e=f and v=w.                              cora-072
      b1=dsqrt((a-1.d0)**2+e**2)                                        cora-073
      b(2)=-(a-.5d0)*q/(e*b1)                                           cora-074
      b(3)=(a+.5d0)*q/(e*b1)                                            cora-075
      if (lt) return                                                    cora-076
      c(1)=(q+(2.d0*a-1.d0)*e/v)/(2.d0*e*v*b1)                          cora-077
      c(3)=-dsqrt(q)/(2.d0*v*a*b1)                                      cora-078
      c(2)=c(3)*(2.d0*a-1.d0)                                           cora-079
      c(4)=q/(2.d0*e*v*b1)                                              cora-080
      go to 70                                                          cora-081
c multipole lq=1 l1=l2-1.                                               cora-082
    7 a1=-2.d0*f*(2.d0*(a-1.d0)*q-a**2*u)                               cora-083
      a2=f*(4.d0*q*(a-1.d0)*((6.d0*a+1.d0)*q-4.d0*a**2+1.d0)+u*((((16.d0cora-084
     1*a-24.d0)*a+4.d0)*a**2-2.d0)*q+a**2*(2.d0*a-1.d0-u*(a-1.d0)**2)*(4cora-085
     2.d0*a+2.d0)))                                                     cora-086
      a3=-f*(a-1.d0)*((24.d0*a-4.d0)*q+16.d0*a**2-4.d0+u*(((8.d0*a+8.d0)cora-087
     1*a+2.d0)*a-2.d0))                                                 cora-088
      a4=4.d0*(a-1.d0)*f                                                cora-089
      if (x.eq.0.d0) go to 8                                            cora-090
      a1=a1-x*(q*(a-1.d0)*(2.d0*a+6.d0)+a**2*(4.d0+a*u)+x*((2.d0*a-2.d0)cora-091
     1*f+a*x))                                                          cora-092
      a2=a2+x*(q*((a-1.d0)*(a+5.d0)*(12.d0*a+2.d0)*q-(((40.d0*a-16.d0)*acora-093
     1-34.d0)*a-8.d0)*a-6.d0+(((((8.d0*a+12.d0)*a-38.d0)*a+8.d0)*a+5.d0)cora-094
     2*a-4.d0)*u+(((16.d0*a+40.d0)*a-44.d0)*a-12.d0)*f*x+(((4.d0*a+20.d0cora-095
     3)*a-13.d0)*a-8.d0)*x**2)+(2.d0*a+1.d0)*(a**2*(4.d0-8.d0*a+((6.d0*acora-096
     4-7.d0)*a+4.d0)*u+a*(a-1.d0)**2*u**2)+x*(((4.d0*a+6.d0)*a-2.d0+(a-1cora-097
     5.d0)*((4.d0*a-4.d0)*a+2.d0)*u)*f+x*(a*(((2.d0*a-2.d0)*a+1.d0)*u-(4cora-098
     6.d0*a-6.d0)*a+1.d0)+(4.d0*a-2.d0)*f*x+a*x**2))))                  cora-099
      a3=a3+x*(a-1.d0)*(((8.d0*a-8.d0)*a+6.d0)*a+2.d0-(2.d0*a+6.d0)*(6.dcora-100
     10*a-1.d0)*q-((((4.d0*a+12.d0)*a+5.d0)*a-3.d0)*a-2.d0)*u-2.d0*x*(((cora-101
     24.d0*a+8.d0)*a-3.d0)*f-x))                                        cora-102
      a4=a4+x*2.d0*(a**2-1.d0)                                          cora-103
    8 bd=.5d0*den*dsqrt((a-1.d0)**2+e**2)                               cora-104
      if (.not.lt) c(1)=.5d0-a                                          cora-105
      go to 48                                                          cora-106
    9 go to ( 10 , 11 , 12 ) , ll                                       cora-107
c multipole lq=2 l1=l2.                                                 cora-108
   10 a1=2.d0*z*a**2*y                                                  cora-109
      a2=-z*y*(2.d0*a+1.d0)*(((a-1.d0)*a-.5d0)*y**2+2.d0*a**2*(a-1.d0)**cora-110
     12*(s**2+1.d0))                                                    cora-111
      a3=2.d0*z*(2.d0*a+1.d0)*(a-1.d0)**2*y                             cora-112
      a4=0.d0                                                           cora-113
      bd=den*(a-1.d0)/dsqrt(s)                                          cora-114
      if (.not.lt) c(1)=-1.d0                                           cora-115
      if (x.eq.0) go to 48                                              cora-116
      a1=a1+x*(4.d0*f*e*s-2.d0*a*(a+q+a*s**2+p))                        cora-117
      a2=a2+x*((a+.5d0)*((((4.d0*a-6.d0)*a+2.d0)*a-1.d0)*(q+p*s**2)+4.d0cora-118
     1*(2.d0*a-3.d0)*f*e*s*(q+p+s**2+1.d0)+(((4.d0*a+2.d0)*a-14.d0)*a+1.cora-119
     2d0)*(q*s**2+p)+a**2*((s**4+1.d0)*((2.d0*a-6.d0)*a+5.d0)-s**2*(4.d0cora-120
     3*(a+1.d0)*a-14.d0)))+p*q*((8.d0*a-4.d0)*a+8.d0))                  cora-121
      a3=a3-2.d0*x*(a-1.d0)*((2.d0*a-3.d0)*(f**2+e**2*s**2)+4.d0*(2.d0*acora-122
     1+1.d0)*f*e*s+(s**2+1.d0)*(a+1.d0)*((6.d0*a+1.d0)*a-3.d0))         cora-123
      a4=4.d0*(a-1.d0)*x                                                cora-124
      go to 48                                                          cora-125
c multipole lq=2 l1=l2-1.                                               cora-126
   11 b1=x*(a-1.d0)-e*s                                                 cora-127
      b3=-(a-1.d0)**2                                                   cora-128
      b2=b3/(a-.5d0)                                                    cora-129
      bd=-den*a*(a-1.d0)*(2.d0*a-3.d0)*dsqrt(s*((a-1.d0)**2+e**2))/(2.d0cora-130
     1*a-1.d0)                                                          cora-131
      if (lt) go to 15                                                  cora-132
      c(1)=b1+2.d0*a*(a-1.d0)**2/w                                      cora-133
      c(2)=b3                                                           cora-134
      c(3)=b2                                                           cora-135
      go to 15                                                          cora-136
c multipole lq=2 l1=l2-2.                                               cora-137
   12 b1=q                                                              cora-138
      b3=-3.d0*e*s-x*(a-1.d0)                                           cora-139
      b4=(a-1.d0)/(a-.5d0)                                              cora-140
      bd=-3.d0*den*a*dsqrt(s*q*((a-1.d0)**2+e**2))/(2.d0*a-1.d0)        cora-141
      if (lt) go to 17                                                  cora-142
      c(1)=b1                                                           cora-143
      c(2)=b3-2.d0*a*(a-1.d0)/w                                         cora-144
      c(4)=b4                                                           cora-145
      go to 17                                                          cora-146
   13 go to ( 14 , 16 , 18 , 19 ) , ll                                  cora-147
c multipole lq=3 l1=l2.                                                 cora-148
   14 b1=y/(a-1.d0)                                                     cora-149
      b2=1.d0                                                           cora-150
      b3=1.d0                                                           cora-151
      bd=den*a*(2.d0*a-3.d0)                                            cora-152
      if (lt) go to 15                                                  cora-153
      c(1)=b1-2.d0*a/w                                                  cora-154
      c(2)=b3                                                           cora-155
      c(3)=b2                                                           cora-156
   15 a1=-2.d0*a**2*y*b1*z                                              cora-157
      a2=y*((2.d0*a+1.d0)*((2.d0*(a**2-a)**2*(1.d0+s**2)+y**2*(a**2-a-.5cora-158
     1d0))*b1-y*(p*b2+q*b3)))*z                                         cora-159
      a3=-y*((2.d0*a-1.d0)*(-y*(b2+b3))+(4.d0*a+2.d0)*(a-1.d0)**2*b1)*z cora-160
      a4=0.d0                                                           cora-161
      if (x.eq.0.d0) go to 48                                           cora-162
      a1=a1+x*2.d0*p*(a*x-2.d0*f)*b2                                    cora-163
      a2=a2+x*p*(2.d0*q*((2.d0*a+3.d0)*(a+1.d0)*f+((2.d0*a+3.d0)*a-4.d0)cora-164
     1*e*s)-2.d0*p*(2.d0*a-3.d0)*(2.d0*a+1.d0)*f+(2.d0*a+1.d0)*((((2.d0*cora-165
     2a-1.d0)*a-8.d0)*a+5.d0)*f-s*((a+1.d0)*((6.d0*a-9.d0)*a+1.d0)*e-s*(cora-166
     3(6.d0*a-7.d0)*(a**2-1.d0)*f-s*((((2.d0*a-5.d0)*a+2.d0)*a-1.d0)*e))cora-167
     4)))*b2                                                            cora-168
      a3=a3+x*(2.d0*p*((2.d0*a-3.d0)*(a-1.d0)*e*s+f*((2.d0*a-3.d0)*a-4.dcora-169
     10))-2.d0*q*e*s*(2.d0*a+3.d0)*(2.d0*a-1.d0)-(2.d0*a-1.d0)*((((2.d0*cora-170
     2a+5.d0)*a+2.d0)*a+1.d0)*f-s*((6.d0*a+7.d0)*(a**2-1.d0)*e-s*((a-1.dcora-171
     30)*((6.d0*a+9.d0)*a+1.d0)*f-s*((((2.d0*a+1.d0)*a-8.d0)*a-5.d0)*e))cora-172
     4)))*b2                                                            cora-173
      if (lq.eq.3) go to 47                                             cora-174
      a4=a4+x*2.d0*(2.d0*e*s-a*x)*b2                                    cora-175
      go to 46                                                          cora-176
c multipole lq=3 l1=l2-1.                                               cora-177
   16 b1=q/(a-1.d0)                                                     cora-178
      b3=-x                                                             cora-179
      b4=1.d0/(a+1.d0)                                                  cora-180
      bd=-3.d0*den*a*dsqrt(q)                                           cora-181
      if (lt) go to 17                                                  cora-182
      c(1)=b1                                                           cora-183
      c(2)=b3-2.d0*a/w                                                  cora-184
      c(4)=b4                                                           cora-185
   17 a1=-2.d0*a**2*y*b1*z                                              cora-186
      a2=y*((2.d0*a+1.d0)*((2.d0*(a**2-a)**2*(1.d0+s**2)+y**2*(a**2-a-.5cora-187
     1d0))*b1-y*q*b3)+(4.d0*a-2.d0)*(a+1.d0)**2*p*q*b4)*z               cora-188
      a3=-y*((2.d0*a-1.d0)*((2.d0*(a**2+a)**2*(1.d0+s**2)+y**2*(a**2+a-.cora-189
     15d0))*b4-y*b3)+(4.d0*a+2.d0)*(a-1.d0)**2*b1)*z                    cora-190
      a4=2.d0*a**2*y*b4*z                                               cora-191
      if (x.eq.0.d0) go to 48                                           cora-192
      a1=a1-x*4.d0*p*q*(a+1.d0)*b4                                      cora-193
      a2=a2+x*2.d0*p*q*(a+1.d0)*((2.d0*a+3.d0)*(q+p)+(2.d0*a-1.d0)*(4.d0cora-194
     1*e*f*s+(1.d0+s**2)*((2.d0*a-4.d0)*a-3.d0)))*b4                    cora-195
      a3=a3+x*(-4.d0*p*q*((2.d0*a+1.d0)*a+2.d0)-(2.d0*a-1.d0)*(2.d0*s*e*cora-196
     1f*(2.d0*a+3.d0)*(q+p+s**2+1.d0)-a**2*(((a+3.d0)*a+2.5d0)*(1.d0+s**cora-197
     24)-s**2*((2.d0*a-2.d0)*a-7.d0))+a*(a-1.d0)*(2.d0*a+3.d0)*(1.d0+s**cora-198
     32)*(p+q)-(s**2-1.d0)*((2.d0*a+4.d0)*a+.5d0)*(q-p)))*b4            cora-199
      a4=a4+x*2.d0*((a-1.d0)*(p+q)+y**2)*b4                             cora-200
      go to 46                                                          cora-201
c multipole lq=3 l1=l2-2.                                               cora-202
   18 b1=-q*(2.d0*a-1.d0)*((2.d0*a-3.d0)*(a+1.d0)*x+(a-3.d0)*y)/(a-1.d0)cora-203
      b2=6.d0*q*(a-1.d0)                                                cora-204
      b3=((a-1.d0)*(6.d0*a-3.d0)*q+(2.d0*a-1.d0)*((a+1.d0)*x+2.d0*y)*(2.cora-205
     1d0*a-3.d0)*x-(a-1.d0)*(6.d0*a-9.d0)*p)                            cora-206
      b4=-((2.d0*a-1.d0)*x+y)*(2.d0*a-3.d0)                             cora-207
      bd=12.d0*a**2*(2.d0*a-3.d0)*den*s*dsqrt(q*((a-1.d0)**2+e**2))     cora-208
      if (lt) go to 45                                                  cora-209
      c(1)=b1-6.d0*q*a*(a-1.d0)*(2.d0*a-1.d0)/w                         cora-210
      c(2)=b3+a*(4.d0*a-6.d0)*(2.d0*a-1.d0)*((a+1.d0)*x+2.d0*y+3.d0*a*(acora-211
     1-1.d0)/w)/w                                                       cora-212
      c(3)=b2                                                           cora-213
      c(4)=b4-6.d0*a*(a-1.d0)*(2.d0*a-3.d0)/w                           cora-214
      go to 45                                                          cora-215
c multipole lq=3 l1=l2-3.                                               cora-216
   19 b1=-q*(3.d0*e*s*y+a*(3.d0*x*y+2.d0*(a+1.d0)*(x**2+2.d0*a-1.d0-2.d0cora-217
     1*(a-1.d0)*s**2)))                                                 cora-218
      b2=3.d0*q*(a*x+y)                                                 cora-219
      b4=-(3.d0*f*y+a*(3.d0*x*y+2.d0*(a-1.d0)*(x**2+2.d0*a+2.d0-(2.d0*a+cora-220
     11.d0)*s**2)))                                                     cora-221
      b3=-x*b4*(a+1.d0)+3.d0*q*(y+a*x)+a*(3.d0*a+1.5d0)*(1.d0-s**2)*((3.cora-222
     1d0*a-2.d0)*y+((a-2.d0)*a+2.d0)*x)                                 cora-223
      bd=30.d0*a**2*den*s*dsqrt(q*((a-1.d0)**2+e**2)*((a+1.d0)**2+f**2))cora-224
      if (lt) go to 45                                                  cora-225
      c(1)=b1-3.d0*q*(2.d0*a-1.d0)*((6.d0*a+4.d0)*f+(a+1.d0)*(a+4.d0)*x+cora-226
     14.d0*a*(a**2-1.d0)/w)/w                                           cora-227
      c(2)=b3+((4.d0*a**2*(a**2-1.d0)*(2.d0*a-1.d0-s**2*(2.d0*a+1.d0))+(cora-228
     118.d0*a**2-3.d0)*y**2+a*(12.d0*a**2+3.d0)*x*y+(a**2-1.d0)*(4.d0*a*cora-229
     2*2-3.d0)*x**2)+3.d0*a*(4.d0*a**2-1.d0)*(5.d0*a*y+(a**2+4.d0)*x+4.dcora-230
     30*a*(a**2-1.d0)/w)/w)/w                                           cora-231
      c(3)=b2+12.d0*q*(a**2-1.d0)/w                                     cora-232
      c(4)=b4-3.d0*(2.d0*a+1.d0)*((6.d0*a-4.d0)*f+a*(a+1.d0)*x+4.d0*a*(acora-233
     1**2-1.d0)/w)/w                                                    cora-234
      go to 45                                                          cora-235
   20 go to ( 21 , 22 , 23 , 24 , 26 ) , ll                             cora-236
c multipole lq=4 l1=l2.                                                 cora-237
   21 b1=-p*q*(2.d0*a+3.d0)/(a-1.d0)                                    cora-238
      b2=-q*(3.d0*e*s+a*x)                                              cora-239
      b3=-p*(3.d0*f-a*x)                                                cora-240
      b4=-((p+q)*(a+1.5d0)-1.5d0*y**2)/(a+1.d0)                         cora-241
      bd=3.d0*den*a**2*(2.d0*a+3.d0)*(a+2.d0)*dsqrt(s*p*q)              cora-242
      if (lt) go to 45                                                  cora-243
      c(1)=b1                                                           cora-244
      c(2)=(b3+p*a*(2.d0*a+3.d0)/w)                                     cora-245
      c(3)=(b2+q*a*(2.d0*a+3.d0)/w)                                     cora-246
      c(4)=(b4-3.d0*a*(y-a*(2.d0*a+3.d0)/w)/w)                          cora-247
      go to 45                                                          cora-248
c multipole lq=4 l1=l2-1.                                               cora-249
   22 b1=q*(3.d0*e*s-a*x)*(4.d0*a+6.d0)/(a-1.d0)                        cora-250
      b2=18.d0*q                                                        cora-251
      b3=((2.d0*a+3.d0)*(3.d0*q+(2.d0*a-3.d0)*x**2)-(6.d0*a-9.d0)*p)    cora-252
      b4=(3.d0*f-a*x)*(4.d0*a-6.d0)/(a+1.d0)                            cora-253
      bd=12.d0*den*a**2*dsqrt(s*q)*(4.d0*a**2-9.d0)                     cora-254
      if (lt) go to 45                                                  cora-255
      c(1)=b1-6.d0*q*a*(2.d0*a+3.d0)/w                                  cora-256
      c(2)=b3+2.d0*a*(4.d0*a**2-9.d0)*(x+3.d0*a/w)/w                    cora-257
      c(3)=b2                                                           cora-258
      c(4)=b4-6.d0*a*(2.d0*a-3.d0)/w                                    cora-259
      go to 45                                                          cora-260
c multipole lq=4 l1=l2-2.                                               cora-261
   23 b1=((2.d0*a-e**2)*s**2+(a+2.d0)*(2.d0*e*f*s-a*(2.d0*a+2.d0+f**2)/(cora-262
     1a-1.d0))/(a+1.d0))                                                cora-263
      b2=6.d0*q*((a+1.d0)*x-3.d0*f)                                     cora-264
      b3=(-x*(4.d0*a+6.d0)*b1*(a**2-1.d0)+3.d0*(p*((2.d0*a+5.d0)*x-3.d0*cora-265
     1y)+(1.d0-s**2)*a*(a+2.d0)*(2.d0*a+3.d0)*(a*x+e*s)))               cora-266
      b4=((4.d0*a+6.d0)*(b1*(a-1.d0)+3.d0*a*(s**2-1.d0))+3.d0*y*(3.d0*y-cora-267
     1(2.d0*a+5.d0)*x)/(a+1.d0))                                        cora-268
      b1=q*(a+1.d0)*(4.d0*a+6.d0)*b1                                    cora-269
      bd=60.d0*den*a**2*(a+2.d0)*(2.d0*a+3.d0)*dsqrt(s*q*((a+1.d0)**2+f*cora-270
     1*2))                                                              cora-271
      if (lt) go to 45                                                  cora-272
      c(1)=b1-6.d0*q*(a+2.d0)*(2.d0*a+3.d0)*(e*s+a*(x+4.d0*(a+1.d0)/w))/cora-273
     1w                                                                 cora-274
      c(2)=b3+2.d0*(2.d0*a+3.d0)*(6.d0*e*f*s+a*(f*((2.d0*a+13.d0)*x+6.d0cora-275
     1*f)+(a+1.d0)*(2.d0*a*(2.d0*a+4.d0-(2.d0*a+1.d0)*s**2)+(2.d0*a+1.d0cora-276
     2)*x**2))+3.d0*a*(a+2.d0)*(2.d0*a+1.d0)*((a+1.d0)*x+5.d0*f+a*(4.d0*cora-277
     2a+4.d0)/w)/w)/w                                                   cora-278
      c(3)=b2+12.d0*q*(a+1.d0)*(2.d0*a+3.d0)/w                          cora-279
      c(4)=b4-(12.d0*a+6.d0)*((a+6.d0)*f+a*(a+1.d0)*(x+(4.d0*a+6.d0)/w))cora-280
     1/w                                                                cora-281
      go to 45                                                          cora-282
c multipole lq=4 l1=l2-3.                                               cora-283
   24 b1=f*q*(12.d0*(q-(2.d0*a-1.d0)*(2.d0*a-5.d0))/((2.d0*a-3.d0)*(a-1.cora-284
     1d0))+(26.d0*a-10.d0)*u)                                           cora-285
      b2=q*(36.d0*(q+4.d0*a**2-5.d0)/(2.d0*a-3.d0)-30.d0*(a**2-1.d0)*u)/cora-286
     1(2.d0*a+3.d0)                                                     cora-287
      b3=b2+u*(a**2*(6.d0*a+3.d0)*((4.d0*a+10.d0)+5.d0*(a**2-1.d0)*u)-18cora-288
     1.d0*q*a*(3.d0*a+4.d0))/(2.d0*a+3.d0)                              cora-289
      b4=f*(12.d0*(q-(2.d0*a+5.d0)*(2.d0*a+1.d0))+u*(4.d0*a+2.d0)*((13.dcora-290
     10*a+22.d0)*a-15.d0))/((a+1.d0)*(2.d0*a+3.d0))                     cora-291
      if (x.eq.0.d0) go to 25                                           cora-292
      b1=b1-2.d0*q*x*((6.d0*q*(a-2.d0)+(((28.d0*a-30.d0)*a-46.d0)*a+30.dcora-293
     10))/((2.d0*a-3.d0)*(a-1.d0))-(a+1.d0)*((9.d0*a-5.d0)*u-2.d0*x**2))cora-294
      b2=b2-12.d0*q*x*(f-x*(a+1.d0))/(2.d0*a+3.d0)                      cora-295
      b3=b3+x*(24.d0*q*(a*x-f)+(2.d0*a+1.d0)*(12.d0*(2.d0*a+5.d0)*f-((44cora-296
     1.d0*a+80.d0)*a-30.d0)*f*u+x*a*(28.d0*a+52.d0-u*(24.d0*a+2.d0)*(a+1cora-297
     2.d0))+12.d0*f*x**2+4.d0*a*x**3*(a+1.d0)))/(2.d0*a+3.d0)           cora-298
      b4=b4-x*(12.d0*(a-1.d0)*q+(4.d0*a+2.d0)*(6.d0*f*x+a*(14.d0*a+26.d0cora-299
     1-(a+1.d0)*((9.d0*a+1.d0)*u-2.d0*x**2))))/((2.d0*a+3.d0)*(a+1.d0)) cora-300
   25 bd=360.d0*den*a**2*s*dsqrt(s*q*((a+1.d0)**2+f**2)*((a-1.d0)**2+e**cora-301
     12))                                                               cora-302
      if (lt) go to 45                                                  cora-303
      c(1)=b1+q*(12.d0*(a*(2.d0*a-1.d0)*(2.d0*a-5.d0)-q*(9.d0*a-12.d0))/cora-304
     1(2.d0*a-3.d0)+30.d0*a*u*(a**2-1.d0)-24.d0*(2.d0*a-1.d0)*(f*(7.d0*acora-305
     2+5.d0)+5.d0*a*(a**2-1.d0)/w)/w)/w                                 cora-306
      c(2)=b3+(f*(48.d0*q-8.d0*a*u*(2.d0*a+1.d0)*(7.d0*a-5.d0))+6.d0*(10cora-307
     1.d0*q*(11.d0*a**2-2.d0)-a**2*(2.d0*a+1.d0)*(30.d0*(2.d0*a-1.d0)+5.cora-308
     2d0*u*(a**2-1.d0)-(8.d0*a-4.d0)*(12.d0*f+5.d0*(a**2-1.d0)/w)/w))/w)cora-309
     3/w                                                                cora-310
      c(3)=b2+24.d0*q*(2.d0*f+5.d0*(a**2-1.d0)/w)/w                     cora-311
      c(4)=b4+((12.d0*a*(2.d0*a+1.d0)*(2.d0*a+5.d0)-36.d0*q*(3.d0*a+4.d0cora-312
     1)+30.d0*a*u*(2.d0*a+1.d0)*(a**2-1.d0))/(2.d0*a+3.d0)-24.d0*(2.d0*acora-313
     2+1.d0)*(f*(7.d0*a-5.d0)+5.d0*a*(a**2-1.d0)/w)/w)/w                cora-314
      if (x.eq.0.d0) go to 45                                           cora-315
      c(1)=c(1)-12.d0*x*q*((a+2.d0)*(3.d0*f+(a+1.d0)*x)+(4.d0*a-2.d0)*(acora-316
     1+1.d0)*(a+5.d0)/w)/w                                              cora-317
      c(2)=c(2)+x*((12.d0*q*(5.d0*a+6.d0)+(2.d0*a+1.d0)*(12.d0*f*x*(a+2.cora-318
     1d0)-2.d0*a*(4.d0*a+10.d0+(a+1.d0)*(u*(9.d0*a-5.d0)-2.d0*x**2))))+1cora-319
     22.d0*(2.d0*a+1.d0)*(f*((7.d0*a+24.d0)*a-10.d0)+a*(a+1.d0)*((a+2.d0cora-320
     3)*x+(4.d0*a-2.d0)*(a+5.d0)/w))/w)/w                               cora-321
      c(3)=c(3)+24.d0*x*q*(a+1.d0)/w                                    cora-322
      c(4)=c(4)-12.d0*x*(2.d0*a+1.d0)*((3.d0*f*(a+2.d0)+a*x*(a+1.d0))/(2cora-323
     1.d0*a+3.d0)+2.d0*a*(a+1.d0)/w)/w                                  cora-324
      go to 45                                                          cora-325
c multipole lq=4 l1=l2-4.                                               cora-326
   26 b1=6.d0*q*(q*((42.d0*a+3.d0)*u-36.d0)+a*(24.d0*a-12.d0-u*((34.d0*acora-327
     1+3.d0)*a+8.d0)-(8.d0*a+12.d0)*(a**2-1.d0)*u**2))                  cora-328
      b2=18.d0*q*(12.d0-u*(9.d0*a+1.d0))*f                              cora-329
      b3=9.d0*f*(q*(24.d0-u*(38.d0*a+2.d0))+u*a*(2.d0*a+1.d0)*(a+1.d0)*(cora-330
     14.d0+(17.d0*a-12.d0)*u))                                          cora-331
      b4=6.d0*(q*((42.d0*a+3.d0)*u-36.d0)+a*(2.d0*a+1.d0)*(12.d0-(17.d0*cora-332
     1a-2.d0)*u-u**2*(4.d0*a+6.d0)*(a-1.d0)))                           cora-333
      if (x.eq.0.d0) go to 27                                           cora-334
      b1=b1-q*x*(x*(24.d0*q+(56.d0*a+188.d0)*a+108.d0)+108.d0*(2.d0*a+3.cora-335
     1d0)*f-2.d0*(2.d0*a+3.d0)*(58.d0*a+7.d0)*f*u-2.d0*(a+1.d0)*(2.d0*a+cora-336
     23.d0)*(15.d0*a+4.d0)*u*x+12.d0*(2.d0*a+3.d0)*f*x**2+4.d0*(a+1.d0)*cora-337
     3(2.d0*a+3.d0)*x**3)                                               cora-338
      b2=b2+q*x*(24.d0*f*x+(a+1.d0)*(108.d0-(66.d0*a+24.d0)*u+12.d0*x**2cora-339
     1))                                                                cora-340
      b3=b3+x*(24.d0*f*q*x+(a+1.d0)*(q*(324.d0+36.d0*x**2-(498.d0*a+42.dcora-341
     10)*u)+(2.d0*a+1.d0)*(f*x*(108.d0-(152.d0*a+24.d0)*u+12.d0*x**2)-a*cora-342
     2(72.d0-(168.d0*a-12.d0)*u-((57.d0*a+24.d0)*a-36.d0)*u**2-x**2*(28.cora-343
     3d0-(36.d0*a+20.d0)*u+4.d0*x**2)))))                               cora-344
      b4=b4+x*(x*(a*(2.d0*a+1.d0)*(30.d0*a+20.d0)*u-24.d0*q)-(8.d0*a+4.dcora-345
     10)*(f*(27.d0-(29.d0*a+6.d0)*u)+x*(7.d0*a+3.d0*f*x+a*x**2)))       cora-346
   27 bd=2520.d0*den*a**2*s*dsqrt(s*q*((a+1.d0)**2+f**2)*((a-1.d0)**2+e*cora-347
     1*2)*((a+2.d0)**2+f**2))                                           cora-348
      if (lt) go to 45                                                  cora-349
      c(1)=b1+18.d0*q*(f*((a-1.d0)*(8.d0*a-4.d0)-20.d0*q+(2.d0*a+3.d0)*(cora-350
     1(17.d0*a-3.d0)*a-4.d0)*u)-4.d0*(15.d0*q*((4.d0*a+4.d0)*a-1.d0)-a*(cora-351
     22.d0*a-1.d0)*((34.d0*a+55.d0)*a+16.d0)-(2.d0*a+3.d0)*(2.d0*a*u*(a+cora-352
     31.d0)*(a-1.d0)*(a+2.d0)-5.d0*(2.d0*a-1.d0)*(f*((5.d0*a+5.d0)*a+4.dcora-353
     40)+2.d0*a*(a**2-1.d0)*(a+2.d0)/w)/w))/w)/w                        cora-354
      c(2)=b3+(360.d0*q**2-72.d0*q*(4.d0*a**2+1.d0)-24.d0*(a+1.d0)*u*(q*cora-355
     1((66.d0*a-12.d0)*a-9.d0)-a**2*(2.d0*a+1.d0)*(34.d0*a-19.d0+u*(a-1.cora-356
     2d0)*(2.d0*a+3.d0)))+18.d0*(20.d0*q*f*((20.d0*a+14.d0)*a-3.d0)-(a+1cora-357
     3.d0)*(a*f*((4.d0*a**2-1.d0)*140.d0+u*(10.d0*a+15.d0)*(2.d0*a+1.d0)cora-358
     4*(5.d0*a-4.d0))-4.d0*(10.d0*q*(((30.d0*a+19.d0)*a-1.d0)*a-6.d0)-a*cora-359
     5*2*(2.d0*a+1.d0)*((2.d0*a-1.d0)*(84.d0*a+56.d0)+(2.d0*a+3.d0)*((2.cora-360
     6d0*a-2.d0)*(a+2.d0)*u-(10.d0*a-5.d0)*(7.d0*f+2.d0*(a-1.d0)*(a+2.d0cora-361
     7)/w)/w)))/w))/w)/w                                                cora-362
      c(3)=b2+72.d0*q*(5.d0*q-4.d0*a**2-1.d0-(2.d0*a+3.d0)*((a**2-1.d0)*cora-363
     1u-5.d0*(f*(3.d0*a-1.d0)+2.d0*(a**2-1.d0)*(a+2.d0)/w)/w))/w        cora-364
      c(4)=b4-18.d0*(20.d0*q*f-(a+1.d0)*((2.d0*a+1.d0)*f*(4.d0+u*(17.d0*cora-365
     1a-12.d0))-4.d0*(15.d0*q*(4.d0*a-1.d0)-(2.d0*a+1.d0)*(a*(34.d0*a-19cora-366
     2.d0)+(2.d0*a+3.d0)*(a*(a-1.d0)*u-5.d0*(f*(5.d0*a-4.d0)+2.d0*a*(a-1cora-367
     3.d0)*(a+2.d0)/w)/w)))/w))/w                                       cora-368
      if (x.eq.0.d0) go to 45                                           cora-369
      c(1)=c(1)-6.d0*q*x*((a+2.d0)*(60.d0*q-(44.d0*a-10.d0)*a-6.d0-(2.d0cora-370
     1*a+3.d0)*((a+1.d0)*((11.d0*a-6.d0)*u-2.d0*x**2)-12.d0*f*x))+(8.d0*cora-371
     2a+12.d0)*(((20.d0*a+90.d0)*a-5.d0)*f+(a+1.d0)*(a+2.d0)*((2.d0*a+5.cora-372
     3d0)*x+(10.d0*a-5.d0)*(a+6.d0)/w))/w)/w                            cora-373
      c(2)=c(2)+x*((2.d0*a+3.d0)*(240.d0*f*q+(a+1.d0)*(144.d0*q*x-(2.d0*cora-374
     1a+1.d0)*((24.d0-24.d0*x**2+(182.d0*a-72.d0)*u)*f+a*x*(44.d0+(30.d0cora-375
     2*a+8.d0)*u-4.d0*x**2))))+(a+1.d0)*(q*((2400.d0*a+8400.d0)*a-360.d0cora-376
     3)-(24.d0*a+12.d0)*(a*((102.d0*a+357.d0)*a-114.d0)-(2.d0*a+3.d0)*((cora-377
     4a+2.d0)*(10.d0*f*x+a*(x**2-(5.5d0*a-3.d0)*u))+(f*((60.d0*a+270.d0)cora-378
     5*a-120.d0)+a*(a+2.d0)*(x*(4.d0*a+10.d0)+(20.d0*a-10.d0)*(a+6.d0)/wcora-379
     6))/w)))/w)/w                                                      cora-380
      c(3)=c(3)+24.d0*x*q*(2.d0*a+3.d0)*(5.d0*f+(a+1.d0)*(x+5.d0*(a+2.d0cora-381
     1)/w))/w                                                           cora-382
      c(4)=c(4)-6.d0*x*(a+1.d0)*(60.d0*q-(2.d0*a+1.d0)*(22.d0*a+(11.d0*acora-383
     1+4.d0)*a*u-12.d0*f*x-2.d0*a*x**2-(8.d0*a+12.d0)*(10.d0*f+a*(x+5.d0cora-384
     2*(a+2.d0)/w))/w))/w                                               cora-385
      go to 45                                                          cora-386
   28 go to ( 29 , 31 , 33 , 35 , 37 , 39 ) , ll                        cora-387
c multipole lq=5 l1=l2.                                                 cora-388
   29 bd=12.d0*den*a**2*(a+2.d0)*(2.d0*a+5.d0)*(4.d0*a**2-9.d0)*s*dsqrt(cora-389
     1p*q)                                                              cora-390
      b1=28.d0*p*q*f*(2.d0*a+3.d0)/(a-1.d0)                             cora-391
      b2=q*(84.d0*q-a*(48.d0*a-72.d0-u*(a+2.d0)*(6.d0*a+27.d0)))        cora-392
      b3=p*(84.d0*q-a*(6.d0*a-9.d0)*(8.d0+(a+2.d0)*u))                  cora-393
      b4=(4.d0*a-6.d0)*(14.d0*q+a*(24.d0+(7.d0*a+12.d0)*u))*f/(a+1.d0)  cora-394
      if (x.eq.0.d0) go to 30                                           cora-395
      b1=b1+(28.d0*a+42.d0)*x*p*q/(a-1.d0)                              cora-396
      b2=b2+q*x*((28.d0*a+126.d0)*f+((4.d0*a+22.d0)*a+42.d0)*x)         cora-397
      b3=b3-p*x*(2.d0*a-3.d0)*(14.d0*f-2.d0*a*x)                        cora-398
      b4=b4+x*(4.d0*a-6.d0)*(21.d0*q-a*(14.d0*a-12.d0+(a**2-3.d0)*u)-x*(cora-399
     1(2.d0*a-7.d0)*f+a*x))/(a+1.d0)                                    cora-400
   30 if (lt) go to 45                                                  cora-401
      c(1)=b1-p*q*(a+2.d0)*(24.d0*a+36.d0)/w                            cora-402
      c(2)=b3-p*(4.d0*a**2-9.d0)*(8.d0*f-a*(6.d0*a+12.d0)/w)/w          cora-403
      c(3)=b2-q*(4.d0*a**2-9.d0)*(8.d0*f-a*(6.d0*a+12.d0)/w)/w          cora-404
      c(4)=b4-(12.d0*a-18.d0)*((2.d0*a-4.d0)*q+a*(a*(8.d0+(a+2.d0)*u)+(8cora-405
     1.d0*a+12.d0)*(f-(a+2.d0)*a/w)/w))/w                               cora-406
      if (x.eq.0.d0) go to 45                                           cora-407
      c(3)=c(3)-x*q*(8.d0*a**2-18.d0)*(a+4.d0)/w                        cora-408
      c(2)=c(2)+x*p*a*(8.d0*a**2-18.d0)/w                               cora-409
      c(4)=c(4)-x*(12.d0*a-18.d0)*((2.d0*a-4.d0)*f+a*(x+(4.d0*a+6.d0)/w)cora-410
     1)/w                                                               cora-411
      go to 45                                                          cora-412
c multipole lq=5 l1=l2-1.                                               cora-413
   31 bd=-60.d0*a**2*(2.d0*a+5.d0)*(2.d0*a+3.d0)*(a+3.d0)*(a+2.d0)*den*scora-414
     1*dsqrt(p*q*((a+1.d0)**2+f**2))                                    cora-415
      b1=p*q*(4.d0*a+6.d0)*((28.d0*q-(12.d0*a-56.d0)*a+40.d0)/(a-1.d0)-(cora-416
     12.d0*a+5.d0)*(a+1.d0)*u)                                          cora-417
      b2=q*f*(168.d0*q+480.d0*a+240.d0+((48.d0*a+120.d0)*a+30.d0)*u)    cora-418
      b3=p*f*(168.d0*q+480.d0*a+240.d0-(12.d0*a+6.d0)*((2.d0*a+2.d0)*a-5cora-419
     1.d0)*u)                                                           cora-420
      b4=((2.d0*a-3.d0)*(56.d0*q-(24.d0*a-208.d0)*a+80.d0-(((4.d0*a-18.dcora-421
     10)*a-52.d0)*a-10.d0)*u)*q+a**2*(2.d0*a+1.d0)*(480.d0-((24.d0*a-56.cora-422
     2d0)*a-180.d0)*u-(2.d0*a+5.d0)*(2.d0*a+3.d0)*(a+1.d0)*u**2))/(a+1.dcora-423
     30)                                                                cora-424
      if (x.eq.0.d0) go to 32                                           cora-425
      b1=b1-x*p*q*(4.d0*a+6.d0)*(7.d0*f-x*(a+1.d0))                     cora-426
      b2=b2+x*q*((14.d0*a+210.d0)*q-(56.d0*a-380.d0)*a+240.d0-(6.d0*a+6.cora-427
     1d0)*(a**2-5.d0)*u-(12.d0*a-36.d0)*f*x-(6.d0*a+6.d0)*x**2)         cora-428
      b3=b3-x*p*((98.d0*a-42.d0)*q-(2.d0*a+1.d0)*(a*(24.d0*a-116.d0+(a+1cora-429
     1.d0)*((7.d0*a+16.d0)*u-2.d0*x**2))+(14.d0*a-6.d0)*f*x))           cora-430
      b4=b4-x*((2.d0*a-3.d0)*(((2.d0*a+1.d0)*(24.d0*a-80)+(14.d0*a-70.d0cora-431
     1)*q)*f-((2.d0*a-22.d0)*a+12.d0)*q*x)+(4.d0*a+2.d0)*((((11.d0*a+17.cora-432
     2d0)*a+1.d0)*a+15.d0)*f*u-x*((a-1.d0)*(2.d0*a-3.d0)*f*x+a*((14.d0*acora-433
     3-18.d0)*a+58.d0+(a+1.d0)*((a+2.d0)*(a-4.d0)*u+x**2)))))/(a+1.d0)  cora-434
   32 if (lt) go to 45                                                  cora-435
      c(1)=b1-12.d0*p*q*(2.d0*a+3.d0)*(a+2.d0)*(2.d0*f-(2.d0*a+5.d0)*(a+cora-436
     11.d0)/w)/w                                                        cora-437
      c(2)=b3-p*(4.d0*a+6.d0)*((16.d0*a-24.d0)*q+(2.d0*a+1.d0)*(40.d0*a-cora-438
     1a*(2.d0*a+5.d0)*(a+1.d0)*(u-(6.d0*a+12.d0)/w**2)+(30.d0*a+60.d0)*fcora-439
     2/w))/w                                                            cora-440
      c(3)=b2-q*(4.d0*a+6.d0)*((16.d0*a-24.d0)*q+(2.d0*a+1.d0)*(40.d0*a+cora-441
     1(30.d0*a+60.d0)*f/w)+a*(a+1.d0)*(6.d0*a+15.d0)*(u-(10.d0*a+20.d0)/cora-442
     2w**2))/w                                                          cora-443
      c(4)=b4-6.d0*(f*(((8.d0*a-28.d0)*a+24.d0)*q+a*(4.d0*a+2.d0)*(((2.dcora-444
     10*a+2.d0)*a-5.d0)*u-40.d0))-(2.d0*a+3.d0)*((((4.d0*a+6.d0)*a+62.d0cora-445
     2)*a+20.d0)*q+a*(2.d0*a+1.d0)*((2.d0*a+5.d0)*(a+1.d0)*u*a-40.d0*a-(cora-446
     310.d0*a+20.d0)*(4.d0*f+a*(a+1.d0)*(2.d0*a+5.d0)/w)/w))/w)/w       cora-447
      if (x.eq.0.d0) go to 45                                           cora-448
      c(1)=c(1)+x*p*q*(12.d0*a+18.d0)*(a+1.d0)*(a+2.d0)/w               cora-449
      c(2)=c(2)+x*p*(4.d0*a+6.d0)*(((8.d0*a-8.d0)*a-6.d0)*f-a*(a+1.d0)*(cora-450
     12.d0*a+1.d0)*(x+(3.d0*a+6.d0)/w))/w                               cora-451
      c(3)=c(3)-x*q*(24.d0*a+36.d0)*((2.d0*a-3.d0)*f+(a+1.d0)*(x+(5.d0*acora-452
     1+10.d0)/w))/w                                                     cora-453
      c(4)=c(4)+6.d0*x*((a-2.d0)*(a-3.d0)*(2.d0*a-3.d0)*q+(2.d0*a+1.d0)*cora-454
     1(((8.d0*a-12.d0)*a+40.d0)*a+((2.d0*a-2.d0)*a+6.d0)*f*x+a*(a+1.d0)*cora-455
     2((a**2-5.d0)*u+x**2)+(4.d0*a+6.d0)*(((2.d0*a+2.d0)*a+10.d0)*f+a*(acora-456
     3+1.d0)*(x+(5.d0*a+10.d0)/w))/w))/w                                cora-457
      go to 45                                                          cora-458
c multipole lq=5 l1=l2-2.                                               cora-459
   33 dn=720.d0*a**2*(4.d0*a**2-9.d0)*(2.d0*a+5.d0)*(a+2.d0)            cora-460
      bd=den*dn*s*dsqrt(q*((a+1.d0)**2+f**2))/2.d0                      cora-461
      b1=2.d0*(2.d0*a+3.d0)*(24.d0*((2.d0*a+5.d0)*(a+2.d0)+7.d0*q)/(a-1.cora-462
     1d0)-(2.d0*a-3.d0)*(11.d0*a-10.d0)*u)*f                            cora-463
      b2=-6.d0*(24.d0*(2.d0*a**2.d0-15.d0*a-10.d0)-168.d0*q+5.d0*(a+1.d0cora-464
     1)*(2.d0*a**2+a-6.d0)*u)                                           cora-465
      b3=((1008.d0*q-144.d0*(2.d0*a**2-15.d0*a-10.d0))*q-(2.d0*a-3.d0)*ucora-466
     1*(6.d0*(17.d0*a**2-9.d0*a+10.d0)*q+a**2*(2.d0*a+1.d0)*(24.d0*(a+10cora-467
     2.d0)-15.d0*(a+1.d0)*(a+2.d0)*u)))                                 cora-468
      b4=2.d0*(2.d0*a-3.d0)*(168.d0*q+(2.d0*a+1.d0)*(24.d0*(a+10.d0)-(11cora-469
     1.d0*a**2-a-30.d0)*u))*f/(a+1.d0)                                  cora-470
      if (x.eq.0.d0) go to 34                                           cora-471
      b1=b1+x*2.d0*(2.d0*a+3.d0)*((20.d0*a**3-198.d0*a**2+316.d0*a+240.dcora-472
     10-42.d0*(2.d0*a-5.d0)*q)/(a-1.d0)+(2.d0*a-3.d0)*(12.d0*f*x+(a+1.d0cora-473
     2)*((9.d0*a+10.d0)*u-2.d0*x**2)))                                  cora-474
      b2=b2-x*12.d0*(7.d0*(2.d0*a-3.d0)*f-(a+1.d0)*(2.d0*a-3.d0)*x)     cora-475
      b3=b3-x*(2.d0*a-3.d0)*((420.d0*f-36.d0*(5.d0*a-2.d0)*x)*q+(2.d0*a+cora-476
     11.d0)*(48.d0*(a+10.d0)*f-(40.d0*a**2-38.d0*a-60.d0)*f*u+4.d0*(5.d0cora-477
     2*a-58.d0)*a*x+12.d0*(2.d0*a-1.d0)*f*x**2+a*(a+1.d0)*x*(8.d0*(3.d0*cora-478
     3a+4.d0)*u-4.d0*x**2)))                                            cora-479
      b4=b4-x*2.d0*(2.d0*a-3.d0)*(42.d0*(2.d0*a-1.d0)*q-(2.d0*a+1.d0)*(6cora-480
     1.d0*(2.d0*a-1.d0)*f*x+a*((10.d0*a-116.d0)+(a+1.d0)*((9.d0*a+16.d0)cora-481
     2*u-2.d0*x**2))))/(a+1.d0)                                         cora-482
   34 if (lt) go to 45                                                  cora-483
      b1=b1*q                                                           cora-484
      b2=b2*q                                                           cora-485
      c(1)=b1-6.d0*q*(a+2.d0)*(2.d0*a+3.d0)*(8.d0*a*(2.d0*a+5.d0)+24.d0*cora-486
     1q-5.d0*a*(a+1.d0)*(2.d0*a-3.d0)*u+4.d0*(2.d0*a-3.d0)*(2.d0*a+5.d0)cora-487
     2*(f+5.d0*a*(a+1.d0)/w)/w)/w                                       cora-488
      c(2)=b3-(4.d0*a**2-9.d0)*(8.d0*(12.d0*q+a*(a+10.d0)*(2.d0*a+1.d0)*cora-489
     1u)*f-(6.d0*a+12.d0)*((a+1.d0)*(20.d0*q-a**2*(10.d0*a+5.d0)*u)+(8.dcora-490
     20*a+4.d0)*a*(2.d0*a+5.d0)*(6.d0*f+5.d0*a*(a+1.d0)/w)/w)/w)/w      cora-491
      c(3)=b2-q*24.d0*(4.d0*a**2-9.d0)*(4.d0*f-5.d0*(a+1.d0)*(a+2.d0)/w)cora-492
     1/w                                                                cora-493
      c(4)=b4-6.d0*(2.d0*a-3.d0)*(24.d0*(a-2.d0)*q+a*(2.d0*a+1.d0)*(8.d0cora-494
     1*(a+10.d0)-5.d0*(a+1.d0)*(a+2.d0)*u)+4.d0*(2.d0*a+3.d0)*(2.d0*a+1.cora-495
     2d0)*((a+10.d0)*f+5.d0*a*(a+1.d0)*(a+2.d0)/w)/w)/w                 cora-496
      if (x.eq.0.d0) go to 45                                           cora-497
      c(1)=c(1)+x*q*(12.d0*a+24.d0)*(4.d0*a**2-9.d0)*(3.d0*f-(a+1.d0)*(xcora-498
     1+(4.d0*a+10.d0)/w))/w                                             cora-499
      c(2)=c(2)+x*(8.d0*a**2-18.d0)*(36.d0*(a-1.d0)*q-(2.d0*a+1.d0)*(6.dcora-500
     10*(a-2.d0)*f*x-a*(8.d0*(a+10.d0)-(a+1.d0)*((9.d0*a+10.d0)*u-2.d0*xcora-501
     2**2))-6.d0*(a+2.d0)*((a+10.d0)*f+a*(a+1.d0)*(x+(4.d0*a+10.d0)/w))/cora-502
     3w))/w                                                             cora-503
      c(3)=c(3)+x*q*24.d0*(4.d0*a**2-9.d0)*(a+1.d0)/w                   cora-504
      c(4)=c(4)+x*12.d0*(2.d0*a+1.d0)*(2.d0*a-3.d0)*(3.d0*(a-2.d0)*f-a*(cora-505
     1a+1.d0)*(x+(4.d0*a+6.d0)/w))/w                                    cora-506
      go to 45                                                          cora-507
c multipole lq=5 l1=l2-3.                                               cora-508
   35 bd=-2520.d0*den*a**2*(a+2.d0)*(a+3.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)cora-509
     1*s*dsqrt(q*((a+1.d0)**2+f**2)*((a+2.d0)**2+f**2))                 cora-510
      b1=q*(4.d0*a+6.d0)*(((24.d0*((a+36.d0)*a+40.d0)+168.d0*q)*q+48.d0*cora-511
     1a*(a+2.d0)*(a+3.d0)*(2.d0*a+5.d0))/(a-1.d0)-(a*(((80.d0*a+620.d0)*cora-512
     2a+966.d0)*a+540.d0)+((28.d0*a-26.d0)*a+60.d0)*q-6.d0*a*(a+1.d0)*(acora-513
     3+2.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*u)*u)                          cora-514
      b2=6.d0*f*q*(48.d0*((2.d0*a+21.d0)*a+20.d0)+168.d0*q-(((16.d0*a+36cora-515
     1.d0)*a-22.d0)*a-60.d0)*u)                                         cora-516
      b3=6.d0*f*((48.d0*((2.d0*a+21.d0)*a+20.d0)+168.d0*q-(10.d0*a-12.d0cora-517
     1)*(4.d0*a**2+5.d0)*u)*q+a*(a+1.d0)*(2.d0*a+1.d0)*(((16.d0*a+168.d0cora-518
     2)*a+720.d0)-(2.d0*a+3.d0)*(a+2.d0)*(8.d0*a+45.d0)*u)*u)           cora-519
      b4=((2.d0*a-3.d0)*(48.d0*((a+48.d0)*a+40.d0)+336.d0*q)*q/(a+1.d0)-cora-520
     1(4.d0*a**2-9.d0)*(28.d0*a-40.d0)*q*u+a*(2.d0*a+1.d0)*(96.d0*((2.d0cora-521
     2*a+21.d0)*a+90.d0)-(4.d0*a+6.d0)*(((40.d0*a+282.d0)*a+180.d0)-(a+2cora-522
     3.d0)*(2.d0*a+3.d0)*(6.d0*a+15.d0)*u)*u))                          cora-523
      if (x.eq.0.d0) go to 36                                           cora-524
      b1=b1+x*q*(4.d0*a+6.d0)*((((28.d0*a+402.d0)*a+704.d0)*a+360.d0)*x-cora-525
     1((88.d0*a+700.d0)*a+600.d0)*f-126.d0*f*q+(54.d0*a+24.d0)*q*x+(2.d0cora-526
     2*a+3.d0)*(((5.d0*a-53.d0)*a-70.d0)*f*u-(8.d0*a+2.d0)*f*x**2-(a+1.dcora-527
     30)*(a+2.d0)*((15.d0*a+25.d0)*u-2.d0*x**2)*x))                     cora-528
      b2=b2-x*6.d0*q*((((8.d0*a+372.d0)*a+696.d0)*a+360.d0)+(70.d0*a+42.cora-529
     1d0)*q-(2.d0*a+3.d0)*((10.d0*a+6.d0)*f*x+(a+1.d0)*(a+2.d0)*((11.d0*cora-530
     2a+25.d0)*u-2.d0*x**2)))                                           cora-531
      b3=b3+x*((48.d0*((13.d0*a-7.d0)*a-3.d0)*f*x-(((144.d0*a+6696.d0)*acora-532
     1+1104.d0)*a-3600.d0)-84.d0*(13.d0*a-9.d0)*q)*q+(a+1.d0)*(((((352.dcora-533
     20*a+224.d0)*a+1518.d0)*a+1260.d0)*u-12.d0*((20.d0*a-14.d0)*a-3.d0)cora-534
     3*x**2)*q+(2.d0*a+1.d0)*((2.d0*a-3.d0)*((88.d0*a+720.d0)+(16.d0*a+2cora-535
     44.d0)*x**2)*f*x+a*((((280.d0*a+2292.d0)*a+2772.d0)*a+1080.d0)*u-(1cora-536
     592.d0*a+2016.d0)*a-8640.d0-28.d0*((2.d0*a+31.d0)*a+24.d0)*x**2)-(2cora-537
     6.d0*a+3.d0)*(((16.d0*a-230.d0)*a-300.d0)*f*u*x+a*(a+2.d0)*(((57.d0cora-538
     7*a+171.d0)*a+90.d0)*u**2-(36.d0*a+62.d0)*u*x**2+4.d0*x**4)))))    cora-539
      b4=b4-x*((4.d0*a-6.d0)*(126.d0*a+42.d0)*f*q/(a+1.d0)-36.d0*(2.d0*acora-540
     1-3.d0)*(3.d0*a+1.d0)*q*x-(4.d0*a+2.d0)*(a*((28.d0*a+434.d0)*a+336.cora-541
     2d0)*x-(2.d0*a-3.d0)*(44.d0*a+360.d0)*f+(2.d0*a+3.d0)*(((5.d0*a-79.cora-542
     3d0)*a-150.d0)*f*u-(8.d0*a-12.d0)*f*x**2-a*(a+2.d0)*((15.d0*a+31.d0cora-543
     4)*u-2.d0*x**2)*x)))                                               cora-544
   36 if (lt) go to 45                                                  cora-545
      c(1)=b1-12.d0*q*(2.d0*a+3.d0)*(a+2.d0)*((12.d0*q+(2.d0*a+3.d0)*((8cora-546
     1.d0*a+41.d0)*a+15.d0)*u)*f-(4.d0*a+10.d0)*((a+3.d0)*4.d0*f+((33.d0cora-547
     2+13.d0*a)*q-a*(a+3.d0)*(4.d0*a-6.d0)-(2.d0*a+3.d0)*(3.d0*a*(a+1.d0cora-548
     3)*(a+2.d0)*u-10.d0*(a+3.d0)*((4.d0*a+1.d0)*f+3.d0*a*(a+1.d0)*(a+2.cora-549
     4d0)/w)/w))/w))/w                                                  cora-550
      c(3)=b2-12.d0*q*(2.d0*a+3.d0)*((((32.d0*a+288.d0)*a+456.d0)*a+240.cora-551
     1d0)+8.d0*(2.d0*a-3.d0)*q-(a+2.d0)*(2.d0*a+3.d0)*(3.d0*(a+1.d0)*(2.cora-552
     2d0*a+5.d0)*u-10.d0*((2.d0*a+11.d0)*f+3.d0*(2.d0*a+5.d0)*(a+1.d0)*(cora-553
     3a+2.d0)/w)/w))/w                                                  cora-554
      c(2)=b3-(4.d0*a+6.d0)*((((192.d0*a+1728.d0)*a+2736.d0)*a+1440.d0+4cora-555
     18.d0*(2.d0*a-3.d0)*q)*q-(a+1.d0)*((((176.d0*a+964.d0)*a+2166.d0)*acora-556
     2+540.d0)*q-a**2*(2.d0*a+1.d0)*(((16.d0*a+168.d0)*a+720.d0)+6.d0*(acora-557
     3+2.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*u))*u-6.d0*(a+2.d0)*((2.d0*a+3.cora-558
     4d0)*((a+1.d0)*(2.d0*a+1.d0)*(20.d0*a+75.d0)*a*u-(20.d0*a+110.d0)*qcora-559
     5)*f+(a+1.d0)*(2.d0*a+5.d0)*(6.d0*(28.d0*a**2*(2.d0*a+1.d0)*(a+3.d0cora-560
     6)-((52.d0*a+161.d0)*a+30.d0)*q+a**2*(a+2.d0)*(2.d0*a+1.d0)*(2.d0*acora-561
     7+3.d0)*u)-10.d0*a*(a+3.d0)*(2.d0*a+1.d0)*(2.d0*a+3.d0)*(14.d0*f+6.cora-562
     8d0*a*(a+2.d0)/w)/w)/w)/w)/w                                       cora-563
      c(4)=b4+12.d0*(((2.d0*a+1.d0)*(a+1.d0)*(((16.d0*a+168.d0)*a+720.d0cora-564
     1)-(a+2.d0)*(2.d0*a+3.d0)*(8.d0*a+45.d0)*u)-12.d0*(2.d0*a-3.d0)*(a-cora-565
     22.d0)*q)*f+(2.d0*a+3.d0)*(a+1.d0)*(((52.d0*a+266.d0)*a+660.d0)*q-acora-566
     3*(2.d0*a+1.d0)*((8.d0*a+84.d0)*a+360.d0)-(a+2.d0)*(2.d0*a+1.d0)*(2cora-567
     4.d0*a+3.d0)*(3.d0*a*(2.d0*a+5.d0)*u-10.d0*((8.d0*a+30.d0)*f+3.d0*acora-568
     5*(2.d0*a+5.d0)*(a+2.d0)/w)/w))/w)/w                               cora-569
      if (x.eq.0.d0) go to 45                                           cora-570
      c(1)=c(1)+6.d0*q*x*(2.d0*a+3.d0)*(a+2.d0)*(((40.d0*a+300.d0)*a+476cora-571
     1.d0)*a+240.d0+(18.d0*a-6.d0)*q-(2.d0*a+3.d0)*((2.d0*a-10.d0)*f*x+(cora-572
     2a+1.d0)*(a+2.d0)*((11.d0*a+15.d0)*u-2.d0*x**2)-(8.d0*a+20.d0)*((3.cora-573
     3d0*a+13.d0)*f+(a+1.d0)*(a+2.d0)*(x+(5.d0*a+15.d0)/w))/w))/w       cora-574
      c(2)=c(2)+x*(4.d0*a+6.d0)*(12.d0*(2.d0*a-3.d0)*(4.d0*a-1.d0)*f*q-(cora-575
     1a+1.d0)*(((60.d0*a-42.d0)*a+180.d0)*q*x+(2.d0*a+1.d0)*(((32.d0*a+3cora-576
     236.d0)*a+1440.d0)*f-(2.d0*a+3.d0)*((28.d0*a+202.d0)*a+180.d0)*f*u+cora-577
     3a*(((40.d0*a+308.d0)*a+120.d0)-(a+2.d0)*(2.d0*a+3.d0)*((15.d0*a+25cora-578
     4.d0)*u-2.d0*x**2))*x-(2.d0*a+3.d0)*(2.d0*a-24.d0)*f*x**2)+(3.d0*a+cora-579
     56.d0)*(((92.d0*a+406.d0)*a+780.d0)*q-(2.d0*a+1.d0)*(a*((8.d0*a+84.cora-580
     6d0)*a+360.d0)+(2.d0*a+3.d0)*(a*(a+2.d0)*((11.d0*a+15.d0)*u-2.d0*x*cora-581
     7*2)-(6.d0*a+40.d0)*f*x-(8.d0*a+20.d0)*((30.d0+8.d0*a)*f+a*(a+2.d0)cora-582
     8*(x+(5.d0*a+15.d0)/w))/w)))/w))/w                                 cora-583
      c(3)=c(3)+24.d0*x*q*(2.d0*a+3.d0)**2*((2.d0*a-3.d0)*f-(a+1.d0)*(a+cora-584
     12.d0)*(x+5.d0*(a+2.d0)/w))/w                                      cora-585
      c(4)=c(4)+x*6.d0*(a+1.d0)*(18.d0*(a-2.d0)*(2.d0*a-3.d0)*q+(2.d0*a+cora-586
     11.d0)*(a*((40.d0*a+308.d0)*a+120.d0)-(2.d0*a+3.d0)*((2.d0*a-24.d0)cora-587
     2*f*x+a*(a+2.d0)*((11.d0*a+25.d0)*u-2.d0*x**2)-4.d0*(2.d0*a+3.d0)*(cora-588
     3(20.d0+3.d0*a)*f+a*(a+2.d0)*(x+5.d0*(a+2.d0)/w))/w)))/w           cora-589
      go to 45                                                          cora-590
c multipole lq=5 l1=l2-4.                                               cora-591
   37 bd=10080.d0*den*a**2*(2.d0*a+5.d0)*(a+2.d0)*s**2*dsqrt(q*((a+1.d0)cora-592
     1**2+f**2)*((a+2.d0)**2+f**2)*((a-1.d0)**2+e**2))                  cora-593
      b1=q*(((336.d0*q+48.d0*((8.d0*a+22.d0)*a+47.d0))*q-96.d0*(2.d0*a-1cora-594
     1.d0)*(a+2.d0)*(2.d0*a+5.d0)*(3.d0*a-7.d0))/((a-1.d0)*(2.d0*a-3.d0)cora-595
     2)+(4.d0*(((162.d0*a+683.d0)*a+538.d0)*a-280.d0)-4.d0*(7.d0*a-38.d0cora-596
     3)*q-(2.d0*a+3.d0)*(((163.d0*a+497.d0)*a-16.d0)*a-140.d0)*u)*u)*f  cora-597
      b2=3.d0*q*(((96.d0*((((12.d0*a+56.d0)*a+29.d0)*a-70.d0)*a-70.d0)+(cora-598
     148.d0*((4.d0*a+28.d0)*a+47.d0)+336.d0*q)*q)/(2.d0*a-3.d0)-4.d0*(((cora-599
     2((66.d0*a+307.d0)*a+172.d0)*a-280.d0)*a-280.d0)+(a-2.d0)*(4.d0*a-1cora-600
     39.d0)*q)*u)/(2.d0*a+3.d0)+35.d0*(a**2-1.d0)*(a+2.d0)**2*u**2)     cora-601
      b3=(((1008.d0*q+144.d0*((4.d0*a+28.d0)*a+47.d0))*q+288.d0*((((12.dcora-602
     10*a+56.d0)*a+29.d0)*a-70.d0)*a-70.d0))*q/(2.d0*a-3.d0)-12.d0*(((((cora-603
     2178.d0*a+967.d0)*a+1410.d0)*a+428.d0)*a-280.d0)+(a-2.d0)*(10.d0*a-cora-604
     319.d0)*q)*q*u+(3.d0*a+3.d0)*(((((458.d0*a+2185.d0)*a+2899.d0)*a-35cora-605
     42.d0)*a-420.d0)*q*u+(4.d0*a+2.d0)*a**2*(8.d0*((6.d0*a+37.d0)*a+70.cora-606
     5d0)-(((62.d0*a+349.d0)*a+524.d0)*a-140.d0)*u))*u)/(2.d0*a+3.d0)-52cora-607
     6.5d0*a**2*(a**2-1.d0)*(a+2.d0)**2*(2.d0*a+1.d0)*u**3              cora-608
      b4=(((336.d0*q+48.d0*((8.d0*a+34.d0)*a+47.d0)-(4.d0*a-8.d0)*((14.dcora-609
     10*a-41.d0)*a+57.d0)*u)*q/(a+1.d0)+(2.d0*a+1.d0)*(4.d0*(((162.d0*a+cora-610
     2863.d0)*a+1070.d0)*a-840.d0)*u-96.d0*((6.d0*a+37.d0)*a+70.d0)))/(2cora-611
     3.d0*a+3.d0)-(2.d0*a+1.d0)*(((163.d0*a+631.d0)*a+256.d0)*a-420.d0)*cora-612
     4u**2)*f                                                           cora-613
      if (x.eq.0.d0) go to 38                                           cora-614
      b1=b1+x*q*(8.d0*((((((180.d0*a+604.d0)*a-425.d0)*a-1813.d0)*a-394.cora-615
     1d0)*a+840.d0)+(((34.d0*a+147.d0)*a-193.d0)*a-450.d0)*q+42.d0*(a-2.cora-616
     2d0)*q**2)/((1.d0-a)*(2.d0*a-3.d0))+96.d0*f*q*x+16.d0*((((26.d0*a+1cora-617
     326.d0)*a+133.d0)*a-13.d0)*a-70.d0)*u+4.d0*((41.d0*a+115.d0)*a+170.cora-618
     4d0)*q*u+4.d0*((2.d0*a-1.d0)*a-54.d0)*f*x-8.d0*(5.d0*a+2.d0)*q*x**2cora-619
     5-(((152.d0*a+892.d0)*a+1380.d0)*a+664.d0)*x**2+(2.d0*a+3.d0)*(4.d0cora-620
     6*((20.d0*a+97.d0)*a+62.d0)*f*u*x+4.d0*(a-2.d0)*f*x**3+(a+1.d0)*(a+cora-621
     72.d0)*(((44.d0*a+36.d0)*u-4.d0*x**2)*x**2-((87.d0*a+67.d0)*a-70.d0cora-622
     8)*u**2)))                                                         cora-623
      b2=b2-12.d0*x*q*((28.d0*f*q+2.d0*((18.d0*a+83.d0)*a+56.d0)*f-(((34cora-624
     1.d0*a+217.d0)*a+341.d0)*a+166.d0)*x-4.d0*(3.d0*a+1.d0)*q*x)/(2.d0*cora-625
     2a+3.d0)+(((9.d0*a+58.d0)*a+44.d0)*u+2.d0*a*x**2)*f+(a+1.d0)*(a+2.dcora-626
     30)*(9.d0*(a+1.d0)*u-x**2)*x)                                      cora-627
      b3=b3+x*(((96.d0*(5.d0*a-3.d0)*q+4.d0*(((170.d0*a+1101.d0)*a+901.dcora-628
     10)*a+162.d0)-24.d0*((10.d0*a-5.d0)*a-2.d0)*f*x)*q*x-4.d0*((((22.d0cora-629
     2*a+543.d0)*a+629.d0)*a+510.d0)*u+168.d0*q)*f*q+(a+1.d0)*(4.d0*(((2cora-630
     36.d0*a-5.d0)*a+18.d0)*x**2-(((166.d0*a+627.d0)*a+1415.d0)*a+558.d0cora-631
     4)*u)*q*x+(2.d0*a+1.d0)*((96.d0*((6.d0*a+37.d0)*a+70.d0)-4.d0*((2.dcora-632
     50*a-105.d0)*a-498.d0)*x**2-8.d0*(((138.d0*a+751.d0)*a+1012.d0)*a-4cora-633
     620.d0)*u)*f+a*(4.d0*((38.d0*a+197.d0)*a+154.d0)*x**2-(((572.d0*a+2cora-634
     7362.d0)*a+960.d0)*a-40.d0)*u+8.d0*((90.d0*a+491.d0)*a+674.d0))*x))cora-635
     8)/(2.d0*a+3.d0)-24.d0*(17.d0*a+50.d0)*f*q+(a+1.d0)*(2.d0*a+1.d0)*(cora-636
     9(((373.d0*a+1411.d0)*a+544.d0)*a-420.d0)*f*u**2-4.d0*((23.d0*a+125cora-637
     a.d0)*a+54.d0)*f*u*x**2-4.d0*(a-6.d0)*f*x**4+a*(a+2.d0)*(((141.d0*acora-638
     b+199.d0)*a-22.d0)*u**2-(50.d0*a+48.d0)*u*x**2+4.d0*x**4)*x))      cora-639
      b4=b4+x*(((48.d0*((4.d0*a-4.d0)*a-1.d0)*f*x-8.d0*(((34.d0*a+225.d0cora-640
     1)*a-61.d0)*a-168.d0)-336.d0*(a-1.d0)*q)*q/(a+1.d0)+4.d0*((((82.d0*cora-641
     2a+315.d0)*a+902.d0)*a+396.d0)*u-a*(20.d0*a-26.d0)*x**2)*q+4.d0*(2.cora-642
     3d0*a+1.d0)*(((2.d0*a-105.d0)*a-498.d0)*f*x+a*((((104.d0*a+430.d0)*cora-643
     4a+171.d0)*a-10.d0)*u-2.d0*((90.d0*a+491.d0)*a+674.d0)-((38.d0*a+19cora-644
     57.d0)*a+154.d0)*x**2)))/(2.d0*a+3.d0)+(2.d0*a+1.d0)*(4.d0*((20.d0*cora-645
     6a+107.d0)*a+54.d0)*f*u*x+4.d0*(a-6.d0)*f*x**3+a*(a+2.d0)*(4.d0*(11cora-646
     7.d0*a+12.d0)*u*x**2-((87.d0*a+145.d0)*a-22.d0)*u**2-4.d0*x**4)))  cora-647
   38 if (lt) go to 45                                                  cora-648
      c(1)=b1-3.d0*q*(a+2.d0)*(((16.d0*((56.d0*a+62.d0)*a-177.d0)+48.d0*cora-649
     1q)*q-32.d0*a*(2.d0*a-1.d0)*(2.d0*a+5.d0)*(3.d0*a-7.d0))/(2.d0*a-3.cora-650
     2d0)+(4.d0*a*(((62.d0*a+159.d0)*a+29.d0)*a+70.d0)-4.d0*((97.d0*a+22cora-651
     39.d0)*a-6.d0)*q+35.d0*a*(a**2-1.d0)*(2.d0*a+3.d0)*(a+2.d0)*u)*u-4.cora-652
     4d0*(2.d0*a+5.d0)*((4.d0*(2.d0*a-1.d0)*(3.d0*a-7.d0)-92.d0*q+(2.d0*cora-653
     5a+3.d0)*((67.d0*a-17.d0)*a-14.d0)*u)*f-5.d0*(4.d0*((59.d0*a+59.d0)cora-654
     6*a-18.d0)*q-4.d0*a*(2.d0*a-1.d0)*(3.d0*a+1.d0)*(11.d0*a+14.d0)-(2*cora-655
     7a+3.d0)*(7.d0*a*(a**2-1.d0)*(a+2.d0)*u-6.d0*(2.d0*a-1.d0)*(((17.d0cora-656
     8*a+17.d0)*a+14.d0)*f+7.d0*a*(a**2-1.d0)*(a+2.d0)/w)/w))/w)/w)/w   cora-657
      c(2)=b3+(((96.d0*((12.d0*a+56.d0)*a+59.d0-q)-8.d0*(((188.d0*a+864.cora-658
     1d0)*a+889.d0)*a-18.d0)*u)*q+a*(a+1.d0)*(2.d0*a+1.d0)*(16.d0*((6.d0cora-659
     2*a+37.d0)*a+70.d0)*u+4.d0*(2.d0*a+3.d0)*((67.d0*a+136.d0)*a-140.d0cora-660
     3)*u**2))*f+3.d0*(a+2.d0)*(40.d0*((19.d0*a+46.d0)*q-((12.d0*a+32.d0cora-661
     4)*a+7.d0)*a-14.d0)*q-(a+1.d0)*(20.d0*(((132.d0*a+292.d0)*a-97.d0)*cora-662
     5a-42.d0)*q-a**2*(2.d0*a+1.d0)*(20.d0*((66.d0*a+127.d0)*a-98.d0)+35cora-663
     6.d0*(a-1.d0)*(2.d0*a+3.d0)*(a+2.d0)*u))*u+4.d0*(2.d0*a+5.d0)*(36.dcora-664
     70*((54.d0*a+37.d0)*a-10.d0)*q*f-(a+1.d0)*(a*(2.d0*a+1.d0)*(672.d0*cora-665
     8(2.d0*a-1.d0)+6.d0*(2.d0*a+3.d0)*(17.d0*a-14.d0)*u)*f-5.d0*(14.d0*cora-666
     9(((86.d0*a+55.d0)*a-3.d0)*a-18.d0)*q-a**2*(2.d0*a+1.d0)*(112.d0*(2cora-667
     a.d0*a-1.d0)*(3.d0*a+2.d0)+(2.d0*a+3.d0)*(7.d0*(a-1.d0)*(a+2.d0)*u-cora-668
     b6.d0*(2.d0*a-1.d0)*(24.d0*f+7.d0*(a-1.d0)*(a+2.d0)/w)/w)))/w))/w)/cora-669
     cw)/w                                                              cora-670
      c(3)=b2+12.d0*q*((8.d0*((12.d0*a+56.d0)*a+59.d0)-8.d0*q-(2.d0*a+3.cora-671
     1d0)*((32.d0*a+98.d0)*a-4.d0)*u)*f+5.d0*(a+2.d0)*((38.d0*a+92.d0)*qcora-672
     2-(((24.d0*a+64.d0)*a+14.d0)*a+28.d0)-(2.d0*a+3.d0)*(7.d0*(a**2-1.dcora-673
     30)*(a+2.d0)*u-6.d0*(2.d0*a+5.d0)*((10.d0*a-4.d0)*f+7.d0*(a**2-1.d0cora-674
     4)*(a+2.d0)/w)/w))/w)/w                                            cora-675
      c(4)=b4-3.d0*(((16.d0*(((56.d0*a+330.d0)*a+619.d0)*a+354.d0+(3.d0*cora-676
     1a-6.d0)*q)*q-(a+1.d0)*(4.d0*(((194.d0*a+935.d0)*a+1292.d0)*a-36.d0cora-677
     2)*q*u+a*(2.d0*a+1.d0)*(32.d0*((6.d0*a+37.d0)*a+70.d0)-4.d0*(((62.dcora-678
     30*a+349.d0)*a+524.d0)*a-140.d0)*u-35.d0*(a-1.d0)*(2.d0*a+3.d0)*(a+cora-679
     42.d0)**2*u**2))))/(2.d0*a+3.d0)+4.d0*(4.d0*((46.d0*a+213.d0)*a+230cora-680
     5.d0)*q*f-(a+1.d0)*((2.d0*a+1.d0)*((24.d0*a+148.d0)*a+280.d0+(2.d0*cora-681
     6a+3.d0)*((67.d0*a+136.d0)*a-140.d0)*u)*f-5.d0*(a+2.d0)*(4.d0*((118cora-682
     7.d0*a+257.d0)*a-90.d0)*q-4.d0*a*(2.d0*a+1.d0)*((66.d0*a+127.d0)*a-cora-683
     898.d0)-(2.d0*a+1.d0)*(2.d0*a+3.d0)*(7.d0*a*(a-1.d0)*(a+2.d0)*u-6.dcora-684
     90*(2.d0*a+5.d0)*((17.d0*a-14.d0)*f+7.d0*a*(a+2.d0)*(a-1.d0)/w)/w))cora-685
     a/w))/w)/w                                                         cora-686
      if (x.eq.0.d0) go to 45                                           cora-687
      c(1)=c(1)-q*x*(3.d0*a+6.d0)*(8.d0*((38.d0*a+167.d0)*a+171.d0-3.d0*cora-688
     1q)*f+4.d0*(((26.d0*a+145.d0)*a+231.d0)*a+106.d0)*x+(40.d0*a+64.d0)cora-689
     2*q*x+(2.d0*a+3.d0)*((8.d0*a+32.d0)*f*x**2-4.d0*((35.d0*a+101.d0)*acora-690
     3+6.d0)*f*u+4.d0*(a+1.d0)*(a+2.d0)*(x**3-(9.d0*a+4.d0)*u*x))-4.d0*(cora-691
     42.d0*a+5.d0)*((((44.d0*a+94.d0)*a-22.d0)*a+28.d0)-4.d0*(19.d0*a+44cora-692
     5.d0)*q-(2.d0*a+3.d0)*(4.d0*(3.d0*a+8.d0)*f*x+(a+1.d0)*(a+2.d0)*(2.cora-693
     6d0*x**2-(13.d0*a-7.d0)*u)+10.d0*(((11.d0*a+59.d0)*a-6.d0)*f+(a+1.dcora-694
     70)*(a+2.d0)*((a+3.d0)*x+(3.d0*a+21.d0)*(2.d0*a-1.d0)/w))/w))/w)/w cora-695
      c(2)=c(2)+x*(8.d0*(((196.d0*a+1104.d0)*a+1901.d0)*a+1026.d0+(15.d0cora-696
     1*a-18.d0)*q+12.d0*(5.d0*a+4.d0)*f*x)*q+(a+1.d0)*(32.d0*((4.d0*a+11cora-697
     2.d0)*a+18.d0)*q*x**2-8.d0*(((212.d0*a+966.d0)*a+1267.d0)*a+54.d0)*cora-698
     3q*u+(2.d0*a+1.d0)*(8.d0*((38.d0*a+213.d0)*a+318.d0)*f*x+4.d0*a*(((cora-699
     4(106.d0*a+599.d0)*a+912.d0)*a-140.d0)*u+((26.d0*a+107.d0)*a+46.d0)cora-700
     5*x**2-8.d0*((6.d0*a+37.d0)*a+70.d0))+(2.d0*a+3.d0)*(8.d0*(a+6.d0)*cora-701
     6f*x**3-4.d0*((47.d0*a+170.d0)*a+48.d0)*f*u*x+a*(a+2.d0)*(((87.d0*acora-702
     7+67.d0)*a-70.d0)*u**2-4.d0*(11.d0*a+9.d0)*u*x**2+4.d0*x**4))))+3.dcora-703
     80*(a+2.d0)*(32.d0*((24.d0*a+107.d0)*a+110.d0)*f*q+(a+1.d0)*(96.d0*cora-704
     9((4.d0*a+17.d0)*a+20.d0)*q*x-(8.d0*a+4.d0)*(2.d0*((6.d0*a+37.d0)*acora-705
     a+70.d0)*f+a*((22.d0*a+125.d0)*a+194.d0)*x+(2.d0*a+3.d0)*(((61.d0*acora-706
     b+143.d0)*a-70.d0)*f*u+a*(a+2.d0)*((9.d0*a+4.d0)*u-x**2)*x-(6.d0*a+cora-707
     c20.d0)*f*x**2))+(8.d0*a+20.d0)*(((532.d0*a+2246.d0)*a-180.d0)*q-(2cora-708
     d.d0*a+1.d0)*(4.d0*a*((66.d0*a+295.d0)*a-98.d0)-(2.d0*a+3.d0)*((22.cora-709
     ed0*a+60.d0)*f*x+a*(a+2.d0)*(2.d0*x**2-(13.d0*a-7.d0)*u)+10.d0*(((1cora-710
     f7.d0*a+93.d0)*a-42.d0)*f+a*(a+2.d0)*((a+3.d0)*x+3.d0*(a+7.d0)*(2.dcora-711
     g0*a-1.d0)/w))/w)))/w))/w)/w                                       cora-712
      c(3)=c(3)+12.d0*q*x*(2.d0*(((28.d0*a+148.d0)*a+221.d0)*a+106.d0)+(cora-713
     16.d0*a-4.d0)*q+(2.d0*a+3.d0)*((2.d0*a+12.d0)*f*x+(a+2.d0)*((a+1.d0cora-714
     2)*(2.d0*x**2-(13.d0*a+8.d0)*u)+5.d0*((10.d0*a+28.d0)*f+2.d0*(a+1.dcora-715
     30)*(a+2.d0)*(x+(6.d0*a+15.d0)/w))/w)))/w                          cora-716
      c(4)=c(4)+3.d0*x*((24.d0*(2.d0*a-1.d0)*(a-2.d0)*f*q-(4.d0*a+4.d0)*cora-717
     1(((20.d0*a+46.d0)*a+108.d0)*q*x+(2.d0*a+1.d0)*(((76.d0*a+426.d0)*acora-718
     2+636.d0)*f+a*((26.d0*a+107.d0)*a+46.d0)*x)))/(2.d0*a+3.d0)+(4.d0*acora-719
     3+4.d0)*((2.d0*a+1.d0)*((35.d0*a+130.d0)*a+48.d0)*f*u+(2.d0*a+1.d0)cora-720
     4*(a*(a+2.d0)*(9.d0*(a+1.d0)*u-x**2)*x-(2.d0*a+12.d0)*f*x**2)-(4.d0cora-721
     5*((38.d0*a+169.d0)*a+210.d0)*q-(2.d0*a+1.d0)*(a*((44.d0*a+250.d0)*cora-722
     6a+388.d0)-(2.d0*a+3.d0)*((12.d0*a+40.d0)*f*x-(a+2.d0)*(a*((13.d0*acora-723
     7+8.d0)*u-2.d0*x**2)-10.d0*((11.d0*a+30.d0)*f+a*(a+2.d0)*(x+(6.d0*acora-724
     8+15.d0)/w))/w))))/w))/w                                           cora-725
      go to 45                                                          cora-726
c multipole lq=5 l1=l2-5.                                               cora-727
   39 bd=181440.d0*den*s**2*dsqrt(q*((a+1.d0)**2+f**2)*((a+2.d0)**2+f**2cora-728
     1)*((a-1.d0)**2+e**2)*((a+3.d0)**2+f**2))*a**2                     cora-729
      b1=q*(2304.d0*a*(2.d0*a-1.d0)-6912.d0*q+864.d0*(9.d0*a+1.d0)*q*u-2cora-730
     188.d0*a*((22.d0*a+3.d0)*a+5.d0)*u+8.d0*a*(((530.d0*a+611.d0)*a+12.cora-731
     2d0)*a+72.d0)*u**2-8.d0*((602.d0*a+683.d0)*a-60.d0)*q*u**2+96.d0*a*cora-732
     3(a**2-1.d0)*(2.d0*a+5.d0)*(2.d0*a+3.d0)*u**3)                     cora-733
      b2=24.d0*q*f*(288.d0-(204.d0*a+36.d0)*u+((89.d0*a+141.d0)*a-20.d0)cora-734
     1*u**2)                                                            cora-735
      b3=12.d0*f*(q*(576.d0-24.d0*(37.d0*a+3.d0)*u+((718.d0*a+582.d0)*a-cora-736
     140.d0)*u**2)+a*(a+1.d0)*(2.d0*a+1.d0)*u*(96.d0-(148.d0*a+12.d0)*u-cora-737
     2((137.d0*a+148.d0)*a-180.d0)*u**2))                               cora-738
      b4=q*(864.d0*(9.d0*a+1.d0)*u-6912.d0-8.d0*(602.d0*a**2+613.d0*a-60cora-739
     1.d0)*u**2)+a*(2.d0*a+1.d0)*(2304.d0-288.d0*(11.d0*a-1.d0)*u+8.d0*(cora-740
     2(265.d0*a+174.d0)*a-54.d0)*u**2+48.d0*(2.d0*a+3.d0)*(2.d0*a+5.d0)*cora-741
     3(a-1.d0)*u**3)                                                    cora-742
      if (x.eq.0.d0) go to 40                                           cora-743
      b1=b1+x*q*((1176.d0*f*u+((2040.d0*a+2616.d0)*u-1200.d0-48.d0*x**2)cora-744
     1*x)*q+(((2944.d0*a+4432.d0)*a+912.d0)*x+8.d0*((794.d0*a+1535.d0)*acora-745
     2+222.d0)*f)*u-(16.d0*((94.d0*a+385.d0)*a+216.d0)+((368.d0*a+1016.dcora-746
     30)*a+600.d0)*x**2)*x+(2*a+3.d0)*((((608.d0*a+632.d0)*u-600.d0-24.dcora-747
     40*x**2)*x**2-3456.d0-((1950.d0*a+2614.d0)*a-140.d0)*u**2)*f+(a+1.dcora-748
     50)*((120.d0*a+152.d0)*u*x**3-((414.d0*a+798.d0)*a+20.d0)*u**2*x-8.cora-749
     6d0*x**5)))                                                        cora-750
      b2=b2+x*q*(1200.d0*f*x-1176.d0*q*u-24.d0*((33.d0*a+120.d0)*a+38.d0cora-751
     1)*u-24.d0*(53.d0*a+60.d0)*f*u*x+48.d0*f*x**3+(a+1.d0)*(3456.d0+((7cora-752
     238.d0*a+1722.d0)*a+60.d0)*u**2+24.d0*(25.d0-(13.d0*a+19.d0)*u+x**2cora-753
     3)*x**2))                                                          cora-754
      b3=b3+x*((1200.d0*f*x-24.d0*((597.d0*a+720.d0)*a+74.d0)*u-1176.d0*cora-755
     1q*u-(2808.d0*a+2616.d0)*f*u*x+48.d0*f*x**3)*q+(a+1.d0)*((10368.d0-cora-756
     224.d0*(113.d0*a+79.d0)*u*x**2+(72.d0*x**2+1800.d0)*x**2+((11782.d0cora-757
     3*a+10730.d0)*a-420.d0)*u**2)*q+(2*a+1.d0)*((((3090.d0*a+3898.d0)*acora-758
     4+60.d0)*u**2+3456.d0+600.d0*x**2-304.d0*(14.d0*a+3.d0)*u-(680.d0*acora-759
     5+456.d0)*u*x**2+24.d0*x**4)*f*x+a*(((8.d0*x**2+184.d0)*x**2+752.d0cora-760
     6)*x**2-2304.d0-((3.d0*(((187.d0*a+479.d0)*a-6.d0)*a-240.d0)*u+4.d0cora-761
     7*((1175.d0*a+624.d0)*a-108.d0))*u-96.d0*(55.d0*a-3.d0))*u+(((570.dcora-762
     80*a+1278.d0)*a+356.d0)*u-60.d0*a-440.d0-44.d0*(3.d0*a+4.d0)*x**2)*cora-763
     9u*x**2))))                                                        cora-764
      b4=b4+x*((1176.d0*f*u-1200.d0*x+120.d0*(17.d0*a+12.d0)*u*x-48.d0*xcora-765
     1**3)*q+(2.d0*a+1.d0)*((8.d0*(397.d0*a+114.d0)*u-3456.d0-10.d0*((19cora-766
     25.d0*a+289.d0)*a+6.d0)*u**2-600.d0*x**2+8.d0*(76.d0*a+57.d0)*u*x**cora-767
     32-24.d0*x**4)*f+a*x*(440.d0*u-752.d0-((414.d0*a+1050.d0)*a+356.d0)cora-768
     4*u**2-184.d0*x**2+8.d0*(15.d0*a+22.d0)*u*x**2-8.d0*x**4)))        cora-769
   40 if (lt) go to 45                                                  cora-770
      c(1)=b1+24.d0*q*((60.d0*((9.d0*a+5.d0)*u-8.d0)*q+96.d0*(a-1.d0)*(2cora-771
     1.d0*a-1.d0)-4.d0*(((74.d0*a+15.d0)*a+28.d0)*a+3.d0)*u-(2.d0*a+3.d0cora-772
     2)*(a+2.d0)*((137.d0*a-37.d0)*a-30.d0)*u**2)*f+4.d0*(30.d0*((8.d0*acora-773
     3-6.d0)*a+5.d0-7.d0*q)*q+(a+2.d0)*(5.d0*((128.d0*a+80.d0)*a-33.d0)*cora-774
     4q-a*(((676.d0*a+544.d0)*a-201.d0)*a-144.d0))*u-(6.d0*a-6.d0)*((2.dcora-775
     50*a-1.d0)*(4.d0*a-6.d0)*a+(a+1.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*a*(cora-776
     6a+2.d0)*u**2)+5.d0*((12.d0*(2.d0*a-1.d0)*(((50.d0*a+153.d0)*a+136.cora-777
     7d0)*a+39.d0)-84.d0*((10.d0*a+19.d0)*a+3.d0)*q)*f+(a+2.d0)*((2.d0*acora-778
     8+3.d0)*(2.d0*a+5.d0)*((37.d0*a-17.d0)*a-6.d0)*u*f+6.d0*(a*(2.d0*a-cora-779
     91.d0)*(((236.d0*a+648.d0)*a+625.d0)*a+66.d0)-3.d0*(((140.d0*a+294.cora-780
     ad0)*a+196.d0)*a-105.d0)*q+(2.d0*a+3.d0)*(2.d0*a+5.d0)*(a*(a**2-1.dcora-781
     b0)*(2.d0*a+6.d0)*u-(14.d0*a-7.d0)*(((7.d0*a+5.d0)*a+6.d0)*f+a*(a**cora-782
     c2-1.d0)*(2.d0*a+6.d0)/w)/w))/w))/w)/w)/w                          cora-783
      c(2)=b3+8.d0*((1440.d0*q-288.d0*(4.d0*a**2+1.d0)+12.d0*(((168.d0*acora-784
     1+132.d0)*a+62.d0)*a+3.d0)*u-30.d0*(68.d0*a+30.d0)*q*u)*q+(a+1.d0)*cora-785
     2(8.d0*a+12.d0)*(((338.d0*a-83.d0)*a-45.d0)*q*u-(2.d0*a+1.d0)*a**2*cora-786
     3(12.d0+(169.d0*a-99.d0)*u+(a-1.d0)*(6.d0*a+15.d0)*u**2))*u+3.d0*((cora-787
     4(840.d0*q-120.d0*(4.d0*a**2+5.d0))*q-(2.d0*a+3.d0)*(40.d0*((65.d0*cora-788
     5a+30.d0)*a-11.d0)*q-5.d0*a*(2.d0*a+1.d0)*(a+1.d0)*(12.d0*(25.d0*a-cora-789
     613.d0)+(a+2.d0)*(37.d0*a-30.d0)*u))*u)*f+4.d0*((630.d0*((10.d0*a+1cora-790
     75.d0)*a+2.d0)*q-90.d0*((((200.d0*a+420.d0)*a+162.d0)*a-63.d0)*a-26cora-791
     8.d0))*q+(2.d0*a+3.d0)*((a+1.d0)*(1512.d0*(4.d0*a**2-1.d0)*a**2-(a+cora-792
     92.d0)*(30.d0*((44.d0*a-18.d0)*a-5.d0)*q-6.d0*a**2*(2.d0*a+1.d0)*(1cora-793
     a18.d0*a-83.d0+(a-1.d0)*(2.d0*a+5.d0)*u))*u)+5.d0*(42.d0*(((70.d0*acora-794
     b+129.d0)*a+53.d0)*a-30.d0)*q*f-(a+1.d0)*(a*(2.d0*a+1.d0)*(252.d0*(cora-795
     c2.d0*a-1.d0)*(4.d0*a+5.d0)+7.d0*(a+2.d0)*(2.d0*a+5.d0)*(7.d0*a-6.dcora-796
     d0)*u)*f-6.d0*(a+2.d0)*(14.d0*(((56.d0*a+36.d0)*a+4.d0)*a-15.d0)*q-cora-797
     ea**2*(2.d0*a+1.d0)*((4.d0*a+3.d0)*54.d0*(2.d0*a-1.d0)+(2.d0*a+5.d0cora-798
     f)*((a-1.d0)*(2.d0*a+6.d0)*u-7.d0*(2.d0*a-1.d0)*(9.d0*f+(a-1.d0)*(2cora-799
     g.d0*a+6.d0)/w)/w)))/w))/w))/w)/w)/w                               cora-800
      c(3)=b2+96.d0*q*((120.d0-25.d0*(4.d0*a+3.d0)*u)*q-24.d0*(4.d0*a**2cora-801
     1+1.d0)+((((88.d0*a+72.d0)*a+12.d0)*a+3.d0)+3.d0*(a**2-1.d0)*(2.d0*cora-802
     2a+3.d0)*(2.d0*a+5.d0)*u)*u+5.d0*((42.d0*q-(24.d0*a**2+30.d0))*f-(acora-803
     3+2.d0)*((2.d0*a+3.d0)*(25.d0*a-11.d0)*u*f-6.d0*(21.d0*(4.d0*a+1.d0cora-804
     4)*q-3.d0*(((32.d0*a+20.d0)*a-4.d0)*a-13.d0)-(2.d0*a+3.d0)*(2.d0*a+cora-805
     55.d0)*((a**2-1.d0)*u-7.d0*((5.d0*a-3.d0)*f+(a**2-1.d0)*(2.d0*a+6.dcora-806
     60)/w)/w))/w))/w)/w                                                cora-807
      c(4)=b4+24.d0*((60.d0*((9.d0*a+5.d0)*u-8.d0)*q+(a+1.d0)*(2.d0*a+1.cora-808
     1d0)*(96.d0-4.d0*(37.d0*a+3.d0)*u-((137.d0*a+148.d0)*a-180.d0)*u**2cora-809
     2))*f+4.d0*((30.d0*((8.d0*a+6.d0)*a+5.d0)-210.d0*q)*q+(2.d0*a+3.d0)cora-810
     3*((a+1.d0)*(10.d0*(32.d0*a-11.d0)*q*u-(2.d0*a+1.d0)*(a*(12.d0+(169cora-811
     4.d0*a-99.d0)*u)+3.d0*(a-1.d0)*(2.d0*a+5.d0)*a*u**2))-5.d0*(84.d0*(cora-812
     55.d0*a+1.d0)*q*f-(a+1.d0)*((2.d0*a+1.d0)*(12.d0*(25.d0*a-13.d0)+(acora-813
     6+2.d0)*(37.d0*a-30.d0)*u)*f-6.d0*(a+2.d0)*(105.d0*(2.d0*a-1.d0)*q-cora-814
     7(2.d0*a+1.d0)*((118.d0*a-83.d0)*a+(2.d0*a+5.d0)*(a*(a-1.d0)*u-7.d0cora-815
     8*((7.d0*a-6.d0)*f+a*(a-1.d0)*(2.d0*a+6.d0)/w)/w)))/w))/w))/w)/w   cora-816
      if (x.eq.0.d0) go to 45                                           cora-817
      c(1)=c(1)-q*x*(720.d0*(((6.d0*a+23.d0)*a+19.d0)+q)*f*x+(a+2.d0)*(7cora-818
     120.d0*q*x**2-384.d0*((22.d0*a-5.d0)*a+3.d0)+11520.d0*q+24.d0*(((43cora-819
     20.d0*a+255.d0)*a+29.d0)*a+6.d0)*u-72.d0*(173.d0*a+107.d0)*q*u+120.cora-820
     3d0*((2.d0*a+17.d0)*a+9.d0)*x**2+(2.d0*a+3.d0)*(144.d0*f*x**3-24.d0cora-821
     4*(95.d0*a+71.d0)*f*u*x+(a+1.d0)*(6.d0*((123.d0*a+137.d0)*a-120.d0)cora-822
     5*u**2-24.d0*(13.d0*a+14.d0)*u*x**2+24.d0*x**4)))-24.d0*((2.d0*a+5.cora-823
     6d0)*((20.d0*((10.d0*a-7.d0)*a+9.d0)-420.d0*q)*f+(a+2.d0)*((10.d0*(cora-824
     7(14.d0*a-1.d0)*a+3.d0)-180.d0*q)*x+(2.d0*a+3.d0)*((199.d0*a-31.d0)cora-825
     8*f*u-20.d0*f*x**2+(a+1.d0)*((21.d0*a+13.d0)*u-2.d0*x**2)*x)))+5.d0cora-826
     9*(a+2.d0)*(4*((((220.d0*a+1340.d0)*a+973.d0)*a+123.d0)*a-234.d0)-8cora-827
     a4.d0*((10.d0*a+55.d0)*a+21.d0)*q+(2.d0*a+3.d0)*(2.d0*a+5.d0)*((a+1cora-828
     b.d0)*(a+3.d0)*((15.d0*a-8.d0)*u-2.d0*x**2)-30.d0*(a+3.d0)*f*x-6.d0cora-829
     c*(21.d0*((2.d0*a+13.d0)*a-3.d0)*f+(a+1.d0)*(a+3.d0)*((2.d0*a+7.d0)cora-830
     d*x+(14.d0*a-7.d0)*(a+8.d0)/w))/w))/w)/w)/w                        cora-831
      c(2)=c(2)+x*(720.d0*((12.d0*a+32.d0)*a+19.d0+q)*q*x+(2.d0*a+3.d0)*cora-832
     1((7680.d0+480.d0*x**2-48.d0*(222.d0*a+107.d0)*u)*f*q+(a+1.d0)*((28cora-833
     28.d0*x**2-48.d0*(127.d0*a+71.d0)*u)*q*x+(2.d0*a+1.d0)*(((48.d0*x**cora-834
     32+720.d0)*x**2-768.d0+(32.d0*(62.d0*a+3.d0)+16.d0*((168.d0*a+139.dcora-835
     40)*a-90.d0)*u-(920.d0*a+672.d0)*x**2)*u)*f+a*x*((8.d0*x**2+40.d0-(cora-836
     5120.d0*a+152.d0)*u)*x**2+((414.d0*a+798.d0)*a+20.d0)*u**2-1408.d0+cora-837
     6(2280.d0*a+736.d0)*u))))+6.d0*((a+2.d0)*((4200.d0*q-200.d0*((20.d0cora-838
     7*a+8.d0)*a+9.d0))*q+(2.d0*a+3.d0)*(1200.d0*f*q*x+(a+1.d0)*((400.d0cora-839
     8*x**2-(4960.d0*a-620.d0)*u)*q+(2.d0*a+1.d0)*((40.d0*x**2-200.d0-(5cora-840
     948.d0*a+260.d0)*u)*f*x+a*((((123.d0*a+137.d0)*a-120.d0)*u+(2452.d0cora-841
     a*a-792.d0))*u+96.d0+4.d0*x**2*(x**2-35.d0-(13.d0*a+14.d0)*u))))))+cora-842
     b(8.d0*a+12.d0)*(420.d0*((10.d0*a+45.d0)*a+14.d0)*f*q-(a+1.d0)*(240cora-843
     c.d0*(2.d0*a+1.d0)*((10.d0*a+45.d0)*a-13.d0)*f-(a+2.d0)*(450.d0*(2.cora-844
     dd0*a+5.d0)*q*x+(2.d0*a+1.d0)*(2.d0*a+5.d0)*(30.d0*f*x**2-(274.d0*acora-845
     e-120.d0)*f*u+a*x*(2.d0*x**2-220.d0-(21.d0*a+13.d0)*u))+5.d0*(42.d0cora-846
     f*((42.d0*a+231.d0)*a-45.d0)*q-(2.d0*a+1.d0)*(8.d0*a*((118.d0*a+649cora-847
     g.d0)*a-249.d0)+(a+3.d0)*(2.d0*a+5.d0)*(a*(15.d0*a-8.d0)*u-42.d0*f*cora-848
     hx-2.d0*a*x**2))+(12.d0*a+6.d0)*(2.d0*a+5.d0)*(28.d0*((2.d0*a+13.d0cora-849
     i)*a-6.d0)*f+a*(a+3.d0)*((2.d0*a+7.d0)*x+(14.d0*a-7.d0)*(a+8.d0)/w)cora-850
     j)/w)/w)))/w)/w)/w                                                 cora-851
      c(3)=c(3)+24.d0*x*q*((30.d0*q+10.d0*((4.d0*a+16.d0)*a+9.d0))*x+(2.cora-852
     1d0*a+3.d0)*((160.d0-(124.d0*a+114.d0)*u+10.d0*x**2)*f+(a+1.d0)*(2.cora-853
     2d0*x**2-(21.d0*a+28.d0)*u)*x)+(5.d0*a+10.d0)*(126.d0*q-2.d0*((52.dcora-854
     30*a+4.d0)*a+15.d0)+(2.d0*a+3.d0)*(18.d0*f*x+(a+1.d0)*(2.d0*x**2-(1cora-855
     45.d0*a+13.d0)*u))+(12.d0*a+18.d0)*(2.d0*a+5.d0)*(14.d0*f+(a+1.d0)*cora-856
     5(x+(7.d0*a+21.d0)/w))/w)/w)/w                                     cora-857
      c(4)=c(4)-x*(720.d0*f*q*x+(a+1.d0)*((11520.d0+720.d0*x**2-72.d0*(1cora-858
     173.d0*a+114.d0)*u)*q-(2.d0*a+1.d0)*((24.d0*(95.d0*a+84.d0)*u-2160.cora-859
     2d0-144.d0*x**2)*f*x+a*(4224.d0-24.d0*(215.d0*a+92.d0)*u-6.d0*((123cora-860
     3.d0*a+287.d0)*a+10.d0)*u**2-120.d0*x**2+24.d0*(13.d0*a+19.d0)*u*x*cora-861
     4*2-24.d0*x**4)))+24.d0*(2.d0*a+3.d0)*(420.d0*f*q+(a+1.d0)*(180.d0*cora-862
     5q*x-7.d0*a*(2.d0*a+1.d0)*(3.d0*a+4.d0)*u*x-(2.d0*a+1.d0)*((100.d0+cora-863
     6(199.d0*a+130.d0)*u-20.d0*x**2)*f+a*x*(70.d0-2.d0*x**2))+5.d0*(a+2cora-864
     7.d0)*(420.d0*q+(2.d0*a+1.d0)*(30.d0*f*x+a*(2.d0*x**2-220.d0-(15.d0cora-865
     8*a+13.d0)*u)+6.d0*(2.d0*a+5.d0)*(21.d0*f+a*(x+(7.d0*a+21.d0)/w))/wcora-866
     9))/w))/w)/w                                                       cora-867
      go to 45                                                          cora-868
   41 if ((x.ne.0.d0).or.(mod(ll,2).ne.1).or.(ll.eq.7)) go to 72        cora-869
      go to ( 42 , 71 , 43 , 71 , 44 , 71 , 71 ) , ll                   cora-870
c multipole lq=6 l1=l2.                                                 cora-871
   42 bd=120.d0*den*a**2*(2.d0*a+7.d0)*(2.d0*a+5.d0)*(a+2.d0)*(a+3.d0)*(cora-872
     1a+4.d0)*dsqrt(s*q*p*((a+1.d0)**2+f**2)*((a+1.d0)**2+e**2))*s**2   cora-873
      b1=p*q*((8.d0*(((154.d0*a-205.d0)*a-376.d0)*a-140.d0+((47.d0*a-282cora-874
     1.d0)*a-143.d0-63.d0*q)*q)+4.d0*((((47.d0*a+26.d0)*a-553.d0)*a-752.cora-875
     2d0)*a-280.d0-((79.d0*a+282.d0)*a+143.d0)*q)*u)/(a-1.d0)+2.d0*(2.d0cora-876
     3*a+7.d0)*(2.d0*a+5.d0)*(a+1.d0)**2*u**2)                          cora-877
      b2=(240.d0*(2.d0*a+1.d0)**2*(a-14.d0)+24.d0*((20.d0*a-336.d0)*a-14cora-878
     13.d0)*q-1512.d0*q**2-6.d0*((((36.d0*a+836.d0)*a+2797.d0)*a+2374.d0cora-879
     2)*a+560.d0+(((18.d0*a+275.d0)*a+726.d0)*a+286.d0)*q+(a+1.d0)*(((26cora-880
     3.d0*a+146.d0)*a+210.d0)*a+35.d0)*u)*u)/(2.d0*a+3.d0)              cora-881
      b3=p*f*(b2+a*(2.d0*a+4.d0)*u*(54.d0*q+6.d0*(38.d0*a+29.d0)+3.d0*(acora-882
     1+1.d0)*(9.d0*a+29.d0)*u))                                         cora-883
      b2=q*f*b2                                                         cora-884
      b4=(((((((32.d0*a-216.d0)*a-1692.d0)*a-2272.d0)*a+454.d0)*a+1402.dcora-885
     10)*a+210.d0)*q*u**2+(2.d0*a-3.d0)*((16.d0*a+8.d0)*((107.d0*a-444.dcora-886
     20)*a-140.d0)+8.d0*((((47.d0*a-176.d0)*a-924.d0)*a-724.d0)*a-140.d0cora-887
     3)*u+(8.d0*((47.d0*a-390.d0)*a-143.d0)-4.d0*((142.d0*a+390.d0)*a+14cora-888
     43.d0)*u-504.d0*q)*q)*q+a**2*(2.d0*a+1.d0)*(480.d0*(2.d0*a+1.d0)*(acora-889
     5-14.d0)+(4.d0*(((214.d0*a-849.d0)*a-3808.d0)*a-2100.d0)+((((204.d0cora-890
     6*a+752.d0)*a-232.d0)*a-2550.d0)*a-1680.d0)*u)*u))/((a+1.d0)*(2.d0*cora-891
     7a+3.d0))+a**2*(2.d0*a+5.d0)*(2.d0*a+7.d0)*(2.d0*a+1.d0)*(a+1.d0)*ucora-892
     8**3                                                               cora-893
      if (lt) go to 45                                                  cora-894
      c(1)=b1+12.d0*p*q*(a+2.d0)*((58.d0+76.d0*a+18.d0*q+(a+1.d0)*(9.d0*cora-895
     1a+29.d0)*u)*f-(2.d0*a+5.d0)*((28.d0*a+32.d0)*a+14.d0+(4.d0*a-6.d0)cora-896
     2*q+(a+1.d0)*((a+1.d0)*(2.d0*a+7.d0)*u+10.d0*(a+3.d0)*(2.d0*f-(a+1.cora-897
     3d0)*(2.d0*a+7.d0)/w)/w))/w)/w                                     cora-898
      c(2)=b3-2.d0*p*(2.d0*a*((((48.d0*a+16.d0)*a-570.d0)*a-703.d0)*a-21cora-899
     10.d0)*u+(2.d0*a-3.d0)*((((4.d0*a-34.d0)*a-172.d0)*a-116.d0)*u+8.d0cora-900
     2*((5.d0*a-48.d0)*a-29.d0)-72.d0*q)*q-a*(2.d0*a+1.d0)*(40.d0*(2.d0*cora-901
     3a+1.d0)*(14.d0-a)-(2.d0*a+7.d0)*(2.d0*a+5.d0)*(a+1.d0)**2*u**2)-6.cora-902
     4d0*(a+2.d0)*(5.d0*((14.d0-a)*(2.d0*a+1.d0)**2-(a-2.d0)*(2.d0*a-3.dcora-903
     50)*q-(a+1.d0)*(2.d0*a+1.d0)*((a+1.d0)*a-7.d0)*u)*f+(2.d0*a+5.d0)*(cora-904
     6(((4.d0*a+6.d0)*a+92.d0)*a+60.d0)*q+(2.d0*a+1.d0)*((a-14.d0)*a*(4.cora-905
     7d0*a+2.d0)+(a+1.d0)*(a*(a+1.d0)*(2.d0*a+7.d0)*u-10.d0*(a+3.d0)*(7.cora-906
     8d0*f+(2.d0*a+7.d0)*a*(a+1.d0)/w)/w)))/w)/w)/w                     cora-907
      c(3)=b2+2.d0*q*(a*((((16.d0*a+600.d0)*a+2332.d0)*a+2298.d0)*a+700.cora-908
     1d0)*u+(2.d0*a-3.d0)*((((4.d0*a+70.d0)*a+212.d0)*a+116.d0)*u-8.d0*(cora-909
     2(5.d0*a-48.d0)*a-29.d0)+72.d0*q)*q+40.d0*(2.d0*a+1.d0)**2*a*(14.d0cora-910
     3-a)+3.d0*a*(2.d0*a+5.d0)*(2.d0*a+7.d0)*(a+1.d0)**2*u**2+6.d0*(a+2.cora-911
     4d0)*(5.d0*((14.d0-a)*(2.d0*a+1.d0)**2-(a-2.d0)*(2.d0*a-3.d0)*q+(a+cora-912
     51.d0)*((8.d0*a+28.d0)*a+7.d0)*u)*f+(2.d0*a+5.d0)*((((4.d0*a+6.d0)*cora-913
     6a+92.d0)*a+60.d0)*q+2.d0*(a-14.d0)*a*(2.d0*a+1.d0)**2-5.d0*a*(a+1.cora-914
     7d0)**2*(2.d0*a+7.d0)*u-10.d0*(a+3.d0)*(a+1.d0)*(2.d0*a+1.d0)*(7.d0cora-915
     8*f+(2.d0*a+7.d0)*a*(a+1.d0)/w)/w)/w)/w)/w                         cora-916
      c(4)=b4+6.d0*(2.d0*f*((2.d0*a-3.d0)*(a-2.d0)*(((18.d0*a+58.d0)*a+2cora-917
     19.d0)*u+58.d0*(2.d0*a+1.d0)+18.d0*q)*q+a*(2.d0*a+1.d0)*(40.d0*(2.dcora-918
     20*a+1.d0)*(a-14.d0)+(((58.d0*a-123.d0)*a-906.d0)*a-560.d0)*u+(a+1.cora-919
     3d0)*(((9.d0*a+43.d0)*a+34.d0)*a-35.d0)*u**2))/(2.d0*a+3.d0)-((((((cora-920
     416.d0*a**2+60.d0)*a+820.d0)*a+794.d0)*a+140.d0)*u+4.d0*(2.d0*a-3.dcora-921
     50)*(2.d0*a-5.d0)*(a-2.d0)*q)*q-(2.d0*a+1.d0)*(a**2*(40.d0*(14.d0-acora-922
     6)*(2.d0*a+1.d0)-(a+1.d0)**2*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u**2)-4.d0cora-923
     7*(((24.d0*a-44.d0)*a+257.d0)*a+70.d0)*q-(((48.d0*a-8.d0)*a-566.d0)cora-924
     8*a-420.d0)*a**2*u+10.d0*(a+2.d0)*(4.d0*((14.d0-a)*(2.d0*a+1.d0)*a-cora-925
     9((2.d0*a+2.d0)*a+15.d0)*q-a*(a+1.d0)*((a+1.d0)*a-7.d0)*u)*f+(2.d0*cora-926
     aa+5.d0)*(2.d0*(a-14.d0)*(2.d0*a+1.d0)*a**2+2.d0*(((2.d0*a+9.d0)*a+cora-927
     b43.d0)*a+21.d0)*q+a*(a+1.d0)*(a*(a+1.d0)*(2.d0*a+7.d0)*u+(4.d0*a+2cora-928
     c.d0)*(a+3.d0)*((a+7.d0)*2.d0*f+(2.d0*a+7.d0)*a*(a+1.d0)/w)/w))/w)/cora-929
     dw))/w)/w                                                          cora-930
      go to 45                                                          cora-931
c multipole lq=6 l1=l2-2.                                               cora-932
   43 bd=2520.d0*den*a**2*(2.d0*a+5.d0)*(2.d0*a+7.d0)*(a+2.d0)*(a+3.d0)*cora-933
     1(a+4.d0)*s*dsqrt(s*q*p*((a+1.d0)**2+f**2)*((a+2.d0)**2+f**2))     cora-934
      b1=2*p*q*(120.d0*((((2.d0*a+57.d0)*a-117.d0)*a-306.d0)*a-140.d0+((cora-935
     111.d0*a-129.d0)*a-113.d0-21.d0*q)*q)/(a-1.d0)-((((74.d0*a-865.d0)*cora-936
     2a-5208.d0)*a-7344.d0)*a-3360.d0)*u+((266.d0*a+863.d0)*a+312.d0)*q*cora-937
     3u-3.d0*(a+1.d0)*(a+2.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)cora-938
     4*u**2)                                                            cora-939
      b2=6.d0*q*f*((120.d0*((2.d0*a-147.d0)*a-113.d0-21.d0*q)*q+60.d0*((cora-940
     1((4.d0*a-56.d0)*a-261.d0)*a-259.d0)*a-56.d0)*u+(((86.d0*a-573.d0)*cora-941
     2a-2171.d0)*a-312.d0)*q*u-16800.d0*(a+1.d0)*(2.d0*a+1.d0))/(2.d0*a+cora-942
     33.d0)+(a+2.d0)*(((43.d0*a+193.d0)*a+210.d0)*a+105.d0)*u**2)       cora-943
      b3=3*p*((240.d0*((2.d0*a-147.d0)*a-113.d0-21.d0*q)*q+40.d0*(a+1.d0cora-944
     1)*(2.d0*a+1.d0)*(((2.d0*a+63.d0)*a+69.d0)*a-168.d0)*u+(((892.d0*a+cora-945
     21374.d0)*a-2182.d0)*a-624.d0)*q*u-33600.d0*(a+1.d0)*(2.d0*a+1.d0))cora-946
     3/(2.d0*a+3.d0)-(a+1.d0)*(a+2.d0)*(2.d0*a+1.d0)*((19.d0*a-6.d0)*a-2cora-947
     410.d0)*u**2)*f                                                    cora-948
      b4=(((2.d0*a-3.d0)*(240.d0*((((2.d0*a+69.d0)*a-369.d0)*a-534.d0)*acora-949
     1-140.d0+((11.d0*a-165.d0)*a-113.d0-21.d0*q)*q)*q+((((532.d0*a-1326cora-950
     2.d0)*a-5422.d0)*a-624.d0)*q-((((148.d0*a-4110.d0)*a+4130.d0)*a+451cora-951
     320.d0)*a+40512.d0)*a-6720.d0)*q*u)/(a+1.d0)+240.d0*a**2*(2.d0*a+1.cora-952
     4d0)*((a+2.d0)*((2.d0*a+59.d0)*a-189.d0)*u-840.d0))/(2.d0*a+3.d0)-(cora-953
     52.d0*(((((24.d0*a-26.d0)*a+317.d0)*a+2298.d0)*a+2001.d0)*a+630.d0)cora-954
     6*q+a**2*(2.d0*a+1.d0)*(((74.d0*a-1068.d0)*a-4812.d0)*a-3360.d0+3*(cora-955
     7a+2.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u))*u**2)       cora-956
      if (lt) go to 45                                                  cora-957
      c(1)=b1+6.d0*p*q*(a+2.d0)*((360.d0*q+40.d0*((2.d0*a+53.d0)*a+57.d0cora-958
     1)-(2.d0*a+3.d0)*((19.d0*a+37.d0)*a-72.d0)*u)*f-(4.d0*a+10.d0)*(20.cora-959
     2d0*(2.d0*a-3.d0)*q+10.d0*(((2.d0*a+45.d0)*a+75.d0)*a+42.d0)-(a+1.dcora-960
     30)*(a+2.d0)*(6.d0*a+9.d0)*(2.d0*a+7.d0)*u+(a+3.d0)*(20.d0*a+30.d0)cora-961
     4*((a+16.d0)*f+(a+2.d0)*(6.d0*a+21.d0)*(a+1.d0)/w)/w)/w)/w         cora-962
      c(2)=b3+2.d0*p*((2.d0*a-3.d0)*(240.d0*(3.d0*q-(a-21.d0)*a+19.d0)-(cora-963
     1a+1.d0)*((116.d0*a+166.d0)*a-432.d0)*u)*q+a*(a+1.d0)*(2.d0*a+1.d0)cora-964
     2*(16800.d0-(20.d0*(((2.d0*a+63.d0)*a+174.d0)*a+42.d0)-(a+2.d0)*(6.cora-965
     3d0*a+9.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u)*u)-(3.d0*a+6.d0)*((20.d0cora-966
     4*(a-2.d0)*(2.d0*a-3.d0)*q-(a+1.d0)*(2.d0*a+1.d0)*(840.d0-(2.d0*a+3cora-967
     5.d0)*((a+30.d0)*a+84.d0)*u))*5.d0*f-(4.d0*a+10.d0)*(a+1.d0)*(30.d0cora-968
     6*((2.d0*a+7.d0)*a+48.d0)*q-(2.d0*a+1.d0)*(a*(840.d0+(3.d0*a+6.d0)*cora-969
     7(2.d0*a+3.d0)*(2.d0*a+7.d0)*u)-(a+3.d0)*(20.d0*a+30.d0)*((7.d0*a+4cora-970
     82.d0)*f+a*(a+2.d0)*(6.d0*a+21.d0)/w)/w))/w)/w)/w                  cora-971
      c(3)=b2+6.d0*q*((2.d0*a-3.d0)*(80.d0*(3.d0*q-(a-21.d0)*a+19.d0)-((cora-972
     1(12.d0*a-26.d0)*a-222.d0)*a-144.d0)*u)*q-40.d0*a*((((4.d0*a-6.d0)*cora-973
     2a-90.d0)*a-138.d0)*a-63.d0)*u+a*(a+1.d0)*(5600.d0*(2.d0*a+1.d0)-3.cora-974
     3d0*(a+2.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u**2)+10.d0*cora-975
     4(a+2.d0)*((420.d0*(a+1.d0)*(2.d0*a+1.d0)-10.d0*(a-2.d0)*(2.d0*a-3.cora-976
     5d0)*q-(2.d0*a+3.d0)*(((10.d0*a+34.d0)*a+21.d0)*a+42.d0)*u)*f+(6.d0cora-977
     6*a+15.d0)*((a+1.d0)*(((4.d0*a+14.d0)*a+96.d0)*q+a*((a+2.d0)*(2.d0*cora-978
     7a+3.d0)*(2.d0*a+7.d0)*u-56.d0*(2.d0*a+1.d0)))-14.d0*(a+3.d0)*(2.d0cora-979
     7*a+3.d0)*((3.d0*a-2.d0)*f+a*(a+2.d0)*(2.d0*a+7.d0)*(a+1.d0)/w)/w)/cora-980
     8w)/w)/w                                                           cora-981
      c(4)=b4+6.d0*(((a-2.d0)*(2.d0*a-3.d0)*(40.d0*(9.d0*q+(2.d0*a+73.d0cora-982
     1)*a+57.d0)-(((38.d0*a-49.d0)*a-433.d0)*a-216.d0)*u)*q+a*(a+1.d0)*(cora-983
     22.d0*a+1.d0)*(40.d0*(((2.d0*a+63.d0)*a+69.d0)*a-168.d0)*u-33600.d0cora-984
     3-(a+2.d0)*(2.d0*a+3.d0)*((19.d0*a-6.d0)*a-210.d0)*u**2))*f/(2.d0*acora-985
     4+3.d0)-(20.d0*(((((4.d0*a+132.d0)*a+35.d0)*a+1509.d0)*a+1812.d0)*acora-986
     5+420.d0+(a-2.d0)*(4.d0*a-6.d0)*(2.d0*a-5.d0)*q)*q-(a+1.d0)*(4.d0*(cora-987
     6((((12.d0*a+80.d0)*a+625.d0)*a+1710.d0)*a+1158.d0)*a+630.d0)*q*u+acora-988
     7**2*(2.d0*a+1.d0)*(16800.d0-(20.d0*(((2.d0*a+63.d0)*a+174.d0)*a+42cora-989
     8.d0)-(3.d0*a+6.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u)*u)cora-990
     9)+(10.d0*a+20.d0)*((((((4.d0*a+132.d0)*a+371.d0)*a+1173.d0)*a+720.cora-991
     ad0)*q-a*(a+1.d0)*(2.d0*a+1.d0)*(840.d0-(2.d0*a+3.d0)*((a+30.d0)*a+cora-992
     b84.d0)*u))*2.d0*f+(6.d0*a+15.d0)*(a+1.d0)*(((((8.d0*a+60.d0)*a+220cora-993
     c.d0)*a-30.d0)*a+252.d0)*q+a*(2.d0*a+1.d0)*(280.d0*a+(2.d0*a+3.d0)*cora-994
     d(a*(a+2.d0)*(2.d0*a+7.d0)*u-14.d0*(a+3.d0)*((2.d0*a+12.d0)*f+a*(a+cora-995
     e2.d0)*(2.d0*a+7.d0)/w)/w)))/w)/w)/w)/w                            cora-996
      go to 45                                                          cora-997
c multipole lq=6 l1=l2-4.                                               cora-998
   44 bd=181440.d0*den*a**2*(a+2.d0)*(a+3.d0)*(a+4.d0)*(2.d0*a+5.d0)*(2.cora-999
     1d0*a+7.d0)*s*dsqrt(s*q*((a+1.d0)**2+f**2)*((a+2.d0)**2+f**2)*((a+3cora1000
     2.d0)**2+f**2))                                                    cora1001
      b1=-q*((4320.d0*((7.d0*q+(a+78.d0)*a+103.d0)*q+((10.d0*a+255.d0)*acora1002
     1+638.d0)*a+420.d0)*q+2880.d0*a*(a+2.d0)*(a+3.d0)*(a+4.d0)*(2.d0*a+cora1003
     25.d0)*(2.d0*a+7.d0))/(a-1.d0)-72.d0*((5.d0*((14.d0*a-13.d0)*a+30.dcora1004
     30)*q+(((38.d0*a+833.d0)*a+243.d0)*a+678.d0)*a+2520.d0)*q+a*(((((14cora1005
     48.d0*a+2304.d0)*a+13879.d0)*a+31194.d0)*a+31336.d0)*a+13440.d0))*ucora1006
     5+(a+2.d0)*(4.d0*a+10.d0)*(a*((((814.d0*a+8467.d0)*a+23265.d0)*a+30cora1007
     6834.d0)*a+16632.d0)+(((338.d0*a+1757.d0)*a+8199.d0)*a+8190.d0)*q-2cora1008
     74.d0*a*(a+1.d0)*(a+3.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)cora1009
     8*u)*u**2)                                                         cora1010
      b2=-6.d0*q*f*(2160.d0*((4.d0*a+84.d0)*a+103.d0+7.d0*q)*q/(2.d0*a+3cora1011
     1.d0)+1440.d0*(((2.d0*a+33.d0)*a+226.d0)*a+210.d0)-(a+2.d0)*(12.d0*cora1012
     2(((62.d0*a+623.d0)*a+126.d0)*a-1260.d0)+180.d0*(4.d0*a-5.d0)*q+(a+cora1013
     33.d0)*(2.d0*a+5.d0)*((41.d0*a+591.d0)*a+910.d0)*u)*u)             cora1014
      b3=-3.d0*f*(((30240.d0*q+4320.d0*((4.d0*a+84.d0)*a+103.d0)-360.d0*cora1015
     1(4.d0*a**2+5.d0)*(5.d0*a-6.d0)*u)*q-24.d0*(((((284.d0*a+3480.d0)*acora1016
     2+25.d0)*a-690.d0)*a+396.d0)*a-7560.d0)*u)*q/(2.d0*a+3.d0)+2880.d0*cora1017
     3(((2.d0*a+33.d0)*a+226.d0)*a+210.d0)*q+(2.d0*a+4.d0)*((((98.d0*a-2cora1018
     4563.d0)*a-7346.d0)*a-19775.d0)*a-13650.d0)*q*u**2+a*(a+1.d0)*(2.d0cora1019
     5*a+1.d0)*(480.d0*(((2.d0*a+33.d0)*a+226.d0)*a+840.d0)+(a+2.d0)*((acora1020
     6+3.d0)*(2.d0*a+5.d0)*((233.d0*a+1798.d0)*a+2520.d0)*u-4.d0*(((262.cora1021
     7d0*a+3523.d0)*a+16926.d0)*a+17640.d0))*u)*u)                      cora1022
      b4=-(4320.d0*(2.d0*a-3.d0)*((7.d0*q+(a+90.d0)*a+103.d0)*q+7.d0*(((cora1023
     12.d0*a+57.d0)*a+118.d0)*a+60.d0))*q/((a+1.d0)*(2.d0*a+3.d0))-72.d0cora1024
     2*(2.d0*a-3.d0)*((35.d0*a-50.d0)*q+((19.d0*a+425.d0)*a-66.d0)*a-840cora1025
     3.d0)*q*u+(a+2.d0)*(4.d0*a+10.d0)*(((338.d0*a+1567.d0)*a+8439.d0)*acora1026
     4+8190.d0)*q*u**2+a*(4.d0*a+2.d0)*(1440.d0*(((2.d0*a+33.d0)*a+226.dcora1027
     50)*a+840.d0)-36.d0*((((74.d0*a+1109.d0)*a+6154.d0)*a+9304.d0)*a+33cora1028
     660.d0)*u+(a+2.d0)*(2.d0*a+5.d0)*(((407.d0*a+3765.d0)*a+6714.d0)*a+cora1029
     74536.d0-12.d0*(a+3.d0)*(2.d0*a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*ucora1030
     8)*u**2))                                                          cora1031
      if (lt) go to 45                                                  cora1032
      c(1)=b1+6.d0*q*(a+2.d0)*((240.d0*(9.d0*q+(8.d0*a+98.d0)*a+141.d0)*cora1033
     1q+4.d0*(((((524.d0*a+7460.d0)*a+40945.d0)*a+88825.d0)*a+77406.d0)*cora1034
     2a+17640.d0)*u-60.d0*(((6.d0*a-7.d0)*a+23.d0)*a-30.d0)*q*u-(a+3.d0)cora1035
     3*(2.d0*a+5.d0)*(480.d0*(a+4.d0)*(2.d0*a+7.d0)+(a+2.d0)*(2.d0*a+3.dcora1036
     40)*((233.d0*a+1373.d0)*a+420.d0)*u**2))*f+4.d0*(2.d0*a+5.d0)*((a+2cora1037
     5.d0)*(5.d0*(((116.d0*a+1028.d0)*a+3015.d0)*a+1953.d0)*q-a*((((292.cora1038
     6d0*a+2908.d0)*a+9639.d0)*a+5517.d0)*a-756.d0))*u-60.d0*((((14.d0*acora1039
     7+153.d0)*a+467.d0)*a+483.d0)+(2.d0*a-3.d0)*q)*q+(a+3.d0)*(12.d0*(2cora1040
     8.d0*a+7.d0)*a*(5.d0*(a+4.d0)*(2.d0*a-3.d0)-(a+1.d0)*(a+2.d0)*(2.d0cora1041
     9*a+3.d0)*(2.d0*a+5.d0)*u**2)+5.d0*((12.d0*(a+4.d0)*(a-2.d0)*(2.d0*cora1042
     aa-3.d0)*(2.d0*a+7.d0)-12.d0*((22.d0*a+175.d0)*a+318.d0)*q)*f+(a+2.cora1043
     bd0)*((2.d0*a+3.d0)*(2.d0*a+5.d0)*((85.d0*a+409.d0)*a+84.d0)*u*f-6.cora1044
     cd0*(2.d0*a+7.d0)*(15.d0*((20.d0*a+92.d0)*a+51.d0)*q-(a+4.d0)*a*((3cora1045
     d32.d0*a+368.d0)*a+141.d0)-(2.d0*a+3.d0)*(2.d0*a+5.d0)*(4.d0*a*(a+1cora1046
     e.d0)*(a+3.d0)*u-7.d0*(a+4.d0)*((19.d0*a+3.d0)*f+8.d0*a*(a+1.d0)*(acora1047
     f+3.d0)/w)/w))/w))/w))/w)/w                                        cora1048
      xx=(3.d0*a+6.d0)*(5.d0*f*(120.d0*((((8.d0*a+116.d0)*a+682.d0)*a+14cora1049
     105.d0)*a+966.d0-(a-2.d0)*(2.d0*a-3.d0)*q)*q-(2.d0*a+3.d0)*(4.d0*((cora1050
     2((140.d0*a+1808.d0)*a+7627.d0)*a+13909.d0)*a+6510.d0)*q-a*(a+1.d0)cora1051
     3*(2.d0*a+1.d0)*(12.d0*(((2.d0*a+33.d0)*a+226.d0)*a+840.d0)+(a+2.d0cora1052
     4)*(a+3.d0)*(10.d0*a+25.d0)*(17.d0*a+84.d0)*u))*u)+(4.d0*a+10.d0)*(cora1053
     512.d0*(a+2.d0)*(30.d0*(((8.d0*a+62.d0)*a+159.d0)*q-((((4.d0*a+40.dcora1054
     60)*a+151.d0)*a+94.d0)*a+84.d0))*q-(a+1.d0)*(2.d0*a+3.d0)*(5.d0*(((cora1055
     768.d0*a+564.d0)*a+1285.d0)*a+210.d0)*q-a**2*(2.d0*a+1.d0)*(((166.dcora1056
     80*a+1399.d0)*a+3108.d0)+(a+3.d0)*(4.d0*a+10.d0)*(2.d0*a+7.d0)*u))*cora1057
     9u)+10.d0*(a+3.d0)*(42.d0*(2.d0*a+3.d0)*(((70.d0*a+561.d0)*a+1241.dcora1058
     a0)*a+510.d0)*q*f-(2.d0*a+3.d0)*(a+1.d0)*(7.d0*a*(a+2.d0)*(2.d0*a+1cora1059
     b.d0)*(2.d0*a+5.d0)*(19.d0*a+84.d0)*u*f+(2.d0*a+7.d0)*(1008.d0*a*(acora1060
     c+4.d0)*(2.d0*a+1.d0)*f-(6.d0*a+12.d0)*(4.d0*((194.d0*a+797.d0)*a+1cora1061
     d05.d0)*q-a*(2.d0*a+1.d0)*(432.d0*a*(a+4.d0)+(2.d0*a+5.d0)*(4.d0*a*cora1062
     e(a+3.d0)*u-7.d0*(a+4.d0)*(27.d0*f+8.d0*a*(a+3.d0)/w)/w)))/w)))/w)/cora1063
     fw)/w                                                              cora1064
      c(2)=b3+2.d0*(1440.d0*(((((8.d0*a+132.d0)*a+906.d0)*a+2133.d0)*a+2cora1065
     1116.d0)*a+840.d0+(2.d0*a-3.d0)*((a+36.d0)*a+47.d0+3.d0*q)*q)*q-24.cora1066
     2d0*((((((504.d0*a+7644.d0)*a+39370.d0)*a+119625.d0)*a+174926.d0)*acora1067
     3+106596.d0)*a+17640.d0+(10.d0*a-15.d0)*(((8.d0*a-6.d0)*a+13.d0)*a-cora1068
     430.d0)*q)*q*u+(a+1.d0)*(8.d0*a+12.d0)*((a+2.d0)*(2.d0*a+5.d0)*(((3cora1069
     562.d0*a+3013.d0)*a+8436.d0)*a+1890.d0)*q*u+a**2*(2.d0*a+1.d0)*(60.cora1070
     6d0*(((2.d0*a+33.d0)*a+226.d0)*a+840.d0)-(a+2.d0)*(2.d0*a+5.d0)*((7cora1071
     73.d0*a+822.d0)*a+3024.d0+(a+3.d0)*(12.d0*a+30.d0)*(2.d0*a+7.d0)*u)cora1072
     8*u))*u+xx)/w                                                      cora1073
      c(3)=b2+24.d0*q*(2.d0*(60.d0*(((((8.d0*a+132.d0)*a+906.d0)*a+2133.cora1074
     1d0)*a+2116.d0)*a+840.d0+(2.d0*a-3.d0)*(3.d0*q+(a+36.d0)*a+47.d0)*qcora1075
     2)-(a+2.d0)*(2.d0*a+5.d0)*((((112.d0*a+1218.d0)*a+3459.d0)*a+4242.dcora1076
     30)*a+1764.d0+5.d0*(2.d0*a-3.d0)**2*q-3.d0*(a+1.d0)*(a+3.d0)*(2.d0*cora1077
     4a+3.d0)*(2.d0*a+5.d0)*(2.d0*a+7.d0)*u)*u)+5.d0*(a+2.d0)*(30.d0*(((cora1078
     5((8.d0*a+116.d0)*a+682.d0)*a+1405.d0)*a+966.d0)-(a-2.d0)*(2.d0*a-3cora1079
     6.d0)*q)*f-(a+2.d0)*(2.d0*a+5.d0)*((a+3.d0)*(2.d0*a+3.d0)*(37.d0*a+cora1080
     7217.d0)*u*f+6.d0*(6.d0*((((4.d0*a+40.d0)*a+151.d0)*a+94.d0)*a+84.dcora1081
     80)-2.d0*((24.d0*a+186.d0)*a+477.d0)*q+(2.d0*a+3.d0)*(2.d0*a+5.d0)*cora1082
     9(2.d0*(a+1.d0)*(a+3.d0)*(2.d0*a+7.d0)*u-7.d0*(a+3.d0)*((11.d0*a+51cora1083
     a.d0)*f+4.d0*(2.d0*a+7.d0)*(a+1.d0)*(a+3.d0)/w)/w))/w))/w)/w       cora1084
      c(4)=b4+6.d0*((240.d0*(a-2.d0)*(2.d0*a-3.d0)*(9.d0*q+(8.d0*a+118.dcora1085
     10)*a+141.d0)*q/(2.d0*a+3.d0)-60.d0*(a**2-4.d0)*(2.d0*a-3.d0)*(3.d0cora1086
     2*a-5.d0)*q*u-(a+1.d0)*(2.d0*a+1.d0)*(480.d0*(((2.d0*a+33.d0)*a+226cora1087
     3.d0)*a+840.d0)+(a+2.d0)*((a+3.d0)*(2.d0*a+5.d0)*((233.d0*a+1798.d0cora1088
     4)*a+2520.d0)*u**2-4.d0*(((262.d0*a+3523.d0)*a+16926.d0)*a+17640.d0cora1089
     5)*u)))*f-4.d0*(60.d0*(7.d0*(((((4.d0*a+60.d0)*a+291.d0)*a+969.d0)*cora1090
     6a+1409.d0)*a+690.d0)+(a-2.d0)*(2.d0*a-3.d0)*(2.d0*a-5.d0)*q)*q-(a+cora1091
     71.d0)*(2.d0*a+3.d0)*(60.d0*a*(2.d0*a+1.d0)*(((2.d0*a+33.d0)*a+226.cora1092
     8d0)*a+840.d0)+(a+2.d0)*(2.d0*a+5.d0)*(5.d0*((58.d0*a+473.d0)*a+130cora1093
     92.d0)*q-a*(2.d0*a+1.d0)*((73.d0*a+822.d0)*a+3024.d0+6.d0*(a+3.d0)*cora1094
     a(2.d0*a+5.d0)*(2.d0*a+7.d0)*u))*u)+5.d0*(a+2.d0)*(2.d0*a+3.d0)*(12cora1095
     b.d0*(((22.d0*a+273.d0)*a+1001.d0)*a+1590.d0)*q*f-(a+1.d0)*(12.d0*(cora1096
     c2.d0*a+1.d0)*(((2.d0*a+33.d0)*a+226.d0)*a+840.d0)*f+(a+2.d0)*(2.d0cora1097
     d*a+5.d0)*(5.d0*(a+3.d0)*(2.d0*a+1.d0)*(17.d0*a+84.d0)*u*f-6.d0*(15cora1098
     e.d0*((20.d0*a+164.d0)*a+357.d0)*q-(2.d0*a+1.d0)*(a*((166.d0*a+1399cora1099
     f.d0)*a+3108.d0)+(a+3.d0)*(2.d0*a+5.d0)*(a*(4.d0*a+14.d0)*u-7.d0*((cora1100
     g19.d0*a+84.d0)*f+4.d0*a*(2.d0*a+7.d0)*(a+3.d0)/w)/w)))/w)))/w)/w)/cora1101
     hw                                                                 cora1102
   45 a1=-2.d0*a**2*y*b1*z                                              cora1103
      a2=y*((2.d0*a+1.d0)*((2.d0*(a**2-a)**2*(1.d0+s**2)+y**2*(a**2-a-.5cora1104
     1d0))*b1-y*(p*b2+q*b3))+(4.d0*a-2.d0)*(a+1.d0)**2*p*q*b4)*z        cora1105
      a3=-y*((2.d0*a-1.d0)*((2.d0*(a**2+a)**2*(1.d0+s**2)+y**2*(a**2+a-.cora1106
     15d0))*b4-y*(b2+b3))+(4.d0*a+2.d0)*(a-1.d0)**2*b1)*z               cora1107
      a4=2.d0*a**2*y*b4*z                                               cora1108
      if (x.eq.0.d0) go to 48                                           cora1109
      a1=a1+x*2.d0*p*((a*x-2.d0*f)*b2-2.d0*q*(a+1.d0)*b4)               cora1110
      a2=a2+x*p*((2.d0*q*((2.d0*a+3.d0)*(a+1.d0)*f+((2.d0*a+3.d0)*a-4.d0cora1111
     1)*e*s)-2.d0*p*(2.d0*a-3.d0)*(2.d0*a+1.d0)*f+(2.d0*a+1.d0)*((((2.d0cora1112
     2*a-1.d0)*a-8.d0)*a+5.d0)*f-s*((a+1.d0)*((6.d0*a-9.d0)*a+1.d0)*e-s*cora1113
     3((6.d0*a-7.d0)*(a**2-1.d0)*f-s*((((2.d0*a-5.d0)*a+2.d0)*a-1.d0)*e)cora1114
     4))))*b2+2.d0*q*(a+1.d0)*((2.d0*a+3.d0)*(q+p)+(2.d0*a-1.d0)*(4.d0*ecora1115
     5*f*s+(1.d0+s**2)*((2.d0*a-4.d0)*a-3.d0)))*b4)                     cora1116
      a3=a3+x*((2.d0*p*((2.d0*a-3.d0)*(a-1.d0)*e*s+f*((2.d0*a-3.d0)*a-4.cora1117
     1d0))-2.d0*q*e*s*(2.d0*a+3.d0)*(2.d0*a-1.d0)-(2.d0*a-1.d0)*((((2.d0cora1118
     2*a+5.d0)*a+2.d0)*a+1.d0)*f-s*((6.d0*a+7.d0)*(a**2-1.d0)*e-s*((a-1.cora1119
     3d0)*((6.d0*a+9.d0)*a+1.d0)*f-s*((((2.d0*a+1.d0)*a-8.d0)*a-5.d0)*e)cora1120
     4))))*b2+(-4.d0*p*q*((2.d0*a+1.d0)*a+2.d0)-(2.d0*a-1.d0)*(2.d0*s*e*cora1121
     5f*(2.d0*a+3.d0)*(q+p+s**2+1.d0)-a**2*(((a+3.d0)*a+2.5d0)*(1.d0+s**cora1122
     64)-s**2*((2.d0*a-2.d0)*a-7.d0))+a*(a-1.d0)*(2.d0*a+3.d0)*(1.d0+s**cora1123
     72)*(p+q)-(s**2-1.d0)*((2.d0*a+4.d0)*a+.5d0)*(q-p)))*b4)           cora1124
      a4=a4+x*2.d0*(((a-1.d0)*(p+q)+y**2)*b4+(2.d0*e*s-a*x)*b2)         cora1125
   46 a4=a4+x*2.d0*((2.d0*f+a*x)*b3-2.d0*(a-1.d0)*b1)                   cora1126
   47 a1=a1+x*2.d0*(((a+1.d0)*(q+p)-y**2)*b1-q*(a*x+2.d0*e*s)*b3)       cora1127
      a2=a2+x*((-4.d0*p*q*(2.d0*a**2-a+2.d0)-(2.d0*a+1.d0)*(2.d0*s*e*f*(cora1128
     12.d0*a-3.d0)*(q+p+s**2+1.d0)+a**2*(((a-3.d0)*a+2.5d0)*(1.d0+s**4)-cora1129
     2s**2*((2.d0*a+2.d0)*a-7.d0))+a*(a+1.d0)*(2.d0*a-3.d0)*(1.d0+s**2)*cora1130
     3(p+q)+(s**2-1.d0)*((2.d0*a-4.d0)*a+.5d0)*(q-p)))*b1+q*(2.d0*p*((2.cora1131
     4d0*a+3.d0)*(a+1.d0)*e*s+f*((2.d0*a+3.d0)*a-4.d0))-2.d0*q*e*s*(2.d0cora1132
     5*a-3.d0)*(2.d0*a+1.d0)-(2.d0*a+1.d0)*((((2.d0*a-5.d0)*a+2.d0)*a-1.cora1133
     6d0)*f-s*((6.d0*a-7.d0)*(a**2-1.d0)*e-s*((a+1.d0)*((6.d0*a-9.d0)*a+cora1134
     71.d0)*f-s*((((2.d0*a-1.d0)*a-8.d0)*a+5.d0)*e)))))*b3)             cora1135
      a3=a3+x*(2.d0*(a-1.d0)*((2.d0*a-3.d0)*(q+p)+(2.d0*a+1.d0)*(4.d0*e*cora1136
     1f*s+(1.d0+s**2)*((2.d0*a+4.d0)*a-3.d0)))*b1+(2.d0*q*((2.d0*a-3.d0)cora1137
     2*(a-1.d0)*f+((2.d0*a-3.d0)*a-4.d0)*e*s)-2.d0*p*(2.d0*a+3.d0)*(2.d0cora1138
     3*a-1.d0)*f+(2.d0*a-1.d0)*((((2.d0*a+1.d0)*a-8.d0)*a-5.d0)*f-s*((a-cora1139
     41.d0)*((6.d0*a+9.d0)*a+1.d0)*e-s*((6.d0*a+7.d0)*(a**2-1.d0)*f-s*((cora1140
     5((2.d0*a+5.d0)*a+2.d0)*a+1.d0)*e)))))*b3)                         cora1141
   48 b(1)=a1*dsqrt(((a-1.d0)**2+e**2)*((a-1.d0)**2+f**2))*(2.d0*a-3.d0)cora1142
     1/(bd*a*(2.d0*a-1.d0))                                             cora1143
      b(2)=a2/(a*s*bd*(2.d0*a+1.d0))                                    cora1144
      b(3)=a3/(a*s*bd*(2.d0*a-1.d0))*dsqrt(p*q)                         cora1145
      b(4)=a4*dsqrt(p*q*((a+1.d0)**2+e**2)*((a+1.d0)**2+f**2))*(2.d0*a+3cora1146
     1.d0)/(bd*a*(2.d0*a+1.d0))                                         cora1147
      if (lt) return                                                    cora1148
      z=-2.d0*bd*v*w*dsqrt(s)/den                                       cora1149
      bd=a**2*bd*dsqrt(v*w)**3                                          cora1150
      a1=a1*(a-1.d0)**2                                                 cora1151
      a4=a4*(a+1.d0)**2                                                 cora1152
      c(1)=c(1)/z-(a+y*w*(.5d0*a-1.d0)/(a-1.d0)**2)*(2.d0*a-1.d0)*a1/bd cora1153
      c(2)=(c(2)/z+w*(a1-p*a4)/bd)*dsqrt(q)                             cora1154
      c(3)=(c(3)/z+w*(a1-q*a4)/bd)*dsqrt(p)                             cora1155
      c(4)=(c(4)/z+(a+y*w*(.5d0*a+1.d0)/(a+1.d0)**2)*(2.d0*a+1.d0)*a4/bdcora1156
     1)*dsqrt(p*q)                                                      cora1157
      go to 70                                                          cora1158
c for neutrons ( coulomb parameter 0.).                                 cora1159
   49 x=w**2                                                            cora1160
      go to ( 50 , 51 , 54 , 57 , 61 , 65 ) , lq                        cora1161
   50 if ((ll.eq.1).or.(u.eq.0)) go to 73                               cora1162
c multipole lq=1 l1=l2-1 (useless).                                     cora1163
      b(2)=(u+2.d0-2.d0*a)/(dsqrt(s)*u)                                 cora1164
      b(3)=dsqrt(s)*(2.d0*a+2.d0)/u                                     cora1165
      if (lt) return                                                    cora1166
      c(1)=dsqrt(s)/(u*x)                                               cora1167
      c(4)=c(1)/s                                                       cora1168
      return                                                            cora1169
   51 go to ( 52 , 73 , 53 ) , ll                                       cora1170
c multipole lq=2 l1=l2.                                                 cora1171
   52 b(2)=1.d0                                                         cora1172
      return                                                            cora1173
c multipole lq=2 l1=l2-2.                                               cora1174
   53 b(2)=(2.d0*a-1.d0)/(3.d0*s)                                       cora1175
      b(3)=-(a+1.d0)/1.5d0                                              cora1176
      if (.not.lt) c(2)=-b(2)/(x*v)                                     cora1177
      return                                                            cora1178
   54 go to ( 73 , 55 , 73 , 56 ) , ll                                  cora1179
c multipole lq=3 l1=l2-1.                                               cora1180
   55 b(2)=1.d0/(3.d0*dsqrt(s))                                         cora1181
      b(3)=-s*b(2)                                                      cora1182
      if (.not.lt) c(2)=-b(2)/(x*v)                                     cora1183
      go to 70                                                          cora1184
c multipole lq=3 l1=l2-3.                                               cora1185
   56 y=15.d0*s*dsqrt(s)                                                cora1186
      b(2)=(1.d0-2.d0*u*(a-1.d0))/y                                     cora1187
      b(3)=((2.d0*a+1.d0)*u-1.d0)*s/y                                   cora1188
      if (lt) return                                                    cora1189
      c(1)=(6.d0*a-3.d0)/(y*x**2*s)                                     cora1190
      c(2)=(2.d0+u*(2.d0*a+1.d0)-(12.d0*a**2-3.d0)/x)/(y*x*v)           cora1191
      c(3)=-3.d0/(y*x*w)                                                cora1192
      c(4)=(6.d0*a+3.d0)/(y*x**2)                                       cora1193
      go to 70                                                          cora1194
   57 go to ( 58 , 73 , 59 , 73 , 60 ) , ll                             cora1195
c multipole lq=4 l1=l2.                                                 cora1196
   58 b(2)=1.d0/(3.d0*a+6.d0)                                           cora1197
      b(3)=-(u+2.d0)*b(2)/(2.d0*s)                                      cora1198
      if (lt) return                                                    cora1199
      c(2)=-b(2)/(2.d0*x*v)                                             cora1200
      c(3)=c(2)/s                                                       cora1201
      c(4)=3.d0*c(3)/w                                                  cora1202
      go to 70                                                          cora1203
c multipole lq=4 l1=l2-2.                                               cora1204
   59 y=15.d0*s*(a+2.d0)                                                cora1205
      b(2)=-(u*(a-1.d0)-3.d0)/y                                         cora1206
      b(3)=((a+.5d0)*u-3.d0)*s/y                                        cora1207
      if (lt) return                                                    cora1208
      c(1)=(3.d0*a+6.d0)/(y*x**2*s)                                     cora1209
      c(2)=-(3.d0-(2.d0*a+1.d0)*(u-(6.d0*a+12.d0)/x))/(2.d0*y*x*v)      cora1210
      c(3)=-1.5d0/(y*x*w)                                               cora1211
      c(4)=-(2.d0*a+1.d0)*c(3)/w                                        cora1212
      go to 70                                                          cora1213
c multipole lq=4 l1=l2-4.                                               cora1214
   60 y=210.d0*(a+2.d0)*s                                               cora1215
      b(2)=(6.d0-2.d0*(a-1.d0)*u*(2.d0-(2.d0*a+3.d0)*u))/(y*s)          cora1216
      b(3)=-(6.d0-u*(4.d0*a-1.d0-u*(2.d0*a+3.d0)*(2.d0*a+1.d0)))/y      cora1217
      if (lt) return                                                    cora1218
      c1=u-(10.d0*a-5.d0)/x                                             cora1219
      c(1)=-(6.d0*a+12.d0)*(4.d0+(2.d0*a+3.d0)*c1)/(y*x**2*s**2)        cora1220
      c(2)=-(3.d0+(2.d0*a+10.d0)*u-(a+2.d0)*(108.d0*a-6.d0)/x+(2.d0*a+3.cora1221
     1d0)*(2.d0*a+1.d0)*(u**2-(6.d0*a+12.d0)*c1/x))/(y*x*v*s)           cora1222
      c(3)=-(3.d0-(6.d0*a+9.d0)*(u-(10.d0*a+20.d0)/x))/(y*x*v)          cora1223
      c(4)=-(2.d0*a+1.d0)*c(3)/w-(30.d0*a+60.d0)/(y*x**2*s)             cora1224
      go to 70                                                          cora1225
   61 go to ( 73 , 62 , 73 , 63 , 73 , 64 ) , ll                        cora1226
c multipole lq=5 l1=l2-1.                                               cora1227
   62 y=60.d0*(a+2.d0)*(a+3.d0)*dsqrt(s)                                cora1228
      b(2)=(16.d0-u*(2.d0*a-2.d0))/y                                    cora1229
      b(3)=-(16.d0-u*(2.d0*a-10.d0+u*(2.d0*a+1.d0)))/(y*s)              cora1230
      if (lt) return                                                    cora1231
      c(1)=6.d0*(a+2.d0)/(s*y*x**2)                                     cora1232
      c(2)=-(8.d0-(2.d0*a+1.d0)*(u-6.d0*(a+2.d0)/x))/(y*x*v)            cora1233
      c(3)=-(8.d0+3.d0*u-30.d0*(a+2.d0)/x)/(y*x*v*s)                    cora1234
      c(4)=(6.d0*a-12.d0+(15.d0*u-(60.d0*a+30.d0)*(a+2.d0)/x)/s**2)/(y*xcora1235
     1**2)                                                              cora1236
      go to 70                                                          cora1237
c multipole lq=5 l1=l2-3.                                               cora1238
   63 y=420.d0*(a+2.d0)*(a+3.d0)*dsqrt(s)                               cora1239
      b(2)=(48.d0-u*(2.d0*a-2.d0)*(9.d0-u*(2.d0*a+3.d0)))/(y*s)         cora1240
      b(3)=-(48.d0-u*(18.d0*a+6.d0-u*(2.d0*a+1.d0)*(2.d0*a+3.d0)))/y    cora1241
      if (lt) return                                                    cora1242
      c1=u-(10.d0*a+30.d0)/x                                            cora1243
      c(1)=(6.d0*a+12.d0)*(3.d0-(2.d0*a+3.d0)*c1)/(y*x**2*s**2)         cora1244
      c(2)=((24.d0*a+162.d0)*(a+2.d0)/x-24.d0+(12.d0*a-3.d0)*u-(2.d0*a+1cora1245
     1.d0)*(2.d0*a+3.d0)*(u**2-(6.d0*a+12.d0)*c1/x))/(y*x*s*v)          cora1246
      c(3)=-(24.d0-(6.d0*a+9.d0)*(u-(10.d0*a+20.d0)/x))/(y*x*v)         cora1247
      c(4)=-(2.d0*a+1.d0)*c(3)/w-(30.d0*a+60.d0)/(y*x**2*s)             cora1248
      go to 70                                                          cora1249
c multipole lq=5 l1=l2-5.                                               cora1250
   64 y=3780.d0*(a+2.d0)*(a+3.d0)*s*dsqrt(s)                            cora1251
      b(2)=(48.d0-u*(2.d0*a-2.d0)*(15.d0-u*(6.d0*a+6.d0-u*(2.d0*a+3.d0)*cora1252
     1(2.d0*a+5.d0))))/(y*s)                                            cora1253
      b(3)=-(48.d0-u*(30.d0*a-6.d0-u*(12.d0*a**2+12.d0*a-9.d0-u*(8.d0*a*cora1254
     1*3+36.d0*a**2+46.d0*a+15.d0))))/y                                 cora1255
      if (lt) return                                                    cora1256
      c1=u**2-(10.d0*a+30.d0)*(u-(14.d0*a-7.d0)/x)/x                    cora1257
      c(1)=(6.d0*a+12.d0)*(3.d0+(6.d0*a+24.d0)*u-(a+3.d0)*(260.d0*a+110.cora1258
     1d0)/x+(2.d0*a+5.d0)*(2.d0*a+3.d0)*c1)/(y*x**2*s**2)               cora1259
      c(2)=-(24.d0-(18.d0*a-9.d0)*u+(6.d0*a+12.d0)*(66.d0*a+183.d0)/x-(2cora1260
     1.d0*a+3.d0)*(18.d0*u**2-(12.d0*a+24.d0)*((8.d0*a+29.d0)*u-(a+3.d0)cora1261
     2*(200.d0*a-40.d0)/x)/x+(2.d0*a+5.d0)*(2.d0*a+1.d0)*(u**3-(6.d0*a+1cora1262
     32.d0)*c1/x)))/(y*x*v*s)                                           cora1263
      c1=u**2-(10.d0*a+20.d0)*(u-(14.d0*a+42.d0)/x)/x                   cora1264
      c(3)=-(24.d0-(12.d0*a+3.d0)*u+(6.d0*a+9.d0)*(2.d0*a+5.d0)*c1-(a+2.cora1265
     1d0)*(360.d0*a+1170.d0)/x)/(y*x*v)                                 cora1266
      c(4)=(18.d0*a-36.d0+(6.d0*a+9.d0)*((6.d0*a+33.d0)*u+(2.d0*a+1.d0)*cora1267
     1(2.d0*a+5.d0)*c1-(a+2.d0)*(260.d0*a+830.d0)/x))/(y*x**2*s)        cora1268
      go to 70                                                          cora1269
   65 go to ( 66 , 73 , 67 , 73 , 68 , 73 , 69 ) , ll                   cora1270
c multipole lq=6 l1=l2.                                                 cora1271
   66 y=120.d0*(a+2.d0)*(a+3.d0)*(a+4.d0)*s**2                          cora1272
      b(2)=(32.d0+u*(32.d0-u*(2.d0*a-2.d0)))/y                          cora1273
      b(3)=-(32.d0+u*(48.d0-u*(4.d0*a-14.d0+u*(2.d0*a+1.d0))))/(y*s)    cora1274
      if (lt) return                                                    cora1275
      c(1)=(a+2.d0)*(12.d0+6.d0*u-(60.d0*a+180.d0)/x)/(y*x**2*s)        cora1276
      c(2)=-(16.d0-u*(2.d0*a-12.d0+u*(2.d0*a+1.d0))+(6.d0*a+12.d0)*(2.d0cora1277
     1*a-4.d0+(2.d0*a+1.d0)*(u-(10.d0*a+30.d0)/x))/x)/(y*x*v)           cora1278
      c(3)=-(16.d0+u*(2.d0*a+20.d0+3.d0*u)-(6.d0*a+12.d0)*(4.d0-2.d0*a+5cora1279
     1.d0*u+(20.d0*a+10.d0)*(a+3.d0)/x)/x)/(y*x*s*v)                    cora1280
      c(4)=((12.d0*a-24.d0)*s**2+(6.d0*a+3.d0)*(u**2-(10.d0*a+20.d0)*(2.cora1281
     1d0+u+(4.d0*a+2.d0)*(a+3.d0)/x)/x))/(y*x**2*s**2)                  cora1282
      return                                                            cora1283
c multipole lq=6 l1=l2-2.                                               cora1284
   67 y=840.d0*(a+2.d0)*(a+3.d0)*(a+4.d0)*s                             cora1285
      b(2)=(160.d0-u*(2.d0*a-2.d0)*(16.d0-u*(2.d0*a+3.d0)))/y           cora1286
      b(3)=-(160.d0-u*(32.d0*a-112.d0-u*((4.d0*a-24.d0)*a-10.d0+u*(2.d0*cora1287
     1a+3.d0)*(2.d0*a+1.d0))))/(y*s)                                    cora1288
      if (lt) return                                                    cora1289
      c1=u-(10.d0*a+30.d0)/x                                            cora1290
      c(1)=(60.d0-(12.d0*a+18.d0)*c1)*(a+2.d0)/(y*x**2*s)               cora1291
      c(2)=-(80.d0-(26.d0*a+4.d0)*u+(60.d0*a**2-240.d0)/x+(2.d0*a+1.d0)*cora1292
     1(2.d0*a+3.d0)*(u**2-(6.d0*a+12.d0)*c1/x))/(y*x*v)                 cora1293
      c(3)=-(80.d0-u*(6.d0*a-36.d0)+60.d0*(a**2-4.d0)/x-(6.d0*a+9.d0)*(ucora1294
     1**2-(10.d0*a+20.d0)*(u-(14.d0*a+42.d0)/x)/x))/(y*x*v*s)           cora1295
      c(4)=-(105.d0*(1.d0-(10.d0*a+20.d0)/x)-(60.d0*a-15.d0)*s**2+(6.d0*cora1296
     1a+3.d0)*(2.d0*a+3.d0)*(u*s**2-(10.d0*a+20.d0)*(1.d0+u-(14.d0*a+42.cora1297
     2d0)/x)/x))/(y*x**2*s**2)                                          cora1298
      go to 70                                                          cora1299
c multipole lq=6 l1=l2-4.                                               cora1300
   68 y=7560.d0*(a+2.d0)*(a+3.d0)*(a+4.d0)*s                            cora1301
      b(2)=(480.d0-u*(2.d0*a-2.d0)*(96.d0-u*(24.d0*a+33.d0-u*(2.d0*a+3.dcora1302
     10)*(2.d0*a+5.d0))))/(y*s)                                         cora1303
      b(3)=-(480.d0-u*(192.d0*a+48.d0-u*(2.d0*a+3.d0)*(24.d0*a+6.d0-u*(2cora1304
     1.d0*a+1.d0)*(2.d0*a+5.d0))))/y                                    cora1305
      if (lt) return                                                    cora1306
      c1=(u**2-(10.d0*a+30.d0)*(u-(14.d0*a+56.d0)/x)/x)                 cora1307
      c(1)=(6.d0*a+12.d0)*(30.d0-(12.d0*a+3.d0)*u-(a+3.d0)*(80.d0*a+470.cora1308
     1d0)/x+(2.d0*a+3.d0)*(2.d0*a+5.d0)*c1)/(y*x**2*s**2)               cora1309
      c(2)=-(240.d0-u*(126.d0*a-36.d0)+180.d0*(a**2-4.d0)/x+(2.d0*a+3.d0cora1310
     1)*((18.d0*a-9.d0)*u**2-(6.d0*a+12.d0)*((2.d0*a-49.d0)*u+(10.d0*a+3cora1311
     20.d0)*(22.d0*a+109.d0)/x)/x-(2.d0*a+1.d0)*(2.d0*a+5.d0)*(u**3-(6.dcora1312
     30*a+12.d0)*c1/x)))/(y*x*w*s**2)                                   cora1313
      c1=(2.d0*a+5.d0)*(u**2-(10.d0*a+20.d0)*(u-(14.d0*a+42.d0)/x)/x)   cora1314
      c(3)=-(240.d0-(66.d0*a+84.d0)*u+180.d0*(a**2-4.d0)/x+(6.d0*a+9.d0)cora1315
     1*c1)/(y*x*v)                                                      cora1316
      c(4)=((a-2.d0)*(180.d0-(72.d0*a+108.d0)*u)+(6.d0*a+9.d0)*((2.d0*a+cora1317
     11.d0)*c1-(a+2.d0)*(80.d0*a+740.d0)/x))/(y*x**2*s)                 cora1318
      go to 70                                                          cora1319
c multipole lq=6 l1=l2-6.                                               cora1320
   69 y=83160.d0*(a+2.d0)*(a+3.d0)*(a+4.d0)*s**2                        cora1321
      b(2)=(480.d0-u*(2.d0*a-2.d0)*(144.d0-u*(54.d0*a+57.d0-u*(2.d0*a+5.cora1322
     1d0)*(8.d0*a+6.d0-u*(2.d0*a+7.d0)*(2.d0*a+3.d0)))))/(y*s)          cora1323
      b(3)=-(480.d0-u*(288.d0*a-48.d0-u*(108.d0*a**2+120.d0*a-78.d0-u*(2cora1324
     1.d0*a+3.d0)*(2.d0*a+5.d0)*(8.d0*a-5.d0-u*(2.d0*a+1.d0)*(2.d0*a+7.dcora1325
     20)))))/y                                                          cora1326
      if (lt) return                                                    cora1327
      c1=u**3-(10.d0*a+30.d0)*(u**2-(14.d0*a+56.d0)*(u-(18.d0*a-9.d0)/x)cora1328
     1/x)/x                                                             cora1329
      c(1)=(6.d0*a+12.d0)*(30.d0-(18.d0*a-3.d0)*u+(10.d0*a+30.d0)*(118.dcora1330
     10*a+457.d0)/x-(2.d0*a+5.d0)*((4.d0*a+36.d0)*u**2-(10.d0*a+30.d0)*(cora1331
     2(24.d0*a+106.d0)*u-(14.d0*a+56.d0)*(52.d0*a+6.d0)/x)/x+(2.d0*a+7.dcora1332
     30)*(2.d0*a+3.d0)*c1))/(y*x**2*s**2)                               cora1333
      c(2)=-(240.d0-(174.d0*a-84.d0)*u+((72.d0*a+36.d0)*a-63.d0)*u**2+(1cora1334
     180.d0*(a**2-4.d0)-(6.d0*a+12.d0)*(((136.d0*a+772.d0)*a+1377.d0)*u-cora1335
     2(10.d0*a+30.d0)*((712.d0*a+3370.d0)*a+2193.d0)/x))/x-(2.d0*a+5.d0)cora1336
     3*(2.d0*a+3.d0)*((2.d0*a-26.d0)*u**3+(6.d0*a+12.d0)*((14.d0*a+82.d0cora1337
     4)*u**2-(10.d0*a+30.d0)*((38.d0*a+166.d0)*u-(14.d0*a+56.d0)*(70.d0*cora1338
     5a-19.d0)/x)/x)/x-(2.d0*a+7.d0)*(2.d0*a+1.d0)*(u**4-6.d0*(a+2.d0)*ccora1339
     61/x)))/(y*x*v*s)                                                  cora1340
      c1=u**3-(10.d0*a+20.d0)*(u**2-(14.d0*a+42.d0)*(u-(18.d0*a+72.d0)/xcora1341
     1)/x)/x                                                            cora1342
      c(3)=-(240.d0-(114.d0*a+36.d0)*u+180*(a**2-4.d0)/x+(6.d0*a+15.d0)*cora1343
     1((6.d0*a-1.d0)*u**2+(10.d0*a+20.d0)*((10.d0*a+57.d0)*u-(14.d0*a+42cora1344
     2.d0)*(34.d0*a+141.d0)/x)/x-(2.d0*a+7.d0)*(2.d0*a+3.d0)*c1))/(y*x*vcora1345
     3)                                                                 cora1346
      c(4)=(180.d0*a-360.d0-(108.d0*a+72.d0)*(a-2.d0)*u+(60.d0*a+120.d0)cora1347
     1*((118.d0*a+796.d0)*a+1401.d0)/x-(2.d0*a+5.d0)*(6.d0*a+9.d0)*((4.dcora1348
     20*a+47.d0)*u**2-(10.d0*a+20.d0)*((24.d0*a+117.d0)*u-(14.d0*a+42.d0cora1349
     3)*(52.d0*a+215.d0)/x)/x+(2.d0*a+7.d0)*(2.d0*a+1.d0)*c1))/(y*x**2*scora1350
     4)                                                                 cora1351
   70 if (ll.eq.l2-l1+1) return                                         cora1352
      c1=c(3)                                                           cora1353
      c(3)=c(2)                                                         cora1354
      c(2)=c1                                                           cora1355
      return                                                            cora1356
   71 write (mw,1000) lq,ll                                             cora1357
      return                                                            cora1358
   72 write (mw,1001) lq,ll                                             cora1359
      return                                                            cora1360
   73 write (mw,1002) lq,ll                                             cora1361
      return                                                            cora1362
 1000 format (' in cora: lq =',i3,' too large or l2-l1+1=',i3,' out of bcora1363
     1ounds.')                                                          cora1364
 1001 format (' in cora: coefficients suppressed for lq =',i3,' and l1-lcora1365
     12+1=',i3)                                                         cora1366
 1002 format (' in cora: coefficients not given by the method for lq =',cora1367
     1i3,' and l2-l1+1=',i3)                                            cora1368
      end                                                               cora1369
c 08/03/07                                                      ecis06  inti-000
      subroutine inti(fam,x,fr,gr,wre,pad,ipe,ism,kab,w,iterm,nc,v,nvi,minti-001
     1c,nat,at,lmd,ag,ncin,nni,iterr,lo)                                inti-002
c  e. c. i. s. method: schroedinger equation driving routine.           inti-003
c  inti calls insh  to solve the single homogeneous equations,          inti-004
c             insi  to solve the single inhomogeneous equations.        inti-005
c  pade approximants of type i may be used to accelerate the convergenceinti-006
c input:     fam(*,i):matching values for i=1 to 6, constants of each   inti-007
c                     equation for i=7 to 12.                           inti-008
c            ism:     number of radial points.                          inti-009
c            kab:     maximum number of coupled channels.               inti-010
c            iterm:   maximum number of iterations and dim. of pad.     inti-011
c            nc:      number of coupled equations.                      inti-012
c            v:       real, imaginary potentials and couplings.         inti-013
c            nvi:     addresses of couplings.                           inti-014
c            mc:      nuclear state number, angular momenta....         inti-015
c            nat,at:  table of coupling coefficients.                   inti-016
c            lmd:     first dimension of tables nat and at.             inti-017
c            ag:      coulomb integrals for coulomb corrections.        inti-018
c            ncin:    number of solutions.                              inti-019
c            lo(i):   logical controls:                                 inti-020
c               lo(22) =.true. no use of pade approximants.             inti-021
c               lo(23) =.true. no use of pade and shift to usual coupledinti-022
c                              equations when there is no convergence.  inti-023
c               lo(29) =.true. no diagonal terms in second member.      inti-024
c               lo(30) =.true. pure dwba calculation.                   inti-025
c               lo(44) =.true. coulomb corrections.                     inti-026
c               lo(53) =.true. output of the number of iterations.      inti-027
c               lo(57) =.true. output phase-shifts at each iteration.   inti-028
c               lo(104)=.true. convergence is obtained in the iteration.inti-029
c               lo(106)=.true. when the iteration is not the last one   inti-030
c                              allowed.                                 inti-031
c               lo(107)=.true. all the couplings calculated beforehand. inti-032
c               lo(110)=.true. derivatives are needed.                  inti-033
c               lo(121)=.true. optical model without coupling.          inti-034
c output:    fam(*,i):scattering coefficients for i>9.                  inti-035
c            nni:     number of equations with negligible inhomogeneous inti-036
c                     term.                                             inti-037
c            iterr:   largest number of iterations done for this j.     inti-038
c working areas:                                                        inti-039
c            x:       used in insh and insi.                            inti-040
c            fr:      solutions of homogeneous equations.               inti-041
c            gr:      solutions of coupled equations.                   inti-042
c            wre:     real/imaginary inhomogeneous term.                inti-043
c            pad:     pade approximants.                                inti-044
c            ipe(i):  first non negligible point of uncoupled functions inti-045
c                     for i=1 to nc, of coupled functions for i>nc.     inti-046
c            w:       free part of the storage for couplings            inti-047
c                                                                       inti-048
c for the common  /conve/ see calx.                                     inti-049
c for the common  /pote2/ see redm.                                     inti-050
c                                                                       inti-051
c significance of the quantities in common /conve/:                     inti-052
c  bjm:       convergence coefficient of imaginary potential.           inti-053
c   used:     bjm.                                                      inti-054
c                                                                       inti-055
c significance of the quantities in common /pote2/:                     inti-056
c  ity(2):    starting address of imaginary central potential.          inti-057
c  ity(9):    starting address of coulomb central potential.            inti-058
c   used:     ity(2),ity(9).                                            inti-059
c                                                                       inti-060
c***********************************************************************inti-061
      implicit real*8 (a-h,o-z)                                         inti-062
      logical lo(150)                                                   inti-063
      dimension fam(kab,*),x(*),fr(ism,4,*),gr(2,ism,*),wre(2,*),pad(2,iinti-064
     1term,*),ipe(*),w(ism,*),v(ism,*),nvi(kab,kab,4),mc(kab,6),nat(2*lminti-065
     2d,*),at(lmd,*),ag(kab,kab,4),z(4),y(2)                            inti-066
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       inti-067
      common /inout/ mr,mw,ms                                           inti-068
      common /pote2/ ity(12),invt,intv,insl,npx                         inti-069
c compute all coupling potentials and solve all homogeneous equations.  inti-070
      do 5 i=1,nc                                                       inti-071
      i1=mc(i,4)                                                        inti-072
      if (i1.lt.0) go to 1                                              inti-073
      call insh(fr(1,1,i),i,i1,kt,fam,x,kab,ism,v,nat,at,lmd,nvi,lo)    inti-074
      if (.not.(lo(121))) ipe(i)=kt                                     inti-075
      go to 4                                                           inti-076
    1 i1=-i1                                                            inti-077
      if (i.eq.i1) go to 4                                              inti-078
      do 3 j=1,4                                                        inti-079
      do 2 is=1,ism                                                     inti-080
    2 fr(is,j,i)=fr(is,j,i1)                                            inti-081
    3 continue                                                          inti-082
      ipe(i)=ipe(i1)                                                    inti-083
    4 if (lo(57)) write (mw,1000) fam(i,9),fam(i,10),i,ipe(i)           inti-084
    5 continue                                                          inti-085
      if ((.not.lo(107)).or.lo(121)) go to 24                           inti-086
      ivv=0                                                             inti-087
c calculation of the non diagonal coupling potentials.                  inti-088
      do 23 ic=1,nc                                                     inti-089
      do 19 ip=1,nc                                                     inti-090
      k1=nvi(ip,ic,1)                                                   inti-091
      k2=nvi(ip,ic,2)                                                   inti-092
      k3=nvi(ip,ic,3)                                                   inti-093
      if (k2.eq.k3.and.ip.lt.ic) go to 17                               inti-094
      do 6 j=1,4                                                        inti-095
    6 nvi(ip,ic,j)=0                                                    inti-096
c non derivative coupling potentials for ik=1.                          inti-097
c derivative coupling potentials for ik=3.                              inti-098
      do 16 ik=1,3,2                                                    inti-099
      if (k1.gt.k2) go to 15                                            inti-100
      if (lo(29).and.(ic.eq.ip)) go to 15                               inti-101
      ivv=ivv+1                                                         inti-102
      nvi(ip,ic,ik)=ivv                                                 inti-103
      nima=0                                                            inti-104
      do 7 is=1,ism                                                     inti-105
    7 w(is,ivv)=0.d0                                                    inti-106
      do 11 k=k1,k2                                                     inti-107
      if (at(2,k).eq.0.d0) go to 9                                      inti-108
      kt=nat(1,k)                                                       inti-109
      if (nat(2,k).ne.0) nima=nima+1                                    inti-110
      do 8 is=1,ism                                                     inti-111
    8 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-112
    9 if (.not.lo(133)) go to 11                                        inti-113
      if (at(3,k).eq.0.d0) go to 11                                     inti-114
      kt=nat(1,k)+ity(9)                                                inti-115
      do 10 is=1,ism                                                    inti-116
   10 w(is,ivv)=w(is,ivv)+at(3,k)*v(is,kt)                              inti-117
   11 continue                                                          inti-118
      if (nima.eq.0) go to 15                                           inti-119
      ivv=ivv+1                                                         inti-120
      nvi(ip,ic,ik+1)=ivv                                               inti-121
      do 12 is=1,ism                                                    inti-122
   12 w(is,ivv)=0.d0                                                    inti-123
      do 14 k=k1,k2                                                     inti-124
      if (nat(2,k).eq.0) go to 14                                       inti-125
      kt=nat(2,k)+ity(2)                                                inti-126
      do 13 is=1,ism                                                    inti-127
   13 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-128
   14 continue                                                          inti-129
c derivative coupling potentials.                                       inti-130
   15 k1=k2+1                                                           inti-131
   16 k2=k3                                                             inti-132
      go to 19                                                          inti-133
c symmetrisation of the table.                                          inti-134
   17 do 18 k=1,4                                                       inti-135
   18 nvi(ip,ic,k)=nvi(ic,ip,k)                                         inti-136
   19 continue                                                          inti-137
c correction to an increase of the imaginary potential.                 inti-138
      if (bjm.eq.0.d0) go to 23                                         inti-139
      i1=mc(ic,4)+ity(2)                                                inti-140
      if (nvi(ic,ic,2).eq.0) go to 21                                   inti-141
      k=nvi(ic,ic,2)                                                    inti-142
      do 20 is=1,ism                                                    inti-143
   20 w(is,k)=w(is,k)-fam(ic,7)*v(is,i1)*bjm                            inti-144
      go to 23                                                          inti-145
   21 ivv=ivv+1                                                         inti-146
      nvi(ic,ic,2)=ivv                                                  inti-147
      do 22 is=1,ism                                                    inti-148
   22 w(is,ivv)=-fam(ic,7)*v(is,i1)*bjm                                 inti-149
   23 continue                                                          inti-150
   24 nni=0                                                             inti-151
c loop on solutions.                                                    inti-152
      do 38 nci=1,ncin                                                  inti-153
      nci1=nci+10                                                       inti-154
      nci2=nci1+ncin                                                    inti-155
c set the zero's order solution.                                        inti-156
      do 25 ic=1,nc                                                     inti-157
      ipe(ic+nc)=ism+1                                                  inti-158
      fam(ic,nci1)=0.d0                                                 inti-159
   25 fam(ic,nci2)=0.d0                                                 inti-160
      fam(nci,nci1)=fam(nci,9)                                          inti-161
      fam(nci,nci2)=fam(nci,10)                                         inti-162
      if ((ipe(nci).gt.ism-3).or.lo(121)) go to 38                      inti-163
      do 26 is=1,ism                                                    inti-164
      gr(1,is,nci)=fr(is,1,nci)                                         inti-165
   26 gr(2,is,nci)=fr(is,2,nci)                                         inti-166
      ipe(nci+nc)=ipe(nci)                                              inti-167
c derive the zero's order equation.                                     inti-168
      if (lo(110)) call insi(wre,gr,gr(1,1,nc+1),fr,fam,x,pad,pad,1,kab,inti-169
     1ism,ipe,nci,v,w,nat,at,lmd,nvi,nc,y,y,mc,lo,.true.,z)             inti-170
      amax=0.d0                                                         inti-171
c e. c. i. s. loop.                                                     inti-172
      do 36 kiter=1,iterm                                               inti-173
      iterr=max0(iterr,kiter)                                           inti-174
      lo(104)=.true.                                                    inti-175
      lo(106)=((kiter.ne.iterm).and.(amax.lt.1.d10)).or.lo(23)          inti-176
      if (amax.gt.1.d10) write (mw,1001) amax,kiter                     inti-177
      do 35 ic=1,nc                                                     inti-178
      i=mod(ic+nci-1,nc)+1                                              inti-179
c compute second members and solve the inhomogeneous equations.         inti-180
      do 27 j=1,4                                                       inti-181
   27 z(j)=0.d0                                                         inti-182
      if (.not.lo(44)) go to 32                                         inti-183
      do 30 j=1,nc                                                      inti-184
      if ((lo(29).and.(i.eq.j)).or.(ipe(j+nc).ge.ism)) go to 30         inti-185
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef).        inti-186
      if (lo(22)) go to 28                                              inti-187
      ij=kiter                                                          inti-188
      if (1+mod(j+nc-nci-1,nc).ge.ic) ij=ij-1                           inti-189
      if (ij.eq.0) go to 28                                             inti-190
      y(1)=pad(1,ij,j)                                                  inti-191
      y(2)=pad(2,ij,j)                                                  inti-192
      go to 29                                                          inti-193
   28 y(1)=fam(j,nci1)                                                  inti-194
      y(2)=fam(j,nci2)                                                  inti-195
   29 z(1)=z(1)+y(1)*ag(i,j,3)-y(2)*ag(i,j,1)                           inti-196
      z(2)=z(2)+y(1)*ag(i,j,1)+y(2)*ag(i,j,3)                           inti-197
      z(3)=z(3)+y(1)*ag(i,j,4)-y(2)*ag(i,j,2)                           inti-198
      z(4)=z(4)+y(1)*ag(i,j,2)+y(2)*ag(i,j,4)                           inti-199
   30 continue                                                          inti-200
      if (i.eq.nci) go to 31                                            inti-201
      z(1)=z(1)+ag(i,nci,1)                                             inti-202
      z(3)=z(3)+ag(i,nci,2)                                             inti-203
   31 z(3)=z(3)-z(2)                                                    inti-204
      z(4)=z(4)+z(1)                                                    inti-205
      z(1)=z(1)+fam(i,9)*z(3)-fam(i,10)*z(4)                            inti-206
      z(2)=z(2)+z(3)*fam(i,10)+z(4)*fam(i,9)                            inti-207
   32 if (i.ne.nci) go to 33                                            inti-208
      z(1)=z(1)-fam(i,9)                                                inti-209
      z(2)=z(2)-fam(i,10)                                               inti-210
      z(3)=z(3)-1.d0                                                    inti-211
   33 if (lo(23).and.(.not.lo(106))) lo(104)=.true.                     inti-212
      call insi(wre,gr,gr(1,1,nc+1),fr,fam,x,pad(1,1,i),pad(1,1,nc+1),kiinti-213
     1ter,kab,ism,ipe(nc+1),i,v,w,nat,at,lmd,nvi,nc,fam(i,nci1),fam(i,ncinti-214
     2i2),mc,lo,.false.,z)                                              inti-215
      if (ipe(i+nc).ge.ism) go to 34                                    inti-216
      amax=dmax1(amax,dabs(fam(i,nci1))+dabs(fam(i,nci2)))              inti-217
      if (i.ne.nci.and.lo(30)) ipe(i+nc)=ism+1                          inti-218
      go to 35                                                          inti-219
   34 fam(i,nci1)=-z(1)                                                 inti-220
      fam(i,nci2)=-z(2)                                                 inti-221
      if (lo(57)) write (mw,1002)                                       inti-222
      if (kiter.eq.1.and.(.not.lo(44))) nni=nni+1                       inti-223
      if (i.eq.nci) ipe(nci+nc)=ipe(nci)                                inti-224
   35 continue                                                          inti-225
      if (lo(104).or.(amax.gt.1.d10.and.lo(23))) go to 37               inti-226
   36 continue                                                          inti-227
      kiter=min0(kiter,iterm)                                           inti-228
   37 if (lo(53)) write (mw,1003) kiter                                 inti-229
   38 continue                                                          inti-230
      nni=nni/ncin                                                      inti-231
      return                                                            inti-232
 1000 format (2d30.15,5x,2i5)                                           inti-233
 1001 format (' maximum',d15.6,' obtained in previous iteration. last oninti-234
     1e is',i3)                                                         inti-235
 1002 format (5x,'the inhomogeneous term is neglected.')                inti-236
 1003 format (5x,i5,' iterations.')                                     inti-237
      end                                                               inti-238
c 28/02/07                                                      ecis06  insh-000
      subroutine insh(p,ic,i1,kt,fam,x,kab,ism,v,nat,at,lmd,nvi,lo)     insh-001
c  e. c. i. s. method: integration of a single homogeneous equation by  insh-002
c  the numerov method       - schroedinger equation -                   insh-003
c input:     ic:      channel number of the equation.                   insh-004
c            fam(*,i):matching values for i=1 to 4,                     insh-005
c                     wave number for i=6,                              insh-006
c                     constants of this equation for i=7 to 12.         insh-007
c            kab:     maximum number of coupled channels.               insh-008
c            ism:     number of radial points.                          insh-009
c            v:       real, imaginary potentials and couplings.         insh-010
c            nat,at:  coupling coefficients.                            insh-011
c            lmd:     first dimension of tables nat and at.             insh-012
c            nvi:     table of addresses in nat,at.                     insh-013
c            lo(i):   logical controls:                                 insh-014
c               lo(26) =.true. integration stabilised for long range    insh-015
c                              constant potential.                      insh-016
c               lo(27) =.true. numerov's method for single equations.   insh-017
c               lo(29) =.true. no diagonal terms in second member.      insh-018
c               lo(30) =.true. pure dwba calculation.                   insh-019
c               lo(101)=.true. there is a real spin-orbit potential.    insh-020
c               lo(102)=.true. there is an imaginary spin-orbit         insh-021
c                              potential.                               insh-022
c               lo(103)=.true. there is a coulomb spin-orbit potential. insh-023
c               lo(121)=.true. optical model without coupling.          insh-024
c               lo(129)=.true. real spin-orbit or dirac equation.       insh-025
c               lo(130)=.true. imaginary spin-orbit or dirac equation.  insh-026
c               lo(133)=.true. store scalar and coulomb potential       insh-027
c                              independently.                           insh-028
c output:    p(*,i):  real/imaginary regular solution for i=1 and 2,    insh-029
c                     real/imaginary irregular solution for i=3 and 4.  insh-030
c            fam(*,i):real/imaginary part of zero's order scattering    insh-031
c                     coefficients for i=9 and 10.                      insh-032
c            kt:    the solution is negligible for the first kt points. insh-033
c working area:                                                         insh-034
c            x:     for the integration.                                insh-035
c                                                                       insh-036
c for the common  /conve/ see calx.                                     insh-037
c for the common  /pote2/ see redm.                                     insh-038
c                                                                       insh-039
c significance of the quantities in common /conve/:                     insh-040
c  bjm:       convergence coefficient of imaginary potential.           insh-041
c  aconv:     convergence criterion for potential and function.         insh-042
c   used:     bjm,aconv.                                                insh-043
c                                                                       insh-044
c significance of the quantities in common /pote2/:                     insh-045
c  ity(2):    starting address of imaginary central potential.          insh-046
c  ity(3):    starting address of real spin-orbit potential.            insh-047
c  ity(4):    starting address of imaginary spin-orbit potential.       insh-048
c  ity(9):    starting address of coulomb central potential.            insh-049
c  ity(10):   starting address of coulomb spin-orbit potential.         insh-050
c   used:     ity(2),ity(3),ity(4),ity(9),ity(10).                      insh-051
c                                                                       insh-052
c***********************************************************************insh-053
      implicit real*8 (a-h,o-z)                                         insh-054
      logical lo(150)                                                   insh-055
      dimension p(ism,4),fam(kab,12),x(2,*),v(ism,*),nat(2*lmd,*),at(lmdinsh-056
     1,*),nvi(kab,kab,2)                                                insh-057
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       insh-058
      common /pote2/ ity(12),invt,intv,insl,npx                         insh-059
      bconv=aconv                                                       insh-060
c for closed channels when green's function is used.                    insh-061
      if (fam(ic,8).lt.0.d0) bconv=1.d-15                               insh-062
c computation of the regular solution.                                  insh-063
      i2=i1+ity(2)                                                      insh-064
      do 1 is=1,ism                                                     insh-065
      x(1,is+2)=fam(ic,8)-fam(ic,10)/dfloat(is*is)+fam(ic,7)*v(is,i1)   insh-066
    1 x(2,is+2)=fam(ic,7)*v(is,i2)*(1.d0+bjm)                           insh-067
      if ((.not.lo(101)).or.(fam(ic,9).eq.0.d0))  go to 4               insh-068
      i2=i1+ity(3)                                                      insh-069
      do 2 is=1,ism                                                     insh-070
    2 x(1,is+2)=x(1,is+2)+fam(ic,9)*v(is,i2)                            insh-071
      if (.not.lo(102))  go to 4                                        insh-072
      i2=i1+ity(4)                                                      insh-073
      do 3 is=1,ism                                                     insh-074
    3 x(2,is+2)=x(2,is+2)+fam(ic,9)*v(is,i2)                            insh-075
    4 if (.not.lo(133)) go to 8                                         insh-076
      if (fam(ic,11).eq.0.d0) go to 6                                   insh-077
      i2=i1+ity(9)                                                      insh-078
      do 5 is=1,ism                                                     insh-079
    5 x(1,is+2)=x(1,is+2)+fam(ic,11)*v(is,i2)                           insh-080
    6 if (fam(ic,12).eq.0.d0) go to 8                                   insh-081
      i2=i1+ity(10)                                                     insh-082
      do 7 is=1,ism                                                     insh-083
    7 x(1,is+2)=x(1,is+2)+fam(ic,12)*v(is,i2)                           insh-084
    8 if (.not.lo(29)) go to 14                                         insh-085
      k1=nvi(ic,ic,1)                                                   insh-086
      k2=nvi(ic,ic,2)                                                   insh-087
      if (k1.gt.k2) go to 14                                            insh-088
      do 13 k=k1,k2                                                     insh-089
      kt=nat(1,k)                                                       insh-090
      do 9 is=1,ism                                                     insh-091
    9 x(1,is+2)=x(1,is+2)+at(2,k)*v(is,kt)                              insh-092
      if (nat(2,k).eq.0) go to 11                                       insh-093
      kt=nat(2,k)+ity(2)                                                insh-094
      do 10 is=1,ism                                                    insh-095
   10 x(2,is+2)=x(2,is+2)+at(2,k)*v(is,kt)                              insh-096
   11 if (.not.lo(133)) go to 13                                        insh-097
      if (at(3,k).eq.0.d0) go to 13                                     insh-098
      kt=nat(1,k)+ity(9)                                                insh-099
      do 12 is=1,ism                                                    insh-100
   12 x(1,is+2)=x(1,is+2)+at(3,k)*v(is,kt)                              insh-101
   13 continue                                                          insh-102
   14 if (lo(27)) go to 16                                              insh-103
c modified numerov method.                                              insh-104
      do 15 is=1,ism                                                    insh-105
      a=x(1,is+2)**2-x(2,is+2)**2                                       insh-106
      if (lo(26)) a=a-x(1,is+2)**3/30.d0                                insh-107
      x(2,is+2)=x(2,is+2)*(1.d0-x(1,is+2)/6.d0)                         insh-108
   15 x(1,is+2)=x(1,is+2)-a/12.d0                                       insh-109
      go to 18                                                          insh-110
c numerov method.                                                       insh-111
   16 do 17 is=1,ism                                                    insh-112
      b=(12.d0+x(1,is+2))**2+x(2,is+2)**2                               insh-113
      a=12.d0*(x(1,is+2)*(12.d0+x(1,is+2))+x(2,is+2)**2)/b              insh-114
      if (lo(26)) a=a+x(1,is+2)**3/240.d0                               insh-115
      x(1,is+2)=a                                                       insh-116
   17 x(2,is+2)=144.d0*x(2,is+2)/b                                      insh-117
   18 x(1,1)=0.d0                                                       insh-118
      x(2,1)=0.d0                                                       insh-119
      x(1,2)=1.d-15                                                     insh-120
      x(2,2)=0.d0                                                       insh-121
      do 20 is=1,ism                                                    insh-122
      p(is,3)=x(1,is+2)                                                 insh-123
      p(is,4)=x(2,is+2)                                                 insh-124
      hx=x(1,is+1)*x(1,is+2)-x(2,is+1)*x(2,is+2)                        insh-125
      hy=x(2,is+1)*x(1,is+2)+x(1,is+1)*x(2,is+2)                        insh-126
      x(1,is+2)=x(1,is+1)+x(1,is+1)-x(1,is)-hx                          insh-127
      x(2,is+2)=x(2,is+1)+x(2,is+1)-x(2,is)-hy                          insh-128
      if (dabs(x(1,is+2)).lt.1.d15) go to 20                            insh-129
c  renormalisation of large function values.                            insh-130
      j=is+2                                                            insh-131
      do 19 i=2,j                                                       insh-132
      x(1,i)=x(1,i)*1.d-30                                              insh-133
   19 x(2,i)=x(2,i)*1.d-30                                              insh-134
   20 continue                                                          insh-135
c end of integration.                                                   insh-136
c matching.                                                             insh-137
      bre=x(1,ism)*fam(ic,4)-fam(ic,3)*x(1,ism+2)                       insh-138
      bim=x(2,ism)*fam(ic,4)-fam(ic,3)*x(2,ism+2)                       insh-139
      hx=x(1,ism)*fam(ic,2)-fam(ic,1)*x(1,ism+2)                        insh-140
      hy=x(2,ism)*fam(ic,2)-fam(ic,1)*x(2,ism+2)                        insh-141
      if (fam(ic,8).lt.0.d0) go to 21                                   insh-142
      bim=bim+hx                                                        insh-143
      bre=bre-hy                                                        insh-144
   21 a=bre*bre+bim*bim                                                 insh-145
      bre=-bre/a                                                        insh-146
      bim=bim/a                                                         insh-147
      fam(ic,9)=bre*hx-bim*hy                                           insh-148
      fam(ic,10)=hx*bim+hy*bre                                          insh-149
      if (lo(121)) return                                               insh-150
      bre=bre/12.d0                                                     insh-151
      bim=bim/12.d0                                                     insh-152
c normalisation of the regular solution.                                insh-153
      do 22 is=1,ism                                                    insh-154
      hx=x(1,is)+10.d0*x(1,is+1)+x(1,is+2)                              insh-155
      hy=x(2,is)+10.d0*x(2,is+1)+x(2,is+2)                              insh-156
      p(is,1)=hx*bre-hy*bim                                             insh-157
   22 p(is,2)=hx*bim+hy*bre                                             insh-158
c search of the first non negligible value.                             insh-159
      do 23 kt=1,ism                                                    insh-160
      if ((dabs(p(kt,1))+dabs(p(kt,2))).gt.bconv) go to 24              insh-161
   23 continue                                                          insh-162
   24 if (lo(30)) return                                                insh-163
      hx=0.d0                                                           insh-164
      hy=0.d0                                                           insh-165
      if (fam(ic,8).lt.0.d0) go to 25                                   insh-166
      hx=fam(ic,1)                                                      insh-167
      hy=fam(ic,2)                                                      insh-168
c computation of the irregular solution - starting values.              insh-169
c  the two last points of imaginary potential are zero.                 insh-170
   25 x(2,ism)=hx/fam(ic,6)                                             insh-171
      x(2,ism+2)=hy/fam(ic,6)                                           insh-172
      x(1,ism)=fam(ic,3)/fam(ic,6)                                      insh-173
      x(1,ism+2)=fam(ic,4)/fam(ic,6)                                    insh-174
      bre=2.d0-p(ism,3)                                                 insh-175
      x(1,ism+1)=(x(1,ism)+x(1,ism+2))/bre                              insh-176
      x(2,ism+1)=(x(2,ism)+x(2,ism+2))/bre                              insh-177
      j1=ism-kt                                                         insh-178
      if (j1.le.0) go to 27                                             insh-179
c integration.                                                          insh-180
      do 26 js=1,j1                                                     insh-181
      is=ism-js                                                         insh-182
      hx=x(1,is+1)*p(is,3)-x(2,is+1)*p(is,4)                            insh-183
      hy=x(2,is+1)*p(is,3)+x(1,is+1)*p(is,4)                            insh-184
      x(1,is)=x(1,is+1)+x(1,is+1)-x(1,is+2)-hx                          insh-185
   26 x(2,is)=x(2,is+1)+x(2,is+1)-x(2,is+2)-hy                          insh-186
c computation of irregular solution.                                    insh-187
   27 do 28 is=kt,ism                                                   insh-188
      p(is,3)=(x(1,is)+10.d0*x(1,is+1)+x(1,is+2))/12.d0                 insh-189
   28 p(is,4)=(x(2,is)+10.d0*x(2,is+1)+x(2,is+2))/12.d0                 insh-190
      return                                                            insh-191
      end                                                               insh-192
c 08/03/07                                                      ecis06  insi-000
      subroutine insi(w,p,pd,ph,fam,x,pad1,pad2,kiter,kab,ism,ipd,i,v,wwinsi-001
     1w,nat,at,lmd,nvi,nc,far,fai,mc,lo,lt,z)                           insi-002
c  e. c. i. s. method: integration of a single inhomogeneous equation   insi-003
c  by the numerov method       - schroedinger equation -                insi-004
c input:     p:       coupled solution.                                 insi-005
c            pd:      derivative of the coupled solution.               insi-006
c            ph:      homogeneous solutions.                            insi-007
c            fam(i):  wave number for i=1, coefficient of central       insi-008
c                     potential for i=3.                                insi-009
c            kiter:   current iteration number.                         insi-010
c            kab:     maximum number of equations.                      insi-011
c            ism:     number of radial points.                          insi-012
c            ipd(ic): function ic negligible for the first ipd points.  insi-013
c            i:       channel number of the equation.                   insi-014
c            v:       real, imaginary potentials and couplings.         insi-015
c            www:     coupling between equations computed in inti.      insi-016
c            nat,at:  table of coupling coefficients.                   insi-017
c            lmd:     first dimension of tables nat and at.             insi-018
c            nvi:     addresses of coupling coefficients.               insi-019
c            nc:      number of coupled channels.                       insi-020
c            far,fai: phase-shifts to update.                           insi-021
c            mc:      nuclear state number, angular momenta....         insi-022
c            lt:      .true. to compute only the derivative.            insi-023
c            z:       coulomb integral for corrections.                 insi-024
c            lo(i):   logical controls:                                 insi-025
c               lo(22) =.true. no use of pade approximants.             insi-026
c               lo(29) =.true. no diagonal terms in second member.      insi-027
c               lo(30) =.true. pure dwba calculation.                   insi-028
c               lo(44) =.true. coulomb corrections.                     insi-029
c               lo(57) =.true. output phase-shifts at each iteration.   insi-030
c               lo(104)=.true. convergence is obtained in the iteration.insi-031
c               lo(105)=.true. convergence obtained for this equation.  insi-032
c               lo(107)=.true. all the couplings calculated beforehand. insi-033
c               lo(110)=.true. derivatives are needed.                  insi-034
c output:    p:       solution for equation i.                          insi-035
c            pd:      derivative of the solution for equation i.        insi-036
c            far,fai: scattering coefficient.                           insi-037
c working areas:                                                        insi-038
c            w(2,ism):real/imaginary second member.                     insi-039
c            pad1:    iteration results for the channel i.              insi-040
c            pad2:    working field of pade,twice longer than pad1.     insi-041
c            x:       integral of regular solution with second member.  insi-042
c                                                                       insi-043
c for the common  /conve/ see calx.                                     insi-044
c for the common  /pote2/ see redm.                                     insi-045
c                                                                       insi-046
c significance of the quantities in common /conve/:                     insi-047
c  h:         step size for integration.                                insi-048
c  bjm:       convergence coefficient of imaginary potential.           insi-049
c  eiter:     convergence criterion for s-matrix.                       insi-050
c  aconv:     convergence criterion for potential and function.         insi-051
c  hconv:     aconv*h*h convergence criterion for second members.       insi-052
c   used:     h,bjm,eiter,aconv,hconv.                                  insi-053
c                                                                       insi-054
c significance of the quantities in common /pote2/:                     insi-055
c  ity(2):    starting address of imaginary central potential.          insi-056
c  ity(9):    starting address of coulomb central potential.            insi-057
c   used:     ity(2),ity(9).                                            insi-058
c                                                                       insi-059
c***********************************************************************insi-060
      implicit real*8 (a-h,o-z)                                         insi-061
      logical lo(150),lt                                                insi-062
      dimension w(2,*),p(2,ism,*),pd(2,ism,*),ph(ism,4,*),fam(kab,10),x(insi-063
     12,*),pad1(2,*),pad2(2,*),ipd(*),v(ism,*),www(ism,*),nat(2*lmd,*),ainsi-064
     2t(lmd,*),nvi(kab,kab,4),far(*),fai(*),mc(kab,6),z(4)              insi-065
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       insi-066
      common /inout/ mr,mw,ms                                           insi-067
      common /pote2/ ity(12),invt,intv,insl,npx                         insi-068
      if (lt) go to 39                                                  insi-069
      ism1=ism+1                                                        insi-070
c put zero in the inhomogeneous terms.                                  insi-071
      do 1 is=1,ism                                                     insi-072
      w(1,is)=0.d0                                                      insi-073
    1 w(2,is)=0.d0                                                      insi-074
      idp=ism1                                                          insi-075
c non derivative term of coupling potentials.                           insi-076
      do 27 ic=1,nc                                                     insi-077
      if (ipd(ic).gt.ism) go to 27                                      insi-078
      if (lo(107)) go to 9                                              insi-079
c no previous calculation of coupling potentials.                       insi-080
      if (ic.ne.i) go to 3                                              insi-081
      if (bjm.eq.0.d0) go to 3                                          insi-082
      kt=mc(ic,4)+ity(2)                                                insi-083
      do 2 is=1,ism                                                     insi-084
      w(1,is)=w(1,is)+fam(i,7)*v(is,kt)*p(2,is,ic)*bjm                  insi-085
    2 w(2,is)=w(2,is)-fam(i,7)*v(is,kt)*p(1,is,ic)*bjm                  insi-086
    3 if (lo(29).and.(ic.eq.i)) go to 27                                insi-087
c no previous calculation of coupling potentials.                       insi-088
      k1=nvi(ic,i,1)                                                    insi-089
      k2=nvi(ic,i,2)                                                    insi-090
      if (k1.gt.k2) go to 15                                            insi-091
      k3=ipd(ic)                                                        insi-092
      idp=min0(idp,k3)                                                  insi-093
      do 8 k=k1,k2                                                      insi-094
      kt=nat(1,k)                                                       insi-095
      do 4 is=k3,ism                                                    insi-096
      w(1,is)=w(1,is)+at(2,k)*v(is,kt)*p(1,is,ic)                       insi-097
    4 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*p(2,is,ic)                       insi-098
      if (nat(2,k).eq.0) go to 6                                        insi-099
      ky=nat(2,k)+ity(2)                                                insi-100
      do 5 is=k3,ism                                                    insi-101
      w(1,is)=w(1,is)-at(2,k)*v(is,ky)*p(2,is,ic)                       insi-102
    5 w(2,is)=w(2,is)+at(2,k)*v(is,ky)*p(1,is,ic)                       insi-103
    6 if (.not.lo(133)) go to 8                                         insi-104
      if (at(3,k).eq.0.d0) go to 8                                      insi-105
      kz=nat(1,k)+ity(9)                                                insi-106
      do 7 is=k3,ism                                                    insi-107
      w(1,is)=w(1,is)+at(3,k)*v(is,kz)*p(1,is,ic)                       insi-108
    7 w(2,is)=w(2,is)+at(3,k)*v(is,kz)*p(2,is,ic)                       insi-109
    8 continue                                                          insi-110
      go to 15                                                          insi-111
c coupling potentials already calculated.                               insi-112
    9 l1=nvi(ic,i,1)                                                    insi-113
      l2=nvi(ic,i,2)                                                    insi-114
      k3=ipd(ic)                                                        insi-115
      idp=min0(idp,k3)                                                  insi-116
      if (l1.eq.0) go to 13                                             insi-117
      if (l2.gt.0) go to 11                                             insi-118
      do 10 is=k3,ism                                                   insi-119
      w(1,is)=w(1,is)+www(is,l1)*p(1,is,ic)                             insi-120
   10 w(2,is)=w(2,is)+www(is,l1)*p(2,is,ic)                             insi-121
      go to 15                                                          insi-122
   11 do 12 is=k3,ism                                                   insi-123
      w(1,is)=w(1,is)+www(is,l1)*p(1,is,ic)-www(is,l2)*p(2,is,ic)       insi-124
   12 w(2,is)=w(2,is)+www(is,l1)*p(2,is,ic)+www(is,l2)*p(1,is,ic)       insi-125
      go to 15                                                          insi-126
   13 if (l2.eq.0) go to 15                                             insi-127
      do 14 is=k3,ism                                                   insi-128
      w(1,is)=w(1,is)-www(is,l2)*p(2,is,ic)                             insi-129
   14 w(2,is)=w(2,is)+www(is,l2)*p(1,is,ic)                             insi-130
   15 if (.not.lo(110)) go to 27                                        insi-131
c derivative term of coupling potentials.                               insi-132
      if (lo(107)) go to 21                                             insi-133
c no previous calculation of coupling potentials.                       insi-134
      k1=k2+1                                                           insi-135
      k2=nvi(ic,i,3)                                                    insi-136
      if (k1.gt.k2) go to 27                                            insi-137
      do 20 k=k1,k2                                                     insi-138
      kt=nat(1,k)                                                       insi-139
      do 16 is=k3,ism                                                   insi-140
      w(1,is)=w(1,is)+at(2,k)*v(is,kt)*pd(1,is,ic)                      insi-141
   16 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*pd(2,is,ic)                      insi-142
      if (nat(2,k).eq.0) go to 18                                       insi-143
      kt=nat(2,k)+ity(2)                                                insi-144
      do 17 is=k3,ism                                                   insi-145
      w(1,is)=w(1,is)-at(2,k)*v(is,kt)*pd(2,is,ic)                      insi-146
   17 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*pd(1,is,ic)                      insi-147
   18 if (.not.lo(133)) go to 20                                        insi-148
      if (at(3,k).eq.0.d0) go to 20                                     insi-149
      kt=nat(2,k)+ity(9)                                                insi-150
      do 19 is=k3,ism                                                   insi-151
      w(1,is)=w(1,is)+at(3,k)*v(is,kt)*p(1,is,ic)                       insi-152
   19 w(2,is)=w(2,is)+at(3,k)*v(is,kt)*p(2,is,ic)                       insi-153
   20 continue                                                          insi-154
      go to 27                                                          insi-155
c coupling potentials already calculated.                               insi-156
   21 l1=nvi(ic,i,3)                                                    insi-157
      l2=nvi(ic,i,4)                                                    insi-158
      if (l1.le.0) go to 25                                             insi-159
      if (l2.gt.0) go to 23                                             insi-160
      do 22 is=k3,ism                                                   insi-161
      w(1,is)=w(1,is)+www(is,l1)*pd(1,is,ic)                            insi-162
   22 w(2,is)=w(2,is)+www(is,l1)*pd(2,is,ic)                            insi-163
      go to 27                                                          insi-164
   23 do 24 is=k3,ism                                                   insi-165
      w(1,is)=w(1,is)+www(is,l1)*pd(1,is,ic)-www(is,l2)*pd(2,is,ic)     insi-166
   24 w(2,is)=w(2,is)+www(is,l1)*pd(2,is,ic)+www(is,l2)*pd(1,is,ic)     insi-167
      go to 27                                                          insi-168
   25 if (l2.eq.0) go to 27                                             insi-169
      do 26 is=k3,ism                                                   insi-170
      w(1,is)=w(1,is)-www(is,l2)*pd(2,is,ic)                            insi-171
   26 w(2,is)=w(2,is)+www(is,l2)*pd(1,is,ic)                            insi-172
   27 continue                                                          insi-173
      ipd(i)=idp                                                        insi-174
c search for the first non negligible value.                            insi-175
      if (idp.gt.ism) go to 42                                          insi-176
      do 28 is=idp,ism                                                  insi-177
      if ((dabs(w(1,is))+dabs(w(2,is))).gt.hconv) go to 29              insi-178
   28 continue                                                          insi-179
   29 ipd(i)=is                                                         insi-180
      kt=max0(ipd(i),1)                                                 insi-181
      if (ipd(i).ge.ism) go to 42                                       insi-182
      if (.not.lo(44)) go to 30                                         insi-183
      w(1,ism)=0.d0                                                     insi-184
      w(2,ism)=0.d0                                                     insi-185
c integral of the regular function with the second member.              insi-186
   30 x(1,kt)=-ph(kt,2,i)*w(2,kt)+ph(kt,1,i)*w(1,kt)                    insi-187
      x(2,kt)=ph(kt,1,i)*w(2,kt)+ph(kt,2,i)*w(1,kt)                     insi-188
      kkt=kt+1                                                          insi-189
      if (kkt.gt.ism) go to 32                                          insi-190
      do 31 is=kkt,ism                                                  insi-191
      x(1,is)=x(1,is-1)+ph(is,1,i)*w(1,is)-ph(is,2,i)*w(2,is)           insi-192
   31 x(2,is)=x(2,is-1)+ph(is,1,i)*w(2,is)+ph(is,2,i)*w(1,is)           insi-193
c scattering coefficients.                                              insi-194
   32 bre=x(1,ism)/(h*fam(i,5))-z(1)                                    insi-195
      bim=x(2,ism)/(h*fam(i,5))-z(2)                                    insi-196
      if (lo(30)) go to 38                                              insi-197
      hx=z(3)*h                                                         insi-198
      hy=z(4)*h                                                         insi-199
      ist=ism+kt                                                        insi-200
c integral of the irregular function with the second member in hx/hy    insi-201
c and computation of the solution with the correction term w/12.        insi-202
      do 33 is=kt,ism                                                   insi-203
      js=ist-is                                                         insi-204
      p(1,js,i)=(x(1,js)*ph(js,3,i)-x(2,js)*ph(js,4,i)-hx*ph(js,1,i)+hy*insi-205
     1ph(js,2,i))/h-w(1,js)/12.d0                                       insi-206
      p(2,js,i)=(x(1,js)*ph(js,4,i)+x(2,js)*ph(js,3,i)-hy*ph(js,1,i)-hx*insi-207
     1ph(js,2,i))/h-w(2,js)/12.d0                                       insi-208
      hx=hx-ph(js,3,i)*w(1,js)+ph(js,4,i)*w(2,js)                       insi-209
   33 hy=hy-ph(js,3,i)*w(2,js)-ph(js,4,i)*w(1,js)                       insi-210
      if (kt.eq.1) go to 35                                             insi-211
      k=kt-1                                                            insi-212
      do 34 is=1,k                                                      insi-213
      p(1,is,i)=-(hx*ph(is,1,i)-hy*ph(is,2,i))/h                        insi-214
   34 p(2,is,i)=-(hy*ph(is,1,i)+hx*ph(is,2,i))/h                        insi-215
   35 do 36 kt=1,ism                                                    insi-216
      if ((dabs(p(1,kt,i))+dabs(p(2,kt,i))).gt.aconv) go to 37          insi-217
   36 continue                                                          insi-218
   37 ipd(i)=kt                                                         insi-219
      if (lo(22)) go to 38                                              insi-220
      pad1(1,kiter)=bre                                                 insi-221
      pad1(2,kiter)=bim                                                 insi-222
c  test of convergence.                                                 insi-223
   38 lo(105)=(dabs(bim-fai(1)).le.eiter.and.(dabs(bre-far(1)).le.eiter)insi-224
     1)                                                                 insi-225
      if ((.not.lo(22)).and.lo(104).and.kiter.gt.3.and.(.not.lo(105))) cinsi-226
     1all pade(pad1,pad2,kiter,bre,bim,eiter,1.d0,0.d0,lo)              insi-227
      lo(104)=lo(104).and.lo(105)                                       insi-228
      far(1)=bre                                                        insi-229
      fai(1)=bim                                                        insi-230
      if (lo(57)) write (mw,1000) i,far(1),fai(1),kiter,kt              insi-231
      if (.not.lo(110).or.lo(92)) return                                insi-232
c computation of r*(d/dr) of the solutions.                             insi-233
   39 ist=ism-3                                                         insi-234
      do 41 j=1,2                                                       insi-235
      pd(j,1,i)=2.5d0*p(j,2,i)-.25d0*p(j,5,i)+(5.d0*p(j,4,i)-7.7d0*p(j,1insi-236
     1,i)-10.d0*p(j,3,i)+.2d0*p(j,6,i))/6.d0                            insi-237
      pd(j,2,i)=-.8d0*p(j,1,i)-p(j,4,i)+(8.d0*p(j,3,i)-3.5d0*p(j,2,i)+.8insi-238
     1d0*p(j,5,i)-.1d0*p(j,6,i))/3.d0                                   insi-239
      pd(j,3,i)=2.25d0*(p(j,4,i)-p(j,2,i))-.45d0*(p(j,5,i)-p(j,1,i))+.05insi-240
     1d0*p(j,6,i)                                                       insi-241
      fp=3.d0                                                           insi-242
      do 40 is=4,ist                                                    insi-243
      fp=fp+1.d0                                                        insi-244
   40 pd(j,is,i)=fp*(.75d0*(p(j,is+1,i)-p(j,is-1,i))-.15d0*(p(j,is+2,i)-insi-245
     1p(j,is-2,i))+(p(j,is+3,i)-p(j,is-3,i))/60.d0)                     insi-246
      fp=fp+1.d0                                                        insi-247
      pd(j,ism-2,i)=fp*(p(j,ism-6,i)-8.d0*p(j,ism-5,i)+30.d0*p(j,ism-4,iinsi-248
     1)-80.d0*p(j,ist,i)+35.d0*p(j,ism-2,i)+24.d0*p(j,ism-1,i)-2.d0*p(j,insi-249
     2ism,i))/60.d0                                                     insi-250
      fp=fp+1.d0                                                        insi-251
      pd(j,ism-1,i)=fp*(15.d0*p(j,ism-5,i)-2.d0*p(j,ism-6,i)-50.d0*p(j,iinsi-252
     1sm-4,i)+100.d0*p(j,ist,i)-150.d0*p(j,ism-2,i)+77.d0*p(j,ism-1,i)+1insi-253
     20.d0*p(j,ism,i))/60.d0                                            insi-254
      fp=fp+1.d0                                                        insi-255
      pd(j,ism,i)=fp*(10.d0*p(j,ism-6,i)-72.d0*p(j,ism-5,i)+225.d0*p(j,iinsi-256
     1sm-4,i)-400.d0*p(j,ist,i)+450.d0*p(j,ism-2,i)-360.d0*p(j,ism-1,i)+insi-257
     2147.d0*p(j,ism,i))/60.d0                                          insi-258
   41 continue                                                          insi-259
      return                                                            insi-260
   42 if (lo(22)) return                                                insi-261
      pad1(1,kiter)=0.d0                                                insi-262
      pad1(2,kiter)=0.d0                                                insi-263
      return                                                            insi-264
 1000 format (5x,i5,2d30.15,i10,10x,i5)                                 insi-265
      end                                                               insi-266
c 27/06/06                                                      ecis06  intr-000
      subroutine intr(fam,x,fr,gr,wre,pad,ipe,ism,kab,w,iterm,nc,v,vr,nvintr-001
     1i,mc,nat,at,ag,ncin,nni,iterr,lo)                                 intr-002
c  e. c. i. s. method: dirac equation driving routine.                  intr-003
c             inrh  to solve the single homogeneous equations.          intr-004
c             inri  to solve the single inhomogeneous equations.        intr-005
c  pade approximants of type i may be used to accelerate the convergenceintr-006
c input:     fam(*,i):matching values for i=1 to 6, constants of each   intr-007
c                     equation for i=7 to 10.                           intr-008
c            ism:     number of radial points.                          intr-009
c            kab:     maximum number of coupled channels.               intr-010
c            iterm:   maximum number of iterations and dim. of pad.     intr-011
c            nc:      number of coupled equations.                      intr-012
c            v,vr:    real, imaginary potentials and couplings.         intr-013
c            nvi:     addresses of couplings.                           intr-014
c            mc:      nuclear state number, angular momenta....         intr-015
c            nat,at:  table of coupling coefficients.                   intr-016
c            ag:      coulomb integrals for coulomb corrections.        intr-017
c            ncin:    number of solutions.                              intr-018
c            lo(i):   logical controls:                                 intr-019
c               lo(22) =.true. no use of pade approximants.             intr-020
c               lo(23) =.true. no use of pade and shift to usual coupledintr-021
c                              equations when there is no convergence.  intr-022
c               lo(30) =.true. pure dwba calculation.                   intr-023
c               lo(44) =.true. coulomb corrections.                     intr-024
c               lo(53) =.true. output of the number of iterations.      intr-025
c               lo(57) =.true. output phase-shifts at each iteration.   intr-026
c               lo(74) =.true. output of time in different steps.       intr-027
c               lo(104)=.true. convergence is obtained in the iteration.intr-028
c               lo(106)=.true. when the iteration is not the last one   intr-029
c                              allowed.                                 intr-030
c               lo(107)=.true. all the couplings calculated beforehand. intr-031
c               lo(121)=.true. optical model without coupling.          intr-032
c output:    fam(*,i):scattering coefficients for i>9.                  intr-033
c            nni:     number of equations with negligible inhomogeneous intr-034
c                     term.                                             intr-035
c            iterr:   largest number of iterations done for this j.     intr-036
c working areas:                                                        intr-037
c            x:       used in inrh and inri.                            intr-038
c            fr:      solutions of homogeneous equations.               intr-039
c            gr:      solutions of coupled equations.                   intr-040
c            wre:     real/imaginary inhomogeneous term.                intr-041
c            pad:     pade approximants.                                intr-042
c            ipe(*,i):first non negligible point of uncoupled functions intr-043
c                     for i=1, of coupled functions for i=2.            intr-044
c            w:       free part of the storage for couplings            intr-045
c***********************************************************************intr-046
      implicit real*8 (a-h,o-z)                                         intr-047
      logical lo(150)                                                   intr-048
      dimension fam(kab,*),x(*),fr(ism,8,*),gr(ism,4,*),wre(ism,*),pad(2intr-049
     1,iterm,*),ipe(nc,2),w(ism,4,*),v(ism,14,*),vr(ism,4,*),nvi(kab,kabintr-050
     2,4),mc(kab,6),nat(6,*),at(3,*),ag(kab,kab,4),y(2),z(4)            intr-051
      common /inout/ mr,mw,ms                                           intr-052
      nni=0                                                             intr-053
c compute all coupling potentials and solve all homogeneous equations.  intr-054
      do 5 i=1,nc                                                       intr-055
      i1=mc(i,4)                                                        intr-056
      if (i1.lt.0) go to 1                                              intr-057
      call inrh(fr(1,1,i),i,k,fam,x,kab,ism,dfloat(mc(i,6)+1),v(1,1,i1),intr-058
     1lo)                                                               intr-059
      ipe(i,1)=k                                                        intr-060
      go to 4                                                           intr-061
    1 i1=-i1                                                            intr-062
      if (i1.eq.i) go to 4                                              intr-063
      do 3 j=1,8                                                        intr-064
      do 2 is=1,ism                                                     intr-065
    2 fr(is,j,i)=fr(is,j,i1)                                            intr-066
    3 continue                                                          intr-067
      ipe(i,1)=ipe(i1,1)                                                intr-068
    4 if (lo(57)) write (mw,1000) fam(i,9),fam(i,10),i,ipe(i,1)         intr-069
    5 continue                                                          intr-070
      if (.not.lo(107).or.lo(121)) go to 16                             intr-071
      iw=0                                                              intr-072
c calculation of the non diagonal coupling potentials.                  intr-073
      do 15 ic=1,nc                                                     intr-074
      do 14 ip=1,ic                                                     intr-075
      k1=nvi(ip,ic,1)                                                   intr-076
      k2=nvi(ip,ic,2)                                                   intr-077
      k3=nvi(ip,ic,3)                                                   intr-078
      nvi(ip,ic,3)=0                                                    intr-079
      nvi(ip,ic,4)=0                                                    intr-080
      if (k1.gt.k2) go to 9                                             intr-081
      iw=iw+1                                                           intr-082
      nvi(ip,ic,3)=iw                                                   intr-083
      k=nat(1,k1)                                                       intr-084
      do 6 is=1,ism                                                     intr-085
      w(is,1,iw)=at(2,k1)*vr(is,1,k)                                    intr-086
      w(is,2,iw)=at(2,k1)*vr(is,2,k)                                    intr-087
      w(is,3,iw)=at(3,k1)*vr(is,3,k)                                    intr-088
    6 w(is,4,iw)=at(3,k1)*vr(is,4,k)                                    intr-089
      k4=k1+1                                                           intr-090
      if (k4.gt.k2) go to 9                                             intr-091
      do 8 k1=k4,k2                                                     intr-092
      k=nat(1,k1)                                                       intr-093
      do 7 is=1,ism                                                     intr-094
      w(is,1,iw)=w(is,1,iw)+at(2,k1)*vr(is,1,k)                         intr-095
      w(is,2,iw)=w(is,2,iw)+at(2,k1)*vr(is,2,k)                         intr-096
      w(is,3,iw)=w(is,3,iw)+at(3,k1)*vr(is,3,k)                         intr-097
    7 w(is,4,iw)=w(is,4,iw)+at(3,k1)*vr(is,4,k)                         intr-098
    8 continue                                                          intr-099
    9 if (k2.ge.k3) go to 13                                            intr-100
      iw=iw+1                                                           intr-101
      nvi(ip,ic,4)=iw                                                   intr-102
      k1=k2+1                                                           intr-103
      k=nat(1,k1)                                                       intr-104
      do 10 is=1,ism                                                    intr-105
      w(is,1,iw)=at(2,k1)*vr(is,1,k)+at(3,k1)*vr(is,3,k)                intr-106
      w(is,2,iw)=at(2,k1)*vr(is,2,k)+at(3,k1)*vr(is,4,k)                intr-107
      w(is,3,iw)=at(2,k1)*vr(is,1,k)-at(3,k1)*vr(is,3,k)                intr-108
   10 w(is,4,iw)=at(2,k1)*vr(is,2,k)-at(3,k1)*vr(is,4,k)                intr-109
      k4=k1+1                                                           intr-110
      if (k4.gt.k3) go to 13                                            intr-111
      do 12 k1=k4,k3                                                    intr-112
      k=nat(1,k1)                                                       intr-113
      do 11 is=1,ism                                                    intr-114
      w(is,1,iw)=w(is,1,iw)+at(2,k1)*vr(is,1,k)+at(3,k1)*vr(is,3,k)     intr-115
      w(is,2,iw)=w(is,2,iw)+at(2,k1)*vr(is,2,k)+at(3,k1)*vr(is,4,k)     intr-116
      w(is,3,iw)=w(is,3,iw)+at(2,k1)*vr(is,1,k)-at(3,k1)*vr(is,3,k)     intr-117
   11 w(is,4,iw)=w(is,4,iw)+at(2,k1)*vr(is,2,k)-at(3,k1)*vr(is,4,k)     intr-118
   12 continue                                                          intr-119
   13 nvi(ic,ip,3)=nvi(ip,ic,3)                                         intr-120
      nvi(ic,ip,4)=nvi(ip,ic,4)                                         intr-121
   14 continue                                                          intr-122
   15 continue                                                          intr-123
   16 if (lo(74)) call hora                                             intr-124
c loop on solutions.                                                    intr-125
      do 30 nci=1,ncin                                                  intr-126
      nci1=nci+10                                                       intr-127
      nci2=nci1+ncin                                                    intr-128
c set the zero's order solution.                                        intr-129
      do 17 ic=1,nc                                                     intr-130
      ipe(ic,2)=ism+1                                                   intr-131
      fam(ic,nci1)=0.d0                                                 intr-132
   17 fam(ic,nci2)=0.d0                                                 intr-133
      fam(nci,nci1)=fam(nci,9)                                          intr-134
      fam(nci,nci2)=fam(nci,10)                                         intr-135
      if ((ipe(nci,1).gt.ism-3).or.lo(121)) go to 30                    intr-136
      do 18 is=1,ism                                                    intr-137
      gr(is,1,nci)=fr(is,1,nci)                                         intr-138
      gr(is,2,nci)=fr(is,2,nci)                                         intr-139
      gr(is,3,nci)=fr(is,5,nci)                                         intr-140
   18 gr(is,4,nci)=fr(is,6,nci)                                         intr-141
      ipe(nci,2)=ipe(nci,1)                                             intr-142
      amax=0.d0                                                         intr-143
c e. c. i. s. loop.                                                     intr-144
      do 28 kiter=1,iterm                                               intr-145
      iterr=max0(iterr,kiter)                                           intr-146
      lo(104)=.true.                                                    intr-147
      lo(106)=((kiter.ne.iterm).and.(amax.lt.1.d10)).or.lo(23)          intr-148
      if (amax.gt.1.d10) write (mw,1001) amax,kiter                     intr-149
      do 27 ic=1,nc                                                     intr-150
      i=mod(ic+nci-1,nc)+1                                              intr-151
      i1=mc(i,1)                                                        intr-152
      do 19 j=1,4                                                       intr-153
   19 z(j)=0.d0                                                         intr-154
      if (.not.lo(44)) go to 24                                         intr-155
      do 22 j=1,nc                                                      intr-156
      if (ipe(j,2).ge.ism) go to 22                                     intr-157
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef).        intr-158
      if (lo(22)) go to 20                                              intr-159
      ij=kiter                                                          intr-160
      if (1+mod(j+nc-nci-1,nc).ge.ic) ij=ij-1                           intr-161
      if (ij.eq.0) go to 20                                             intr-162
      y(1)=pad(1,ij,j)                                                  intr-163
      y(2)=pad(2,ij,j)                                                  intr-164
      go to 21                                                          intr-165
   20 y(1)=fam(j,nci1)                                                  intr-166
      y(2)=fam(j,nci2)                                                  intr-167
   21 z(1)=z(1)+y(1)*ag(i,j,3)-y(2)*ag(i,j,1)                           intr-168
      z(2)=z(2)+y(1)*ag(i,j,1)+y(2)*ag(i,j,3)                           intr-169
      z(3)=z(3)+y(1)*ag(i,j,4)-y(2)*ag(i,j,2)                           intr-170
      z(4)=z(4)+y(1)*ag(i,j,2)+y(2)*ag(i,j,4)                           intr-171
   22 continue                                                          intr-172
      if (i.eq.nci) go to 23                                            intr-173
      z(1)=z(1)+ag(i,nci,1)                                             intr-174
      z(3)=z(3)+ag(i,nci,2)                                             intr-175
   23 z(3)=z(3)-z(2)                                                    intr-176
      z(4)=z(4)+z(1)                                                    intr-177
      z(1)=z(1)+fam(i,9)*z(3)-fam(i,10)*z(4)                            intr-178
      z(2)=z(2)+z(3)*fam(i,10)+z(4)*fam(i,9)                            intr-179
   24 if (i.ne.nci) go to 25                                            intr-180
      z(1)=z(1)-fam(i,9)                                                intr-181
      z(2)=z(2)-fam(i,10)                                               intr-182
      z(3)=z(3)-1.d0                                                    intr-183
   25 if (lo(23).and.(.not.lo(106))) lo(104)=.true.                     intr-184
c compute second members and solve the inhomogeneous equations.         intr-185
      call inri(wre,fr(1,1,i),gr,w,nvi,fam(i,5),x,pad(1,1,i),pad(1,1,nc+intr-186
     11),kiter,kab,nc,ism,ipe(1,2),i,nat,at,vr,fam(i,nci1),fam(i,nci2),dintr-187
     2float(mc(i,6)+1),v(1,1,i1),lo,z)                                  intr-188
      if (ipe(i,2).ge.ism) go to 26                                     intr-189
      if (i.ne.nci.and.lo(30)) ipe(i,2)=ism+1                           intr-190
      amax=dmax1(amax,dabs(fam(i,nci1))+dabs(fam(i,nci2)))              intr-191
      go to 27                                                          intr-192
   26 fam(i,nci1)=-z(1)                                                 intr-193
      fam(i,nci2)=-z(2)                                                 intr-194
      if (lo(57)) write (mw,1002)                                       intr-195
      if (kiter.eq.1.and.lo(44)) nni=nni+1                              intr-196
      if (i.eq.nci) ipe(nci,2)=ipe(nci,1)                               intr-197
   27 continue                                                          intr-198
      if (lo(74)) call hora                                             intr-199
      if (lo(104).or.(amax.gt.1.d10.and.lo(23))) go to 29               intr-200
   28 continue                                                          intr-201
      kiter=min0(kiter,iterm)                                           intr-202
   29 if (lo(53)) write (mw,1003) kiter                                 intr-203
   30 continue                                                          intr-204
      nni=nni/ncin                                                      intr-205
      return                                                            intr-206
 1000 format (2d30.15,5x,2i5)                                           intr-207
 1001 format (' maximum',d15.6,' obtained in previous iteration. last onintr-208
     1e is',i3)                                                         intr-209
 1002 format (5x,'the inhomogeneous term is neglected.')                intr-210
 1003 format (5x,i5,' iterations.')                                     intr-211
      end                                                               intr-212
c 27/06/06                                                      ecis06  inrh-000
      subroutine inrh(p,ic,kt,fam,x,nc,ism,cc,vv,lo)                    inrh-001
c  e. c. i. s. method: integration of a single homogeneous equation by  inrh-002
c  the numerov method   - dirac equation -                              inrh-003
c input:     ic:      channel number of the equation.                   inrh-004
c            fam(*,i):matching values for i=1 to 4,                     inrh-005
c                     constants of this equation for i=6 to 10.         inrh-006
c            kab:     maximum number of coupled channels.               inrh-007
c            nc:      number of coupled channels.                       inrh-008
c            ism:     number of radial points.                          inrh-009
c            cc:      eigenvalue of l.s+1                               inrh-010
c            vv:      potentials, d(r), ....                            inrh-011
c            lo(i):   logical controls:                                 inrh-012
c               lo(26) =.true. integration stabilised for long range    inrh-013
c                              constant potential.                      inrh-014
c               lo(27) =.true. numerov's method for single equations.   inrh-015
c               lo(121)=.true. optical model without coupling.          inrh-016
c output:    p(*,i):  regular solution for i=1, 2, 5 and 6,             inrh-017
c                     irregular solution for i=3, 4, 7 and 8,           inrh-018
c                     large components for i=1 to 4,                    inrh-019
c                     small component for i=5 to 8,                     inrh-020
c                     real/imaginary irregular solution for i=3 and 4.  inrh-021
c            fam(*,i):real/imaginary part of zero's order scattering    inrh-022
c                     coefficients for i=9 and 10.                      inrh-023
c            kt:    the solution is negligible for the first kt points. inrh-024
c working area:                                                         inrh-025
c            x:     for the integration.                                inrh-026
c                                                                       inrh-027
c for the common  /conve/ see calx.                                     inrh-028
c                                                                       inrh-029
c significance of the quantities in common /conve/:                     inrh-030
c  h:         step size for integration.                                inrh-031
c  aconv:     convergence criterion for potential and function.         inrh-032
c   used:     h,aconv.                                                  inrh-033
c                                                                       inrh-034
c***********************************************************************inrh-035
      implicit real*8 (a-h,o-z)                                         inrh-036
      logical lo(150)                                                   inrh-037
      dimension p(ism,8),fam(nc,10),x(2,*),vv(ism,14)                   inrh-038
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       inrh-039
c computation of the regular solution.                                  inrh-040
      do 1 is=1,ism                                                     inrh-041
      x(1,is+2)=fam(ic,10)/dfloat(is)**2-fam(ic,8)-fam(ic,7)*vv(is,1)-fainrh-042
     1m(ic,9)*vv(is,3)                                                  inrh-043
    1 x(2,is+2)=-fam(ic,7)*vv(is,2)-fam(ic,9)*vv(is,4)                  inrh-044
      if (lo(27)) go to 3                                               inrh-045
c modified numerov method.                                              inrh-046
      do 2 is=1,ism                                                     inrh-047
      a=x(1,is+2)**2-x(2,is+2)**2                                       inrh-048
      if (lo(26)) a=a+x(1,is+2)**3/30.d0                                inrh-049
      x(2,is+2)=x(2,is+2)*(1.d0+x(1,is+2)/6.d0)                         inrh-050
    2 x(1,is+2)=x(1,is+2)+a/12.d0                                       inrh-051
      go to 5                                                           inrh-052
c numerov method.                                                       inrh-053
    3 do 4 is=1,ism                                                     inrh-054
      b=(12.d0-x(1,is+2))**2+x(2,is+2)**2                               inrh-055
      a=12.d0*(x(1,is+2)*(12.d0-x(1,is+2))-x(2,is+2)**2)/b              inrh-056
      if (lo(26)) a=a-x(1,is+2)**3/240.d0                               inrh-057
      x(1,is+2)=a                                                       inrh-058
    4 x(2,is+2)=144.d0*x(2,is+2)/b                                      inrh-059
    5 x(1,1)=0.d0                                                       inrh-060
      x(2,1)=0.d0                                                       inrh-061
      x(1,2)=1.d-15                                                     inrh-062
      x(2,2)=0.d0                                                       inrh-063
      do 7 is=1,ism                                                     inrh-064
      p(is,3)=x(1,is+2)                                                 inrh-065
      p(is,4)=x(2,is+2)                                                 inrh-066
      hx=x(1,is+1)*x(1,is+2)-x(2,is+1)*x(2,is+2)                        inrh-067
      hy=x(2,is+1)*x(1,is+2)+x(1,is+1)*x(2,is+2)                        inrh-068
      x(1,is+2)=x(1,is+1)+x(1,is+1)-x(1,is)+hx                          inrh-069
      x(2,is+2)=x(2,is+1)+x(2,is+1)-x(2,is)+hy                          inrh-070
      if (dabs(x(1,is+2)).lt.1.d15) go to 7                             inrh-071
c renormalisation of large function values.                             inrh-072
      j=is+2                                                            inrh-073
      do 6 i=2,j                                                        inrh-074
      x(1,i)=x(1,i)*1.d-30                                              inrh-075
    6 x(2,i)=x(2,i)*1.d-30                                              inrh-076
    7 continue                                                          inrh-077
c end of integration.                                                   inrh-078
c matching with two values.                                             inrh-079
      bre=x(1,ism)*fam(ic,4)-fam(ic,3)*x(1,ism+2)                       inrh-080
      bim=x(2,ism)*fam(ic,4)-fam(ic,3)*x(2,ism+2)                       inrh-081
      hx=x(1,ism)*fam(ic,2)-fam(ic,1)*x(1,ism+2)                        inrh-082
      hy=x(2,ism)*fam(ic,2)-fam(ic,1)*x(2,ism+2)                        inrh-083
      bim=bim+hx                                                        inrh-084
      bre=bre-hy                                                        inrh-085
      brr=bre*bre+bim*bim                                               inrh-086
      bre=-bre/brr                                                      inrh-087
      bim=bim/brr                                                       inrh-088
      fam(ic,9)=bre*hx-bim*hy                                           inrh-089
      fam(ic,10)=hx*bim+hy*bre                                          inrh-090
      if (lo(121)) return                                               inrh-091
      bre=bre/12.d0                                                     inrh-092
      bim=bim/12.d0                                                     inrh-093
c normalisation of the regular solution.                                inrh-094
c and search of the first non negligible value.                         inrh-095
      do 8 is=1,ism                                                     inrh-096
      brr=x(1,is)+10.d0*x(1,is+1)+x(1,is+2)                             inrh-097
      hy=x(2,is)+10.d0*x(2,is+1)+x(2,is+2)                              inrh-098
      hx=brr*bre-hy*bim                                                 inrh-099
      hy=hy*bre+brr*bim                                                 inrh-100
      p(is,1)=hx*vv(is,9)-hy*vv(is,10)                                  inrh-101
    8 p(is,2)=hx*vv(is,10)+hy*vv(is,9)                                  inrh-102
      do 9 kt=1,ism                                                     inrh-103
      if ((dabs(p(kt,1))+dabs(p(kt,2))).gt.aconv) go to 10              inrh-104
    9 continue                                                          inrh-105
   10 hx=fam(ic,1)                                                      inrh-106
      hy=fam(ic,2)                                                      inrh-107
c computation of the irregular solution - starting values.              inrh-108
c the last point of imaginary potential is neglected.                   inrh-109
      x(2,ism)=hx/fam(ic,6)                                             inrh-110
      x(2,ism+2)=hy/fam(ic,6)                                           inrh-111
      x(1,ism)=fam(ic,3)/fam(ic,6)                                      inrh-112
      x(1,ism+2)=fam(ic,4)/fam(ic,6)                                    inrh-113
      bre=2.d0+p(ism,3)                                                 inrh-114
      x(1,ism+1)=(x(1,ism)+x(1,ism+2))/bre                              inrh-115
      x(2,ism+1)=(x(2,ism)+x(2,ism+2))/bre                              inrh-116
      kr=min0(kt,ism-6)                                                 inrh-117
      i1=ism-kr                                                         inrh-118
c integration.                                                          inrh-119
      do 11 js=1,i1                                                     inrh-120
      is=ism-js                                                         inrh-121
      hx=x(1,is+1)*p(is,3)-x(2,is+1)*p(is,4)                            inrh-122
      hy=x(2,is+1)*p(is,3)+x(1,is+1)*p(is,4)                            inrh-123
      x(1,is)=x(1,is+1)+x(1,is+1)-x(1,is+2)+hx                          inrh-124
   11 x(2,is)=x(2,is+1)+x(2,is+1)-x(2,is+2)+hy                          inrh-125
c computation of irregular solution.                                    inrh-126
      do 12 is=kr,ism                                                   inrh-127
      bre=(x(1,is)+10.d0*x(1,is+1)+x(1,is+2))/12.d0                     inrh-128
      bim=(x(2,is)+10.d0*x(2,is+1)+x(2,is+2))/12.d0                     inrh-129
      p(is,3)=bre*vv(is,9)-bim*vv(is,10)                                inrh-130
   12 p(is,4)=bre*vv(is,10)+bim*vv(is,9)                                inrh-131
      ism3=ism-3                                                        inrh-132
      hh=h*60.d0                                                        inrh-133
      do 22 l=1,4                                                       inrh-134
      do 21 is=kt,ism                                                   inrh-135
      if (is-kr.gt.2) go to 16                                          inrh-136
      if (is-kr-1)  13 , 14 , 15                                        inrh-137
   13 p(is,l+4)=(-147.d0*p(is,l)+360.d0*p(is+1,l)-450.d0*p(is+2,l)+400.dinrh-138
     10*p(is+3,l)-225.d0*p(is+4,l)+72.d0*p(is+5,l)-10.d0*p(is+6,l))/hh  inrh-139
      go to 21                                                          inrh-140
   14 p(is,l+4)=(-10.d0*p(kr,l)-77.d0*p(is,l)+150.d0*p(is+1,l)-100.d0*p(inrh-141
     1is+2,l)+50.d0*p(is+3,l)-15.d0*p(is+4,l)+2.d0*p(is+5,l))/hh        inrh-142
      go to 21                                                          inrh-143
   15 p(is,l+4)=(2.d0*p(kr,l)-24.d0*p(is-1,l)-35.d0*p(is,l)+80.d0*p(is+1inrh-144
     1,l)-30.d0*p(is+2,l)+8.d0*p(is+3,l)-p(is+4,l))/hh                  inrh-145
      go to 21                                                          inrh-146
   16 if (is.gt.ism3) go to 17                                          inrh-147
      p(is,l+4)=(45.d0*(p(is+1,l)-p(is-1,l))-9.d0*(p(is+2,l)-p(is-2,l))+inrh-148
     1p(is+3,l)-p(is-3,l))/hh                                           inrh-149
      go to 21                                                          inrh-150
   17 if (is-ism+1) 18 , 19 , 20                                        inrh-151
   18 p(ism-2,l+4)=(p(ism-6,l)-8.d0*p(ism-5,l)+30.d0*p(ism-4,l)-80.d0*p(inrh-152
     1ism3,l)+35.d0*p(ism-2,l)+24.d0*p(ism-1,l)-2.d0*p(ism,l))/hh       inrh-153
      go to 21                                                          inrh-154
   19 p(ism-1,l+4)=(-2.d0*p(ism-6,l)+15.d0*p(ism-5,l)-50.d0*p(ism-4,l)+1inrh-155
     100.d0*p(ism3,l)-150.d0*p(ism-2,l)+77.d0*p(ism-1,l)+10.d0*p(ism,l))inrh-156
     2/hh                                                               inrh-157
      go to 21                                                          inrh-158
   20 p(ism,l+4)=(10.d0*p(ism-6,l)-72.d0*p(ism-5,l)+225.d0*p(ism-4,l)-40inrh-159
     10.d0*p(ism3,l)+450.d0*p(ism-2,l)-360.d0*p(ism-1,l)+147.d0*p(ism,l)inrh-160
     2)/hh                                                              inrh-161
   21 continue                                                          inrh-162
   22 continue                                                          inrh-163
      r=h*dfloat(kt-1)                                                  inrh-164
      do 23 is=kt,ism                                                   inrh-165
      r=r+h                                                             inrh-166
      br=p(is,1)*(cc/r+vv(is,13))-p(is,5)-p(is,2)*vv(is,14)             inrh-167
      bi=p(is,2)*(cc/r+vv(is,13))-p(is,6)+p(is,1)*vv(is,14)             inrh-168
      cr=p(is,3)*(cc/r+vv(is,13))-p(is,7)-p(is,4)*vv(is,14)             inrh-169
      ci=p(is,4)*(cc/r+vv(is,13))-p(is,8)+p(is,3)*vv(is,14)             inrh-170
      p(is,5)=br*vv(is,11)-bi*vv(is,12)                                 inrh-171
      p(is,6)=bi*vv(is,11)+br*vv(is,12)                                 inrh-172
      p(is,7)=cr*vv(is,11)-ci*vv(is,12)                                 inrh-173
   23 p(is,8)=ci*vv(is,11)+cr*vv(is,12)                                 inrh-174
      if (kt.eq.1) return                                               inrh-175
      kr=kt-1                                                           inrh-176
      do 25 is=1,kr                                                     inrh-177
      do 24 l=1,8                                                       inrh-178
   24 p(is,l)=0.d0                                                      inrh-179
   25 continue                                                          inrh-180
      return                                                            inrh-181
      end                                                               inrh-182
c 27/06/06                                                      ecis06  inri-000
      subroutine inri(w,p,q,ww,nvi,fam,x,pad1,pad2,kiter,kab,nc,ism,ipi,inri-001
     1j,nat,at,vr,far,fai,cc,v,lo,z)                                    inri-002
c  e. c. i. s. method: integration of a single inhomogeneous equation   inri-003
c  by the numerov method      - dirac equation -                        inri-004
c input:     p:       uncoupled solutions.                              inri-005
c            q:       coupled solution.                                 inri-006
c            ww:      coupling between equations.                       inri-007
c            nvi:     table of addresses of couplings.                  inri-008
c            fam:     wave number.                                      inri-009
c            kiter:   current iteration number.                         inri-010
c            kab:     dimension of table nvi.                           inri-011
c            nc:      number of coupled channels.                       inri-012
c            ism:     number of radial points.                          inri-013
c            ipi:     the function is negligible for r < ipi*h.         inri-014
c            j:       channel number of the equation.                   inri-015
c            nat,at:  coefficients and addresses of couplings.          inri-016
c            vr:      coupling potentials.                              inri-017
c            cc:      eigenvalue of l.s + 1.                            inri-018
c            v:       d(r) and tensor potentials for h**4 correction.   inri-019
c            z:       coulomb integral for corrections.                 inri-020
c            lo(i):   logical controls:                                 inri-021
c               lo(22) =.true. no use of pade approximants.             inri-022
c               lo(30) =.true. pure dwba calculation.                   inri-023
c               lo(57) =.true. output phase-shifts at each iteration.   inri-024
c               lo(104)=.true. convergence is obtained in the iteration.inri-025
c               lo(105)=.true. convergence obtained for this equation.  inri-026
c               lo(107)=.true. all the couplings calculated beforehand. inri-027
c output:    far,fai: real/imaginary part of scattering coefficients.   inri-028
c working areas:                                                        inri-029
c            w(ism,4):second members.                                   inri-030
c            x:       integral of regular function with second member.  inri-031
c            pad1:    iteration results for the channel j.              inri-032
c            pad2:    working field of pade,twice longer than pad1.     inri-033
c                                                                       inri-034
c for the common  /conve/ see calx.                                     inri-035
c                                                                       inri-036
c significance of the quantities in common /conve/:                     inri-037
c  h:         step size for integration.                                inri-038
c  eiter:     convergence criterion for s-matrix.                       inri-039
c  aconv:     convergence criterion for potential and function.         inri-040
c  hconv:     aconv*h*h convergence criterion for second members.       inri-041
c   used:     h,eiter,aconv,hconv.                                      inri-042
c                                                                       inri-043
c***********************************************************************inri-044
      implicit real*8 (a-h,o-z)                                         inri-045
      logical lo(150)                                                   inri-046
      dimension w(ism,4),p(ism,8),q(ism,4,*),ww(ism,4,*),nvi(kab,kab,4),inri-047
     1fam(*),x(2,*),pad1(2,*),pad2(*),ipi(*),nat(6,*),at(3,*),vr(ism,4,*inri-048
     2),far(*),fai(*),v(ism,14),z(4),wx(4)                              inri-049
      common /conve/ h,bjm,eiter,aconv,conj,hconv                       inri-050
      common /inout/ mr,mw,ms                                           inri-051
      ism1=ism+1                                                        inri-052
c put zero in the inhomogeneous terms.                                  inri-053
      do 2 k=1,4                                                        inri-054
      do 1 is=1,ism                                                     inri-055
    1 w(is,k)=0.d0                                                      inri-056
    2 continue                                                          inri-057
      idp=ism1                                                          inri-058
      do 15 ic=1,nc                                                     inri-059
      if (ipi(ic).gt.ism) go to 15                                      inri-060
      k3=ipi(ic)                                                        inri-061
      idp=min0(idp,k3)                                                  inri-062
      if (lo(107)) go to 11                                             inri-063
c no previous calculation of coupling potentials.                       inri-064
      l1=nvi(j,ic,1)                                                    inri-065
      l2=nvi(j,ic,2)                                                    inri-066
      l3=nvi(j,ic,3)                                                    inri-067
      if (l1.gt.l2) go to 6                                             inri-068
c scalar and vector terms of coupling potentials.                       inri-069
      do 5 is=k3,ism                                                    inri-070
      do 3 i=1,4                                                        inri-071
    3 wx(i)=0.d0                                                        inri-072
      do 4 k1=l1,l2                                                     inri-073
      k=nat(1,k1)                                                       inri-074
      wx(1)=wx(1)+at(2,k1)*vr(is,1,k)                                   inri-075
      wx(2)=wx(2)+at(2,k1)*vr(is,2,k)                                   inri-076
      wx(3)=wx(3)+at(3,k1)*vr(is,3,k)                                   inri-077
    4 wx(4)=wx(4)+at(3,k1)*vr(is,4,k)                                   inri-078
      w(is,1)=w(is,1)+wx(1)*q(is,1,ic)-wx(2)*q(is,2,ic)                 inri-079
      w(is,2)=w(is,2)+wx(1)*q(is,2,ic)+wx(2)*q(is,1,ic)                 inri-080
      w(is,3)=w(is,3)+wx(3)*q(is,3,ic)-wx(4)*q(is,4,ic)                 inri-081
    5 w(is,4)=w(is,4)+wx(3)*q(is,4,ic)+wx(4)*q(is,3,ic)                 inri-082
    6 if (l2.ge.l3) go to 13                                            inri-083
c tensor terms of coupling potentials.                                  inri-084
      l2=l2+1                                                           inri-085
      do 10 is=k3,ism                                                   inri-086
      do 7 i=1,4                                                        inri-087
    7 wx(i)=0.d0                                                        inri-088
      do 8 k1=l2,l3                                                     inri-089
      k=nat(1,k1)                                                       inri-090
      wx(1)=wx(1)+at(2,k1)*vr(is,1,k)                                   inri-091
      wx(2)=wx(2)+at(2,k1)*vr(is,2,k)                                   inri-092
      wx(3)=wx(3)+at(3,k1)*vr(is,3,k)                                   inri-093
    8 wx(4)=wx(4)+at(3,k1)*vr(is,4,k)                                   inri-094
      if (j.gt.ic) go to 9                                              inri-095
      wx(3)=-wx(3)                                                      inri-096
      wx(4)=-wx(4)                                                      inri-097
    9 w(is,1)=w(is,1)+(wx(1)+wx(3))*q(is,3,ic)-(wx(2)+wx(4))*q(is,4,ic) inri-098
      w(is,2)=w(is,2)+(wx(1)+wx(3))*q(is,4,ic)+(wx(2)+wx(4))*q(is,3,ic) inri-099
      w(is,3)=w(is,3)+(wx(1)-wx(3))*q(is,1,ic)-(wx(2)-wx(4))*q(is,2,ic) inri-100
   10 w(is,4)=w(is,4)+(wx(1)-wx(3))*q(is,2,ic)+(wx(2)-wx(4))*q(is,1,ic) inri-101
      go to 15                                                          inri-102
c coupling potentials computed in intr.                                 inri-103
   11 k1=nvi(ic,j,3)                                                    inri-104
      if (k1.eq.0) go to 13                                             inri-105
c scalar and vector terms of coupling potentials.                       inri-106
      do 12 is=k3,ism                                                   inri-107
      w(is,1)=w(is,1)+ww(is,1,k1)*q(is,1,ic)-ww(is,2,k1)*q(is,2,ic)     inri-108
      w(is,2)=w(is,2)+ww(is,1,k1)*q(is,2,ic)+ww(is,2,k1)*q(is,1,ic)     inri-109
      w(is,3)=w(is,3)+ww(is,3,k1)*q(is,3,ic)-ww(is,4,k1)*q(is,4,ic)     inri-110
   12 w(is,4)=w(is,4)+ww(is,3,k1)*q(is,4,ic)+ww(is,4,k1)*q(is,3,ic)     inri-111
   13 k1=nvi(ic,j,4)                                                    inri-112
c tensor terms of coupling potentials.                                  inri-113
      if (k1.eq.0) go to 15                                             inri-114
      l1=1                                                              inri-115
      if (j.lt.ic) l1=3                                                 inri-116
      l2=4-l1                                                           inri-117
      do 14 is=k3,ism                                                   inri-118
      w(is,1)=w(is,1)+ww(is,l1,k1)*q(is,3,ic)-ww(is,l1+1,k1)*q(is,4,ic) inri-119
      w(is,2)=w(is,2)+ww(is,l1,k1)*q(is,4,ic)+ww(is,l1+1,k1)*q(is,3,ic) inri-120
      w(is,3)=w(is,3)+ww(is,l2,k1)*q(is,1,ic)-ww(is,l2+1,k1)*q(is,2,ic) inri-121
   14 w(is,4)=w(is,4)+ww(is,l2,k1)*q(is,2,ic)+ww(is,l2+1,k1)*q(is,1,ic) inri-122
   15 continue                                                          inri-123
      ipi(j)=idp                                                        inri-124
c search for the first non negligible value.                            inri-125
      if (idp.gt.ism) go to 28                                          inri-126
      do 16 is=idp,ism                                                  inri-127
      if ((dabs(w(is,1))+dabs(w(is,2))+dabs(w(is,3))+dabs(w(is,4))).gt.hinri-128
     1conv) go to 17                                                    inri-129
   16 continue                                                          inri-130
   17 ipi(j)=is                                                         inri-131
      if (ipi(j).ge.ism) go to 28                                       inri-132
      kt=max0(ipi(j),1)                                                 inri-133
c integral of the regular function with the second member.              inri-134
      x(1,kt)=p(kt,2)*w(kt,2)-p(kt,1)*w(kt,1)+p(kt,6)*w(kt,4)-p(kt,5)*w(inri-135
     1kt,3)                                                             inri-136
      x(2,kt)=-p(kt,1)*w(kt,2)-p(kt,2)*w(kt,1)-p(kt,5)*w(kt,4)-p(kt,6)*winri-137
     1(kt,3)                                                            inri-138
      kkt=kt+1                                                          inri-139
      if (kkt.gt.ism) go to 19                                          inri-140
      do 18 is=kkt,ism                                                  inri-141
      x(1,is)=x(1,is-1)-p(is,1)*w(is,1)+p(is,2)*w(is,2)-p(is,5)*w(is,3)+inri-142
     1p(is,6)*w(is,4)                                                   inri-143
   18 x(2,is)=x(2,is-1)-p(is,1)*w(is,2)-p(is,2)*w(is,1)-p(is,5)*w(is,4)-inri-144
     1p(is,6)*w(is,3)                                                   inri-145
c scattering coefficients.                                              inri-146
   19 hx=z(3)*h                                                         inri-147
      hy=z(4)*h                                                         inri-148
      a=x(1,ism)/fam(1)-z(1)                                            inri-149
      b=x(2,ism)/fam(1)-z(2)                                            inri-150
      if (lo(30)) go to 27                                              inri-151
      ist=ism+kt                                                        inri-152
      r=h*dfloat(ism)                                                   inri-153
      do 20 is=kt,ism                                                   inri-154
      js=ist-is                                                         inri-155
      q(js,1,j)=(x(1,js)*p(js,3)-x(2,js)*p(js,4)-hx*p(js,1)+hy*p(js,2)-.inri-156
     15d0*w(js,3))/h+(v(js,5)*w(js,1)-v(js,6)*w(js,2)+w(js,3)*(cc/r+v(jsinri-157
     2,13))-w(js,4)*v(js,14))/12.d0                                     inri-158
      q(js,2,j)=(x(1,js)*p(js,4)+x(2,js)*p(js,3)-hy*p(js,1)-hx*p(js,2)-.inri-159
     15d0*w(js,4))/h+(v(js,5)*w(js,2)+v(js,6)*w(js,1)+w(js,4)*(cc/r+v(jsinri-160
     2,13))+w(js,3)*v(js,14))/12.d0                                     inri-161
      q(js,3,j)=(x(1,js)*p(js,7)-x(2,js)*p(js,8)-hx*p(js,5)+hy*p(js,6)+.inri-162
     15d0*w(js,1))/h+(v(js,7)*w(js,3)-v(js,8)*w(js,4)+w(js,1)*(cc/r+v(jsinri-163
     2,13))-w(js,2)*v(js,14))/12.d0                                     inri-164
      q(js,4,j)=(x(1,js)*p(js,8)+x(2,js)*p(js,7)-hy*p(js,5)-hx*p(js,6)+.inri-165
     15d0*w(js,2))/h+(v(js,7)*w(js,4)+v(js,8)*w(js,3)+w(js,2)*(cc/r+v(jsinri-166
     2,13))+w(js,1)*v(js,14))/12.d0                                     inri-167
      hx=hx+p(js,3)*w(js,1)-p(js,4)*w(js,2)+p(js,7)*w(js,3)-p(js,8)*w(jsinri-168
     1,4)                                                               inri-169
      hy=hy+p(js,3)*w(js,2)+p(js,4)*w(js,1)+p(js,7)*w(js,4)+p(js,8)*w(jsinri-170
     1,3)                                                               inri-171
   20 r=r-h                                                             inri-172
c corrections of order h**4.                                            inri-173
      kt1=kt+3                                                          inri-174
      ism3=ism-3                                                        inri-175
      if (kt1.gt.ism3) go to 22                                         inri-176
      hz=h*720.d0                                                       inri-177
      do 21 is=kt1,ism3                                                 inri-178
      q(is,1,j)=q(is,1,j)-(45.d0*(w(is+1,3)-w(is-1,3))-9.d0*(w(is+2,3)-winri-179
     1(is-2,3))+w(is+3,3)-w(is-3,3))/hz                                 inri-180
      q(is,2,j)=q(is,2,j)-(45.d0*(w(is+1,4)-w(is-1,4))-9.d0*(w(is+2,4)-winri-181
     1(is-2,4))+w(is+3,4)-w(is-3,4))/hz                                 inri-182
      q(is,3,j)=q(is,3,j)+(45.d0*(w(is+1,1)-w(is-1,1))-9.d0*(w(is+2,1)-winri-183
     1(is-2,1))+w(is+3,1)-w(is-3,1))/hz                                 inri-184
   21 q(is,4,j)=q(is,4,j)+(45.d0*(w(is+1,2)-w(is-1,2))-9.d0*(w(is+2,2)-winri-185
     1(is-2,2))+w(is+3,2)-w(is-3,2))/hz                                 inri-186
   22 if (kt.eq.1) go to 24                                             inri-187
      k=kt-1                                                            inri-188
      do 23 is=1,k                                                      inri-189
      q(is,1,j)=-(hx*p(is,1)-hy*p(is,2))/h                              inri-190
      q(is,2,j)=-(hy*p(is,1)+hx*p(is,2))/h                              inri-191
      q(is,3,j)=-(hx*p(is,5)-hy*p(is,6))/h                              inri-192
   23 q(is,4,j)=-(hy*p(is,5)+hx*p(is,6))/h                              inri-193
   24 do 25 kt=1,ism                                                    inri-194
      if ((dabs(q(kt,1,j))+dabs(q(kt,2,j))+dabs(q(kt,3,j))+dabs(q(kt,4,jinri-195
     1))).gt.aconv) go to 26                                            inri-196
   25 continue                                                          inri-197
   26 ipi(j)=kt                                                         inri-198
      if (lo(22)) go to 27                                              inri-199
      pad1(1,kiter)=a                                                   inri-200
      pad1(2,kiter)=b                                                   inri-201
c  test of convergence.                                                 inri-202
   27 lo(105)=(dabs(b-fai(1)).le.eiter.and.(dabs(a-far(1)).le.eiter))   inri-203
      if ((.not.lo(22)).and.lo(104).and.kiter.gt.3.and.(.not.lo(105))) cinri-204
     1all pade(pad1,pad2,kiter,a,b,eiter,1.d0,0.d0,lo)                  inri-205
      lo(104)=lo(104).and.lo(105)                                       inri-206
      far(1)=a                                                          inri-207
      fai(1)=b                                                          inri-208
      if (lo(57)) write (mw,1000) j,far(1),fai(1),kiter,kt              inri-209
      return                                                            inri-210
   28 if (lo(22)) return                                                inri-211
      pad1(1,kiter)=0.d0                                                inri-212
      pad1(2,kiter)=0.d0                                                inri-213
      return                                                            inri-214
 1000 format (5x,i5,2d30.15,i10,10x,i5)                                 inri-215
      end                                                               inri-216
c 12/02/06                                                      ecis06  pade-000
      subroutine pade(r,p,mm,bre,bim,eiter,vlr,vli,lo)                  pade-001
c  pade approximant of type i, continued fraction.                      pade-002
c input:     r:       partial taylor sums.                              pade-003
c            mm:      number of components of p.                        pade-004
c            eiter:   convergence criterion.                            pade-005
c            vlr,vli: variable   here taken as (1.d0,0.d0).             pade-006
c            lo(i):   logical controls:                                 pade-007
c               lo(23) =.true. no use of pade and shift to usual coupledpade-008
c                              equations when there is no convergence.  pade-009
c               lo(57) =.true. output phase-shifts at each iteration.   pade-010
c               lo(105)=.true. convergence obtained for this equation.  pade-011
c               lo(106)=.true. when the iteration is not the last one   pade-012
c                              allowed.                                 pade-013
c output:    bre,bim: result if convergence is obtained.                pade-014
c working area:                                                         pade-015
c            p:       at least twice as long as r.                      pade-016
c***********************************************************************pade-017
      implicit real*8 (a-h,o-z)                                         pade-018
      dimension r(2,mm),p(2,2,mm)                                       pade-019
      logical lo(150)                                                   pade-020
      common /inout/ mr,mw,ms                                           pade-021
      lo(105)=.true.                                                    pade-022
      if (mm.gt.3) go to 1                                              pade-023
      lo(105)=.false.                                                   pade-024
      return                                                            pade-025
c taylor coefficients.                                                  pade-026
    1 mt=mm+1                                                           pade-027
      p(1,1,1)=r(1,1)                                                   pade-028
      p(1,2,1)=0.d0                                                     pade-029
      p(2,1,1)=r(2,1)                                                   pade-030
      p(2,2,1)=0.d0                                                     pade-031
      do 2 i=2,mm                                                       pade-032
      p(1,1,i)=r(1,i)-r(1,i-1)                                          pade-033
      p(1,2,i)=0.d0                                                     pade-034
      p(2,1,i)=r(2,i)-r(2,i-1)                                          pade-035
    2 p(2,2,i)=0.d0                                                     pade-036
c decomposition loop.                                                   pade-037
      nm=mm-1                                                           pade-038
      do 6 na=1,nm                                                      pade-039
      ml=mm-na                                                          pade-040
      zr=p(1,1,na)                                                      pade-041
      zi=p(2,1,na)                                                      pade-042
      if (dabs(zr)+dabs(zi).ge.1.d-8) go to 4                           pade-043
      p(1,2,mt-na)=0.d0                                                 pade-044
      p(2,2,mt-na)=0.d0                                                 pade-045
      do 3 j=1,ml                                                       pade-046
      p(1,1,na+j)=p(1,1,na+j)-p(1,1,na)*p(1,2,j)+p(2,1,na)*p(2,2,j)     pade-047
    3 p(2,1,na+j)=p(2,1,na+j)-p(2,1,na)*p(1,2,j)-p(1,1,na)*p(2,2,j)     pade-048
      go to 6                                                           pade-049
    4 p(1,2,mt-na)=1.d0                                                 pade-050
      do 5 j=1,ml                                                       pade-051
      zx=p(1,1,na)**2+p(2,1,na)**2                                      pade-052
      zr=(p(1,1,na+j)*p(1,1,na)+p(2,1,na+j)*p(2,1,na))/zx               pade-053
      zi=(p(2,1,na+j)*p(1,1,na)-p(1,1,na+j)*p(2,1,na))/zx               pade-054
      p(1,1,na+j)=p(1,2,j)-zr                                           pade-055
      p(2,1,na+j)=p(2,2,j)-zi                                           pade-056
      p(1,2,j)=zr                                                       pade-057
    5 p(2,2,j)=zi                                                       pade-058
    6 continue                                                          pade-059
      ar1=1.d30                                                         pade-060
c truncated continued fractions.                                        pade-061
      do 9  n=1,nm                                                      pade-062
      ip=mm+1-n                                                         pade-063
      p(1,2,n)=p(1,1,ip)                                                pade-064
      p(2,2,n)=p(2,1,ip)                                                pade-065
      do 8  i=2,ip                                                      pade-066
      id=ip+1-i                                                         pade-067
      if (p(1,2,mt-id).gt.0.d0) go to 7                                 pade-068
      ar=vlr*p(1,2,n)-vli*p(2,2,n)+p(1,1,id)                            pade-069
      ai=vlr*p(2,2,n)+vli*p(1,2,n)+p(2,1,id)                            pade-070
      p(1,2,n)=ar                                                       pade-071
      p(2,2,n)=ai                                                       pade-072
      go to 8                                                           pade-073
    7 ar=1.d0+vlr*p(1,2,n)-vli*p(2,2,n)                                 pade-074
      ai=vlr*p(2,2,n)+vli*p(1,2,n)                                      pade-075
      zx=ar*ar+ai*ai                                                    pade-076
      p(1,2,n)=(p(1,1,id)*ar+p(2,1,id)*ai)/zx                           pade-077
      p(2,2,n)=(p(2,1,id)*ar-p(1,1,id)*ai)/zx                           pade-078
    8 continue                                                          pade-079
      if (n.eq.1) go to 9                                               pade-080
c search for smallest difference.                                       pade-081
      zr=p(1,2,n)-p(1,2,n-1)                                            pade-082
      zi=p(2,2,n)-p(2,2,n-1)                                            pade-083
      ai1=dmax1(dabs(zr),dabs(zi))                                      pade-084
      if (ai1.ge.ar1) go to 9                                           pade-085
      nn=n                                                              pade-086
      ar1=ai1                                                           pade-087
    9 continue                                                          pade-088
      lo(105)=ar1.le.eiter                                              pade-089
      if (lo(57)) write (mw,1000) lo(105),mm,nn,p(1,2,nn),p(2,2,nn),p(1,pade-090
     12,nn-1),p(2,2,nn-1)                                               pade-091
      if ((.not.lo(105)).and.(lo(106).or.lo(23))) return                pade-092
      lo(105)=.true.                                                    pade-093
      bre=p(1,2,nn-1)                                                   pade-094
      bim=p(2,2,nn-1)                                                   pade-095
      if (nn.eq.2) return                                               pade-096
      bre=0.5d0*(bre+p(1,2,nn))                                         pade-097
      bim=0.5d0*(bim+p(2,2,nn))                                         pade-098
      return                                                            pade-099
 1000 format (' pade',5x,l3,5x,'iter =',i3,5x,'n =',i3,5x,4d15.8)       pade-100
      end                                                               pade-101
c 08/03/07                                                      ecis06  inch-000
      subroutine inch(v,mc,nat,at,lmd,nvi,fam,y,x,w,ism,kab,nc,ncin,nml,inch-001
     1jsx,kr,lo)                                                        inch-002
c  standard integration of the coupled  equations by the numerov method.inch-003
c input:     v:       potentials and couplings.                         inch-004
c            mc(*,j): address of central potentials for j=4.            inch-005
c            nat,at:  geometrical coefficients.                         inch-006
c            lmd:     first dimension of tables nat and at.             inch-007
c            nvi:     addresses in the table nat,at.                    inch-008
c            fam:     matching values and constants of equations.       inch-009
c            y:       coulomb corrections.                              inch-010
c            ism:     number of radial points.                          inch-011
c            kab:     maximum number of coupled channels.               inch-012
c            nc:      number of coupled channels.                       inch-013
c            ncin:    number of solutions.                              inch-014
c            nml:     maximum number of points where the coupling       inch-015
c                     potentials can be calculated at a time.           inch-016
c            jsx:     periodicity of the schmidt's orthogonalisation    inch-017
c                     if lo(42) is .true..                              inch-018
c            lo(i):   logical controls:                                 inch-019
c               lo(26) =.true. integration stabilised for long range    inch-020
c                              constant potential.                      inch-021
c               lo(42) =.true. schmidt's orthogonalisation of solutions inch-022
c                              in usual coupled equations.              inch-023
c               lo(44) =.true. coulomb corrections.                     inch-024
c               lo(57) =.true. output phase-shifts at each iteration.   inch-025
c               lo(74) =.true. output of time in different steps.       inch-026
c               lo(103)=.true. there is a coulomb spin-orbit potential. inch-027
c               lo(129)=.true. real spin-orbit or dirac equation.       inch-028
c               lo(130)=.true. imaginary spin-orbit or dirac equation.  inch-029
c               lo(133)=.true. store scalar and coulomb potential       inch-030
c                              independently.                           inch-031
c output:    x:       scattering coefficients multiplied kf/ki          inch-032
c                     real part in x(ic,ic',5), imaginary part in       inch-033
c                     x(ic,ic',2) for incoming channel ic'.             inch-034
c working areas:                                                        inch-035
c            w:       real/imaginary coupling potentials.               inch-036
c            x:       numerov recurrence.                               inch-037
c            kr:      working field for lins.                           inch-038
c                                                                       inch-039
c for the common  /pote2/ see redm.                                     inch-040
c                                                                       inch-041
c significance of the quantities in common /pote2/:                     inch-042
c  ity(2):    starting address of imaginary central potential.          inch-043
c  ity(3):    starting address of real spin-orbit potential.            inch-044
c  ity(4):    starting address of imaginary spin-orbit potential.       inch-045
c  ity(9):    starting address of coulomb central potential.            inch-046
c  ity(10):   starting address of coulomb spin-orbit potential.         inch-047
c   used:     ity(2),ity(3),ity(4),ity(9),ity(10).                      inch-048
c                                                                       inch-049
c***********************************************************************inch-050
      implicit real*8 (a-h,o-z)                                         inch-051
      logical lo(150)                                                   inch-052
      dimension v(ism,*),mc(kab,6),nat(2*lmd,*),at(lmd,*),nvi(kab,kab,2)inch-053
     1,fam(kab,12),y(kab,kab,4),x(kab,kab,6),w(2,nc,nc,*),kr(*)         inch-054
      common /inout/ mr,mw,ms                                           inch-055
      common /pote2/ ity(12),invt,intv,insl,npx                         inch-056
      if (lo(74)) call hora                                             inch-057
      jr=0                                                              inch-058
      do 3 i=1,nc                                                       inch-059
      do 2 j=1,nc                                                       inch-060
      do 1 k=1,6                                                        inch-061
    1 x(j,i,k)=0.d0                                                     inch-062
    2 continue                                                          inch-063
    3 x(i,i,3)=1.d-15                                                   inch-064
c  radial integration loop.                                             inch-065
      do 40 js=1,ism                                                    inch-066
      is=mod(js-1,nml)+1                                                inch-067
      if (js.le.jr) go to 26                                            inch-068
      ji=jr+1                                                           inch-069
      m=js-ji                                                           inch-070
      jr=min0(ism,jr+nml)                                               inch-071
c the potentials are first calculated in w(1,ic,ic',i) and              inch-072
c w(2,ic,ic',i) starting with i=2   for ic larger or equal to ic'.      inch-073
      do 19 l=1,nc                                                      inch-074
      do 18 j=l,nc                                                      inch-075
      do 4 i=ji,jr                                                      inch-076
      w(1,j,l,i+1)=0.d0                                                 inch-077
    4 w(2,j,l,i+1)=0.d0                                                 inch-078
      if (l.ne.j) go to 12                                              inch-079
c optical model contribution.                                           inch-080
      i1=mc(l,4)                                                        inch-081
      i2=i1+ity(2)                                                      inch-082
      do 5 i=ji,jr                                                      inch-083
      w(1,j,l,i+1)=fam(l,8)-fam(l,10)/dfloat(i+m)**2+fam(l,7)*v(i+m,i1) inch-084
    5 w(2,j,l,i+1)=fam(l,7)*v(i+m,i2)                                   inch-085
      if (.not.lo(129)) go to 8                                         inch-086
      i2=i1+ity(3)                                                      inch-087
      do 6 i=ji,jr                                                      inch-088
    6 w(1,j,l,i+1)=w(1,j,l,i+1)+fam(l,9)*v(i+m,i2)                      inch-089
      if (.not.lo(130)) go to 8                                         inch-090
      i2=i1+ity(4)                                                      inch-091
      do 7 i=ji,jr                                                      inch-092
    7 w(2,j,l,i+1)=w(2,j,l,i+1)+fam(l,9)*v(i+m,i2)                      inch-093
    8 if (.not.lo(133)) go to 12                                        inch-094
      if (fam(l,11).eq.0.d0) go to 10                                   inch-095
      i2=i1+ity(9)                                                      inch-096
      do 9 i=ji,jr                                                      inch-097
    9 w(1,j,l,i+1)=w(1,j,l,i+1)+fam(l,11)*v(i+m,i2)                     inch-098
   10 if (.not.lo(103)) go to 12                                        inch-099
      i2=i1+ity(10)                                                     inch-100
      do 11 i=ji,jr                                                     inch-101
   11 w(1,j,l,i+1)=w(1,j,l,i+1)+fam(l,12)*v(i+m,i2)                     inch-102
c coupled channel contribution.                                         inch-103
   12 k1=nvi(j,l,1)                                                     inch-104
      k2=nvi(j,l,2)                                                     inch-105
      if (k1.gt.k2) go to 18                                            inch-106
      do 17 k=k1,k2                                                     inch-107
      kt=nat(1,k)                                                       inch-108
      ku=nat(2,k)                                                       inch-109
      do 13 i=ji,jr                                                     inch-110
   13 w(1,j,l,i+1)=w(1,j,l,i+1)+at(2,k)*v(i+m,kt)                       inch-111
      if (nat(2,k).eq.0) go to 15                                       inch-112
      ku=nat(2,k)+ity(2)                                                inch-113
      do 14 i=ji,jr                                                     inch-114
   14 w(2,j,l,i+1)=w(2,j,l,i+1)+at(2,k)*v(i+m,ku)                       inch-115
   15 if (.not.lo(133)) go to 17                                        inch-116
      if (at(3,k).eq.0.d0) go to 17                                     inch-117
      ku=kt+ity(11)                                                     inch-118
      do 16 i=ji,jr                                                     inch-119
   16 w(1,j,l,i+1)=w(1,j,l,i+1)+at(3,k)*v(i+m,ku)                       inch-120
   17 continue                                                          inch-121
   18 continue                                                          inch-122
   19 continue                                                          inch-123
      jj=jr-ji+1                                                        inch-124
      do 25 i=1,jj                                                      inch-125
      j=i+1                                                             inch-126
c symmetrisation of old values.                                         inch-127
      do 21 k=1,nc                                                      inch-128
      do 20 l=k,nc                                                      inch-129
      w(1,k,l,j)=w(1,l,k,j)                                             inch-130
   20 w(2,k,l,j)=w(2,l,k,j)                                             inch-131
   21 continue                                                          inch-132
c computation of v +v*v/12. for l larger or equal to k.                 inch-133
      do 24 k=1,nc                                                      inch-134
      do 23 l=k,nc                                                      inch-135
      bre=0.d0                                                          inch-136
      bim=0.d0                                                          inch-137
      do 22 n=1,nc                                                      inch-138
      bre=bre-w(1,n,k,j)*w(1,n,l,j)+w(2,n,k,j)*w(2,n,l,j)               inch-139
   22 bim=bim-w(2,n,k,j)*w(1,n,l,j)-w(1,n,k,j)*w(2,n,l,j)               inch-140
c symmetrisation.                                                       inch-141
      w(1,l,k,i)=w(1,l,k,j)+bre/12.d0                                   inch-142
      w(2,l,k,i)=w(2,l,k,j)+bim/12.d0                                   inch-143
      w(1,k,l,i)=w(1,l,k,i)                                             inch-144
   23 w(2,k,l,i)=w(2,l,k,i)                                             inch-145
      if (lo(26)) w(1,k,k,i)=w(1,k,k,i)+w(1,k,k,j)**3/360.d0            inch-146
   24 continue                                                          inch-147
   25 continue                                                          inch-148
   26 do 33 i=1,nc                                                      inch-149
      do 27 j=1,nc                                                      inch-150
      x(i,j,1)=x(i,j,2)                                                 inch-151
      x(i,j,2)=x(i,j,3)                                                 inch-152
      x(i,j,4)=x(i,j,5)                                                 inch-153
   27 x(i,j,5)=x(i,j,6)                                                 inch-154
   28 do 30 j=1,nc                                                      inch-155
      hx=0.d0                                                           inch-156
      hy=0.d0                                                           inch-157
      do 29 k=1,nc                                                      inch-158
      hx=hx+w(1,k,j,is)*x(i,k,2)-w(2,k,j,is)*x(i,k,5)                   inch-159
   29 hy=hy+w(2,k,j,is)*x(i,k,2)+w(1,k,j,is)*x(i,k,5)                   inch-160
      x(i,j,3)=x(i,j,2)+x(i,j,2)-x(i,j,1)-hx                            inch-161
   30 x(i,j,6)=x(i,j,5)+x(i,j,5)-x(i,j,4)-hy                            inch-162
      if (dabs(x(i,i,3)).lt.1.d15) go to 33                             inch-163
      do 32 ji=1,6                                                      inch-164
      do 31 ij=1,nc                                                     inch-165
   31 x(i,ij,ji)=x(i,ij,ji)*1.d-30                                      inch-166
   32 continue                                                          inch-167
      go to 28                                                          inch-168
   33 continue                                                          inch-169
      if (.not.(lo(42).and.(mod(js,jsx).eq.0).and.(js.ne.ism))) go to 40inch-170
c  schmidt orthogonalisation procedure every jsx steps.                 inch-171
      do 39 i=1,nc                                                      inch-172
      if (i.eq.1) go to 37                                              inch-173
      im=i-1                                                            inch-174
      do 36 k=1,im                                                      inch-175
      x(i,k,1)=0.d0                                                     inch-176
      x(i,k,4)=0.d0                                                     inch-177
      do 34 j=1,nc                                                      inch-178
      x(i,k,1)=x(i,k,1)+x(k,j,2)*x(i,j,2)-x(k,j,5)*x(i,j,5)             inch-179
   34 x(i,k,4)=x(i,k,4)+x(k,j,5)*x(i,j,2)+x(k,j,2)*x(i,j,5)             inch-180
      bre=x(i,k,1)*x(k,k,1)-x(i,k,4)*x(k,k,4)                           inch-181
      bim=x(i,k,1)*x(k,k,4)+x(i,k,4)*x(k,k,1)                           inch-182
      do 35 j=1,nc                                                      inch-183
      x(i,j,2)=x(i,j,2)-bre*x(k,j,2)+bim*x(k,j,5)                       inch-184
      x(i,j,5)=x(i,j,5)-bre*x(k,j,5)-bim*x(k,j,2)                       inch-185
      x(i,j,3)=x(i,j,3)-bre*x(k,j,3)+bim*x(k,j,6)                       inch-186
   35 x(i,j,6)=x(i,j,6)-bre*x(k,j,6)-bim*x(k,j,3)                       inch-187
   36 continue                                                          inch-188
   37 bre=0.d0                                                          inch-189
      bim=0.d0                                                          inch-190
      do 38 j=1,nc                                                      inch-191
      bre=bre+x(i,j,2)**2-x(i,j,5)**2                                   inch-192
   38 bim=bim+2.d0*x(i,j,2)*x(i,j,5)                                    inch-193
      bim=bim/bre                                                       inch-194
      x(i,i,1)=1.d0/(bre*(1.d0+bim**2))                                 inch-195
   39 x(i,i,4)=-x(i,i,1)*bim                                            inch-196
   40 continue                                                          inch-197
      if (lo(74)) call hora                                             inch-198
c  matrices of pseudo-wronskians for the matching condition.            inch-199
      do 42 i=1,nc                                                      inch-200
      do 41 j=1,nc                                                      inch-201
      x(i,j,2)=(x(i,j,1)*fam(j,2)-fam(j,1)*x(i,j,3))                    inch-202
      x(i,j,5)=(x(i,j,6)*fam(j,1)-fam(j,2)*x(i,j,4))                    inch-203
      x(i,j,1)=(x(i,j,3)*fam(j,3)-fam(j,4)*x(i,j,1))                    inch-204
      x(i,j,4)=(x(i,j,4)*fam(j,4)-fam(j,3)*x(i,j,6))                    inch-205
      if (fam(j,8).lt.0.d0) go to 41                                    inch-206
      x(i,j,1)=x(i,j,1)-x(i,j,5)                                        inch-207
      x(i,j,4)=x(i,j,4)+x(i,j,2)                                        inch-208
   41 continue                                                          inch-209
   42 continue                                                          inch-210
c  complex linear system of equations.                                  inch-211
      ncx=ncin                                                          inch-212
      if (lo(44)) ncx=nc                                                inch-213
      call lins(x(1,1,4),kab,x,kab,x(1,1,5),kab,x(1,1,2),kab,nc,ncx,kr,iinch-214
     1er)                                                               inch-215
      if (ier.ne.0) go to 48                                            inch-216
      if (.not.lo(44)) return                                           inch-217
c building the linear system for s-matrix with coulomb corrections.     inch-218
      do 45 i=1,nc                                                      inch-219
      do 44 j=1,nc                                                      inch-220
      x(i,j,1)=y(j,i,1)                                                 inch-221
      x(i,j,3)=x(i,j,2)                                                 inch-222
      x(i,j,4)=y(j,i,2)                                                 inch-223
      x(i,j,6)=-y(j,i,1)+x(i,j,5)                                       inch-224
      do 43 k=1,nc                                                      inch-225
      x(i,j,1)=x(i,j,1)-(y(j,k,1)-y(j,k,4))*x(i,k,2)+(y(j,k,3)+y(j,k,2))inch-226
     1*x(i,k,5)                                                         inch-227
      x(i,j,3)=x(i,j,3)-y(j,k,3)*x(i,k,2)-y(j,k,1)*x(i,k,5)             inch-228
      x(i,j,4)=x(i,j,4)-(y(j,k,1)-y(j,k,4))*x(i,k,5)-(y(j,k,2)+y(j,k,3))inch-229
     1*x(i,k,2)                                                         inch-230
   43 x(i,j,6)=x(i,j,6)-y(j,k,3)*x(i,k,5)+y(j,k,1)*x(i,k,2)             inch-231
   44 continue                                                          inch-232
   45 x(i,i,4)=x(i,i,4)+1.d0                                            inch-233
c transfer of the second members in x(1,1,5) and x(1,1,2).              inch-234
      do 47 i=1,nc                                                      inch-235
      do 46 j=1,nc                                                      inch-236
      y(i,j,2)=x(i,j,2)                                                 inch-237
      x(i,j,2)=x(i,j,3)                                                 inch-238
      y(i,j,1)=x(i,j,5)                                                 inch-239
   46 x(i,j,5)=x(i,j,6)                                                 inch-240
   47 continue                                                          inch-241
      call lins(x(1,1,4),kab,x,kab,x(1,1,5),kab,x(1,1,2),kab,nc,ncin,kr inch-242
     1,ier)                                                             inch-243
      if (ier.ne.0) go to 48                                            inch-244
      if (lo(57)) write (mw,1000) ((i,j,y(i,j,1),y(i,j,2),x(i,j,5),x(i,jinch-245
     1,2),j=1,ncin),i=1,nc)                                             inch-246
      return                                                            inch-247
   48 write (mw,1001) ier                                               inch-248
      stop                                                              inch-249
 1000 format (/25x,'uncorrected values',30x,'corrected values'/(2x,2i3,4inch-250
     1d25.15))                                                          inch-251
 1001 format (' return from lins with ier =',i2///' in inch  ...  stop  inch-252
     1...')                                                             inch-253
      end                                                               inch-254
c 10/05/07                                                      ecis06  scam-000
      subroutine scam(f,fcn,tx,gcn,jmax,kmax,mc,md,far,fai,wv,ncoll,ncolscam-001
     1s,kab,kba,ipi,ipim,gam,fiss,tl,ncj,xd,p,q,v,nct,iq,aa,kbc,idt,lo) scam-002
c storage of scattering coefficients.                                   scam-003
c input:     jmax:    maximum number of channel spins, dimension for f. scam-004
c            kmax:    maximum number of l of compound nucleus,          scam-005
c                     dimension for fcn, gcn.                           scam-006
c            mc:      nuclear state numbers, angular momenta,  see quan.scam-007
c            md:      extended mc for identical particles with spin.    scam-008
c            far/fai: real/imaginary part of scattering coefficients.   scam-009
c            wv:      wave number and coulomb parameter.  see colf.     scam-010
c            ncoll:   number of coupled levels.                         scam-011
c            ncols:   number of levels with angular distribution.       scam-012
c            kab:     dimension for mc.                                 scam-013
c            kba:     number of independent amplitudes.                 scam-014
c            ipi:     parity, multiplicities, addresses in f (see calx).scam-015
c            ipim:    ipi for continua of compound nucleus.             scam-016
c            gam:     gamma transmission coefficients read.             scam-017
c            fiss:    fission coefficients for compound nucleus.        scam-018
c            tl:      transmission coefficients of uncoupled levels.    scam-019
c            ncj:     starting and final addresses for continua.        scam-020
c            xd:      energy and spin dependence of level densities.    scam-021
c            nct:     number of equations and solutions for each parity.scam-022
                                                                        scam-023
c            iq:      dimension for v.                                  scam-024
c            aa:      coefficients of symmetrisation.                   scam-025
c            kbc:     dimension for aa.                                 scam-026
c            idt:     size available for the q in double precision.     scam-027
c            lo(i):   logical controls:                                 scam-028
c               lo(18) =.true. projectile-target antisymmetrisation.    scam-029
c               lo(55) =.true. output of c-matrix elements and of       scam-030
c                              compound nucleus intermediate results.   scam-031
c               lo(63) =.true. penetrabilities written on file 63.      scam-032
c               lo(82) =.true. old simplified compound nucleus.         scam-033
c               lo(83) =.true. no engelbretch-weidenmuller transform.   scam-034
c               lo(85) =.true. fission transmission coefficients.       scam-035
c               lo(86) =.true. gamma emission in compound nucleus.      scam-036
c               lo(87) =.true. no width fluctuations.                   scam-037
c               lo(123)=.true. identical particles with spin.           scam-038
c               lo(124)=.true. compute transmission coefficients.       scam-039
c               lo(125)=.true. usual coupled equations.                 scam-040
c               lo(131)=.true. total spin is too large for compound     scam-041
c                              nucleus.                                 scam-042
c               lo(132)=.true. store fission and gamma transmission     scam-043
c                              coefficients for interpolation.          scam-044
c output:    f:       scattering coefficients.                          scam-045
c            fcn:     compound nucleus contributions.                   scam-046
c            tx:      total reaction cross section in mb followed by    scam-047
c                     the total direct cross sections of coupled        scam-048
c                     levels, the total compound cross sections of      scam-049
c                     levels, the fission and gamma cross sections.     scam-050
c            gcn:     compound nucleus coefficients of legendre         scam-051
c                     polynomials.                                      scam-052
c working areas:                                                        scam-053
c            p:       for diagonalisation of the s matrix.              scam-054
c            q:       for angular distribution of compound nucleus.     scam-055
c            v(1,*):  level and quantum numbers.                        scam-056
c            v(2,*):  weigh for continua.                               scam-057
c            v(3,*):  transmission coefficients.                        scam-058
c            v(4,*):  width fluctuation parameter.                      scam-059
c            v(5,*):  contribution to compound nucleus.                 scam-060
c                                                                       scam-061
c for the common  /dcons/ see calc.                                     scam-062
c for the common  /ncomp/ see calx.                                     scam-063
c for the common  /noequ/ see quan.                                     scam-064
c                                                                       scam-065
c significance of the quantities in common /dcons/:                     scam-066
c  xz:        conversion factor to millibarns.                          scam-067
c   used:     xz.                                                       scam-068
c                                                                       scam-069
c significance of the quantities in common /ncomp/:                     scam-070
c  nfiss:     number of fission transmission coefficients.              scam-071
c  nrd:       number of gamma transmission coefficients.                scam-072
c  ncont:     number of continuum for compound nucleus.                 scam-073
c  ncoj:      number of spins of the target for a continuum.            scam-074
c  ncolx:     total number of levels without discretisation.            scam-075
c  ndp:       address of fission and gamma final results.               scam-076
c  ndq:       address of fission and gamma intermediate results.        scam-077
c  bz:        hauser-feshbach and moldauer's parameters described below.scam-078
c   bz(1):    square root of elastic enhancement.                       scam-079
c   bz(2):    if lo(82)=.true., spin cut-off parameter.                 scam-080
c             if lo(82)=.false., particle degrees of freedom.           scam-081
c   bz(3):    square root of level density parameter. if lo(82)=lo(87)= scam-082
c             .false., parameter bz(3) in moldauer's formula of input   scam-083
c             description.                                              scam-084
c   bz(4):    if lo(82)=lo(87)=.false., parameter bz(4) in same formula.scam-085
c   bz(5):    if lo(82)=lo(87)=.false., parameter bz(5) in same formula.scam-086
c  fnug:      radiative degrees of freedom.                             scam-087
c  tg1:       derived data for gamma in compound nucleus.               scam-088
c  sgsq:      derived data for gamma in compound nucleus.               scam-089
c   used:     nfiss,nrd,ncont,ncoj,ncolx,ndp,ndq,bz,fnug,tg1,sgsq       scam-090
c                                                                       scam-091
c significance of the quantities in common /noequ/:                     scam-092
c  nic:       number of equations at the channel spin.                  scam-093
c  nci:       number of solutions at the channel spin.                  scam-094
c  nc:        number of equations for identical particles.              scam-095
c  ncin:      number of solutions for identical particles.              scam-096
c  jpi:       parity 0 or 1.                                            scam-097
c  ipj:       value of j+1 or j+1/2 where j is the channel spin.        scam-098
c  r1(2):     maximum of scattering and compound coefficient.           scam-099
c  naj:       twice the channel spin j.                                 scam-100
c   defined:  r1.                                                       scam-101
c   used:     nic,nci,nc,ncin,jpi,ipj,r1,naj.                           scam-102
c                                                                       scam-103
c***********************************************************************scam-104
      implicit real*8 (a-h,o-z)                                         scam-105
      logical lo(150),lg(2)                                             scam-106
      dimension f(2,jmax,*),fcn(kmax,*),tx(*),gcn(kmax,*),mc(kab,12),md(scam-107
     1kab,12),far(kab,*),fai(kab,*),wv(22,*),ipi(11,*),ipim(11,*),gam(*)scam-108
     2,fiss(2,*),tl(*),ncj(2,*),xd(3,*),p(nc,nc,4),q(*),v(iq,*),nct(6),ascam-109
     3a(kbc,*),x(20),w(20),tp(20),sgf(2),tg(2),fnu(2),mcx(4,2),vcx(4,2) scam-110
      character*1 ip(2)                                                 scam-111
      character*8 al(2)                                                 scam-112
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            scam-113
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqscam-114
     1,acn(8),bz(5),tg0,bn,fnug,egd,ggd,tg1,sgsq                        scam-115
      common /noequ/ ncxn,nic,nci,nc,ncin,nin,jpi,ipj,r1(2),naj         scam-116
      common /inout/ mr,mw,ms                                           scam-117
      data ip,al,pi,nsy /'+','-',' fission','   gamma',3.141592653589793scam-118
     12d0,0/                                                            scam-119
      data x /7.0539889691988753d-02,3.7212681800161144d-01,9.1658210248scam-120
     1327356d-01,1.7073065310283439d+00,2.7491992553094321d+00,4.0489253scam-121
     2138508869d+00,5.6151749708616165d+00,7.4590174536710633d+00,9.5943scam-122
     3928695810968d+00,1.2038802546964316d+01,1.4814293442630740d+01,1.7scam-123
     4948895520519376d+01,2.1478788240285011d+01,2.5451702793186906d+01,scam-124
     52.9932554631700612d+01,3.5013434240479000d+01,4.0833057056728571d+scam-125
     601,4.7619994047346502d+01,5.5810795750063899d+01,6.652441652561575scam-126
     74d+01/                                                            scam-127
      data w /1.8108006241898926d-01,4.2255676787856397d-01,6.6690954670scam-128
     1184815d-01,9.1535237278307367d-01,1.1695397071955460d+00,1.4313549scam-129
     2859282060d+00,1.7029811379850227d+00,1.9870158907927472d+00,2.2866scam-130
     3357812534308d+00,2.6058347275538333d+00,2.9497837342139509d+00,3.3scam-131
     4253957820093196d+00,3.7422554705898109d+00,4.2142367102518804d+00,scam-132
     54.7625184614902093d+00,5.4217260442455743d+00,6.2540123569324213d+scam-133
     600,7.3873143890544346d+00,9.1513287309874796d+00,1.289338864593999scam-134
     77d+01/                                                            scam-135
      ik(i,l,j)=((j-naj+ipi(3,i)-1)/2*ipi(2,i)+(l-j+ipi(2,i)-1)/2)/2    scam-136
      nz=mod(ipj+jpi+1,2)                                               scam-137
      ns=0                                                              scam-138
      if (nz.ne.0) ns=nct(1)*nct(3)                                     scam-139
      r1(1)=0.d0                                                        scam-140
      r1(2)=0.d0                                                        scam-141
      jc=0                                                              scam-142
      aj=0.5d0*dfloat(naj)                                              scam-143
      dz=1.d0                                                           scam-144
      if (lo(18)) dz=2.d0                                               scam-145
      rz=pi*dz*xz*dfloat(naj+1)                                         scam-146
      if (lo(55)) write (mw,1000) aj,ip(jpi+1),nc,ncin                  scam-147
c computation of transmission coefficients.                             scam-148
      nxx=ncin                                                          scam-149
      if (lo(124)) nxx=nc                                               scam-150
      do 5 ic=1,nxx                                                     scam-151
      iv=mc(ic,1)                                                       scam-152
      if (wv(3,iv).lt.0.d0) go to 5                                     scam-153
      if (ic.le.ncin) tx(1)=tx(1)+4.d0*fai(ic,ic)*rz*dz                 scam-154
      if (.not.lo(124)) go to 2                                         scam-155
      jc=jc+1                                                           scam-156
      v(1,jc)=131072.d0*(65536.d0*dfloat(iv)+dfloat(mc(ic,2)))+dfloat(mcscam-157
     1(ic,3))                                                           scam-158
      v(2,jc)=1.d0                                                      scam-159
      v(3,jc)=4.d0*fai(ic,ic)                                           scam-160
      do 1 n=4,iq                                                       scam-161
    1 v(n,jc)=0.d0                                                      scam-162
    2 do 4 icp=1,nc                                                     scam-163
      ivq=mc(icp,1)                                                     scam-164
      a1=dsqrt(wv(11,ivq)/wv(11,iv))                                    scam-165
      if (lo(125)) a1=1.d0/a1                                           scam-166
      far(icp,ic)=far(icp,ic)*a1                                        scam-167
      fai(icp,ic)=fai(icp,ic)*a1                                        scam-168
      if (wv(3,ivq).lt.0.d0) go to 3                                    scam-169
      if (lo(124)) v(3,jc)=v(3,jc)-4.d0*(far(icp,ic)**2+fai(icp,ic)**2) scam-170
      if (ic.gt.ncin) go to 4                                           scam-171
c test of convergence.                                                  scam-172
      r1(1)=dmax1(r1(1),dabs(far(icp,ic))+dabs(fai(icp,ic)))            scam-173
      a1=far(icp,ic)*far(icp,ic)+fai(icp,ic)*fai(icp,ic)                scam-174
      if (a1.gt.1.d0) write (mw,1001) aj,ip(jpi+1),nc,ncin,ic,icp,far(icscam-175
     1p,ic),fai(icp,ic)                                                 scam-176
      tx(ivq+1)=tx(ivq+1)+4.d0*a1*rz*dz                                 scam-177
      fj=0.5d0*dfloat(mc(icp,3))                                        scam-178
      if (.not.lo(55)) go to 4                                          scam-179
c print out of the amplitudes.                                          scam-180
      a1=dsqrt(a1)                                                      scam-181
      b1=0.d0                                                           scam-182
      if (a1.ne.0.d0) b1=datan2(fai(icp,ic),far(icp,ic))                scam-183
      write (mw,1002) icp,ic,ivq,mc(icp,2),fj,far(icp,ic),fai(icp,ic),a1scam-184
     1,b1                                                               scam-185
      go to 4                                                           scam-186
    3 if ((ic.le.ncin).and.lo(55)) write (mw,1003) icp,ic,ivq,mc(icp,2),scam-187
     1fj,far(icp,ic),fai(icp,ic)                                        scam-188
    4 continue                                                          scam-189
      if (.not.lo(124)) go to 5                                         scam-190
      if (v(3,jc).lt.0.d0) v(3,jc)=0.d0                                 scam-191
      if (ic.le.ncin) r1(2)=dmax1(r1(2),v(3,jc))                        scam-192
    5 continue                                                          scam-193
      if ((.not.(lo(63).or.lo(55))).or.(jc.eq.0)) go to 8               scam-194
c output of transmission coefficients for coupled channels.             scam-195
      if (lo(55)) write (mw,1004) aj,ip(jpi+1)                          scam-196
      ic=1+(jc-1)/4                                                     scam-197
      if (lo(63)) write (99,1005) aj,ip(jpi+1),jc                       scam-198
      do 7 i=1,ic                                                       scam-199
      j1=4*(i-1)                                                        scam-200
      j2=min0(jc-j1,4)                                                  scam-201
      do 6 j=1,j2                                                       scam-202
      n=idint(v(1,j+j1)/131072.d0+.01d0)                                scam-203
      vcx(j,1)=.5d0*dmod(v(1,j+j1),131072.d0)                           scam-204
      vcx(j,2)=v(3,j+j1)                                                scam-205
      mcx(j,2)=mod(n,65536)                                             scam-206
    6 mcx(j,1)=n/65536                                                  scam-207
      if (lo(63)) write (99,1006) (mcx(j,1),mcx(j,2),vcx(j,1),vcx(j,2),jscam-208
     1=1,j2)                                                            scam-209
      if (lo(55)) write (mw,1007) (mcx(j,1),mcx(j,2),vcx(j,1),vcx(j,2),jscam-210
     1=1,j2)                                                            scam-211
    7 continue                                                          scam-212
    8 if (lo(131)) go to 62                                             scam-213
      nss=ns                                                            scam-214
      if (nz.ne.0) nss=nct(5)*nct(3)                                    scam-215
c fission coefficient.                                                  scam-216
      tg(1)=0.d0                                                        scam-217
      fnu(1)=.5d0                                                       scam-218
      if (.not.lo(86)) go to 9                                          scam-219
      kn=2*ipj+jpi-1                                                    scam-220
      if (kn.ge.nfiss) go to 9                                          scam-221
      tg(1)=fiss(1,kn)                                                  scam-222
      fnu(1)=.5d0*fiss(2,kn)                                            scam-223
    9 lg(1)=(.not.lo(85)).or.tg(1).eq.0.d0                              scam-224
c gamma coefficient.                                                    scam-225
      tg(2)=0.d0                                                        scam-226
      fnu(2)=.5d0*fnug                                                  scam-227
      if (.not.lo(86)) go to 12                                         scam-228
      if (nrd.ne.0) go to 11                                            scam-229
      a1=0.d0                                                           scam-230
      n1=naj-2                                                          scam-231
      n1=iabs(n1)                                                       scam-232
      n2=naj+2                                                          scam-233
      do 10 j=n1,n2,2                                                   scam-234
      a2=-dfloat((j+1)*(j+1))/(4.d0*sgsq)                               scam-235
   10 a1=a1+dexp(a2)*dfloat(j+1)/sgsq                                   scam-236
      tg(2)=6.283185307d0*tg1*a1                                        scam-237
      go to 12                                                          scam-238
   11 if (ipj.le.nrd) tg(2)=gam(ipj)                                    scam-239
   12 lg(2)=(.not.lo(86)).or.tg(2).eq.0.d0                              scam-240
      nc1=jc                                                            scam-241
      njc=jc                                                            scam-242
      if (ncoll.eq.ncolx) go to 24                                      scam-243
c transmission coefficients for uncoupled states.                       scam-244
      nsp1=ncolx-ncoll-ncont                                            scam-245
      if (nsp1.lt.1) go to 17                                           scam-246
      do 16 i=1,nsp1                                                    scam-247
      ii=i+ncoll                                                        scam-248
      if (wv(3,ii).lt.0.d0) go to 16                                    scam-249
      nm=ipi(3,ii)                                                      scam-250
      mn=ipi(2,ii)                                                      scam-251
      do 15 j=1,nm                                                      scam-252
      nn=naj-nm-1+2*j                                                   scam-253
      if (nn.lt.iabs(nm-1-naj)) go to 15                                scam-254
      do 14 k=1,mn                                                      scam-255
      mm=nn+mn+1-2*k                                                    scam-256
      if (mm.lt.iabs(mn-1-nn).or.mm.ge.2*ipi(10,ii)+2) go to 14         scam-257
      l=mm/2                                                            scam-258
      if (mod(l+jpi+ipi(1,ii),2).ne.0) go to 14                         scam-259
      m=mn*l+k+ipi(8,ii)                                                scam-260
      jc=jc+1                                                           scam-261
      v(1,jc)=131072.d0*(65536.d0*dfloat(ii)+dfloat(l))+dfloat(nn)      scam-262
      v(2,jc)=1.d0                                                      scam-263
      v(3,jc)=tl(m)                                                     scam-264
      do 13 n=4,iq                                                      scam-265
   13 v(n,jc)=0.d0                                                      scam-266
   14 continue                                                          scam-267
   15 continue                                                          scam-268
      if (ii.le.ncols) nc1=jc                                           scam-269
   16 continue                                                          scam-270
   17 if (ncont.eq.0) go to 24                                          scam-271
c transmission coefficients for continua.                               scam-272
      do 23 i=1,ncont                                                   scam-273
      ij=ncj(1,i)                                                       scam-274
      ji=ncj(2,i)                                                       scam-275
      if (ij.gt.ji) go to 23                                            scam-276
      mn=ipim(2,ij)                                                     scam-277
      it=mod(ipim(3,ij)+1,2)                                            scam-278
      do 22 ii=ij,ji                                                    scam-279
      l=ipim(10,ii)+1                                                   scam-280
      if (l.eq.0) go to 22                                              scam-281
      m=ipim(8,ii)                                                      scam-282
      ii1=ii+ncoll+nsp1                                                 scam-283
      do 21 lj=1,l                                                      scam-284
      do 20 jl=1,mn                                                     scam-285
      m=m+1                                                             scam-286
      if (tl(m).eq.0.d0) go to 20                                       scam-287
      jj=2*(lj+jl)-mn-3                                                 scam-288
      if (jj.lt.0) go to 20                                             scam-289
      ikm=iabs(jj-naj)/2+1                                              scam-290
      ikp=min0((jj+naj)/2+1,ncoj)                                       scam-291
      if (ikm.gt.ikp) go to 20                                          scam-292
      ai=0.d0                                                           scam-293
      do 18 kk=ikm,ikp                                                  scam-294
      ar=.5d0*dfloat(it+2*kk-1)                                         scam-295
   18 ai=ai+ar*dexp(-ar*ar/xd(3,ii))/xd(3,ii)                           scam-296
      jc=jc+1                                                           scam-297
      v(1,jc)=131072.d0*(65536.d0*dfloat(ii1)+dfloat(lj-1))+dfloat(jj)  scam-298
      v(2,jc)=ai*xd(1,ii)                                               scam-299
      v(3,jc)=tl(m)                                                     scam-300
      do 19 n=4,iq                                                      scam-301
   19 v(n,jc)=0.d0                                                      scam-302
   20 continue                                                          scam-303
   21 continue                                                          scam-304
   22 continue                                                          scam-305
   23 continue                                                          scam-306
c compound nucleus.                                                     scam-307
   24 sgf(1)=0.d0                                                       scam-308
      sgf(2)=0.d0                                                       scam-309
      if (lo(82)) go to 58                                              scam-310
      if (lo(83)) go to 28                                              scam-311
c computation of satchler p-matrix ("pr","pi").                         scam-312
      i=0                                                               scam-313
      do 27 ii=1,nc                                                     scam-314
      if (wv(3,mc(ii,1)).lt.0.d0) go to 27                              scam-315
      i=i+1                                                             scam-316
      j=0                                                               scam-317
      do 26 jj=1,nc                                                     scam-318
      if (wv(3,mc(jj,1)).lt.0.d0) go to 26                              scam-319
      j=j+1                                                             scam-320
      p(i,j,1)=2.d0*(fai(i,j)+fai(j,i))                                 scam-321
      p(i,j,2)=0.d0                                                     scam-322
      p(i,j,3)=0.d0                                                     scam-323
      p(i,j,4)=0.d0                                                     scam-324
      k=0                                                               scam-325
      do 25 kk=1,nc                                                     scam-326
      if (wv(3,mc(kk,1)).lt.0.d0) go to 25                              scam-327
      k=k+1                                                             scam-328
      p(i,j,1)=p(i,j,1)-4.d0*(far(i,k)*far(j,k)+fai(i,k)*fai(j,k))      scam-329
   25 p(i,j,2)=p(i,j,2)+4.d0*(far(i,k)*fai(j,k)-fai(i,k)*far(j,k))      scam-330
   26 continue                                                          scam-331
   27 p(i,i,3)=1.d0                                                     scam-332
      call diag(p,p(1,1,2),p(1,1,3),p(1,1,4),nc,njc,1.d-12,a1,ierr)     scam-333
      if (ierr.eq.0) go to 28                                           scam-334
      write (mw,1008)                                                   scam-335
      lo(83)=.true.                                                     scam-336
   28 bir=1.d-12+tg(1)+tg(2)                                            scam-337
      do 29 ic=1,jc                                                     scam-338
      if ((.not.lo(83)).and.ic.le.njc) v(3,ic)=dmax1(0.d0,p(ic,ic,1))   scam-339
   29 bir=bir+v(3,ic)*v(2,ic)                                           scam-340
c fluctuation parameter nu=2*fnu, (p.a.m.,n.p.a344(1980)185).           scam-341
c common factor "tp" of width fluctuation integral                      scam-342
c (p.a.m.,prc 11(1975)426).                                             scam-343
      if (lo(87).or.(bir.lt.0.0001d0)) go to 39                         scam-344
      do 30 m=1,20                                                      scam-345
   30 tp(m)=1.d0                                                        scam-346
      efb=dexp(-bz(5)*bir)                                              scam-347
      do 36 ic=1,jc                                                     scam-348
      if (bz(2).ne.0.d0) go to 31                                       scam-349
      v(4,ic)=(1.d0+bz(4)+(v(3,ic)**bz(3)-bz(4))*efb)/2.d0              scam-350
      go to 32                                                          scam-351
   31 v(4,ic)=0.5d0*bz(2)                                               scam-352
   32 a1=v(3,ic)/v(4,ic)/bir                                            scam-353
      if (a1.eq.0.d0) go to 36                                          scam-354
      if (a1.gt.1.d-9) go to 34                                         scam-355
      do 33 m=1,20                                                      scam-356
   33 tp(m)=tp(m)*dexp(x(m)*v(3,ic)*v(2,ic)/bir*(1.d0-.5d0*x(m)*a1))    scam-357
      go to 36                                                          scam-358
   34 do 35 m=1,20                                                      scam-359
   35 tp(m)=tp(m)*((bir+x(m)*v(3,ic)/v(4,ic))/bir)**(v(4,ic)*v(2,ic))   scam-360
   36 continue                                                          scam-361
      do 38 i=1,2                                                       scam-362
      if (lg(i)) go to 38                                               scam-363
      do 37 m=1,20                                                      scam-364
   37 tp(m)=tp(m)*(1.d0+x(m)*tg(i)/(bir*fnu(i)))**fnu(i)                scam-365
   38 continue                                                          scam-366
c storage of compound terms.                                            scam-367
   39 tq=0.d0                                                           scam-368
      if (.not.lo(55)) go to 40                                         scam-369
      write (mw,1009) aj,ip(jpi+1)                                      scam-370
      if (.not.lo(83)) write (mw,1010)                                  scam-371
   40 ncx=njc                                                           scam-372
      if (lo(83)) ncx=ncin                                              scam-373
      do 56 ic=1,ncx                                                    scam-374
      g=1.d0                                                            scam-375
      bri=bir                                                           scam-376
      if (lo(87).and.(ic.le.ncin)) bri=bri+v(3,ic)*bz(3)                scam-377
      ar=1.d0                                                           scam-378
      if (lo(83)) go to 42                                              scam-379
      ar=0.d0                                                           scam-380
      do 41 ia=1,ncin                                                   scam-381
   41 ar=ar+(p(ia,ic,3)**2+p(ia,ic,4)**2)                               scam-382
   42 do 52 icp=1,jc                                                    scam-383
      iv=idint(v(1,icp)/131072.d0/65536.d0+.01d0)                       scam-384
      if (lo(87).or.(bir.lt.0.0001d0)) go to 44                         scam-385
      g=0.d0                                                            scam-386
      do 43 m=1,20                                                      scam-387
   43 g=g+w(m)/(tp(m)*(1.d0+x(m)*v(3,ic)/(v(4,ic)*bri))*(1.d0+x(m)*v(3,iscam-388
     1cp)/(v(4,icp)*bri)))                                              scam-389
      if (icp.eq.ic) g=g+g/v(4,ic)                                      scam-390
   44 tq=v(3,ic)*v(3,icp)*g/bri                                         scam-391
      if (lo(87).and.(icp.eq.ic)) tq=tq+tq*bz(3)                        scam-392
      if ((icp.gt.nc1).or.lo(83)) go to 50                              scam-393
c inverse e-w transformation (p.a.m.,prc 12(1975)744).                  scam-394
      if (icp.gt.njc) go to 48                                          scam-395
      do 47 ia=1,ncin                                                   scam-396
      do 46 ib=1,njc                                                    scam-397
      a1=p(ia,ic,3)*p(ib,icp,3)-p(ia,ic,4)*p(ib,icp,4)                  scam-398
      b1=p(ia,ic,3)*p(ib,icp,4)+p(ia,ic,4)*p(ib,icp,3)                  scam-399
      a2=a1                                                             scam-400
      b2=b1                                                             scam-401
      if (icp.eq.ic) go to 45                                           scam-402
      a2=a1+p(ia,icp,3)*p(ib,ic,3)-p(ia,icp,4)*p(ib,ic,4)               scam-403
      b2=b1+p(ia,icp,3)*p(ib,ic,4)+p(ia,icp,4)*p(ib,ic,3)               scam-404
   45 v(ia+4,ib)=v(ia+4,ib)+(a1*a2+b1*b2)*tq                            scam-405
   46 continue                                                          scam-406
   47 continue                                                          scam-407
      go to 51                                                          scam-408
   48 do 49 ia=1,ncin                                                   scam-409
   49 v(ia+4,icp)=v(ia+4,icp)+(p(ia,ic,3)**2+p(ia,ic,4)**2)*tq          scam-410
      go to 51                                                          scam-411
   50 v(5,icp)=v(5,icp)+ar*tq                                           scam-412
   51 if ((ic.gt.ncin).or.(.not.lo(55))) go to 52                       scam-413
      gnu=2.d0*v(4,icp)                                                 scam-414
      l=idint(dmod(v(1,icp)/131072.d0,65536.d0)+.01d0)                  scam-415
      fj=.5d0*dmod(v(1,icp),131072.d0)                                  scam-416
      write (mw,1011) ic,icp,iv,l,fj,v(3,icp),tq,gnu,g                  scam-417
   52 continue                                                          scam-418
      if (lo(83).and.ic.gt.ncin) go to 56                               scam-419
      do 55 i=1,2                                                       scam-420
      if (lg(i)) go to 55                                               scam-421
      if (lo(87)) go to 54                                              scam-422
      g=0.d0                                                            scam-423
      do 53 m=1,20                                                      scam-424
   53 g=g+w(m)/(tp(m)*(1.d0+x(m)*v(3,ic)/(v(4,ic)*bri))*(1.d0+x(m)*tg(i)scam-425
     1/(bri*fnu(i))))                                                   scam-426
   54 a1=v(3,ic)*tg(i)*g/bri                                            scam-427
      sgf(i)=sgf(i)+a1*ar                                               scam-428
      fn=2.d0*fnu(i)                                                    scam-429
      if (lo(55).and.(ic.le.ncin)) write (mw,1012) al(i),tg(i),sgf(i),fnscam-430
     1,g                                                                scam-431
   55 continue                                                          scam-432
   56 continue                                                          scam-433
      if (lo(55)) write (mw,1013) bir                                   scam-434
      do 57 i=1,2                                                       scam-435
      if (lg(i)) go to 57                                               scam-436
      if (lo(132)) fcn(ipj,ndq+i)=fcn(ipj,ndq+i)+.25d0*sgf(i)           scam-437
      tx(ndp+i)=tx(ndp+i)+rz*sgf(i)                                     scam-438
   57 continue                                                          scam-439
      go to 62                                                          scam-440
c storage for simplified compound nucleus.                              scam-441
   58 bir=bz(3)**2*(2.d0*aj+1.d0)*dexp(-aj*(aj+1.d0)/(2.d0*bz(2)**2))   scam-442
      do 59 ic=1,njc                                                    scam-443
   59 bir=bir+4.d0*v(3,ic)                                              scam-444
      if (lo(55)) write (mw,1014) bir                                   scam-445
      do 61 ic=1,ncin                                                   scam-446
      nt=ns+ik(1,2*mc(ic,2),mc(ic,3))*nct(nz+1)                         scam-447
      do 60 icp=1,njc                                                   scam-448
      tq=v(3,ic)*v(3,icp)/bir                                           scam-449
      if (iv.eq.1) tq=tq*bz(1)**2                                       scam-450
   60 v(ic+4,icp)=v(ic+4,icp)+4.d0*tq                                   scam-451
   61 continue                                                          scam-452
   62 if (lo(55).and.lo(123)) write (mw,1000) aj,ip(jpi+1),nc,ncin      scam-453
c storage of the amplitudes.                                            scam-454
      ni=nci-ncin                                                       scam-455
      do 70 i1=1,nci                                                    scam-456
      nt=ns+ik(1,2*md(i1,2),md(i1,3))*nct(nz+1)                         scam-457
      if (lo(123)) go to 63                                             scam-458
      j1=i1                                                             scam-459
      k1=j1                                                             scam-460
      go to 64                                                          scam-461
   63 j1=1                                                              scam-462
      k1=ncin                                                           scam-463
   64 ivs=0                                                             scam-464
      do 69 i2=1,nic                                                    scam-465
      iv=md(i2,1)                                                       scam-466
      if ((iv.ne.ivs).and.(iv.ne.1)) nt=nt+(ipi(2,ivs)*ipi(3,ivs)+nsy)/2scam-467
      nsy=mod(ipi(1,iv)+jpi+ipj+(ipi(2,iv)+ipi(3,iv))/2+1,2)            scam-468
      ivs=iv                                                            scam-469
      id=nt+ik(iv,2*md(i2,2),md(i2,3))+1                                scam-470
      if (lo(123).and.(i2.le.nci)) go to 65                             scam-471
      j2=i2-ni                                                          scam-472
      k2=j2                                                             scam-473
      go to 66                                                          scam-474
   65 j2=1                                                              scam-475
      k2=ncin                                                           scam-476
   66 ar=0.d0                                                           scam-477
      ai=0.d0                                                           scam-478
      do 68 l1=j1,k1                                                    scam-479
      a1=dz                                                             scam-480
      if (lo(123)) a1=a1*aa(i1,l1)                                      scam-481
      if (a1.eq.0.d0) go to 68                                          scam-482
      do 67 l2=j2,k2                                                    scam-483
      a2=1.d0                                                           scam-484
      if (lo(123).and.(l2.le.ncin)) a2=aa(i2,l2)                        scam-485
      if (a2.eq.0.d0) go to 67                                          scam-486
      ar=ar+far(l2,l1)*a1*a2                                            scam-487
      ai=ai+fai(l2,l1)*a1*a2                                            scam-488
   67 continue                                                          scam-489
   68 continue                                                          scam-490
      f(1,ipj,id)=ar                                                    scam-491
      f(2,ipj,id)=ai                                                    scam-492
      if (.not.(lo(55).and.lo(123))) go to 69                           scam-493
      a1=dsqrt(ar*ar+ai*ai)                                             scam-494
      a2=0.d0                                                           scam-495
      if (a1.ne.0.d0) a2=datan2(ai,ar)                                  scam-496
      fj=0.5d0*dfloat(md(i2,3))                                         scam-497
      write (mw,1002) i2,i1,iv,md(i2,2),fj,ar,ai,a1,a2                  scam-498
   69 continue                                                          scam-499
   70 continue                                                          scam-500
      if (lo(131)) return                                               scam-501
c compound nucleus.                                                     scam-502
      jcx=jc+ni                                                         scam-503
      iiv=ipi(2,1)-1                                                    scam-504
      iii=ipi(3,1)-1                                                    scam-505
      do 81 ic=1,nci                                                    scam-506
      la=2*md(ic,2)                                                     scam-507
      ja=md(ic,3)                                                       scam-508
      nt=nss+ik(iv,la,ja)*nct(nz+5)                                     scam-509
      ivs=0                                                             scam-510
      call cocn(la,la,ja,ja,iii,iiv,naj,ipj,q,q(ipj+1),idt-2*ipj)       scam-511
      if (lo(123)) go to 71                                             scam-512
      j1=ic                                                             scam-513
      k1=j1                                                             scam-514
      go to 72                                                          scam-515
   71 j1=1                                                              scam-516
      k1=ncin                                                           scam-517
   72 do 80 icp=1,jcx                                                   scam-518
      if (lo(123).and.(icp.le.nci)) go to 73                            scam-519
      j2=icp-ni                                                         scam-520
      k2=j2                                                             scam-521
      go to 74                                                          scam-522
   73 j2=1                                                              scam-523
      k2=ncin                                                           scam-524
   74 ar=0.d0                                                           scam-525
      do 76 l1=j1,k1                                                    scam-526
      a1=dz                                                             scam-527
      if (lo(123)) a1=a1*aa(i1,l1)                                      scam-528
      if (a1.eq.0.d0) go to 79                                          scam-529
      do 75 l2=j2,k2                                                    scam-530
      a2=1.d0                                                           scam-531
      if (lo(123).and.(l2.gt.ncin)) a2=aa(i2,l2)                        scam-532
      if (a2.eq.0.d0) go to 75                                          scam-533
      ar=ar+v(l1+4,l2)*a1*a2                                            scam-534
   75 continue                                                          scam-535
   76 continue                                                          scam-536
      if (ar.eq.0.d0) go to 81                                          scam-537
      iv=idint(v(1,icp)/131072.d0/65536.d0+.01d0)                       scam-538
      if ((iv.ne.ivs).and.(iv.ne.1)) nt=nt+(ipi(2,ivs)*ipi(3,ivs)+nsy)/2scam-539
      nsy=mod(ipi(1,iv)+jpi+ipj+(ipi(2,iv)+ipi(3,iv))/2+1,2)            scam-540
      ivs=iv                                                            scam-541
      tx(ncoll+iv+1)=tx(ncoll+iv+1)+ar*v(2,icp)*rz                      scam-542
      if (icp.gt.nc1) go to 79                                          scam-543
      jb=idint(dmod(v(1,icp),131072.d0))                                scam-544
      n=idint(v(1,icp)/131072.d0+.01d0)                                 scam-545
      lb=2*mod(n,65536)                                                 scam-546
      if (.not.lo(132)) go to 77                                        scam-547
      id=nt+ik(iv,lb,jb)+1                                              scam-548
      fcn(ipj,id)=fcn(ipj,id)+.25d0*ar                                  scam-549
   77 call cocn(lb,lb,jb,jb,ipi(3,iv)-1,ipi(2,iv)-1,naj,ipj,q(ipj+1),q(2scam-550
     1*ipj+1),idt-3*ipj)                                                scam-551
      if ((iv.eq.1).and.(iii.ne.0).and.(icp.ne.ic)) call cocn(la,lb,ja,jscam-552
     1b,ipi(3,iv)-1,ipi(2,iv)-1,naj,ipj,q(2*ipj+1),q(3*ipj+1),idt-4*ipj)scam-553
      do 78 ll=1,ipj                                                    scam-554
      ai=q(ll)*q(ll+ipj)                                                scam-555
      if ((iv.eq.1).and.(iii.ne.0).and.(icp.ne.ic)) ai=ai+q(ll+2*ipj)**2scam-556
   78 gcn(ll,iv)=gcn(ll,iv)+.25d0*ai*ar*xz                              scam-557
      go to 80                                                          scam-558
   79 if (.not.lo(132)) go to 80                                        scam-559
      j=iv+kba-ncols                                                    scam-560
      fcn(ipj,j)=fcn(ipj,j)+0.25d0*ar*v(2,icp)                          scam-561
   80 continue                                                          scam-562
   81 jcx=nc1+ni                                                        scam-563
      return                                                            scam-564
 1000 format (//' channel spin and parity =',f7.1,a1,i11,' coupled channscam-565
     1els and',i3,' solutions'//'  ic  icp n    l    j',19x,'c matrix',2scam-566
     20x,'|c|',6x,'phase')                                              scam-567
 1001 format (' c matrix larger than 1 for aj ipi nc ncin ic icp =',f5.1scam-568
     1,a1,4i3,2x,2d12.4)                                                scam-569
 1002 format (1x,i3,i4,i3,i5,f7.1,4x,1p,2d15.7,' i',4x,0p,2f11.8)       scam-570
 1003 format (1x,i3,i4,i3,i5,f7.1,4x,1p,2d15.7,' i',4x,'closed')        scam-571
 1004 format (/' transmission coefficients for channel spin and parity =scam-572
     1',f7.1,a1/4(' level   l     j',16x))                              scam-573
 1005 format (1x,f9.1,4x,a1,1x,i4)                                      scam-574
 1006 format (1x,i2,i6,f9.1,2x,1p,d18.8,0p)                             scam-575
 1007 format (4(1x,i2,i4,f6.1,2x,1p,d14.7,0p,3x))                       scam-576
 1008 format (' error in eigensystem.  e-w correction discontinued.')   scam-577
 1009 format (//' channel spin and parity =',f7.1, a1//'  ic  icp n    lscam-578
     1    j',9x,'tl',9x,'hf',11x,'nu',9x,'g')                           scam-579
 1010 format (' tl  in transformed channel space:')                     scam-580
 1011 format (1x,i3,i4,i3,i5,f7.1,f12.6,d14.6,2f10.6)                   scam-581
 1012 format (15x,a8,f12.6,d14.6,f10.4,f10.6)                           scam-582
 1013 format (20x,'sum',f12.6)                                          scam-583
 1014 format (15x,'h.-f.',d20.6)                                        scam-584
      end                                                               scam-585
c 02/04/06                                                      ecis06  diag-000
      subroutine diag(zr,zi,xr,xi,n,nc,eps,ax,ier)                      diag-001
c diagonalisation of a hermitian complex matrix by an extension of the  diag-002
c jacobi's method.                                                      diag-003
c input:     zr,zi:  real and imaginary parts of the matrix.            diag-004
c            xr,xi:  real and imaginary parts of the unit matrix.       diag-005
c            n:      first dimension of zr,zi,xr and xi.                diag-006
c            nc:     dimension of the matrix.                           diag-007
c            eps:    value below which matrix elements are set to 0.    diag-008
c output:    zr,zi:  the eigenvalues are on the diagonal of zr.         diag-009
c                    all the other elements are 0, if process succeeded.diag-010
c            xr,xi:  eigenvectors.                                      diag-011
c            ax:     square of norm of the largest non diagonal element.diag-012
c            ier:    returns 0 or -1 after 4*nc**2 rotations.           diag-013
c***********************************************************************diag-014
      implicit real*8 (a-h,o-z)                                         diag-015
      dimension zr(n,*),zi(n,*),xr(n,*),xi(n,*)                         diag-016
      ier=0                                                             diag-017
      nt=0                                                              diag-018
    1 nt=nt+1                                                           diag-019
      if (nt.gt.4*nc*nc) go to 6                                        diag-020
      ax=0.d0                                                           diag-021
      l=1                                                               diag-022
      m=2                                                               diag-023
c symmetrisation and search for the largest non diagonal element.       diag-024
      do 3 i=1,nc                                                       diag-025
      do 2 j=i,nc                                                       diag-026
      if (zr(j,i).eq.0.d0) zr(i,j)=0.d0                                 diag-027
      if (zi(j,i).eq.0.d0) zi(i,j)=0.d0                                 diag-028
      if (zr(i,j).eq.0.d0) zr(j,i)=0.d0                                 diag-029
      if (zi(i,j).eq.0.d0) zi(j,i)=0.d0                                 diag-030
      ar=(zr(i,j)+zr(j,i))/2.d0                                         diag-031
      ai=(zi(i,j)-zi(j,i))/2.d0                                         diag-032
      zr(j,i)=ar                                                        diag-033
      zr(i,j)=ar                                                        diag-034
      zi(i,j)=ai                                                        diag-035
      zi(j,i)=-ai                                                       diag-036
      if (i.eq.j) go to 2                                               diag-037
      ay=zr(i,j)**2+zi(i,j)**2                                          diag-038
      if (ax.gt.ay) go to 2                                             diag-039
      ax=ay                                                             diag-040
      l=i                                                               diag-041
      m=j                                                               diag-042
    2 continue                                                          diag-043
    3 continue                                                          diag-044
      if (ax.eq.0.d0) return                                            diag-045
c elementary transformation.                                            diag-046
      u=datan2(-zi(l,m),zr(l,m))/2.d0                                   diag-047
      v=datan2(2.d0*dsqrt(zr(l,m)**2+zi(l,m)**2),zr(m,m)-zr(l,l))/2.d0  diag-048
      uc=dcos(u)                                                        diag-049
      us=dsin(u)                                                        diag-050
      tc=dcos(v)                                                        diag-051
      ts=-dsin(v)                                                       diag-052
      ucc=uc*tc                                                         diag-053
      ucs=uc*ts                                                         diag-054
      usc=us*tc                                                         diag-055
      uss=us*ts                                                         diag-056
c transformation of rows.                                               diag-057
      do 4 i=1,nc                                                       diag-058
      ar=xr(i,l)*ucc+xi(i,l)*usc+xr(i,m)*ucs-xi(i,m)*uss                diag-059
      br=-xr(i,l)*ucs-xi(i,l)*uss+xr(i,m)*ucc-xi(i,m)*usc               diag-060
      ai=xi(i,l)*ucc-xr(i,l)*usc+xi(i,m)*ucs+xr(i,m)*uss                diag-061
      bi=-xi(i,l)*ucs+xr(i,l)*uss+xi(i,m)*ucc+xr(i,m)*usc               diag-062
      xr(i,l)=ar                                                        diag-063
      xr(i,m)=br                                                        diag-064
      xi(i,l)=ai                                                        diag-065
      xi(i,m)=bi                                                        diag-066
      ar=zr(i,l)*ucc+zi(i,l)*usc+zr(i,m)*ucs-zi(i,m)*uss                diag-067
      br=-zr(i,l)*ucs-zi(i,l)*uss+zr(i,m)*ucc-zi(i,m)*usc               diag-068
      ai=zi(i,l)*ucc-zr(i,l)*usc+zi(i,m)*ucs+zr(i,m)*uss                diag-069
      bi=-zi(i,l)*ucs+zr(i,l)*uss+zi(i,m)*ucc+zr(i,m)*usc               diag-070
      zr(i,l)=ar                                                        diag-071
      zr(i,m)=br                                                        diag-072
      zi(i,l)=ai                                                        diag-073
    4 zi(i,m)=bi                                                        diag-074
c transformation of columns.                                            diag-075
      do 5 i=1,nc                                                       diag-076
      ar=zr(l,i)*ucc-zi(l,i)*usc+zr(m,i)*ucs+zi(m,i)*uss                diag-077
      br=-zr(l,i)*ucs+zi(l,i)*uss+zr(m,i)*ucc+zi(m,i)*usc               diag-078
      ai=zi(l,i)*ucc+zr(l,i)*usc+zi(m,i)*ucs-zr(m,i)*uss                diag-079
      bi=-zi(l,i)*ucs-zr(l,i)*uss+zi(m,i)*ucc-zr(m,i)*usc               diag-080
      if (dabs(ar).lt.eps) ar=0.d0                                      diag-081
      if (dabs(br).lt.eps) br=0.d0                                      diag-082
      if (dabs(ai).lt.eps) ai=0.d0                                      diag-083
      if (dabs(bi).lt.eps) bi=0.d0                                      diag-084
      zr(l,i)=ar                                                        diag-085
      zr(m,i)=br                                                        diag-086
      zi(l,i)=ai                                                        diag-087
    5 zi(m,i)=bi                                                        diag-088
      go to 1                                                           diag-089
    6 ier=-1                                                            diag-090
      return                                                            diag-091
      end                                                               diag-092
c 02/04/06                                                      ecis06  cocn-000
      subroutine cocn(la,lb,ja,jb,iw,iv,ij,ip,rb,rc,nt)                 cocn-001
c computation of coefficient for angular distribution of compound       cocn-002
c nucleus cross-sections.                                               cocn-003
c input:     la,lb,ja,jb,iw,iv,ij: integer double values.               cocn-004
c            ip:      number of coefficients requested.                 cocn-005
c            nt:      size of the working space rc.                     cocn-006
c output:    rb:      in rb(i), value of:                               cocn-007
c                     ( ll  la  lb )  ( ja  jb  ll )  ( la  lb  ll )    cocn-008
c                     (            )  )            (  )            (    cocn-009
c                     (  0   0   0 )  ( ij  ij  iw )  ( jb  ja  iv )    cocn-010
c                     *(2 ij+1)*sqrt((2 la+1)(2 lb+1)(2 ja+1)(2 jb+1))  cocn-011
c                     for even values of ll, from ll=0 with positive    cocn-012
c                     or null value for ll=0.                           cocn-013
c working area:                                                         cocn-014
c             rc:     for all the non-zero 6-j coefficients with even   cocn-015
c                     and odd values of ll, starting with the largest   cocn-016
c                     value of ll in rc(2).                             cocn-017
c***********************************************************************cocn-018
      implicit real*8 (a-h,o-z)                                         cocn-019
      common /inout/ mr,mw,ms                                           cocn-020
      dimension rb(*),rc(*),j(5)                                        cocn-021
      ld=iabs(la-lb)                                                    cocn-022
      lp=(la+lb)/4+1                                                    cocn-023
      lm=ld/4+1                                                         cocn-024
      ad=dfloat(ld**2)                                                  cocn-025
      ap=dfloat(la+lb+2)**2                                             cocn-026
      jt=max0(ip,lp)                                                    cocn-027
      if (jt.gt.nt) go to 7                                             cocn-028
      ti=0.d0                                                           cocn-029
c recurrence computation of 3-j coefficients for even values of ll.     cocn-030
      do 2 i=1,jt                                                       cocn-031
      al=dfloat(4*i-4)                                                  cocn-032
      rc(i)=0.d0                                                        cocn-033
      if (i.lt.lm.or.i.gt.lp) go to 2                                   cocn-034
      if (i.gt.lm) go to 1                                              cocn-035
      rc(i)=1.d0                                                        cocn-036
      go to 2                                                           cocn-037
    1 rc(i)=-rc(i-1)*dsqrt(((al-2.d0)**2-ad)*(ap-(al-2.d0)**2)/((al**2-acocn-038
     1d)*(ap-al**2)))                                                   cocn-039
    2 ti=ti+rc(i)**2*(al+1.d0)                                          cocn-040
      ti=dsqrt(ti)                                                      cocn-041
      do 3 i=1,ip                                                       cocn-042
    3 rb(i)=rc(i)                                                       cocn-043
c quantum numbers of the first 6-j coefficient.                         cocn-044
      j(1)=la                                                           cocn-045
      j(2)=ja                                                           cocn-046
      j(3)=iv                                                           cocn-047
      j(4)=jb                                                           cocn-048
      j(5)=lb                                                           cocn-049
      do 5 k=1,2                                                        cocn-050
      ji=max0(iabs(j(1)-j(5)),iabs(j(2)-j(4)))                          cocn-051
      jf=min0(j(1)+j(5),j(2)+j(4))                                      cocn-052
      jt=(jf-ji)/2+2                                                    cocn-053
      if (jt.gt.nt) go to 7                                             cocn-054
      at=dfloat(jf+1)                                                   cocn-055
      call dx6j(rc,at,j,jt)                                             cocn-056
      ti=ti*dsqrt(at*dfloat(j(3)+1))                                    cocn-057
      do 4 i=1,ip                                                       cocn-058
      ll=4*i-4                                                          cocn-059
      lk=1                                                              cocn-060
      if (ll.ge.ji.and.ll.le.jf) lk=2+(jf-ll)/2                         cocn-061
      rb(i)=rc(lk)*rb(i)                                                cocn-062
    4 continue                                                          cocn-063
c quantum numbers of the second 6-j coefficient.                        cocn-064
      j(1)=ij                                                           cocn-065
      j(3)=iw                                                           cocn-066
    5 j(5)=ij                                                           cocn-067
c normalisation.                                                        cocn-068
      ti=dsqrt(dfloat(la+1)*dfloat(lb+1)*dfloat(ja+1)*dfloat(jb+1))*dflococn-069
     1at(ij+1)/ti                                                       cocn-070
      if (rb(1).lt.0.d0) ti=-ti                                         cocn-071
      do 6 i=1,ip                                                       cocn-072
    6 rb(i)=rb(i)*ti                                                    cocn-073
      return                                                            cocn-074
    7 write (mw,1000) nt,jt                                             cocn-075
      stop                                                              cocn-076
 1000 format (' working space too small in cocn:',i5,' available',i6,' rcocn-077
     1equested.'///' in cocn  ...  stop  ...')                          cocn-078
      end                                                               cocn-079
c 02/03/07                                                      ecis06  sche-000
      subroutine sche(f,jmax,kmax,ipi,mt1,mt2,mf,tx,bm,mc,fa,xg,lmax1,wvsche-001
     1,kab,kba,kcb,jmin,ipj,ipk,fn,ncoll,ncols,nct,fgn,am,jit,jti,nlt,idsche-002
     21,lo)                                                             sche-003
c scattering coefficients in the helicity representation.               sche-004
c input:     f:       s-matrix.                                         sche-005
c            jmax:    maximum number of channel spins, dimension for f. sche-006
c            kmax:    maximum number of compound nucleus, dimension for sche-007
c                     fn.                                               sche-008
c            ipi(i,*):parity of channel for i=1,                        sche-009
c                     multiplicities of particle for i=2,               sche-010
c                     multiplicities of target for i=3,                 sche-011
c                     product of charges for i=4,                       sche-012
c                     first/last channel number for i=6, 7 (see deph),  sche-013
c                     maximum angular momentum for i=11.                sche-014
c            mt1,mt2: maximum 2*spin+1 for part. and target.            sche-015
c            mf:      helicity numbers (see deph).                      sche-016
c            tx:      total reaction cross section in millibarns        sche-017
c                     followed by the total cross section for each      sche-018
c                     level, the compound nucleus cross sections,       sche-019
c                     the fission and the gamma cross sections.         sche-020
c            xg:      coulomb phase-shifts.                             sche-021
c            lmax1:   dimension for xg.                                 sche-022
c            wv:      wave number and coulomb parameter (see colf).     sche-023
c            kab:     dimension for fa.                                 sche-024
c            kba:     number of independent amplitudes.                 sche-025
c            kcb:     dimension for mc.                                 sche-026
c            jmin:    twice minimum channel spin.                       sche-027
c            ipj:     number of the channel spin.                       sche-028
c            ipk:     number of l values for compound nucleus.          sche-029
c            fn:      compound nucleus contribution.                    sche-030
c            ncoll:   number of coupled levels.                         sche-031
c            ncols:   number of levels with angular distribution.       sche-032
c            nct:     number of equations and solutions for each parity.sche-033
c            fgn:     coefficients of legendre polynomials for compound sche-034
c                     nucleus.                                          sche-035
c            jit:     number of different rates of interpolation.       sche-036
c            jti:     limits and steps of interpolation.                sche-037
c            nlt:     memories needed for legendre polynomials.         sche-038
c            id1:     length available for bm.                          sche-039
c            lo(i):   logical controls:                                 sche-040
c               lo(18) =.true. projectile-target antisymmetrisation.    sche-041
c               lo(41) =.true. factorisation of 1/(1-cos(theta)).       sche-042
c               lo(43) =.true. interpolation on total spin.             sche-043
c               lo(56) =.true. output of s-matrix elements.             sche-044
c               lo(60) =.true. s-matrix elements written on file 60.    sche-045
c               lo(65) =.true. print coefficients of the expansion in   sche-046
c                              legendre polynomials on file 65.         sche-047
c               lo(81) =.true. hauser-feshbach corrections.             sche-048
c               lo(82) =.true. old simplified compound nucleus.         sche-049
c               lo(116)=.true. no output.                               sche-050
c               lo(119)=.true. results with the last calculation.       sche-051
c               lo(120)=.true. output and last calculation best one.    sche-052
c               lo(122)=.true. identical particles without spin.        sche-053
c               lo(132)=.true. store fission and gamma transmission     sche-054
c                              coefficients for interpolation.          sche-055
c output:    f:       helicity scattering coefficients.                 sche-056
c            tx,fgn:  addition of interpolated values.                  sche-057
c working areas:                                                        sche-058
c            bm:      for factors 1/(-x*cos(theta)), 3j coefficients,...sche-059
c            mc:      nuclear state numbers and angular momenta.        sche-060
c            fa:      for storage of s-matrix for a given total spin.   sche-061
c            am:      for products of c.g. coefficients.                sche-062
c                                                                       sche-063
c for the common  /angul/ see lect.                                     sche-064
c for the common  /dcons/ see calc.                                     sche-065
c for the common  /ncomp/ see calx.                                     sche-066
c                                                                       sche-067
c significance of the quantities in common /dcons/:                     sche-068
c  xz:        conversion factor to millibarns.                          sche-069
c   used:     xz.                                                       sche-070
c                                                                       sche-071
c significance of the quantities in common /angul/:                     sche-072
c  ncj:       number of factorisations of 1/(1-cos(theta)) in amplitude.sche-073
c   defined:  ncj.                                                      sche-074
c   used:     ncj.                                                      sche-075
c                                                                       sche-076
c significance of the quantities in common /ncomp/:                     sche-077
c  nsp(1):    number of uncoupled levels for compound nucleus           sche-078
c             including discretisation of continuum.                    sche-079
c  nsp(2):    number of these levels with angular distribution.         sche-080
c  nsp(3):    number of these levels without angular distribution.      sche-081
c   used:     nsp.                                                      sche-082
c                                                                       sche-083
c***********************************************************************sche-084
      implicit real*8 (a-h,o-z)                                         sche-085
      logical lo(150)                                                   sche-086
      dimension f(2,jmax,*),ipi(11,*),mf(10,*),tx(*),bm(*),mc(kcb,2,*),fsche-087
     1a(2,kab,*),xg(lmax1,*),wv(22,*),fn(kmax,*),nct(6),fgn(kmax,*),am(msche-088
     2t1,mt2,*),jti(2,jit)                                              sche-089
      character*1 ip(2),ipp                                             sche-090
      common /angul/ theta1,theta2,dtheta,dthe,ncj,nl(3),jmm(2)         sche-091
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            sche-092
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqsche-093
     1,acn1,acn2,az(18)                                                 sche-094
      common /inout/ mr,mw,ms                                           sche-095
      data ip,pi,k2,k3,k4 /'+','-',3.1415926535897932d0,3*0/            sche-096
      if (lo(120)) go to 60                                             sche-097
      if (lo(119)) return                                               sche-098
c tables of quantum numbers.                                            sche-099
      ipd=1                                                             sche-100
      if (lo(122)) ipd=2                                                sche-101
      ipz=2*ipd                                                         sche-102
      ija=jmin-ipz                                                      sche-103
      iaj=ija                                                           sche-104
      do 4 jpi=1,2                                                      sche-105
      nc=0                                                              sche-106
      do 3 i=1,ncols                                                    sche-107
      nj1=ija-ipi(3,i)+1                                                sche-108
      nj=ipi(3,i)                                                       sche-109
      do 2 j=1,nj                                                       sche-110
      l1=nj1-ipi(2,i)+1                                                 sche-111
      nm=ipi(2,i)                                                       sche-112
      do 1 k=1,nm                                                       sche-113
      if (mod(l1+2*ipi(1,i)+2*(jpi+ipd),4).eq.0) go to 1                sche-114
      nc=nc+1                                                           sche-115
      mc(nc,jpi,1)=i                                                    sche-116
      mc(nc,jpi,2)=l1                                                   sche-117
      mc(nc,jpi,3)=nj1                                                  sche-118
    1 l1=l1+2                                                           sche-119
    2 nj1=nj1+2                                                         sche-120
    3 continue                                                          sche-121
    4 continue                                                          sche-122
      nxy=0                                                             sche-123
      if (lo(81).and.(.not.lo(82))) nxy=nsp(3)+2                        sche-124
      if (.not.lo(43)) go to 38                                         sche-125
c interpolation for the s-matrix.                                       sche-126
      rz=4.d0*pi*xz*dfloat(ipd)                                         sche-127
      i1=0                                                              sche-128
      i4=0                                                              sche-129
c loop on parities.                                                     sche-130
      do 17 j=1,2                                                       sche-131
      i2=i1+nct(j)                                                      sche-132
      i3=nct(j+2)                                                       sche-133
      i1=i1+1                                                           sche-134
      if (i1.gt.i2) go to 17                                            sche-135
c loop on solutions.                                                    sche-136
      do 16 k=1,i3                                                      sche-137
      ji4=(3+max0(ipi(3,1)-1-iaj-mc(k,j,3),ipi(2,1)-1-mc(k,j,2)-mc(k,j,3sche-138
     1),-2*mc(k,j,2),-2*mc(k,j,3)))/4-ipd+1                             sche-139
      i6=0                                                              sche-140
c loop on s matrix elements.                                            sche-141
      do 15 i=i1,i2                                                     sche-142
      i4=i4+1                                                           sche-143
      i6=i6+1                                                           sche-144
      iv=mc(i6,j,1)                                                     sche-145
      ji3=(3+max0(ipi(3,iv)-1-iaj-mc(i6,j,3),ipi(2,iv)-1-mc(i6,j,2)-mc(ische-146
     16,j,3),-2*mc(i6,j,2),-2*mc(i6,j,3)))/4-ipd+1                      sche-147
      ji1=max0(ji3,ji4)                                                 sche-148
      jt1=min0(ipj,ipi(10,1)-mc(k,j,2)/2,ipi(10,iv)-mc(iv,j,2)/2)       sche-149
      n1=0                                                              sche-150
      n3=1                                                              sche-151
    5 if (n3.lt.ji1) go to 6                                            sche-152
      n1=n1+1                                                           sche-153
      k1=k2                                                             sche-154
      k2=k3                                                             sche-155
      k3=k4                                                             sche-156
      k4=n3                                                             sche-157
      if (n1.gt.3) go to 9                                              sche-158
    6 do 7 l=1,jit                                                      sche-159
      if (n3.le.jti(1,l)) go to 8                                       sche-160
    7 n3=n3+jti(2,l)*ipd                                                sche-161
      l=jit                                                             sche-162
    8 n3=n3+ipd                                                         sche-163
      if (n3.le.jt1) go to 5                                            sche-164
      if (n3.gt.jti(1,l)+jti(2,l)*ipd+ipd) go to 14                     sche-165
      go to 69                                                          sche-166
    9 ji2=k3-ipd                                                        sche-167
      if (n3.eq.jt1) ji2=k4-ipd                                         sche-168
      if (ji1.gt.ji2) go to 14                                          sche-169
      m1=(k1-k2)*(k1-k3)*(k1-k4)                                        sche-170
      m2=(k2-k1)*(k2-k3)*(k2-k4)                                        sche-171
      m3=(k3-k1)*(k3-k2)*(k3-k4)                                        sche-172
      m4=(k4-k1)*(k4-k2)*(k4-k3)                                        sche-173
      n2=1                                                              sche-174
      do 13 n4=ji1,ji2,ipd                                              sche-175
      if (n4.eq.k1.or.n4.eq.k2.or.n4.eq.k3.or.n4.eq.k4) go to 13        sche-176
      sz=rz*dfloat(2*n4+jmin-1)                                         sche-177
      if (n2.ne.1) go to 10                                             sche-178
      n2=3                                                              sche-179
      a2=f(1,k1,i4)**2+f(2,k1,i4)**2                                    sche-180
      b2=f(1,k2,i4)**2+f(2,k2,i4)**2                                    sche-181
      c2=f(1,k3,i4)**2+f(2,k3,i4)**2                                    sche-182
      d2=f(1,k4,i4)**2+f(2,k4,i4)**2                                    sche-183
      if (a2*b2*c2*d2.eq.0.d0) go to 10                                 sche-184
      a1=datan2(f(2,k1,i4),f(1,k1,i4))                                  sche-185
      b1=datan2(f(2,k2,i4),f(1,k2,i4))                                  sche-186
      c1=datan2(f(2,k3,i4),f(1,k3,i4))                                  sche-187
      d1=datan2(f(2,k4,i4),f(1,k4,i4))                                  sche-188
      if ((a1-b1)*(b1-c1).lt.0.d0.or.(b1-c1)*(c1-d1).lt.0.d0) go to 10  sche-189
      n2=2                                                              sche-190
      a2=dlog(a2)                                                       sche-191
      b2=dlog(b2)                                                       sche-192
      c2=dlog(c2)                                                       sche-193
      d2=dlog(d2)                                                       sche-194
   10 a3=dfloat((n4-k2)*(n4-k3)*(n4-k4))/dfloat(m1)                     sche-195
      b3=dfloat((n4-k1)*(n4-k3)*(n4-k4))/dfloat(m2)                     sche-196
      c3=dfloat((n4-k1)*(n4-k2)*(n4-k4))/dfloat(m3)                     sche-197
      d3=dfloat((n4-k1)*(n4-k2)*(n4-k3))/dfloat(m4)                     sche-198
      if (n2.eq.3) go to 11                                             sche-199
      a4=a1*a3+b1*b3+c1*c3+d1*d3                                        sche-200
      b4=dexp(0.5d0*(a2*a3+b2*b3+c2*c3+d2*d3))                          sche-201
      f(1,n4,i4)=b4*dcos(a4)                                            sche-202
      f(2,n4,i4)=b4*dsin(a4)                                            sche-203
      go to 12                                                          sche-204
   11 f(1,n4,i4)=f(1,k1,i4)*a3+f(1,k2,i4)*b3+f(1,k3,i4)*c3+f(1,k4,i4)*d3sche-205
      f(2,n4,i4)=f(2,k1,i4)*a3+f(2,k2,i4)*b3+f(2,k3,i4)*c3+f(2,k4,i4)*d3sche-206
   12 tx(iv+1)=tx(iv+1)+(f(1,n4,i4)**2+f(2,n4,i4)**2)*sz                sche-207
      if (i6.eq.k) tx(1)=tx(1)+f(2,n4,i4)*sz                            sche-208
   13 continue                                                          sche-209
   14 ji1=ji2+ipz                                                       sche-210
      if (ji1.lt.jt1) go to 6                                           sche-211
   15 continue                                                          sche-212
   16 continue                                                          sche-213
   17 i1=i2                                                             sche-214
      if (.not.(lo(81).and.lo(132))) go to 38                           sche-215
c interpolation for the compound nucleus.                               sche-216
      i1=0                                                              sche-217
      i4=0                                                              sche-218
      do 37 j=1,3                                                       sche-219
      if (j.le.2) go to 18                                              sche-220
      if (nxy.eq.0) go to 37                                            sche-221
      i2=i1                                                             sche-222
      i3=nxy                                                            sche-223
      go to 19                                                          sche-224
   18 i2=i1+nct(j+4)                                                    sche-225
      i3=nct(j+2)                                                       sche-226
      i1=i1+1                                                           sche-227
   19 if (i1.gt.i2) go to 37                                            sche-228
      i6=0                                                              sche-229
c loop on solutions.                                                    sche-230
      do 36 k=1,i3                                                      sche-231
      if (j.eq.3) go to 20                                              sche-232
      ji4=(3+max0(ipi(3,1)-1-iaj-mc(k,j,3),ipi(2,1)-1-mc(k,j,2)-mc(k,j,3sche-233
     1),-2*mc(k,j,2),-2*mc(k,j,3)))/4-ipd+1                             sche-234
   20 i6=0                                                              sche-235
c loop on s matrix elements.                                            sche-236
      do 35 i=i1,i2                                                     sche-237
      i4=i4+1                                                           sche-238
      i6=i6+1                                                           sche-239
      ji1=1                                                             sche-240
      if (j.eq.3) go to 21                                              sche-241
      iv=mc(i6,j,1)                                                     sche-242
      ivl=iv+ncoll+1                                                    sche-243
      ji3=(3+max0(ipi(3,iv)-1-iaj-mc(i6,j,3),ipi(2,iv)-1-mc(i6,j,2)-mc(ische-244
     16,j,3),-2*mc(i6,j,2),-2*mc(i6,j,3)))/4-ipd+1                      sche-245
      ji1=max0(ji3,ji4)                                                 sche-246
      go to 22                                                          sche-247
   21 ivl=k+ncoll+ncols+1                                               sche-248
   22 nt=0                                                              sche-249
      jpj=0                                                             sche-250
      do 23 l=ji1,ipk                                                   sche-251
      if (dabs(fn(l,i4)).lt.1.d-15) go to 23                            sche-252
      nt=nt+1                                                           sche-253
      jpj=l                                                             sche-254
   23 continue                                                          sche-255
      nt=min0(nt,4)-1                                                   sche-256
      if (nt.lt.1) go to 35                                             sche-257
      n1=0                                                              sche-258
      n3=1                                                              sche-259
   24 if (n3.lt.ji1) go to 25                                           sche-260
      n1=n1+1                                                           sche-261
      k1=k2                                                             sche-262
      k2=k3                                                             sche-263
      k3=k4                                                             sche-264
      k4=n3                                                             sche-265
      if (n1.gt.nt) go to 28                                            sche-266
   25 do 26 l=1,jit                                                     sche-267
      if (n3.le.jti(1,l)) go to 27                                      sche-268
   26 n3=n3+jti(2,l)*ipd                                                sche-269
      l=jit                                                             sche-270
   27 n3=n3+ipd                                                         sche-271
      if (n3.le.jpj) go to 24                                           sche-272
      if (n3.gt.jti(1,l)+jti(2,l)*ipd+ipd) go to 34                     sche-273
   28 ji2=k3-ipd                                                        sche-274
      if (n3.eq.jpj) ji2=k4-ipd                                         sche-275
      if (ji1.gt.ji2) go to 34                                          sche-276
      do 33 n4=ji1,ji2,ipd                                              sche-277
      if (n4.eq.k1.or.n4.eq.k2.or.n4.eq.k3.or.n4.eq.k4) go to 33        sche-278
      sz=rz*dfloat(2*n4+jmin-1)                                         sche-279
      if (nt.lt.3) go to 29                                             sche-280
      a3=dfloat((n4-k2)*(n4-k3)*(n4-k4))/dfloat((k1-k2)*(k1-k3)*(k1-k4))sche-281
      b3=dfloat((n4-k1)*(n4-k3)*(n4-k4))/dfloat((k2-k1)*(k2-k3)*(k2-k4))sche-282
      c3=dfloat((n4-k1)*(n4-k2)*(n4-k4))/dfloat((k3-k1)*(k3-k2)*(k3-k4))sche-283
      d3=dfloat((n4-k1)*(n4-k2)*(n4-k3))/dfloat((k4-k1)*(k4-k2)*(k4-k3))sche-284
      fn(n4,i4)=dabs(fn(k1,i4)*a3+fn(k2,i4)*b3+fn(k3,i4)*c3+fn(k4,i4)*d3sche-285
     1)                                                                 sche-286
      go to 31                                                          sche-287
   29 if (nt.eq.1) go to 30                                             sche-288
      b3=dfloat((n4-k3)*(n4-k4))/dfloat((k2-k3)*(k2-k4))                sche-289
      c3=dfloat((n4-k2)*(n4-k4))/dfloat((k3-k2)*(k3-k4))                sche-290
      d3=dfloat((n4-k2)*(n4-k3))/dfloat((k4-k2)*(k4-k3))                sche-291
      fn(n4,i4)=dabs(fn(k2,i4)*b3+fn(k3,i4)*c3+fn(k4,i4)*d3)            sche-292
      go to 31                                                          sche-293
   30 c3=dfloat(n4-k4)/dfloat(k3-k4)                                    sche-294
      d3=dfloat(n4-k3)/dfloat(k4-k3)                                    sche-295
      fn(n4,i4)=dabs(fn(k3,i4)*c3+fn(k4,i4)*d3)                         sche-296
   31 tx(ivl)=tx(ivl)+fn(n4,i4)*sz                                      sche-297
      if ((j.eq.3).or.(fn(n4,i4).eq.0.d0)) go to 33                     sche-298
      call cocn(mc(k,j,2)+ipz*n4,mc(k,j,2)+ipz*n4,mc(k,j,3)+ipz*n4,mc(k,sche-299
     1j,3)+ipz*n4,ipi(3,1)-1,ipi(2,1)-1,ija+ipz*n4,n4,bm,bm(n4+1),id1-n4sche-300
     2)                                                                 sche-301
      call cocn(mc(i6,j,2)+ipz*n4,mc(i6,j,2)+ipz*n4,mc(i6,j,3)+ipz*n4,mcsche-302
     1(i6,j,3)+ipz*n4,ipi(3,iv)-1,ipi(2,iv)-1,ija+ipz*n4,n4,bm(n4+1),bm(sche-303
     22*n4+1),id1-2*n4)                                                 sche-304
      if ((iv.eq.1).and.(ipi(3,1).gt.1).and.(k.ne.i6)) call cocn(mc(k,j,sche-305
     12)+ipz*n4,mc(i6,j,2)+ipz*n4,mc(k,j,3)+ipz*n4,mc(i6,j,3)+ipz*n4,ipische-306
     2(3,iv)-1,ipi(2,iv)-1,ija+ipz*n4,n4,bm(2*n4+1),bm(3*n4+1),id1-3*n4)sche-307
      do 32 ll=1,n4                                                     sche-308
      z=bm(ll)*bm(ll+n4)                                                sche-309
      if ((iv.eq.1).and.(ipi(3,1).gt.1).and.(k.ne.i6)) z=bm(ll+2*n4)**2+sche-310
     1z                                                                 sche-311
   32 fgn(ll,iv)=fgn(ll,iv)+z*fn(n4,i4)*xz                              sche-312
   33 continue                                                          sche-313
   34 ji1=ji2+ipz                                                       sche-314
      if (ji1.lt.jpj) go to 25                                          sche-315
   35 continue                                                          sche-316
   36 continue                                                          sche-317
   37 i1=i2                                                             sche-318
   38 ik=1                                                              sche-319
      npt=0                                                             sche-320
      do 57 ij=1,ipj,ipd                                                sche-321
c transfer of s matrix for a given angular momentum.                    sche-322
      i1=0                                                              sche-323
      i4=0                                                              sche-324
      do 41 j=1,2                                                       sche-325
      i2=i1+nct(j+2)                                                    sche-326
      i1=i1+1                                                           sche-327
      if (i1.gt.i2) go to 41                                            sche-328
      i3=nct(j)                                                         sche-329
      do 40 i=i1,i2                                                     sche-330
      do 39 k=1,i3                                                      sche-331
      i4=i4+1                                                           sche-332
      fa(1,k,i)=f(1,ij,i4)                                              sche-333
   39 fa(2,k,i)=f(2,ij,i4)                                              sche-334
   40 continue                                                          sche-335
   41 i1=i2                                                             sche-336
      do 42 i=1,kba                                                     sche-337
      f(1,ij,i)=0.d0                                                    sche-338
   42 f(2,ij,i)=0.d0                                                    sche-339
      j1=0                                                              sche-340
      iaj=iaj+ipz                                                       sche-341
      aaj=dfloat(iaj+1)                                                 sche-342
      do 54 ji=1,2                                                      sche-343
      j2=j1+nct(ji+2)                                                   sche-344
      j1=j1+1                                                           sche-345
      if (j1.gt.j2) go to 54                                            sche-346
      nc1=0                                                             sche-347
      nc2=0                                                             sche-348
      nc=nct(ji)                                                        sche-349
c geometric coefficient for the transformation to helicity coefficients.sche-350
      do 48 ic=1,nc                                                     sche-351
      mc(ic,ji,2)=mc(ic,ji,2)+ipz                                       sche-352
      mc(ic,ji,3)=mc(ic,ji,3)+ipz                                       sche-353
      iv=mc(ic,ji,1)                                                    sche-354
      ni=ipi(2,iv)                                                      sche-355
      mi=ipi(3,iv)                                                      sche-356
      mc(ic,1,4)=min0(mc(ic,ji,3)-iabs(iaj+1-mi),mc(ic,ji,2)-iabs(mc(ic,sche-357
     1ji,3)+1-ni))                                                      sche-358
      if (mc(ic,ji,2).gt.2*ipi(10,iv)) mc(ic,1,4)=-1                    sche-359
      if (mc(ic,1,4).lt.0) go to 48                                     sche-360
      if (iv.eq.1) nc1=nc1+1                                            sche-361
      nc2=nc2+1                                                         sche-362
      a1=0.d0                                                           sche-363
      ym=dfloat(mc(ic,ji,3)-ni+1)                                       sche-364
      xb1=0.5d0*dfloat(ni**2+(mc(ic,ji,3)-mc(ic,ji,2))*(mc(ic,ji,2)+mc(ische-365
     1c,ji,3)+2)-1)                                                     sche-366
      c3=0.d0                                                           sche-367
c coupling for particle helicity.                                       sche-368
      do 43 i1=1,ni                                                     sche-369
      bm(i1)=0.d0                                                       sche-370
      if (iabs(2*i1-ni-1).gt.mc(ic,ji,3)) go to 43                      sche-371
      n3=(mc(ic,ji,3)+2*i1-ni-1)*(mc(ic,ji,3)-2*i1+ni+3)*(i1-1)         sche-372
      if (n3.eq.0) bm(i1)=dfloat(2*mod(i1,2)-1)                         sche-373
      if (n3.le.0) go to 43                                             sche-374
      c2=c3                                                             sche-375
      c3=dsqrt(dfloat((ni-i1+1)*(i1-1))*(ym+dfloat(2*i1-2))*(ym+dfloat(2sche-376
     1*ni-2*i1+2)))                                                     sche-377
      bm(i1)=(xb1-dfloat(2*i1-ni-3)**2)*bm(i1-1)/c3                     sche-378
      if (i1.ge.3) bm(i1)=bm(i1)-c2*bm(i1-2)/c3                         sche-379
   43 a1=a1+bm(i1)**2                                                   sche-380
      do 47 i1=1,ni                                                     sche-381
      a2=0.d0                                                           sche-382
      if (dabs(bm(i1)).lt.1.d-10) go to 45                              sche-383
      ia=2*i1-ni-1                                                      sche-384
      xb1=0.5d0*dfloat(mi**2+(iaj-mc(ic,ji,3))*(iaj+mc(ic,ji,3)+2)-1)   sche-385
      c3=0.d0                                                           sche-386
c coupling for target helicity.                                         sche-387
      do 44 i2=1,mi                                                     sche-388
      bm(ni+i2)=0.d0                                                    sche-389
      if (iabs(2*i2-mi-1-ia).gt.iaj) go to 44                           sche-390
      n3=(iaj+ia-2*i2+mi+3)*(iaj-ia+2*i2-mi-1)*(i2-1)                   sche-391
      if (n3.eq.0) bm(ni+i2)=dfloat(2*mod(i2,2)-1)                      sche-392
      if (n3.le.0) go to 44                                             sche-393
      c2=c3                                                             sche-394
      ib=2*i2-mi-3                                                      sche-395
      c3=dsqrt(dfloat((mi-i2+1)*(i2-1))*(aaj**2-dfloat(2*i1-2*i2+mi-ni+1sche-396
     1)**2))                                                            sche-397
      bm(ni+i2)=((xb1-dfloat(ib*(ib-ia)))*bm(ni+i2-1)-c2*bm(ni+i2-2))/c3sche-398
   44 a2=a2+bm(ni+i2)**2                                                sche-399
      if (a2*a1.ne.0.d0) a2=dfloat(mod(1+mc(ic,ji,3)-iaj+mi,4)-1)*dsqrt(sche-400
     1aaj/(a1*a2))                                                      sche-401
   45 do 46 i2=1,mi                                                     sche-402
   46 am(i1,i2,ic)=bm(i1)*bm(ni+i2)*a2                                  sche-403
   47 continue                                                          sche-404
   48 continue                                                          sche-405
      if (nc1.eq.0) go to 54                                            sche-406
      ncin=nct(ji+2)                                                    sche-407
c transformation.                                                       sche-408
      if (ik.ne.ij) go to 49                                            sche-409
      if (.not.(lo(56).or.lo(60))) go to 49                             sche-410
      bj=.5d0*dfloat(iaj)                                               sche-411
      jij=1+mod(ij+ji,2)                                                sche-412
      nc1=nc1*nc2                                                       sche-413
      if (lo(56)) write (mw,1000) bj,ip(jij)                            sche-414
      npt=npt+1                                                         sche-415
      if (lo(60)) write (99,1001) bj,ip(jij),nc2,nc1                    sche-416
   49 nc1=0                                                             sche-417
      do 53 ic=1,ncin                                                   sche-418
      if (mc(ic,1,4).lt.0) go to 53                                     sche-419
      icx=ic                                                            sche-420
      nc1=nc1+1                                                         sche-421
      if (ji.eq.2) icx=icx+nct(3)                                       sche-422
      lci=mc(ic,ji,2)/2+1                                               sche-423
      nc2=0                                                             sche-424
      do 52 icp=1,nc                                                    sche-425
      if (mc(icp,1,4).lt.0) go to 52                                    sche-426
      lcp=mc(icp,ji,2)/2+1                                              sche-427
      iv=mc(icp,ji,1)                                                   sche-428
      nc2=nc2+1                                                         sche-429
      c1=xg(lci,1)+xg(lcp,iv)                                           sche-430
      if (ik.ne.ij) go to 50                                            sche-431
      if (.not.(lo(56).or.lo(60))) go to 50                             sche-432
      b1=-2.d0*fa(2,icp,icx)                                            sche-433
      if (ic.eq.icp) b1=b1+1.d0                                         sche-434
      b2=2.d0*fa(1,icp,icx)                                             sche-435
      b3=dsqrt(b1**2+b2**2)                                             sche-436
      d1=0.d0                                                           sche-437
      if (b3.ne.0.d0) d1=datan2(b2,b1)                                  sche-438
      d2=dmod(d1+c1+pi,2.d0*pi)-pi                                      sche-439
      lc=lcp-1                                                          sche-440
      bj=0.5d0*dfloat(mc(icp,ji,3))                                     sche-441
      if (lo(56)) write (mw,1002) nc1,nc2,iv,lc,bj,b1,b2,b3,d1,d2       sche-442
      if (lo(60)) write (99,1003) nc1,nc2,iv,lc,bj,b1,b2,b3             sche-443
c multiplication by the coulomb phase.                                  sche-444
   50 a1=dcos(c1)                                                       sche-445
      a2=dsin(c1)                                                       sche-446
      c2=fa(1,icp,icx)*a1-fa(2,icp,icx)*a2                              sche-447
      c3=fa(1,icp,icx)*a2+fa(2,icp,icx)*a1                              sche-448
      i1=ipi(6,iv)                                                      sche-449
      i2=ipi(7,iv)                                                      sche-450
c  helicity scattering coefficients.                                    sche-451
      do 51 id=i1,i2                                                    sche-452
      mf1=mf(1,id)                                                      sche-453
      mf2=mf(2,id)                                                      sche-454
      mf3=mf(3,id)                                                      sche-455
      mf4=mf(4,id)                                                      sche-456
      c1=am(mf1,mf2,icp)*am(mf3,mf4,ic)                                 sche-457
      f(1,ij,id)=f(1,ij,id)+c2*c1                                       sche-458
   51 f(2,ij,id)=f(2,ij,id)+c3*c1                                       sche-459
   52 continue                                                          sche-460
   53 continue                                                          sche-461
   54 continue                                                          sche-462
      if ((.not.lo(43)).or.ik.ne.ij) go to 56                           sche-463
      do 55 l=1,jit                                                     sche-464
      if (ik.le.jti(1,l)) go to 56                                      sche-465
   55 ik=ik+jti(2,l)*ipd                                                sche-466
   56 ik=ik+ipd                                                         sche-467
   57 continue                                                          sche-468
      if (.not.lo(60)) go to 60                                         sche-469
      write (60,1004) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),npt             sche-470
      rewind 99                                                         sche-471
      do 59 i=1,npt                                                     sche-472
      read (99,1001) u1,ipp,k1,k2                                       sche-473
      write (60,1001) u1,ipp,k1,k2                                      sche-474
      do 58 k=1,k2                                                      sche-475
      read (99,1003) k1,k2,k3,k4,bj,b1,b2,b3                            sche-476
   58 write (60,1005) k1,k2,k3,k4,bj,b1,b2,b3                           sche-477
   59 continue                                                          sche-478
      close (99,status='delete')                                        sche-479
   60 if (.not.lo(65)) go to 61                                         sche-480
      nsa=7*(nlt+2*ipj+1)+1                                             sche-481
      if (nsa.gt.id1) call memo('sche',id1,nsa)                         sche-482
      call lcsp(f,fgn,jmax,kmax,ipi,ncoll,ncols,mf,wv,jmin,ipj,ipj,bm,bmsche-483
     1(nsa),id1-nsa,lo)                                                 sche-484
   61 if (lo(120).or.(.not.lo(41))) return                              sche-485
c elimination of factors 1/(1-x*cos(theta)).                            sche-486
      ncj=min0(ncj,ipj-1)                                               sche-487
      if (ncj.eq.0) return                                              sche-488
      do 68 nj=1,ncj                                                    sche-489
      ipj=ipj-1                                                         sche-490
c loop on the independent amplitudes.                                   sche-491
      do 67 k=1,kba                                                     sche-492
      if (mf(6,k).eq.99999) go to 62                                    sche-493
      m1=mf(5,k)                                                        sche-494
      m2=mf(6,k)                                                        sche-495
      m3=((iabs(m1+m2)+iabs(m1-m2))/2-jmin)/2+1                         sche-496
   62 b3=0.25d0*dfloat(m1*m2)                                           sche-497
      if (m3.gt.ipj) go to 70                                           sche-498
      d1=0.d0                                                           sche-499
      d2=0.d0                                                           sche-500
      mj=2*m3+jmin-2                                                    sche-501
      c3=0.5d0*dfloat(mj)                                               sche-502
      f1=dfloat((mj+m2)/2+1-m3)                                         sche-503
      f2=dfloat((mj-m2)/2+1-m3)                                         sche-504
      f3=dfloat((mj+m1)/2+1-m3)                                         sche-505
      f4=dfloat((mj-m1)/2+1-m3)                                         sche-506
      c1=0.d0                                                           sche-507
      b1=0.d0                                                           sche-508
      a1=0.d0                                                           sche-509
      b4=0.d0                                                           sche-510
c calc. of x which minimises the differences with a weight (j+1)**2     sche-511
c for the 5 last one.                                                   sche-512
      npj=ipj-5                                                         sche-513
      do 63 i=m3,ipj                                                    sche-514
      fi=i                                                              sche-515
      a2=a1                                                             sche-516
      b2=b1                                                             sche-517
      a1=f(1,i,k)                                                       sche-518
      b1=f(2,i,k)                                                       sche-519
      c3=c3+1.d0                                                        sche-520
      c2=c1                                                             sche-521
      c1=dsqrt((f1+fi)*(f2+fi)*(f3+fi)*(f4+fi))/(c3*(2.d0*c3+1.d0))     sche-522
      if (b3.ne.0.d0) b4=b3/(c3*c3-c3)                                  sche-523
      bm(2*i-1)=a1*b4+a2*c2+f(1,i+1,k)*c1                               sche-524
      bm(2*i)=b1*b4+b2*c2+f(2,i+1,k)*c1                                 sche-525
      if (i.le.npj) go to 63                                            sche-526
      d1=d1+c3*c3*(f(1,i,k)*bm(2*i-1)+f(2,i,k)*bm(2*i))                 sche-527
      d2=d2+c3*c3*(bm(2*i-1)**2+bm(2*i)**2)                             sche-528
   63 c1=c1*(c3+c3+1.d0)/(c3+c3-1.d0)                                   sche-529
      a3=.9999999d0                                                     sche-530
      if (lo(18)) go to 64                                              sche-531
      if (d2.ne.0.d0) a3=d1/d2                                          sche-532
      a4=a3                                                             sche-533
c x is fixed between +1 and -1                                          sche-534
      if (a4.gt..9999999d0) a4=.9999999d0                               sche-535
      if (a4.lt.-.9999999d0) a4=-.9999999d0                             sche-536
c calculation of the new scattering coefficients.                       sche-537
      go to 65                                                          sche-538
   64 a4=a3*dfloat(2*mod(nj,2)-1)                                       sche-539
   65 do 66 i=m3,ipj                                                    sche-540
      f(1,i,k)=f(1,i,k)-a4*bm(2*i-1)                                    sche-541
   66 f(2,i,k)=f(2,i,k)-a4*bm(2*i)                                      sche-542
      if (.not.lo(116)) write (mw,1006) k,a4,a3,f(1,ipj,k),f(2,ipj,k),f(sche-543
     11,ipj+1,k),f(2,ipj+1,k)                                           sche-544
      f(1,ipj+1,k)=a4                                                   sche-545
   67 continue                                                          sche-546
   68 continue                                                          sche-547
      return                                                            sche-548
   69 write (mw,1007) n1                                                sche-549
      go to 71                                                          sche-550
   70 write (mw,1008) nj                                                sche-551
   71 write (mw,1009)                                                   sche-552
      stop                                                              sche-553
 1000 format (//' channel spin and parity =',f7.1,a1//'  ic icp n    l  sche-554
     1  j',18x,'s matrix',20x,'|s|',7x,'phase /with coul.')             sche-555
 1001 format (1x,f9.1,4x,a1,1x,i4,1x,i4)                                sche-556
 1002 format (1x,3i3,i5,f7.1,4x,1p,2d15.7,' i',4x,0p,3f11.8)            sche-557
 1003 format (1x,3(i2,1x),i3,1x,f5.1,1x,2(1p,d15.7,0p,1x),5x,f11.8)     sche-558
 1004 format ('<s-matrix>',f10.2,1p,d20.8,0p,f10.2,2i5)                 sche-559
 1005 format (1x,3(i2,1x),i3,1x,f5.1,1x,2(1p,d15.7,0p,1x),'i',4x,f11.8) sche-560
 1006 format (' amplitude =',i3,d15.7,' (',d15.7,')  new',2d15.7,3x,'oldsche-561
     1',2d15.7)                                                         sche-562
 1007 format (5x,i2,' amplitudes insufficient to interpolate.')         sche-563
 1008 format (' amplitudes insufficient to factorise (1-cos)',i2,' timessche-564
     1')                                                                sche-565
 1009 format (//' in sche  ...  stop  ...')                             sche-566
      end                                                               sche-567
c 27/03/07                                                      ecis06  lcsp-000
      subroutine lcsp(f,fcn,jmax,kmax,ipi,ncoll,ncols,mf,wv,jmin,ipj,ipklcsp-001
     1,a,ax,jd,lo)                                                      lcsp-002
c coefficients of legendre polynomials for cross-sections               lcsp-003
c scattering coefficients in the helicity representation                lcsp-004
c input:     f:       s-matrix.                                         lcsp-005
c            fcn:     transmission coefficients.                        lcsp-006
c            jmax:    maximum number of channel spins, dimension for f. lcsp-007
c            kmax:    maximum number l for compound nucleus, dimension  lcsp-008
c                     for fcn.                                          lcsp-009
c            ipi(i,*):multiplicities of target/particle for i=2/3,      lcsp-010
c                     first/last channel number for i=6/7 (see deph).   lcsp-011
c            ncoll:   number of coupled levels.                         lcsp-012
c            ncols:   number of levels with angular distribution.       lcsp-013
c            mf:      helicity numbers (see deph).                      lcsp-014
c            wv:      wave number and coulomb parameter (see colf).     lcsp-015
c            jmin:    twice minimum channel spin.                       lcsp-016
c            ipj:     number of channel spin.                           lcsp-017
c            ipk:     number of channel spin for compound nucleus.      lcsp-018
c            jd:      dimension of working field ax.                    lcsp-019
c            lo(i):   logical controls:                                 lcsp-020
c               lo(18) =.true. projectile-target antisymmetrisation.    lcsp-021
c               lo(81) =.true. hauser-feshbach corrections.             lcsp-022
c working areas:                                                        lcsp-023
c            a(7,*):  amplitude multiplied by a legendre polynomial     lcsp-024
c                     alternatively in a(1-2,*) and a(3-4,*),           lcsp-025
c                     coefficients of recurrence in a(5-7,*).           lcsp-026
c            ax:      1 to jml  legendre coefficients of cross-section: lcsp-027
c                     jml+1 to jmt    for compound nucleus,             lcsp-028
c                     jmt+1 to jmx    product spin rotation matrices.   lcsp-029
c                                                                       lcsp-030
c for the common  /angul/ see lect.                                     lcsp-031
c for the common  /dcons/ see calc.                                     lcsp-032
c                                                                       lcsp-033
c significance of the quantities in common /dcons/:                     lcsp-034
c  xz:        conversion factor to millibarns.                          lcsp-035
c   used:     xz.                                                       lcsp-036
c                                                                       lcsp-037
c significance of the quantities in common /angul/:                     lcsp-038
c  nl(1):     power of (1-cos(theta)) for the expansion in legendre     lcsp-039
c             polynomials of the interference between coulomb and       lcsp-040
c             nuclear elastic scattering. power of (1-cos(theta)**2)    lcsp-041
c             if lo(18) is .true..                                      lcsp-042
c  nl(2):     number of legendre polynomials for elastic scattering of  lcsp-043
c             charged particles.                                        lcsp-044
c  nl(3):     number of legendre polynomials for elastic scattering of  lcsp-045
c             uncharged particles, inelastic scattering and compound    lcsp-046
c             nucleus.                                                  lcsp-047
c   used:     nl.                                                       lcsp-048
c                                                                       lcsp-049
c***********************************************************************lcsp-050
      implicit real*8 (a-h,o-z)                                         lcsp-051
      logical lo(150),ls                                                lcsp-052
      dimension f(2,jmax,*),fcn(kmax,*),ipi(11,*),mf(10,*),wv(22,*),a(7,lcsp-053
     1*),ax(*),at(2),ndl(2)                                             lcsp-054
      common /angul/ theta1,theta2,dtheta,dthe,ncj,nl(3),jmm(2)         lcsp-055
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            lcsp-056
      common /inout/ mr,mw,ms                                           lcsp-057
c determination of the number of legendre polynomials.                  lcsp-058
      ndl(1)=nl(2)                                                      lcsp-059
      ndl(2)=nl(3)                                                      lcsp-060
      if (ndl(1).eq.0) ndl(1)=(6*ipj-3+3*jmin)/2                        lcsp-061
      if (ndl(2).eq.0) ndl(2)=2*ipj-1+jmin                              lcsp-062
      write (65,1000) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),ncols           lcsp-063
      write (mw,1001)                                                   lcsp-064
c loop on levels.                                                       lcsp-065
      do 36 jk=1,ncols                                                  lcsp-066
      if (wv(3,jk).lt.0.d0) go to 35                                    lcsp-067
      if (jk.gt.ncoll) go to 32                                         lcsp-068
      jk1=ipi(6,jk)                                                     lcsp-069
      jk2=ipi(7,jk)                                                     lcsp-070
      jml=ndl(2)                                                        lcsp-071
      ls=jk.eq.1.and.wv(5,1).ne.0.d0                                    lcsp-072
      if (ls) jml=ndl(1)                                                lcsp-073
      jmt=jml                                                           lcsp-074
      if (jmt.gt.jd) call memo('lcsp',id,jmt)                           lcsp-075
      do 1 j=1,jmt                                                      lcsp-076
    1 ax(j)=0.d0                                                        lcsp-077
c loop on amplitudes.                                                   lcsp-078
      do 29 i=jk1,jk2                                                   lcsp-079
      if (mf(6,i).eq.99999) go to 3                                     lcsp-080
      m1=mf(5,i)                                                        lcsp-081
      m2=mf(6,i)                                                        lcsp-082
      m3=((iabs(m1+m2)+iabs(m1-m2))/2-jmin)/2+1                         lcsp-083
      if (jk.gt.ncoll) go to 3                                          lcsp-084
      a1=0.25d0*dfloat(m1*m2)                                           lcsp-085
      mj=2*m3+jmin-2                                                    lcsp-086
      a2=0.5d0*dfloat(mj)                                               lcsp-087
      x1=dfloat((mj+m2)/2+1-m3)                                         lcsp-088
      x2=dfloat((mj-m2)/2+1-m3)                                         lcsp-089
      x3=dfloat((mj+m1)/2+1-m3)                                         lcsp-090
      x4=dfloat((mj-m1)/2+1-m3)                                         lcsp-091
      a(7,m3)=0.d0                                                      lcsp-092
c coefficients of the recurrence.                                       lcsp-093
      jm1=jml+ipj                                                       lcsp-094
      jm=jm1+1                                                          lcsp-095
      if (m3.gt.jm1) go to 3                                            lcsp-096
      do 2 j=m3,jm1                                                     lcsp-097
      xj=dfloat(j)                                                      lcsp-098
      a2=a2+1.d0                                                        lcsp-099
      a(6,j)=0.d0                                                       lcsp-100
      if (a1.ne.0.d0) a(6,j)=a1/(a2*a2-a2)                              lcsp-101
      a(5,j)=dsqrt((x1+xj)*(x2+xj)*(x3+xj)*(x4+xj))/(a2*(2.d0*a2+1.d0)) lcsp-102
    2 a(7,j+1)=a(5,j)*(a2+a2+1.d0)/(a2+a2-1.d0)                         lcsp-103
    3 if (m3.gt.jm) go to 29                                            lcsp-104
      do 4 j=m3,jm                                                      lcsp-105
      a(1,j)=0.d0                                                       lcsp-106
      a(2,j)=0.d0                                                       lcsp-107
      a(3,j)=0.d0                                                       lcsp-108
      if (j.gt.ipj) go to 4                                             lcsp-109
      a(1,j)=f(1,j,i)                                                   lcsp-110
      a(2,j)=f(2,j,i)                                                   lcsp-111
    4 a(4,j)=0.d0                                                       lcsp-112
      if (.not.ls) go to 24                                             lcsp-113
c coulomb amplitude.                                                    lcsp-114
      ns1=ipi(2,1)-1                                                    lcsp-115
      ns2=ipi(3,1)-1                                                    lcsp-116
      nsm=iabs(ns1-ns2)-jmin                                            lcsp-117
      nsp=ns1+ns2-jmin                                                  lcsp-118
      xs3=dfloat(ns1+ns2+2)                                             lcsp-119
      xs4=dfloat(ns1-ns2)                                               lcsp-120
      nst=nsp/2+1                                                       lcsp-121
      jmx=jmt+nst                                                       lcsp-122
      jmy=jmx+2                                                         lcsp-123
      if (lo(18)) jmy=jmy+2*nl(1)                                       lcsp-124
      if (jmy.gt.jd) call memo('lcsp',id,jmy)                           lcsp-125
      do 5 j=1,nst                                                      lcsp-126
    5 ax(jmt+j)=1.d0                                                    lcsp-127
c reduced rotation matrix element.                                      lcsp-128
      do 9 i1=1,2                                                       lcsp-129
      ms1=2*mf(2*i1-1,i)-ns1-2                                          lcsp-130
      ms2=ns2-2*mf(2*i1,i)+2                                            lcsp-131
      msp=iabs(ms1+ms2)-jmin                                            lcsp-132
      nsq=max0(nsm,msp)/2+1                                             lcsp-133
      xs=ms1+ms2                                                        lcsp-134
      at(i1)=1.d0                                                       lcsp-135
      if (nsq.eq.1) go to 7                                             lcsp-136
      do 6 j=2,nsq                                                      lcsp-137
    6 ax(jmt+j-1)=0.d0                                                  lcsp-138
    7 if (nsq.eq.nst) go to 9                                           lcsp-139
      ns=nsq+1                                                          lcsp-140
      a2=0.d0                                                           lcsp-141
      a1=1.d0                                                           lcsp-142
      b2=0.d0                                                           lcsp-143
      do 8 k=ns,nst                                                     lcsp-144
      a3=a2                                                             lcsp-145
      a2=a1                                                             lcsp-146
      b1=b2                                                             lcsp-147
      xj=dfloat(2*k+jmin-2)                                             lcsp-148
      b2=dsqrt((xj**2-xs**2)*(xs3**2-xj**2)*(xj**2-xs4**2)/(xj**2-1.d0))lcsp-149
     1/(2.d0*xj)                                                        lcsp-150
      b3=dfloat(ms1-ms2)                                                lcsp-151
      if (xj.ne.2.d0) b3=b3-xs*xs3*xs4/(xj*(xj-2.d0))                   lcsp-152
      a1=(a2*b3-a3*b1)/b2                                               lcsp-153
      ax(jmt+k)=ax(jmt+k)*a1                                            lcsp-154
    8 at(i1)=at(i1)+a1**2                                               lcsp-155
    9 continue                                                          lcsp-156
      ijx=nl(1)                                                         lcsp-157
      a3=1.d0                                                           lcsp-158
      jp=ipj                                                            lcsp-159
c multiplication by (1-cos), (1-cos**2) or their squares.               lcsp-160
   10 do 12 ij=1,ijx                                                    lcsp-161
      a1=0.d0                                                           lcsp-162
      b1=0.d0                                                           lcsp-163
      do 11 j=m3,jp                                                     lcsp-164
      a2=a1                                                             lcsp-165
      b2=b1                                                             lcsp-166
      a1=a(1,j)                                                         lcsp-167
      b1=a(2,j)                                                         lcsp-168
      a(1,j)=a1-a3*(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(1,j+1))                lcsp-169
   11 a(2,j)=b1-a3*(a(7,j)*b2+a(6,j)*b1+a(5,j)*a(2,j+1))                lcsp-170
      jp=jp+1                                                           lcsp-171
      a(1,jp)=-a3*a1*a(6,jp)                                            lcsp-172
   12 a(2,jp)=-a3*b1*a(6,jp)                                            lcsp-173
      a3=-a3                                                            lcsp-174
      if (lo(18).and.a3.lt.0.d0) go to 10                               lcsp-175
c initialisation of coulomb phase shifts.                               lcsp-176
      c1=dsqrt(at(1)*at(2))                                             lcsp-177
      if (ax(jmx).lt.0.d0) c1=-c1                                       lcsp-178
      c2=dfloat(ijx)                                                    lcsp-179
      c3=2.d0**(ijx-1)                                                  lcsp-180
      do 23 ik=1,2                                                      lcsp-181
      nx=0                                                              lcsp-182
      nst1=nst                                                          lcsp-183
      do 13 j=1,nst                                                     lcsp-184
      a1=2.d0*ax(jmt+j)/c1*dfloat(1-mod(j+ik,2))                        lcsp-185
      if (a1.ne.0.d0) nx=nx+1                                           lcsp-186
   13 a(3,j)=a1                                                         lcsp-187
      if (nx.eq.0) go to 23                                             lcsp-188
      ax(jmx+1)=-c2*c3*wv(5,1)/(c2*c2+wv(5,1)**2)                       lcsp-189
      ax(jmx+2)=-c3*wv(5,1)**2/(c2*c2+wv(5,1)**2)                       lcsp-190
      if (.not.lo(18)) go to 15                                         lcsp-191
      ax(jmx+1)=4.d0*c3*ax(jmx+1)                                       lcsp-192
      ax(jmx+2)=4.d0*c3*ax(jmx+2)                                       lcsp-193
      do 14 j=1,ijx                                                     lcsp-194
      a2=dfloat(j)*(dfloat(j+ijx)**2+wv(5,1)**2)                        lcsp-195
      a1=-dfloat(ijx-j+1)*(dfloat(ijx+j)*dfloat(ijx+j-1)+wv(5,1)**2)/a2 lcsp-196
      b1=dfloat(ijx-j+1)*wv(5,1)/a2                                     lcsp-197
      ax(jmx+2*j+1)=ax(jmx+2*j-1)*a1-ax(jmx+2*j)*b1                     lcsp-198
   14 ax(jmx+2*j+2)=ax(jmx+2*j-1)*b1+ax(jmx+2*j)*a1                     lcsp-199
   15 i1=3                                                              lcsp-200
      do 21 l=1,jm                                                      lcsp-201
      b1=2*l-1                                                          lcsp-202
c coulomb phase shift.                                                  lcsp-203
      a1=ax(jmx+1)                                                      lcsp-204
      a2=ax(jmx+2)                                                      lcsp-205
      if (.not.lo(18)) go to 17                                         lcsp-206
      do 16 j=1,ijx                                                     lcsp-207
      a1=a1+ax(jmx+2*j+1)                                               lcsp-208
   16 a2=a2+ax(jmx+2*j+2)                                               lcsp-209
   17 do 18 j=1,nst1                                                    lcsp-210
      if (lo(18).and.mod(l+ik,2).eq.1) go to 18                         lcsp-211
      a(1,j)=a(1,j)+a1*a(i1,j)*b1                                       lcsp-212
      a(2,j)=a(2,j)+a2*a(i1,j)*b1                                       lcsp-213
   18 continue                                                          lcsp-214
      i2=7-i1                                                           lcsp-215
      if (l.eq.jm) go to 21                                             lcsp-216
c product of rotation matrix elements by next pl.                       lcsp-217
      b2=-(b1-1.d0)/(b1+1.d0)                                           lcsp-218
      b3=2.d0*b1/(b1+1.d0)                                              lcsp-219
      a1=0.d0                                                           lcsp-220
      do 19 j=m3,nst1                                                   lcsp-221
      a2=a1                                                             lcsp-222
      a1=a(i1,j)                                                        lcsp-223
      a(i2,j)=b2*a(i2,j)+(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(i1,j+1))*b3      lcsp-224
      if (dabs(a(i2,j)).lt.1.d-10) a(i2,j)=0.d0                         lcsp-225
   19 continue                                                          lcsp-226
      if (nst1.ne.jm) a(i2,nst1+1)=a(7,nst1+1)*a1*b3                    lcsp-227
      nst1=min0(nst1+1,jm)                                              lcsp-228
      a1=(b1+1.d0)*wv(5,1)                                              lcsp-229
      b2=2.d0*c2                                                        lcsp-230
      a3=.25d0*(b1+1.d0+b2)**2+wv(5,1)**2                               lcsp-231
      a2=.25d0*(b1+1.d0-b2)*(b1+1.d0+b2)-wv(5,1)**2                     lcsp-232
      b3=(ax(jmx+1)*a2-ax(jmx+2)*a1)/a3                                 lcsp-233
      ax(jmx+2)=(ax(jmx+1)*a1+ax(jmx+2)*a2)/a3                          lcsp-234
      ax(jmx+1)=b3                                                      lcsp-235
      if (.not.lo(18)) go to 21                                         lcsp-236
      do 20 j=1,ijx                                                     lcsp-237
      b2=b2+2.d0                                                        lcsp-238
      a3=.25d0*(b1+1.d0+b2)**2+wv(5,1)**2                               lcsp-239
      a2=.25d0*(b1+1.d0-b2)*(b1+1.d0+b2)-wv(5,1)**2                     lcsp-240
      b3=(ax(jmx+2*j+1)*a2-ax(jmx+2*j+2)*a1)/a3                         lcsp-241
      ax(jmx+2*j+2)=(ax(jmx+2*j+1)*a1+ax(jmx+2*j+2)*a2)/a3              lcsp-242
   20 ax(jmx+2*j+1)=b3                                                  lcsp-243
   21 i1=i2                                                             lcsp-244
      do 22 j=m3,jm                                                     lcsp-245
      a(3,j)=0.d0                                                       lcsp-246
   22 a(4,j)=0.d0                                                       lcsp-247
   23 continue                                                          lcsp-248
   24 b3=jmin+2*m3-1                                                    lcsp-249
      i1=1                                                              lcsp-250
      i2=3                                                              lcsp-251
c coefficient of other pl.                                              lcsp-252
      do 28 l=1,jml                                                     lcsp-253
      a3=0.d0                                                           lcsp-254
      c1=b3                                                             lcsp-255
      if (lo(18).and.mod(l,2).ne.1) go to 26                            lcsp-256
      do 25 j=m3,ipj                                                    lcsp-257
      a3=a3+(f(1,j,i)*a(i1,j)+f(2,j,i)*a(i1+1,j))/c1                    lcsp-258
   25 c1=c1+2.d0                                                        lcsp-259
      if (mf(8,i).ne.0.) a3=a3+a3                                       lcsp-260
      ax(l)=ax(l)+a3*xz                                                 lcsp-261
   26 if (l.eq.jml) go to 28                                            lcsp-262
      c1=dfloat(l)                                                      lcsp-263
      c2=-(c1-1.d0)/c1                                                  lcsp-264
      c3=(2.d0*c1-1.d0)/c1                                              lcsp-265
      i1=i2                                                             lcsp-266
      i2=4-i1                                                           lcsp-267
      a1=0.d0                                                           lcsp-268
      b1=0.d0                                                           lcsp-269
      do 27 j=m3,jm1                                                    lcsp-270
      a2=a1                                                             lcsp-271
      b2=b1                                                             lcsp-272
      a1=a(i2,j)                                                        lcsp-273
      b1=a(i2+1,j)                                                      lcsp-274
      a(i1,j)=c2*a(i1,j)+(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(i2,j+1))*c3      lcsp-275
   27 a(i1+1,j)=c2*a(i1+1,j)+(a(7,j)*b2+a(6,j)*b1+a(5,j)*a(i2+1,j+1))*c3lcsp-276
      a(i1,jm)=a(7,jm)*a1*c3                                            lcsp-277
      a(i1+1,jm)=a(7,jm)*b1*c3                                          lcsp-278
   28 continue                                                          lcsp-279
   29 continue                                                          lcsp-280
      write (65,1002) jk,jml                                            lcsp-281
      if (ls) write (mw,1003) jk,ijx,jml                                lcsp-282
      if (.not.ls) write (mw,1004) jk,jml                               lcsp-283
      do 30 ll=1,jml,5                                                  lcsp-284
      l=ll-1                                                            lcsp-285
      lm=min0(jml,ll+4)                                                 lcsp-286
   30 write (mw,1005) l,(ax(m),m=ll,lm)                                 lcsp-287
      do 31 ll=1,jml                                                    lcsp-288
      l=ll-1                                                            lcsp-289
      if (ls) write (65,1006) jk,l,ax(ll),ijx                           lcsp-290
      if (.not.ls) write (65,1007) jk,l,ax(ll)                          lcsp-291
   31 continue                                                          lcsp-292
   32 if (.not.lo(81)) go to 36                                         lcsp-293
      write (65,1008) jk,ipk                                            lcsp-294
      write (mw,1009) jk,ipk                                            lcsp-295
      do 33 ll=1,ipk,5                                                  lcsp-296
      l=2*ll-2                                                          lcsp-297
      lm=min0(ipk,ll+4)                                                 lcsp-298
   33 write (mw,1005) l,(fcn(m,jk),m=ll,lm)                             lcsp-299
      do 34 ll=1,ipk                                                    lcsp-300
      l=2*ll-2                                                          lcsp-301
   34 write (65,1010) jk,l,fcn(ll,jk)                                   lcsp-302
      go to 36                                                          lcsp-303
   35 write (65,1011) jk                                                lcsp-304
   36 continue                                                          lcsp-305
      return                                                            lcsp-306
 1000 format ('<legendre>',f10.2,1p,d20.8,0p,f10.2,2i5)                 lcsp-307
 1001 format ('1 coefficients of legendre polynomials describing the crolcsp-308
     1ss-sections.')                                                    lcsp-309
 1002 format (2i5,' coupled level, number of values')                   lcsp-310
 1003 format (/' direct interaction for level',i2,' multiplied by (1-coslcsp-311
     1(theta))**(',i2,' )',i4,' coefficients'/4x,'l',8x,'c(l)',14x,'c(l+lcsp-312
     21)',13x,'c(l+2)',13x,'c(l+3)',13x,'c(l+4)')                       lcsp-313
 1004 format (/' direct interaction for level',i2,',',i4,' coefficients'lcsp-314
     1/4x,'l',8x,'c(l)',14x,'c(l+1)',13x,'c(l+2)',13x,'c(l+3)',13x,'c(l+lcsp-315
     24)')                                                              lcsp-316
 1005 format (i5,1p,5d19.10)                                            lcsp-317
 1006 format (2i5,1p,d20.10,5x,'*(1-cos(theta)**(',i2,' )')             lcsp-318
 1007 format (2i5,1p,d20.10)                                            lcsp-319
 1008 format (2i5,' uncoupled level, number of values')                 lcsp-320
 1009 format (/' compound nucleus for level',i2,',',i4,' coefficients (olcsp-321
     1nly even ones are given)'/4x,'l',8x,'c(l)',14x,'c(l+2)',13x,'c(l+4lcsp-322
     2)',13x,'c(l+6)',13x,'c(l+8)')                                     lcsp-323
 1010 format (2i5,1p,d20.10,5x,'compound nucleus')                      lcsp-324
 1011 format (i5,4x,'0 closed channel')                                 lcsp-325
      end                                                               lcsp-326
c 23/03/07                                                      ecis06  resu-000
      subroutine resu(ipi,sr,tx,srx,jmax,kmax,ncoll,ncols,mf,cq,mfm,fm,iresu-001
     1pj,ipk,donn,ncolr,nco,coe,wv,wvm,fcn,noi,xd,jmin,nrz,njc,res,am,exresu-002
     2,the,dxx,spg,nzz,lo)                                              resu-003
c computes cross-sections and polarisations - compare to experimental   resu-004
c results -   obtains experimental normalisations and partial chi2.     resu-005
c input:     ipi(j,i):parity of the nuclear states (+/-) for j=1,       resu-006
c                     multiplicity of particle and target j=2,3,        resu-007
c                     first/last ampl. and observable for each          resu-008
c                     level for j=6 to 9. see calx.                     resu-009
c            sr:      helicity scattering coefficients.                 resu-010
c            tx:      inelastic cross-sections in millibarns            resu-011
c                     followed by hauser-feshbach coefficients.         resu-012
c            srx:     equivalent with sr by call to save sr and tx for  resu-013
c                     minimum chi2 in a search.                         resu-014
c            jmax:    maximum number of channel spins.                  resu-015
c            kmax:    maximum number of l for compound nucleus.         resu-016
c            ncoll:   number of coupled channels.                       resu-017
c            ncols:   number of channels with angular distribution.     resu-018
c            mf,cq:   tables of helicity, description of observables    resu-019
c                     ... etc.  see deph and obse.                      resu-020
c            mfm,fm:  description of experimental data.  see lecd.      resu-021
c            ipj:     number of channel spins used.                     resu-022
c            ipk:     number of l for compound nucleus.                 resu-023
c            donn:    experimental data:angle, value, experimental      resu-024
c                     error ,angular width, angular error and           resu-025
c                     calculated error.                                 resu-026
c            ncolr:   number of experimental angular distributions.     resu-027
c            nco,coe: indications for observables.  see obse.           resu-028
c            wv(i,j): wave number and coulomb parameter.                resu-029
c            wvm:     same as wv for the continuum.                     resu-030
c            fcn:     compound nucleus coefficients.                    resu-031
c            noi:     starting and final addresses for continua.        resu-032
c            xd:      energy step for the continua.                     resu-033
c            jmin:    twice minimum channel spin.                       resu-034
c            nrz:     length of sr+tx to be saved for minimum chi2.     resu-035
c            njc:     first dimension of working area ex.               resu-036
c            nzz:     total length of working field,returns space used. resu-037
c            lo:      logical controls:                                 resu-038
c               lo(8)  =.true. relativistic kinematics.                 resu-039
c               lo(31) =.true. input of experimental data and chi2      resu-040
c                              calculation.                             resu-041
c               lo(32) =.true. automatic search on some parameters.     resu-042
c               lo(33) =.true. symmetrised chi2 for cross-sections.     resu-043
c               lo(59) =.true. print results on files 58 and 59.        resu-044
c               lo(64) =.true. print results on files 64 and 66.        resu-045
c               lo(66) =.true. no calculation at equidistant angles.    resu-046
c               lo(67) =.true. no plot of experimental data.            resu-047
c               lo(68) =.true. no plot of equidistant cross-sections.   resu-048
c               lo(69) =.true. no plot of equidistant polarisations.    resu-049
c               lo(74) =.true. output of time in different steps.       resu-050
c               lo(81) =.true. hauser-feshbach corrections.             resu-051
c               lo(84) =.true. uncoupled levels for compound nucleus.   resu-052
c               lo(85) =.true. fission transmission coefficients.       resu-053
c               lo(86) =.true. gamma emission in compound nucleus.      resu-054
c               lo(91) =.true. angles in the laboratory system.         resu-055
c               lo(116)=.true. no output.                               resu-056
c               lo(118)=.true. for last results.                        resu-057
c               lo(126)=.true. some observables in laboratory system.   resu-058
c output:    res:     difference between experimental and calculated    resu-059
c                     value divided by error.                           resu-060
c working areas:                                                        resu-061
c            am:      for general purposes.                             resu-062
c            ex:      for observables.                                  resu-063
c            the:     angles for plot.                                  resu-064
c            dxx:     cross-sections for plots.                         resu-065
c            spg:     polarisations for plots                           resu-066
c                                                                       resu-067
c for the common  /angul/ see lect.                                     resu-068
c for the commons /dcons/ and /titre/ see calc.                         resu-069
c for the commons /dchi2/ and /ncomp/  see calx.                        resu-070
c for the common  /resct/ see scat.                                     resu-071
c                                                                       resu-072
c significance of the quantities in common /angul/:                     resu-073
c  theta1:    first angle for computation at equidistant angles.        resu-074
c  dtheta:    step for computation at equidistant angles.               resu-075
c  theta2:    last angle for computation at equidistant angles.         resu-076
c  dthe:      averaging angle.                                          resu-077
c  ncj:       number of factorisations of 1/(1-cos(theta)) in amplitude.resu-078
c  jmm(1):    number of channel spins used for minimum chi2.            resu-079
c  jmm(2):    number of l for compound nucleus for minimum chi2.        resu-080
c   defined:  jmm.                                                      resu-081
c   used:     theta1,dtheta,theta2,dthe,ncj,jmm.                        resu-082
c                                                                       resu-083
c significance of the quantities in common /dchi2/:                     resu-084
c  chi2:      chi-square computed in subroutine resu.                   resu-085
c  chi2m:     minimum chi-square in the search.                         resu-086
c   defined:  chi2,chi2m.                                               resu-087
c   used:     chi2,chi2m.                                               resu-088
c                                                                       resu-089
c significance of the quantities in common /dcons/:                     resu-090
c  cmb:       atomic mass cm divided by h-bar*c.                        resu-091
c   used:     cmb.                                                      resu-092
c                                                                       resu-093
c significance of the quantities in common /ncomp/:                     resu-094
c  nsp(1):    number of uncoupled levels for compound nucleus           resu-095
c             including discretisation of continuum.                    resu-096
c  nsp(3):    number of these levels without angular distribution.      resu-097
c  ncont:     number of continuum for compound nucleus.                 resu-098
c  nie:       number of uncoupled states added for discretisation.      resu-099
c  ncolx:     total number of levels without discretisation.            resu-100
c  ndp:       address of fission and gamma final results.               resu-101
c   defined:  ndp.                                                      resu-102
c   used:     nsp,ncont,nie,ncolx,ndp.                                  resu-103
c                                                                       resu-104
c significance of the quantities in common /resct/:                     resu-105
c  excn:      compound-nucleus cross-section.                           resu-106
c  xa,xb:     constants for change to laboratory system.                resu-107
c  jn1,jn2:   first and last amplitude in the table.                    resu-108
c  ntt:       total number of amplitudes for this state and a given j.  resu-109
c  mtt:       size of the scattering matrix for this state and angle.   resu-110
c  mt1:       multiplicity of the outgoing particle.                    resu-111
c  mt2:       multiplicity of the residual target.                      resu-112
c  mt3:       multiplicity of the incident particle.                    resu-113
c  mt4:       multiplicity of the initial target.                       resu-114
c  nout:      nuclear state considered.                                 resu-115
c  nix,nfx:   first and last observable in the table.                   resu-116
c  klt:       1 for experimental data.                                  resu-117
c             2 for equidistant angles.                                 resu-118
c             3 for pure compound nucleus.                              resu-119
c  lkt:       logical=.true. for centre of mass system.                 resu-120
c   defined:  xa,xb,jn1,jn2,ntt,mtt,mt1,mt2;mt3,mt4,nout,nix,nfx,klt,   resu-121
c             lkt.                                                      resu-122
c   used:     excn,xa,xb,jn1,jn2,ntt,mtt,mt1,mt2;mt3,mt4,nout,nix,nfx,  resu-123
c             klt,lkt.                                                  resu-124
c                                                                       resu-125
c significance of the quantities in common /titre/:                     resu-126
c  title(18): title of the run printed as heading of results.           resu-127
c   used:     title.                                                    resu-128
c                                                                       resu-129
c internal logical lt(3):                                               resu-130
c            xd:      energy step for the continua.                     resu-131
c            lt(1)=.true. for cross-section in millibarns.              resu-132
c            lt(2)=.true. for symmetrised chi2, cross-section and       resu-133
c                         normalisation error.                          resu-134
c            lt(3)=.true. for graph of polarisation.                    resu-135
c            lkt  =.false. for angle in the laboratory system.          resu-136
c***********************************************************************resu-137
      implicit real*8 (a-h,o-z)                                         resu-138
      logical lo(150),lt(3),lkt                                         resu-139
      dimension ipi(11,*),sr(2,jmax,*),tx(*),srx(*),mf(10,*),mfm(14,*),fresu-140
     1m(7,*),donn(6,*),nco(*),coe(*),wv(22,*),wvm(22,*),fcn(kmax,*),noi(resu-141
     22,*),xd(3,*),res(*),am(*),ex(njc,4),the(*),dxx(*),spg(*),zx(3),zy(resu-142
     33),sp(6)                                                          resu-143
      character*1 sigm(2)                                               resu-144
      character*4 lg(10),title,cq(10,1)                                 resu-145
      common /angul/ theta1,theta2,dtheta,dthe,ncj,nl(3),jmm(2)         resu-146
      common /dchi2/ chi2,chi2m,yy(3)                                   resu-147
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            resu-148
      common /inout/ mr,mw,ms                                           resu-149
      common /ncomp/ nsp(3),nrd(2),ncont,ncoj,ncons,nie,ncolx,ndp,ndq,acresu-150
     1n(20)                                                             resu-151
      common /resct/ excn,xa,xb,jn1,jn2,ntt,mtt,mt1,mt2,mt3,mt4,nout,nixresu-152
     1,nfx,klt,lkt                                                      resu-153
      common /titre/ title(18)                                          resu-154
      data sigm,lg,i3,i4,i5,i7,lt /'+','-',' com','poun','d nu','cleu','resu-155
     1s ',2*'    ','   d','irec','t ',4*0,3*.false./                    resu-156
      nesp=0                                                            resu-157
      mt3=ipi(2,1)                                                      resu-158
      mt4=ipi(3,1)                                                      resu-159
      if (.not.lo(118)) go to 2                                         resu-160
c copy the scattering coefficients obtained for minimum chi2.           resu-161
      ipj=jmm(1)                                                        resu-162
      ipk=jmm(2)                                                        resu-163
      do 1 i=1,nrz                                                      resu-164
    1 srx(i)=srx(i+nrz)                                                 resu-165
    2 if (.not.lo(31)) go to 29                                         resu-166
c calculation at experimental angles.                                   resu-167
      klt=1                                                             resu-168
      chi2=0.d0                                                         resu-169
      nout=0                                                            resu-170
      if (lo(64)) write (64,1000) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),ncolresu-171
     1r                                                                 resu-172
      ki=ipi(9,ncoll)                                                   resu-173
      ji=1                                                              resu-174
      ka=0                                                              resu-175
c pseudo loop on the angular distributions.                             resu-176
    3 aa=0.d0                                                           resu-177
      bb=0.d0                                                           resu-178
      cc=0.d0                                                           resu-179
      nix=ki+ji                                                         resu-180
      nfx=nix                                                           resu-181
      lt(1)=mf(2,nix).eq.0                                              resu-182
      lt(2)=lo(33).and.((iabs(mf(2,nix)).le.1.or.mf(2,nix).eq.19).and.fmresu-183
     1(5,ji).eq.0.d0)                                                   resu-184
      jim=ji                                                            resu-185
      jin=ji                                                            resu-186
    4 j1=mfm(2,ji)                                                      resu-187
      j2=mfm(3,ji)                                                      resu-188
      lkt=mfm(4,ji).ne.1                                                resu-189
      if (j2.ge.j1) go to 5                                             resu-190
      ji=ji+1                                                           resu-191
      go to 4                                                           resu-192
    5 jif=ji                                                            resu-193
      j=j1                                                              resu-194
c pseudo loop on the experimental data.                                 resu-195
    6 donn(6,j)=donn(3,j)                                               resu-196
      kc=1                                                              resu-197
      theta=donn(1,j)                                                   resu-198
    7 ji=jim                                                            resu-199
      zx(kc)=0.d0                                                       resu-200
      zy(kc)=0.d0                                                       resu-201
      if (mf(2,ki+ji).ne.19) go to 63                                   resu-202
c data are total cross sections.                                        resu-203
      i=idint(donn(1,j)*1.000001d0)                                     resu-204
      if (i.gt.ncolx-ncont) go to 8                                     resu-205
      if (i.eq.-1) zx(1)=tx(1)                                          resu-206
      if (i.eq.0) zx(1)=tx(1)-tx(2)                                     resu-207
      if (i.eq.0.and.ncoll.ne.ncolx) zx(1)=zx(1)-tx(ncoll+2)            resu-208
      if (i.le.0) go to 18                                              resu-209
      k=max0(i,1)+1+ncoll                                               resu-210
      zx(1)=0.d0                                                        resu-211
      if (ncoll.ne.ncolx) zx(1)=tx(ncoll+i+1)                           resu-212
      if (i.le.ncoll) zx(1)=zx(1)+tx(i+1)                               resu-213
      go to 18                                                          resu-214
    8 if (i.gt.ncolx) go to 10                                          resu-215
      ik=ncoll+ncolx-ncont+1                                            resu-216
      ii=i+ncont-ncolx                                                  resu-217
      ij=noi(1,ii)                                                      resu-218
      ji=noi(2,ii)                                                      resu-219
      zx(1)=0.d0                                                        resu-220
      if (ij.gt.ji) go to 18                                            resu-221
      do 9 ii=ij,ji                                                     resu-222
    9 zx(1)=zx(1)+tx(ik+ii)                                             resu-223
      go to 18                                                          resu-224
   10 zx(1)=tx(ndp+i-ncolx)                                             resu-225
      go to 18                                                          resu-226
   11 if (lt(1)) ex(2,kc)=1.d0                                          resu-227
      zx(kc)=(zx(kc)*zy(kc)+ex(2,kc)*ex(1,kc))/(zy(kc)+ex(1,kc))        resu-228
      zy(kc)=zy(kc)+ex(1,kc)                                            resu-229
      if (ji.eq.jif) go to 12                                           resu-230
      ji=ji+1                                                           resu-231
      go to 63                                                          resu-232
   12 if (lt(1)) zx(kc)=zx(kc)*zy(kc)                                   resu-233
      go to ( 13 , 14 , 15 ),kc                                         resu-234
   13 if (donn(4,j).eq.0.d0) go to 18                                   resu-235
      kc=2                                                              resu-236
      theta=donn(1,j)-donn(4,j)                                         resu-237
      go to 7                                                           resu-238
   14 kc=3                                                              resu-239
      theta=donn(1,j)+donn(4,j)                                         resu-240
      go to 7                                                           resu-241
   15 if (lt(1)) go to 16                                               resu-242
      zx(1)=(zx(1)*zy(1)+zx(2)*zy(2)+zx(3)*zy(3))/(zy(1)+zy(2)+zy(3))   resu-243
      go to 17                                                          resu-244
   16 zx(1)=(zx(1)+zx(2)+zx(3))/3.d0                                    resu-245
   17 if (donn(5,j).ne.0.d0) donn(6,j)=dsqrt(donn(3,j)*donn(3,j)+((zx(2)resu-246
     1-zx(3))*donn(2,j)*donn(5,j)/(2.d0*donn(4,j)*zx(1)))**2)           resu-247
   18 res(j)=zx(1)                                                      resu-248
      if (lt(2)) donn(6,j)=donn(6,j)*dsqrt(fm(4,ji)*res(j)/donn(2,j))   resu-249
      xc=donn(6,j)**2/fm(3,ji)                                          resu-250
      aa=aa+res(j)**2/xc                                                resu-251
      bb=bb+res(j)*donn(2,j)/xc                                         resu-252
      cc=cc+donn(2,j)**2/xc                                             resu-253
      j=j+1                                                             resu-254
c end of the pseudo loop on experimental data.                          resu-255
      if (j.le.j2) go to 6                                              resu-256
c computation of normalisation and chi2.                                resu-257
      if (fm(5,ji).eq.0.d0) go to 21                                    resu-258
      xa=fm(3,ji)/fm(5,ji)**2                                           resu-259
      aa=aa+xa                                                          resu-260
      xb=fm(4,ji)                                                       resu-261
      bb=bb+xa*xb                                                       resu-262
      cc=cc+xa*xb*xb                                                    resu-263
      if (ji.eq.ncolr) go to 19                                         resu-264
      if (fm(4,ji).ne.fm(4,ji+1).or.fm(5,ji).ne.fm(5,ji+1)) go to 19    resu-265
      if ((2*iabs(mf(2,nix))-3)*(2*iabs(mf(2,nix+1))-3).lt.0) go to 19  resu-266
      ji=ji+1                                                           resu-267
      jim=ji                                                            resu-268
      go to 4                                                           resu-269
   19 if (lt(2)) go to 20                                               resu-270
      fm(6,ji)=bb/aa                                                    resu-271
      go to 22                                                          resu-272
   20 fm(6,ji)=dsqrt(cc/aa)                                             resu-273
      go to 22                                                          resu-274
   21 fm(6,ji)=fm(4,ji)                                                 resu-275
   22 do 27 jj=jin,ji                                                   resu-276
      nix=ki+jj                                                         resu-277
      j1=mfm(2,jj)                                                      resu-278
      j2=mfm(3,jj)                                                      resu-279
      j3=j2-j1+1                                                        resu-280
      if (lo(64)) write (64,1001) (mf(j,nix),j=1,2),j3,(cq(j,nix),j=6,10resu-281
     1)                                                                 resu-282
      if (j3.le.0) go to 27                                             resu-283
      if (jj.ne.ji) fm(6,jj)=fm(6,ji)                                   resu-284
      if (lo(116)) go to 23                                             resu-285
c output of the calculated and the experimental values.                 resu-286
      m=0                                                               resu-287
      write (mw,1002) title                                             resu-288
      if (mf(2,nix).ne.19) write (mw,1003) mfm(1,jj)                    resu-289
      write (mw,1004) (cq(j,nix),j=6,10)                                resu-290
   23 a1=fm(6,jj)                                                       resu-291
      a6=dsqrt(fm(3,jj))                                                resu-292
      aa=0.d0                                                           resu-293
      if (fm(5,jj).eq.0.d0) go to 24                                    resu-294
      a2=(a1-fm(4,jj))/fm(5,jj)                                         resu-295
      aa=a2**2                                                          resu-296
      res(j2+1)=a2*a6                                                   resu-297
      chi2=chi2+res(j2+1)**2                                            resu-298
   24 do 26 j=j1,j2                                                     resu-299
      a2=donn(2,j)/a1                                                   resu-300
      a3=donn(6,j)/a1                                                   resu-301
      a4=((res(j)-a2)/a3)**2                                            resu-302
      if (lo(116)) go to 25                                             resu-303
      m=m+1                                                             resu-304
      a5=donn(3,j)/a1                                                   resu-305
      the(m)=donn(1,j)                                                  resu-306
      dxx(m)=a2                                                         resu-307
      spg(m)=res(j)                                                     resu-308
      write (mw,1005) donn(1,j),res(j),a2,a5,a3,a4                      resu-309
      if (lo(64)) write (64,1005) donn(1,j),res(j),a2,a5,a3,a4          resu-310
   25 aa=aa+a4                                                          resu-311
      res(j)=(res(j)-a2)*a6/a3                                          resu-312
   26 chi2=chi2+res(j)**2                                               resu-313
      fm(7,jj)=aa                                                       resu-314
      if (lo(116)) go to 27                                             resu-315
      write (mw,1006) (fm(j,jj),j=3,7)                                  resu-316
      if (mf(1,nix).eq.19) go to 27                                     resu-317
      if (lo(74)) call hora                                             resu-318
      if (lo(67)) go to 27                                              resu-319
      lt(3)=.not.(lt(1).or.mf(2,nix).eq.1.or.mf(2,nix).eq.19)           resu-320
      call gral(the,spg,dxx,m,mf(1,nix),cq(1,nix),1,lt(3),.false.)      resu-321
   27 continue                                                          resu-322
      ji=ji+1                                                           resu-323
c end of the pseudo loop on angular distributions.                      resu-324
      if (ji.le.ncolr) go to 3                                          resu-325
      if (.not.lo(116)) write (mw,1007) chi2                            resu-326
      if (.not.((chi2.le.chi2m).and.lo(32))) go to 29                   resu-327
      jmm(1)=ipj                                                        resu-328
      jmm(2)=ipk                                                        resu-329
      chi2m=chi2                                                        resu-330
c if the chi2 decreased, save the scattering coefficients.              resu-331
      do 28 i=1,nrz                                                     resu-332
   28 srx(i+nrz)=srx(i)                                                 resu-333
   29 if (lo(116)) go to 62                                             resu-334
      lkt=.not.lo(91)                                                   resu-335
      if (lo(66).and.(.not.(lo(81).or.lo(59)))) go to 62                resu-336
c computation at equidistant angles.                                    resu-337
      write (mw,1002) title                                             resu-338
      jg=idint((theta2-theta1)/dtheta+1.5d0)                            resu-339
      if (lo(64)) write (66,1008) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),ncolresu-340
     1s                                                                 resu-341
      if (.not.lo(59)) go to 30                                         resu-342
      nd=1                                                              resu-343
      if (wv(5,1).eq.0.d0) nd=3                                         resu-344
      if (lo(81)) nd=nd+1                                               resu-345
      write (58,1009) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),nd              resu-346
      if (ncols.ne.1) write (59,1010) wv(1,1),wv(13,1),wv(2,1),ipi(4,1),resu-347
     1ncols-1                                                           resu-348
   30 if (wv(5,1).ne.0.d0) go to 31                                     resu-349
      write (mw,1011) tx(1)                                             resu-350
      if (lo(59)) write (58,1012) tx(1)                                 resu-351
   31 rx=tx(1)-tx(2)                                                    resu-352
      if (lo(59)) write (58,1012) rx                                    resu-353
      if (lo(81)) go to 32                                              resu-354
      write (mw,1013) rx                                                resu-355
      go to 42                                                          resu-356
c compound nucleus results.                                             resu-357
   32 write (mw,1014) rx                                                resu-358
      ndp=2*ncoll+nsp(1)+1                                              resu-359
      rx=rx-tx(ncoll+2)                                                 resu-360
      write (mw,1015) rx                                                resu-361
      if (lo(85)) write (mw,1016) tx(ndp+1)                             resu-362
      if (lo(86)) write (mw,1017) tx(ndp+2)                             resu-363
      rx=tx(ndp+1)+tx(ndp+2)                                            resu-364
      write (mw,1018)                                                   resu-365
      ry=0.d0                                                           resu-366
      do 33 i=1,ncoll                                                   resu-367
      ii=ipi(1,i)+1                                                     resu-368
      sp2=0.5d0*dfloat(ipi(3,i)-1)                                      resu-369
      ry=ry+tx(ncoll+i+1)                                               resu-370
   33 write (mw,1019) i,sp2,sigm(ii),wv(3,i),tx(ncoll+i+1)              resu-371
      write (mw,1020) ry                                                resu-372
      rx=rx+ry                                                          resu-373
      if (.not.lo(84)) go to 41                                         resu-374
      if (ncoll.eq.ncols) go to 35                                      resu-375
      write (mw,1021)                                                   resu-376
      ry=0.d0                                                           resu-377
      n1=ncoll+1                                                        resu-378
      do 34 i=n1,ncols                                                  resu-379
      ii=ipi(1,i)+1                                                     resu-380
      sp2=0.5d0*dfloat(ipi(3,i)-1)                                      resu-381
      ry=ry+tx(ncoll+i+1)                                               resu-382
   34 write (mw,1019) i,sp2,sigm(ii),wv(3,i),tx(ncoll+i+1)              resu-383
      write (mw,1020) ry                                                resu-384
      rx=rx+ry                                                          resu-385
   35 nsp1=nsp(3)                                                       resu-386
      if (ncont.ne.0) nsp1=nsp1-nie                                     resu-387
      if (nsp1.lt.1) go to 37                                           resu-388
      write (mw,1022)                                                   resu-389
      ry=0.d0                                                           resu-390
      do 36 i=1,nsp1                                                    resu-391
      j=i+ncols                                                         resu-392
      ii=ipi(1,j)+1                                                     resu-393
      sp2=0.5d0*dfloat(ipi(3,j)-1)                                      resu-394
      ry=ry+tx(ncoll+j+1)                                               resu-395
   36 write (mw,1019) j,sp2,sigm(ii),wv(3,j),tx(ncoll+j+1)              resu-396
      write (mw,1020) ry                                                resu-397
      rx=rx+ry                                                          resu-398
   37 if (ncont.eq.0) go to 41                                          resu-399
      ik=ncoll+ncolx-ncont+1                                            resu-400
      do 40 i=1,ncont                                                   resu-401
      ij=noi(1,i)                                                       resu-402
      ji=noi(2,i)                                                       resu-403
      ry=0.d0                                                           resu-404
      if (ij.gt.ji) go to 40                                            resu-405
      do 38 ii=ij,ji                                                    resu-406
   38 ry=ry+tx(ik+ii)                                                   resu-407
      write (mw,1023) i,ry                                              resu-408
      rx=rx+ry                                                          resu-409
      do 39 ii=ij,ji                                                    resu-410
      ry=tx(ik+ii)/xd(2,ii)                                             resu-411
   39 write (mw,1024) ii,wvm(3,ii),xd(2,ii),tx(ik+ii),ry                resu-412
   40 continue                                                          resu-413
   41 write (mw,1025) rx                                                resu-414
      write (mw,1002) title                                             resu-415
      if (lo(59)) write (58,1012) rx                                    resu-416
   42 iniv=1                                                            resu-417
      sp2=0.5d0*dfloat(ipi(3,iniv)-1)                                   resu-418
      write (mw,1026) sp2,sigm(ipi(1,iniv)+1)                           resu-419
      nout=0                                                            resu-420
      klt=2                                                             resu-421
c pseudo do loop on levels.                                             resu-422
   43 if (wv(3,iniv).gt.0.d0) go to 44                                  resu-423
      write (mw,1027) iniv                                              resu-424
      if (lo(64)) write (66,1028) iniv,sp2,sigm(ipi(1,iniv)+1)          resu-425
      if (lo(59)) write (59,1029) iniv-1                                resu-426
      go to 57                                                          resu-427
   44 rx=tx(iniv+1)                                                     resu-428
      if (lo(81)) rx=rx+tx(ncoll+iniv+1)                                resu-429
      if (iniv.eq.1) go to 45                                           resu-430
      write (mw,1002) title                                             resu-431
      write (mw,1030) iniv,sp2,sigm(ipi(1,iniv)+1)                      resu-432
      write (mw,1031) rx                                                resu-433
      go to 46                                                          resu-434
   45 if (wv(5,1).ne.0.d0) go to 47                                     resu-435
      write (mw,1032) rx                                                resu-436
   46 if (lo(81)) write (mw,1033) tx(iniv+1)                            resu-437
      if (.not.lo(59)) go to 47                                         resu-438
      if (iniv.eq.1) write (58,1012) rx                                 resu-439
      if (iniv.ne.1) write (59,1034) rx,iniv-1                          resu-440
   47 if (lo(81)) write (mw,1035) tx(ncoll+iniv+1)                      resu-441
      if (lo(66)) go to 62                                              resu-442
      if (jg.le.0) go to 57                                             resu-443
      thetb=theta1                                                      resu-444
      ij=0                                                              resu-445
      ii=1                                                              resu-446
c pseudo do loop on angles.                                             resu-447
   48 the(ii)=thetb                                                     resu-448
      theta=thetb                                                       resu-449
      kc=1                                                              resu-450
      go to 64                                                          resu-451
   49 dxx(ii)=ex(i5,1)                                                  resu-452
      if (lo(81)) go to 50                                              resu-453
      i1=min0(i3,7)                                                     resu-454
      write (mw,1036) thetb,(ex(k,1),k=2,i1)                            resu-455
      go to 51                                                          resu-456
   50 i1=min0(i3,5)                                                     resu-457
      if (i1.lt.3) go to 52                                             resu-458
      write (mw,1036) thetb,ex(2,1),ex(i3+1,1),ex(i4,1),(ex(k,1),k=3,i1)resu-459
   51 if (i1.ge.i3) go to 53                                            resu-460
      i2=i1+1                                                           resu-461
      i1=min0(i1+5,i3)                                                  resu-462
      write (mw,1037) (ex(k,1),k=i2,i1)                                 resu-463
      go to 51                                                          resu-464
   52 write (mw,1036) thetb,ex(2,1),ex(i3+1,1),ex(i4,1)                 resu-465
   53 if (.not.lo(64)) go to 54                                         resu-466
      write (66,1038) (mf(2,nix+k-2),theta,ex(k,1),(cq(l,nix+k-2),l=6,10resu-467
     1),k=2,i3)                                                         resu-468
      if (lo(81)) write (66,1039) theta,ex(i3+1,1),(lg(k),k=1,5),theta,eresu-469
     1x(i4,1),(lg(k),k=6,10)                                            resu-470
   54 if (i7.le.0) go to 56                                             resu-471
      do 55 k=1,i7                                                      resu-472
      ij=ij+1                                                           resu-473
   55 spg(ij)=ex(k+i5,1)                                                resu-474
   56 thetb=thetb+dtheta                                                resu-475
      ii=ii+1                                                           resu-476
c end of the pseudo do loop on angles.                                  resu-477
      if (ii.le.jg) go to 48                                            resu-478
      if (.not.lo(68)) call gral(the,dxx,dxx,jg,mf(1,nfx-i7),cq(1,nfx-i7resu-479
     1),1,.false.,.true.)                                               resu-480
      if (.not.lo(69).and.i7.gt.0) call gral(the,spg,dxx,jg,mf(1,nix+i5-resu-481
     11),cq(1,nix+i5-1),i7,.true.,.true.)                               resu-482
      if (lo(74)) call hora                                             resu-483
   57 iniv=iniv+1                                                       resu-484
      sp2=0.5d0*dfloat(ipi(3,iniv)-1)                                   resu-485
c end of the pseudo do loop on levels.                                  resu-486
      if (iniv.le.ncoll) go to 43                                       resu-487
      if (.not.lo(81)) go to 62                                         resu-488
      jn2=ncoll                                                         resu-489
      klt=3                                                             resu-490
   58 jn1=jn2+1                                                         resu-491
      jn2=min0(jn1+5,ncols)                                             resu-492
      is=jn1-1                                                          resu-493
      if (jn1.gt.jn2) go to 62                                          resu-494
      do 59 i=jn1,jn2                                                   resu-495
   59 sp(i-is)=0.5d0*dfloat(ipi(3,i)-1)                                 resu-496
      write (mw,1002) title                                             resu-497
      write (mw,1040) jn1,jn2,(i,sp(i-is),sigm(ipi(1,i)+1),i=jn1,jn2)   resu-498
      thetb=theta1                                                      resu-499
      go to 61                                                          resu-500
   60 write (mw,1041) thetb,(ex(i-is,1),i=jn1,jn2)                      resu-501
      thetb=thetb+dtheta                                                resu-502
   61 theta=thetb                                                       resu-503
      kc=1                                                              resu-504
      if (thetb.le.theta2) go to 71                                     resu-505
      go to 58                                                          resu-506
   62 nzz=2*nesp                                                        resu-507
      return                                                            resu-508
c for experimental data.                                                resu-509
   63 if (ji.eq.ka) go to 71                                            resu-510
      iniv=mfm(1,ji)                                                    resu-511
      ka=ji                                                             resu-512
      go to 65                                                          resu-513
c for equidistant angles.                                               resu-514
   64 if (iniv.eq.nout) go to 71                                        resu-515
   65 nout=iniv                                                         resu-516
c change of level.                                                      resu-517
      jn1=ipi(6,nout)                                                   resu-518
      jn2=ipi(7,nout)                                                   resu-519
      mt1=ipi(2,nout)                                                   resu-520
      mt2=ipi(3,nout)                                                   resu-521
      ntt=jn2+1-jn1                                                     resu-522
      mtt=mt1*mt2*mt3*mt4                                               resu-523
      m2=1+2*mtt                                                        resu-524
      m3=m2+2*ntt                                                       resu-525
      m4=m3+ipj+ncj                                                     resu-526
      if (lo(126)) m4=max0(m4,6*mtt)                                    resu-527
      nesp=max0(nesp,m4)                                                resu-528
      if (2*m4.gt.nzz) call memo('resu',nzz,2*m4)                       resu-529
      if (lkt) go to 67                                                 resu-530
      if (lo(8)) go to 66                                               resu-531
      xa=1.d0                                                           resu-532
      xb=wv(4,1)*wv(1,nout)/(wv(4,nout)*wv(2,1))                        resu-533
      go to 67                                                          resu-534
   66 xa=dsqrt(1.d0+(wv(4,1)/(cmb*wv(2,1)))**2)                         resu-535
      xb=dsqrt(wv(1,nout)**2+(wv(4,nout)/cmb)**2)*wv(4,1)/(wv(4,nout)*wvresu-536
     1(2,1))                                                            resu-537
   67 if (klt.ne.2) go to 71                                            resu-538
c for equidistant angles.                                               resu-539
      nix=ipi(8,iniv)                                                   resu-540
      nfx=ipi(9,iniv)                                                   resu-541
      i4=2+nfx-nix                                                      resu-542
      i3=i4                                                             resu-543
      i5=2                                                              resu-544
      i8=i4-1                                                           resu-545
      if (i4.gt.2.and.mf(2,nix+1).eq.1) i5=3                            resu-546
      i7=i4-i5                                                          resu-547
      if (lo(81)) go to 68                                              resu-548
      ngx=min0(nfx,nix+5)                                               resu-549
      write (mw,1042) ((cq(l,k),l=6,10),k=nix,ngx)                      resu-550
      go to 70                                                          resu-551
   68 i4=i4+2                                                           resu-552
      i8=i8+2                                                           resu-553
      ngx=min0(nfx,nix+3)                                               resu-554
      njx=nix+1                                                         resu-555
      if (ngx.ge.njx) go to 69                                          resu-556
      write (mw,1042) (cq(l,nix),l=6,10),lg                             resu-557
      go to 70                                                          resu-558
   69 write (mw,1042) (cq(l,nix),l=6,10),lg,((cq(l,k),l=6,10),k=njx,ngx)resu-559
   70 if (lo(64)) write (66,1043) iniv,sp2,sigm(ipi(1,iniv)+1),i8,jg    resu-560
      if (ngx.eq.nfx) go to 71                                          resu-561
      njx=ngx+1                                                         resu-562
      ngx=min0(nfx,njx+4)                                               resu-563
      write (mw,1044) ((cq(l,k),l=6,10),k=njx,ngx)                      resu-564
      if (ngx.lt.nfx) go to 70                                          resu-565
   71 call scat(sr,mf,jmax,kmax,theta,fcn,ipj,ipk,nco,coe,ipi,am,am(m2),resu-566
     1am(m3),ex(1,kc),wv,ncj,jmin,lo)                                   resu-567
      go to ( 11 , 72 , 73 ) , klt                                      resu-568
   72 if (.not.lo(81)) go to 73                                         resu-569
      ex(i4-1,kc)=excn                                                  resu-570
      ex(i4,kc)=ex(2,kc)-excn                                           resu-571
   73 if (dthe.eq.0.d0) go to ( 49 , 49 , 60 ) , klt                    resu-572
      go to ( 74 , 75 , 76 ),kc                                         resu-573
   74 kc=2                                                              resu-574
      theta=thetb-dthe                                                  resu-575
      go to 71                                                          resu-576
   75 kc=3                                                              resu-577
      theta=thetb+dthe                                                  resu-578
      go to 71                                                          resu-579
   76 if (klt.eq.3) go to 79                                            resu-580
      aa=ex(1,1)+ex(1,2)+ex(1,3)                                        resu-581
      do 78 k=2,i4                                                      resu-582
      if ((k.gt.i5).and.(k.le.i3)) go to 77                             resu-583
      ex(k,1)=(ex(k,1)+ex(k,2)+ex(k,3))/3.d0                            resu-584
      go to 78                                                          resu-585
   77 ex(k,1)=(ex(k,1)*ex(1,1)+ex(k,2)*ex(1,2)+ex(k,3)*ex(1,3))/aa      resu-586
   78 continue                                                          resu-587
      go to 49                                                          resu-588
   79 do 80 k=jn1,jn2                                                   resu-589
   80 ex(k-is,1)=(ex(k-is,1)+ex(k-is,2)+ex(k-is,3))/3.d0                resu-590
      go to 60                                                          resu-591
 1000 format ('<exp.dat.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 resu-592
 1001 format (3i5,5a4)                                                  resu-593
 1002 format ('1',5x,18a4//)                                            resu-594
 1003 format (//30x,'**********   state',i5,'    **********'//)         resu-595
 1004 format (//42x,5a4//10x,'angle',10x,'calc. val.',11x,'exp. val.',10resu-596
     1x,'exp. error',10x,'cor. error',13x,'chi2'/)                      resu-597
 1005 format (6x,f10.3,5d20.5)                                          resu-598
 1006 format (//' weight in the chi2',8x,d15.5/' experimental normalisatresu-599
     1ion',d15.5/' normalisation error',7x,d15.5/' calculated normalisatresu-600
     2ion',2x,d15.5//' ***** chi2 =',d15.6,'   *****'/)                 resu-601
 1007 format (/' ************ chi2 **********',d20.10//)                resu-602
 1008 format ('<ang.dis.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 resu-603
 1009 format ('<cross-s.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 resu-604
 1010 format ('<ine.c.s.>',f10.2,1p,d20.8,0p,f10.2,2i5)                 resu-605
 1011 format (6x,'==> total cross section =',f14.6,' millibarns.')      resu-606
 1012 format (1p,d12.5)                                                 resu-607
 1013 format (' total reaction cross section =',f14.6,' millibarns.')   resu-608
 1014 format (' total reaction cross section =',f14.6,' millibarns',11x,resu-609
     1'( including compound elastic ).')                                resu-610
 1015 format (' total direct reaction cross section =',f14.6,' millibarnresu-611
     1s',4x,'( without compound elastic ).')                            resu-612
 1016 format (8x,'fission cross section =',f14.6,' millibarns.')        resu-613
 1017 format (6x,'gamma ray cross section =',f14.6,' millibarns.')      resu-614
 1018 format (/'  compound cross section for scattering to coupled levelresu-615
     1s.'/'  ======================================================='//'resu-616
     2   level     spin       energy       cross section'/)             resu-617
 1019 format (i5,f9.1,a1,'   at',f10.5,' mev',f14.5)                    resu-618
 1020 format (/' sum of compound contributions',f14.6,' millibarns.')   resu-619
 1021 format (/'  compound cross section for scattering to uncoupled levresu-620
     1els with angular distribution.'/'  ===============================resu-621
     2===================================================='//'   level  resu-622
     3   spin       energy       cross section'/)                       resu-623
 1022 format (/'  compound cross section for scattering to levels withouresu-624
     1t angular distribution.'/'  ======================================resu-625
     2======================================'//'   level     spin       resu-626
     3energy       cross section'/)                                     resu-627
 1023 format (/' continuum',i4/' total compound reaction cross section =resu-628
     1',f14.6,' millibarns.'//8x,' energy     step     contribution  valresu-629
     2ue (millibarns/mev)'/)                                            resu-630
 1024 format (2x,i3,2f10.5,2f15.5)                                      resu-631
 1025 format (/' total sum of compound contributions',f14.6,' millibarnsresu-632
     1.')                                                               resu-633
 1026 format (/' elastic scattering on the target state of spin =',f5.1,resu-634
     1a1)                                                               resu-635
 1027 format (//' closed channel for the target state',i3)              resu-636
 1028 format (i5,f5.1,a1,3x,'0',5x,'closed channel.')                   resu-637
 1029 format ('0.d0',8x,i3)                                             resu-638
 1030 format (/' inelastic scattering to the target state',i3,'  spin ='resu-639
     1,f5.1,a1)                                                         resu-640
 1031 format (/6x,'inelastic cross section =',f14.6,' millibarns.')     resu-641
 1032 format (/'  total elastic cross section =',f14.6,' millibarns.')  resu-642
 1033 format (9x,'direct cross section =',f14.6,' millibarns.')         resu-643
 1034 format (1p,d12.5,i3)                                              resu-644
 1035 format (7x,'compound cross section =',f14.6,' millibarns.')       resu-645
 1036 format (1x,f10.3,d16.5,2x,5f18.7)                                 resu-646
 1037 format (29x,5f18.7)                                               resu-647
 1038 format (i3,1p,2d12.5,5x,4a4,a2)                                   resu-648
 1039 format (' -4',1p,2d12.5,5x,4a4,a2/' -5',2d12.5,5x,4a4,a2)         resu-649
 1040 format (/' angular distribution of compound scattering on levels',resu-650
     1i3,' to',i3//6x,'angle',6(i6,'-level',f5.1,a1))                   resu-651
 1041 format (1x,f10.3,6f18.7)                                          resu-652
 1042 format (/6x,'angle ',6(4a4,a2))                                   resu-653
 1043 format (i5,f5.1,a1,i4,i5)                                         resu-654
 1044 format (30x,5(4a4,a2))                                            resu-655
      end                                                               resu-656
c 07/03/07                                                      ecis06  scat-000
      subroutine scat(fr,mf,jmax,kmax,theta,fcn,ipj,ipk,nco,coe,ipi,ab,ascat-001
     1,b,ex,wv,ncj,jmin,lo)                                             scat-002
c computation of observables.                                           scat-003
c input:     fr:      scattering coefficients in the helicity formalism.scat-004
c            mf:      tables of helicity,description of observables,    scat-005
c                     .... etc.  see deph and obse.                     scat-006
c            jmax:    dimension for fr.                                 scat-007
c            kmax:    dimension for fcn.                                scat-008
c            theta:   scattering angle.                                 scat-009
c            fcn:     compound nucleus coefficients.                    scat-010
c            ipj:     number of j values used for scattering.           scat-011
c            ipk:     number of l values used for compound nucleus.     scat-012
c            nco,coe: loops and coefficients for observables (see obse).scat-013
c            ipi:     multiplicities for particle and target nucleus.   scat-014
c            wv:      masses, energies, etc..    see calx.              scat-015
c            ncj:     number of factorisations of 1/(1-x*cos(theta)).   scat-016
c            jmin:    twice minimum of the total spin.                  scat-017
c            lo:      logical controls:                                 scat-018
c               lo(8)  =.true. relativistic kinematics.                 scat-019
c               lo(18) =.true. projectile-target antisymmetrisation.    scat-020
c               lo(41) =.true. factorisation of 1/(1-cos(theta)).       scat-021
c               lo(81) =.true. hauser-feshbach corrections.             scat-022
c output:    ex:      differential cross-section followed by observablesscat-023
c working areas:                                                        scat-024
c            ab:      amplitudes in the c. m. or the lab. system.       scat-025
c            a:       for independent amplitudes.                       scat-026
c            b:       to store the rotation matrix elements.            scat-027
c                                                                       scat-028
c the common /resct/ is used in resu and scat.                          scat-029
c                                                                       scat-030
c for the common  /dcons/ see calc.                                     scat-031
c                                                                       scat-032
c significance of the quantities in common /dcons/:                     scat-033
c  cmb:       atomic mass cm divided by h-bar*c.                        scat-034
c  xz:        conversion factor to millibarns.                          scat-035
c   used:     cmb,xz.                                                   scat-036
c                                                                       scat-037
c significance of the quantities in common /resct/:                     scat-038
c  excn:      compound-nucleus cross-section.                           scat-039
c  xa,xb:     constants for change to laboratory system.                scat-040
c  jn1,jn2:   first and last amplitude in:the table.                    scat-041
c  jn2:       number of independent amplitudes.                         scat-042
c  ntt:       total number of amplitudes for this state and a given j.  scat-043
c  mtt:       size of the scattering matrix for this state and angle.   scat-044
c  mt1:       multiplicity of the outgoing particle.                    scat-045
c  mt2:       multiplicity of the residual target.                      scat-046
c  mt3:       multiplicity of the incident particle.                    scat-047
c  mt4:       multiplicity of the initial target.                       scat-048
c  nout:      nuclear state considered.                                 scat-049
c  nix,nfx:   first and last observable in the table.                   scat-050
c  klt:       1 for experimental data.                                  scat-051
c             2 for equidistant angles.                                 scat-052
c             3 for pure compound nucleus.                              scat-053
c  lkt:       logical=.true. for centre of mass system.                 scat-054
c                                                                       scat-055
c***********************************************************************scat-056
      implicit real*8 (a-h,o-z)                                         scat-057
      logical lo(150),ltt(6),lxy,lkt                                    scat-058
      dimension fr(2,jmax,*),mf(10,*),fcn(kmax,*),nco(20,*),coe(*),ipi(1scat-059
     12,*),ab(2,*),a(2,*),b(*),ex(*),wv(22,*),mo(18)                    scat-060
      equivalence (mo(1),mi1),(mo(2),mp1),(mo(3),n1),(mo(4),l1),(mo(5),mscat-061
     1i2),(mo(6),mp2),(mo(7),n2),(mo(8),l2),(mo(9),mi3),(mo(10),mp3),(moscat-062
     2(11),n3),(mo(12),l3),(mo(13),mi4),(mo(14),mp4),(mo(15),n4),(mo(16)scat-063
     3,l4),(mo(17),jq),(mo(18),jp)                                      scat-064
      common /dcons/ cm,chb,cz,cmb,ccz,ck,xz                            scat-065
      common /resct/ excn,xa,xb,jn1,jn2,ntt,mtt,mt1,mt2,mt3,mt4,nout,nixscat-066
     1,nfx,klt,lkt                                                      scat-067
      thet=1.74532925d-02*theta                                         scat-068
      if (klt.eq.3) go to 56                                            scat-069
c for experimental data or equidistant angles.                          scat-070
      w6=dcos(thet)                                                     scat-071
      w7=dsin(thet)                                                     scat-072
      if (lkt) go to 1                                                  scat-073
      xc=(xa**2-xb**2)*w7**2+w6**2                                      scat-074
      if (xc.gt.0.d0) xc=dsqrt(xc)                                      scat-075
      a3=xc*w6-xa*xb*w7**2                                              scat-076
      w7=w7*(xb*w6+xc*xa)                                               scat-077
      w6=a3                                                             scat-078
    1 if (.not.lo(81)) go to 3                                          scat-079
c compound nucleus contribution.                                        scat-080
      excn=fcn(1,nout)                                                  scat-081
      if (ipk.eq.1) go to 3                                             scat-082
      u1=0.d0                                                           scat-083
      u2=1.d0                                                           scat-084
      do 2 j=2,ipk                                                      scat-085
      u1=(dfloat(4*j-7)*u2*w6-dfloat(2*j-4)*u1)/dfloat(2*j-3)           scat-086
      u2=(dfloat(4*j-5)*u1*w6-dfloat(2*j-3)*u2)/dfloat(2*j-2)           scat-087
    2 excn=excn+u2*fcn(j,nout)*dfloat(4*j-3)                            scat-088
c direct interaction contribution.                                      scat-089
    3 w3=1.d0                                                           scat-090
      x2=dsqrt(.5d0*(1.d0+w6))                                          scat-091
      x3=dsqrt(.5d0*(1.d0-w6))                                          scat-092
      do 4 i=1,ntt                                                      scat-093
      a(1,i)=0.d0                                                       scat-094
    4 a(2,i)=0.d0                                                       scat-095
      if (nout.ne.1) go to 7                                            scat-096
c computation of coulomb amplitudes for the elastic channel.            scat-097
      if (wv(5,1).eq.0.d0.or.x3.lt.1.d-20) go to 7                      scat-098
      w2=2.d0*wv(5,1)*dlog(x3)                                          scat-099
      w3=-0.5d0*wv(5,1)/(x3*x3)                                         scat-100
      w4=w3*dcos(w2)                                                    scat-101
      w5=-w3*dsin(w2)                                                   scat-102
      w3=w3**2                                                          scat-103
      if (.not.lo(18)) go to 5                                          scat-104
c symmetrisation between projectile and target.                         scat-105
      fs=dfloat(2*mod(ipi(2,1),2)-1)                                    scat-106
      y2=2.d0*wv(5,1)*dlog(x2)                                          scat-107
      y1=-0.5d0*wv(5,1)/(x2*x2)                                         scat-108
      y4=y1*dcos(y2)                                                    scat-109
      y5=-y1*dsin(y2)                                                   scat-110
      w3=w4**2+w5**2+y4**2+y5**2+2.d0*fs*(w4*y4+w5*y5)/dfloat(ipi(2,1)) scat-111
c transformation of the coulomb amplitudes to the helicity formalism.   scat-112
    5 do 6 i=1,ntt                                                      scat-113
      m5=ipi(2,1)-1                                                     scat-114
      m6=ipi(3,1)-1                                                     scat-115
      m1=2*mf(1,i)-1-ipi(2,1)                                           scat-116
      m2=ipi(3,1)-2*mf(2,i)+1                                           scat-117
      m3=2*mf(3,i)-1-ipi(2,1)                                           scat-118
      m4=ipi(3,1)-2*mf(4,i)+1                                           scat-119
      call emro(m5,m3,m1,x2,x3,b,1)                                     scat-120
      call emro(m6,m4,m2,x2,x3,b(2),1)                                  scat-121
      w1=b(1)*b(2)                                                      scat-122
      a(1,i)=w4*w1                                                      scat-123
      a(2,i)=w5*w1                                                      scat-124
      if (.not.lo(18)) go to 6                                          scat-125
      call emro(m5,m3,m2,x2,x3,b,1)                                     scat-126
      call emro(m6,m4,m1,x2,x3,b(2),1)                                  scat-127
      y1=b(1)*b(2)*fs                                                   scat-128
      a(1,i)=a(1,i)+y4*y1                                               scat-129
      a(2,i)=a(2,i)+y5*y1                                               scat-130
    6 continue                                                          scat-131
      w3=w3/wv(4,1)**2                                                  scat-132
c computation of the nuclear amplitudes.                                scat-133
    7 do 13 i=jn1,jn2                                                   scat-134
      ij=i-jn1+1                                                        scat-135
      w5=1.d0                                                           scat-136
      jn=ipj                                                            scat-137
      if (.not.lo(41)) go to 9                                          scat-138
c factorisation of 1/(1-x*cos(theta)) with x after the scattering       scat-139
c coefficient.                                                          scat-140
      do 8 j=1,ncj                                                      scat-141
      jn=jn+1                                                           scat-142
    8 w5=w5/(1.d0-fr(1,jn,i)*w6)                                        scat-143
    9 if (mf(6,i).eq.99999) go to 10                                    scat-144
      call emro(jmin,mf(5,i),mf(6,i),x2,x3,b,jn)                        scat-145
      w1=w5                                                             scat-146
      go to 11                                                          scat-147
c rotation matrix elements are the same as for the last amplitude.      scat-148
   10 w1=w5*dfloat(mf(10,i))                                            scat-149
   11 do 12 j=1,ipj                                                     scat-150
      a(1,ij)=a(1,ij)+fr(1,j,i)*w1*b(j)                                 scat-151
   12 a(2,ij)=a(2,ij)+fr(2,j,i)*w1*b(j)                                 scat-152
c construction of the total amplitude matrix.                           scat-153
      k1=mf(7,i)                                                        scat-154
      ab(1,k1)=a(1,ij)                                                  scat-155
      ab(2,k1)=a(2,ij)                                                  scat-156
      if (mf(8,i).eq.0) go to 13                                        scat-157
      k1=mf(8,i)                                                        scat-158
      w1=dfloat(mf(9,i))                                                scat-159
      ab(1,k1)=w1*a(1,ij)                                               scat-160
      ab(2,k1)=w1*a(2,ij)                                               scat-161
   13 continue                                                          scat-162
c cross-section.                                                        scat-163
      dz=0.d0                                                           scat-164
      if (lo(81)) dz=excn/xz                                            scat-165
      do 14 i1=1,mtt                                                    scat-166
   14 dz=dz+ab(1,i1)*ab(1,i1)+ab(2,i1)*ab(2,i1)                         scat-167
      ex(1)=dz*xz                                                       scat-168
      lx1=0                                                             scat-169
      lx2=0                                                             scat-170
      jex=1                                                             scat-171
c loop on the observables.                                              scat-172
      do 54 iex=nix,nfx                                                 scat-173
      jex=jex+1                                                         scat-174
      if (mf(2,iex).gt.1) go to 21                                      scat-175
      if (mf(2,iex)) 17 , 15 , 16                                       scat-176
c cross section.                                                        scat-177
   15 ex(jex)=ex(1)                                                     scat-178
      go to 54                                                          scat-179
c cross section divided by rutherford's cross-section.                  scat-180
   16 ex(jex)=ex(1)/(10.d0*w3)                                          scat-181
      go to 54                                                          scat-182
   17 ex(jex)=0.d0                                                      scat-183
      if (mf(2,iex).eq.-3) go to 19                                     scat-184
      mtp=mt1*mt2*mt4                                                   scat-185
c vector analysing power for spin 1/2 or 1.                             scat-186
      do 18 i1=1,mtp                                                    scat-187
      i2=i1+mtp                                                         scat-188
   18 ex(jex)=ex(jex)+ab(2,i2)*ab(1,i1)-ab(1,i2)*ab(2,i1)               scat-189
      ex(jex)=2.d0*ex(jex)*xz/ex(1)                                     scat-190
      if (mt3.eq.3) ex(jex)=1.22474487d0*ex(jex)                        scat-191
      go to 54                                                          scat-192
c vector polarisation for spin 1/2 or 1.                                scat-193
   19 do 20 i1=1,mtt,mt1                                                scat-194
   20 ex(jex)=ex(jex)+ab(1,i1+1)*ab(2,i1)-ab(2,i1+1)*ab(1,i1)           scat-195
      ex(jex)=2.d0*ex(jex)*xz/ex(1)                                     scat-196
      if (mt1.eq.3) ex(jex)=1.22474487d0*ex(jex)                        scat-197
      go to 54                                                          scat-198
c all the other observables.                                            scat-199
   21 ex(jex)=0.d0                                                      scat-200
      k1=mf(3,iex)                                                      scat-201
      k2=mf(4,iex)                                                      scat-202
c loop on the components of the description of the observable.          scat-203
      do 53 ii=k1,k2                                                    scat-204
      ix=1                                                              scat-205
      ixy=0                                                             scat-206
      ixx=ixy+mtt                                                       scat-207
      do 22 i=1,18                                                      scat-208
   22 mo(i)=nco(i,ii)                                                   scat-209
      do 23 ij=1,6                                                      scat-210
      ltt(ij)=mod(jq,2).eq.1                                            scat-211
   23 jq=jq/2                                                           scat-212
c computation of the angle for a change of frame.                       scat-213
      if (mod(jp,1000).eq.0) go to 46                                   scat-214
      lxy=.true.                                                        scat-215
      if (lx1.eq.mod(jp,1000)) go to 45                                 scat-216
      lx1=mod(jp,1000)                                                  scat-217
      lx2=0                                                             scat-218
      n=mt1                                                             scat-219
      if (lx1.eq.1) go to 26                                            scat-220
      go to 25                                                          scat-221
   24 if (jp/1000.eq.0) go to 46                                        scat-222
      lxy=.false.                                                       scat-223
      if (jp/1000.eq.lx2) go to 45                                      scat-224
      lx2=jp/1000                                                       scat-225
      n=mt2                                                             scat-226
      if (lx2.eq.1) go to 27                                            scat-227
   25 if (dabs(w7).lt.1.d-5.or.n.eq.1) go to 43                         scat-228
      w1=w6                                                             scat-229
      w2=-w7                                                            scat-230
      go to 31                                                          scat-231
c transformation to the laboratory system for the particle.             scat-232
   26 w1=wv(1,nout)                                                     scat-233
      go to 28                                                          scat-234
c transformation to the laboratory system for the target.               scat-235
   27 w1=-wv(2,nout)                                                    scat-236
   28 if (n.eq.1) go to 43                                              scat-237
      if (.not.lo(08)) go to 29                                         scat-238
      w1=wv(4,nout)/(cmb*w1)                                            scat-239
      w2=cmb*wv(2,1)/wv(4,1)                                            scat-240
      w3=datan(-w7/(w6*dsqrt(w1*w1+1.d0)+w1*dsqrt(w2*w2+1.d0)))         scat-241
      go to 30                                                          scat-242
   29 w3=datan(-w7/(wv(4,nout)*wv(2,1)/(wv(4,1)*w1)+w6))                scat-243
   30 if (dabs(w3).lt.1.d-5.or.n.eq.1) go to 43                         scat-244
      w1=dcos(w3)                                                       scat-245
      w2=dsin(w3)                                                       scat-246
   31 do 32 i=1,mtt                                                     scat-247
      ab(1,i+ixx)=0.d0                                                  scat-248
   32 ab(2,i+ixx)=0.d0                                                  scat-249
      w3=dsqrt(.5d0*(1.d0-w1))                                          scat-250
      w5=1.d0                                                           scat-251
      do 33 i=2,n                                                       scat-252
   33 w5=-w5*w3                                                         scat-253
      if (dabs(w5).lt.1.d-30) go to 43                                  scat-254
      w4=0.d0                                                           scat-255
      w8=.5d0*dfloat(n-1)                                               scat-256
      mty=mt3*mt4                                                       scat-257
      x3=-w8                                                            scat-258
c transformation of the amplitude matrix.                               scat-259
      do 42 i=1,n                                                       scat-260
      if (i.eq.1) go to 34                                              scat-261
      w3=w4                                                             scat-262
      if (i.ne.2) w3=w3*dsqrt(dfloat((i-2)*(n+2-i)))                    scat-263
      w4=w5                                                             scat-264
      w5=(2.d0*(x3*w1-w8)*w4/w2-w3)/dsqrt(dfloat((i-1)*(n+1-i)))        scat-265
      x3=x3+1.d0                                                        scat-266
   34 x2=0.d0                                                           scat-267
      x5=w5                                                             scat-268
      x4=w8                                                             scat-269
      do 41 j=i,n                                                       scat-270
      if (j.eq.i) go to 35                                              scat-271
      x1=x2                                                             scat-272
      if (j.ne.i+1) x1=x1*dsqrt(dfloat((j-i-1)*(n+1-j+i)))              scat-273
      x2=x5                                                             scat-274
      x5=(2.d0*(x3-x4*w1)*x2/w2-x1)/dsqrt(dfloat((j-i)*(n+i-j)))        scat-275
      x4=x4-1.d0                                                        scat-276
   35 x=x5                                                              scat-277
      l=1+j-i                                                           scat-278
      m=n+1-i                                                           scat-279
      do 40 k=1,2                                                       scat-280
      do 39 i1=1,mty                                                    scat-281
      if (lxy) go to 37                                                 scat-282
      ixi=ixx+mt1*((i1-1)*mt2+l-1)                                      scat-283
      ixj=ixy+mt1*((i1-1)*mt2+m-1)                                      scat-284
      do 36 i4=1,mt1                                                    scat-285
      ab(1,i4+ixi)=ab(1,i4+ixi)+x*ab(1,i4+ixj)                          scat-286
   36 ab(2,i4+ixi)=ab(2,i4+ixi)+x*ab(2,i4+ixj)                          scat-287
      go to 39                                                          scat-288
   37 ixi=ixx+mt1*((i1-1)*mt2-1)+l                                      scat-289
      ixj=ixy+mt1*((i1-1)*mt2-1)+m                                      scat-290
      do 38 i4=mt1,mt2*mt1,mt1                                          scat-291
      ab(1,ixi+i4)=ab(1,ixi+i4)+x*ab(1,ixj+i4)                          scat-292
   38 ab(2,ixi+i4)=ab(2,ixi+i4)+x*ab(2,ixj+i4)                          scat-293
   39 continue                                                          scat-294
      if (j.eq.n) go to 41                                              scat-295
      ml=l                                                              scat-296
      l=m                                                               scat-297
      m=ml                                                              scat-298
      if (mod(j+n,2).ne.0) x=-x                                         scat-299
   40 continue                                                          scat-300
   41 continue                                                          scat-301
   42 continue                                                          scat-302
      go to 45                                                          scat-303
   43 do 44 i=1,mtt                                                     scat-304
      ab(1,i+ixx)=ab(1,i+ixy)                                           scat-305
   44 ab(2,i+ixx)=ab(2,i+ixy)                                           scat-306
   45 ix=ix+1                                                           scat-307
      ixy=ixx                                                           scat-308
      ixx=ixy+mtt                                                       scat-309
      if (lxy) go to 24                                                 scat-310
   46 if (ltt(5)) go to 52                                              scat-311
      x=0.d0                                                            scat-312
c the four do loops.                                                    scat-313
      do 51 i1=mi1,mp1                                                  scat-314
      j1=i1-n1                                                          scat-315
      x1=coe(10*ii)                                                     scat-316
      if (ltt(1)) x1=coe(10*ii)*coe(i1+l1)                              scat-317
      do 50 i2=mi2,mp2                                                  scat-318
      j2=i2-n2                                                          scat-319
      x2=x1                                                             scat-320
      if (ltt(2)) x2=x1*coe(l2-i2)                                      scat-321
      do 49 i3=mi3,mp3                                                  scat-322
      j3=i3-n3                                                          scat-323
      x3=x2                                                             scat-324
      if (ltt(3)) x3=x2*coe(i3+l3)                                      scat-325
      do 48 i4=mi4,mp4                                                  scat-326
      j4=i4-n4                                                          scat-327
      x4=x3                                                             scat-328
      iij=mt1*(i4+mt2*(j2-1+mt4*(j1-1+mt3*(ix-1)))-1)                   scat-329
      iii=mt1*(j4+mt2*(i2-1+mt4*(i1-1+mt3*(ix-1)))-1)                   scat-330
      if (ltt(4)) x4=x3*coe(l4-i4)                                      scat-331
      if (ltt(6)) go to 47                                              scat-332
      x=x+(ab(1,i3+iij)*ab(1,j3+iii)+ab(2,i3+iij)*ab(2,j3+iii))*x4      scat-333
      go to 48                                                          scat-334
   47 x=x+(ab(2,i3+iij)*ab(1,j3+iii)-ab(1,i3+iij)*ab(2,j3+iii))*x4      scat-335
   48 continue                                                          scat-336
   49 continue                                                          scat-337
   50 continue                                                          scat-338
   51 continue                                                          scat-339
      go to 53                                                          scat-340
   52 x=coe(10*ii)*dz                                                   scat-341
   53 ex(jex)=ex(jex)+x                                                 scat-342
      ex(jex)=ex(jex)/dz                                                scat-343
   54 continue                                                          scat-344
      if (lkt) go to 55                                                 scat-345
      xc=dsqrt((xa*w6+xb)**2+w7**2)**3/dabs(xa+xb*w6)                   scat-346
      ex(1)=ex(1)*xc                                                    scat-347
   55 if (klt.eq.1.or.lkt) return                                       scat-348
      ex(2)=ex(2)*xc                                                    scat-349
      if (lo(81)) excn=excn*xc                                          scat-350
      return                                                            scat-351
c pure compound nucleus for levels jn1 to jn2.                          scat-352
   56 is=jn1-1                                                          scat-353
      do 63 iv=jn1,jn2                                                  scat-354
      ex(iv-is)=fcn(1,iv)                                               scat-355
      if (ipk.eq.1) go to 62                                            scat-356
      if (lkt) go to 59                                                 scat-357
      if (lo(8)) go to 57                                               scat-358
      xa=1.d0                                                           scat-359
      xb=wv(4,1)*wv(1,iv)/(wv(4,iv)*wv(2,1))                            scat-360
      go to 58                                                          scat-361
   57 xa=dsqrt(1.d0+(wv(4,1)/(cmb*wv(2,1)))**2)                         scat-362
      xb=dsqrt(wv(1,iv)**2+(wv(4,iv)/cmb)**2)*wv(4,1)/(wv(4,iv)*wv(2,1))scat-363
   58 w6=dcos(thet)                                                     scat-364
      w7=dsin(thet)                                                     scat-365
      xc=(xa**2-xb**2)*w7**2+w6**2                                      scat-366
      if (xc.gt.0.d0) xc=dsqrt(xc)                                      scat-367
      w6=xc*w6-xa*xb*w7**2                                              scat-368
      go to 60                                                          scat-369
   59 w6=dcos(thet)                                                     scat-370
   60 u1=0.d0                                                           scat-371
      u2=1.d0                                                           scat-372
      do 61 j=2,ipk                                                     scat-373
      u1=(dfloat(4*j-7)*u2*w6-dfloat(2*j-4)*u1)/dfloat(2*j-3)           scat-374
      u2=(dfloat(4*j-5)*u1*w6-dfloat(2*j-3)*u2)/dfloat(2*j-2)           scat-375
   61 ex(iv-is)=ex(iv-is)+u2*fcn(j,iv)*dfloat(4*j-3)                    scat-376
   62 if (.not.lkt) ex(iv-is)=ex(iv-is)*dsqrt((xa*w6+xb)**2+1.d0-w6**2)*scat-377
     1*3/dabs(xa+xb*w6)                                                 scat-378
   63 continue                                                          scat-379
      return                                                            scat-380
      end                                                               scat-381
c 28/06/06                                                      ecis06  gral-000
      subroutine gral(tgr,grr,frr,mtheta,mf,cm,id1,lt1,lt2)             gral-001
c plots of cross-section and polarisations with and without experimentalgral-002
c data.                                                                 gral-003
c input:     tgr:     angles.                                           gral-004
c            grr:     calculated values.                                gral-005
c            frr:     experimental values.                              gral-006
c            mtheta:  number of angles.                                 gral-007
c            mf,cm:   equivalent by call, description of data (see obse)gral-008
c                     mf(5,j) is the number of power of 10 in a line    gral-009
c                     for cross sections and must be 1 to plot a        gral-010
c                     polarisation (always between -1 and 1).           gral-011
c                     cm(i,j) is a title for i=6,10.                    gral-012
c            id1:     number of different polarisations.                gral-013
c            lt1:     .true. for polarisation,                          gral-014
c                     .false. for cross section.                        gral-015
c            lt2:     .true. if there are no experimental data.         gral-016
c***********************************************************************gral-017
      implicit real*8 (a-h,o-z)                                         gral-018
      logical lt1,lt2                                                   gral-019
      dimension tgr(mtheta),grr(id1,mtheta),frr(mtheta),mf(10,*)        gral-020
      character*1 vgr(112),gra(17)                                      gral-021
      character*4 cm(10,*)                                              gral-022
      common /inout/ mr,mw,ms                                           gral-023
      data gra /'+','*',',',':','-','1','2','3','4','5','6','7','8','9',gral-024
     1'0',' ','.'/                                                      gral-025
      if (lt1) go to 14                                                 gral-026
c cross sections.                                                       gral-027
      if ((mf(5,1).le.0).or.(mf(5,1).gt.50)) return                     gral-028
      na2=100/mf(5,1)                                                   gral-029
      aa2=dfloat(na2)                                                   gral-030
      write (mw,1000)                                                   gral-031
      write (mw,1001) gra(1),(cm(j,1),j=6,10)                           gral-032
      if (.not.lt2) write (mw,1002)                                     gral-033
      aa3=aa2*dfloat((mf(5,1)+1)/2)                                     gral-034
      aa1=aa2/dlog(10.d0)                                               gral-035
      na1=101-mf(5,1)*na2                                               gral-036
      a5=101.5d0                                                        gral-037
      do 1 i=1,112                                                      gral-038
    1 vgr(i)=gra(16)                                                    gral-039
      do 2 i=na1,112,na2                                                gral-040
    2 vgr(i)=gra(6)                                                     gral-041
      write (mw,1003) vgr                                               gral-042
      do 3 i=1,112                                                      gral-043
    3 vgr(i)=gra(17)                                                    gral-044
      do 4 i=na1,112,na2                                                gral-045
    4 vgr(i)=gra(2)                                                     gral-046
      write (mw,1003) vgr                                               gral-047
      do 11 i=1,mtheta                                                  gral-048
      do 5 j=2,111                                                      gral-049
    5 vgr(j)=gra(16)                                                    gral-050
      do 6 j=na1,111,na2                                                gral-051
    6 vgr(j)=gra(17)                                                    gral-052
      if (grr(1,i).lt.0.d0) go to 27                                    gral-053
      a4=aa1*dlog(grr(1,i))+a5                                          gral-054
      ng=0                                                              gral-055
    7 if (ng.gt.20) go to 28                                            gral-056
      ng=ng+1                                                           gral-057
      if (a4.gt.2.d0) go to 8                                           gral-058
      a4=a4+aa3                                                         gral-059
      a5=a5+aa3                                                         gral-060
      write (mw,1004)                                                   gral-061
      go to 7                                                           gral-062
    8 if (a4.lt.112.d0) go to 9                                         gral-063
      a4=a4-aa3                                                         gral-064
      a5=a5-aa3                                                         gral-065
      write (mw,1005)                                                   gral-066
      go to 8                                                           gral-067
    9 l=idint(a4)                                                       gral-068
      vgr(l)=gra(1)                                                     gral-069
      if (lt2) go to 10                                                 gral-070
c experimental data.                                                    gral-071
      if (frr(i).lt.0.d0) go to 29                                      gral-072
      l=idint(aa1*dlog(frr(i))+a5)                                      gral-073
      if (l.gt.1.and.l.lt.112) vgr(l)=gra(2)                            gral-074
   10 write (mw,1006) tgr(i),vgr                                        gral-075
   11 continue                                                          gral-076
      do 12 i=1,112                                                     gral-077
   12 vgr(i)=gra(17)                                                    gral-078
      do 13 i=na1,112,na2                                               gral-079
   13 vgr(i)=gra(2)                                                     gral-080
      write (mw,1003) vgr                                               gral-081
      return                                                            gral-082
c polarisation.                                                         gral-083
   14 if (lt2) go to 15                                                 gral-084
      write (mw,1000)                                                   gral-085
      write (mw,1001) gra(1),(cm(j,1),j=6,10)                           gral-086
      write (mw,1002)                                                   gral-087
      go to 17                                                          gral-088
   15 nk=0                                                              gral-089
      do 16 k=1,id1                                                     gral-090
      if (mf(5,k).ne.1) go to 16                                        gral-091
      kn=mod(nk,15)+1                                                   gral-092
      nk=nk+1                                                           gral-093
      if (nk.eq.1) write (mw,1000)                                      gral-094
      write (mw,1001) gra(kn),(cm(j,k),j=6,10)                          gral-095
   16 continue                                                          gral-096
      if (nk.eq.0) return                                               gral-097
   17 write (mw,1007)                                                   gral-098
      do 18 i=1,112                                                     gral-099
   18 vgr(i)=gra(16)                                                    gral-100
      do 19 i=1,103                                                     gral-101
   19 vgr(i)=gra(17)                                                    gral-102
      do 20 i=2,102,10                                                  gral-103
   20 vgr(i)=gra(2)                                                     gral-104
      write (mw,1003) vgr                                               gral-105
      do 24 i=1,mtheta                                                  gral-106
      do 21 m=2,102                                                     gral-107
   21 vgr(m)=gra(16)                                                    gral-108
      vgr(52)=gra(17)                                                   gral-109
      nk=0                                                              gral-110
      do 22 k=1,id1                                                     gral-111
      if (mf(5,k).ne.1) go to 22                                        gral-112
      nk=mod(nk,15)+1                                                   gral-113
      m=idint(50.d0*grr(k,i)+52.5d0)                                    gral-114
      if (m.gt.1.and.m.le.102) vgr(m)=gra(nk)                           gral-115
   22 continue                                                          gral-116
      if (lt2) go to 23                                                 gral-117
      m=idint(50.d0*frr(i)+52.5d0)                                      gral-118
      if (m.gt.1.and.m.le.102) vgr(m)=gra(2)                            gral-119
   23 write (mw,1006) tgr(i),vgr                                        gral-120
   24 continue                                                          gral-121
      do 25 i=1,103                                                     gral-122
   25 vgr(i)=gra(17)                                                    gral-123
      do 26 i=2,102,10                                                  gral-124
   26 vgr(i)=gra(2)                                                     gral-125
      write (mw,1003) vgr                                               gral-126
      return                                                            gral-127
   27 write (mw,1008) i,grr(1,i)                                        gral-128
      go to 30                                                          gral-129
   28 write (mw,1009) i,grr(1,i)                                        gral-130
      go to 30                                                          gral-131
   29 write (mw,1010) i,frr(i)                                          gral-132
   30 write (mw,1011)                                                   gral-133
      return                                                            gral-134
 1000 format ('1')                                                      gral-135
 1001 format (45x,a1,4x,5a4/)                                           gral-136
 1002 format (45x,'+    calculated value'/45x,'*    experimental value'/gral-137
     1)                                                                 gral-138
 1003 format (7x,112a1)                                                 gral-139
 1004 format (40(' -*'))                                                gral-140
 1005 format (40(' *-'))                                                gral-141
 1006 format (f7.2,112a1)                                               gral-142
 1007 format (//6x,' -1',7x,' -.8',6x,' -.6',6x,' -.4',6x,' -.2',7x,' 0'gral-143
     1,8x,' .2',7x,' .4',7x,' .6',7x,' .8',7x,' 1')                     gral-144
 1008 format (' for the',i4,'th line, calculated value =',d15.8)        gral-145
 1009 format (' for the',i4,'th line, more than 20 translations. calculagral-146
     1ted value =',d15.8)                                               gral-147
 1010 format (' for the',i4,'th line, experimental value =',d15.8)      gral-148
 1011 format (//' **** graph canceled ****')                            gral-149
      end                                                               gral-150
c 09/02/06                                                      ecis06  emro-000
      subroutine emro(ia,i1,i2,x2,x3,res,nx)                            emro-001
c computation of rotation matrix elements.                              emro-002
c input:     ia:      twice the first j value.                          emro-003
c            i1:      twice m1.                                         emro-004
c            i2:      twice m2.                                         emro-005
c            x2:      cosines of theta/2.                               emro-006
c            x3:      sinus of theta/2.                                 emro-007
c            nx:      number of values requested.                       emro-008
c output:    res:     matrix elements:                                  emro-009
c                      j          j+1                     j+nx-1        emro-010
c                     r (theta), r (theta) ............. r (theta)      emro-011
c                      m1,m2      m1,m2                   m1,m2         emro-012
c                     using the recurrence relation obtained from       emro-013
c                                   j                  j'               emro-014
c                     cos(theta) * r (theta)  = sum   r (theta)         emro-015
c                                   m1,m2       on j'  m1,m2            emro-016
c                                                                       emro-017
c***********************************************************************emro-018
      implicit real*8 (o-z)                                             emro-019
      dimension res(*)                                                  emro-020
      nr=1                                                              emro-021
      ja=ia                                                             emro-022
      x1=x2*x2-x3*x3                                                    emro-023
      m1=iabs(i1+i2)/2                                                  emro-024
      m2=iabs(i1-i2)/2                                                  emro-025
      mj=m1+m2                                                          emro-026
      nj=mj                                                             emro-027
    1 if (mj.le.ja) go to 2                                             emro-028
      res(nr)=0.d0                                                      emro-029
      nr=nr+1                                                           emro-030
      if (nr.gt.nx) return                                              emro-031
      ja=ja+2                                                           emro-032
      go to 1                                                           emro-033
    2 s1=0.d0                                                           emro-034
      s2=0.d0                                                           emro-035
      s3=1.d0                                                           emro-036
      if (mj.eq.0) go to 11                                             emro-037
c the magnetic quantum numbers are not both zeros.                      emro-038
      if (m1.eq.m2) go to 8                                             emro-039
c no magnetic quantum number is zero.                                   emro-040
      if (m2.eq.0) go to 4                                              emro-041
      do 3 i=1,m2                                                       emro-042
    3 s3=s3*x3*dsqrt(dfloat(m1+i)/dfloat(i))                            emro-043
    4 if (m1.eq.0) go to 6                                              emro-044
      do 5 m=1,m1                                                       emro-045
    5 s3=s3*x2                                                          emro-046
    6 if ((i1.gt.i2).and.(2*(m2/2).ne.m2)) s3=-s3                       emro-047
      kx=1                                                              emro-048
      x4=0.d0                                                           emro-049
      z1=dfloat(m1)                                                     emro-050
      z2=dfloat(m2)                                                     emro-051
      sl=(z1-z2)/dfloat(nj+2)                                           emro-052
    7 if (ja.le.nj) go to 13                                            emro-053
c recurrence.                                                           emro-054
      nj=nj+2                                                           emro-055
      s2=s3                                                             emro-056
      z1=z1+1.d0                                                        emro-057
      z2=z2+1.d0                                                        emro-058
      mj=mj+1                                                           emro-059
      x4=x4+1.d0                                                        emro-060
      y2=dsqrt(z1*z2*x4*dfloat(mj))                                     emro-061
      sj=dfloat(nj)                                                     emro-062
      s3=(sj-1.d0)*sj*((x1-sl)*s2-s1)/(2.d0*y2)                         emro-063
      s1=2.d0*y2*s2/((sj+1.d0)*sj)                                      emro-064
      sl=sl*(sj-2.d0)/(sj+2.d0)                                         emro-065
      go to 7                                                           emro-066
c a magnetic quantum number is zero.                                    emro-067
    8 do 9 i=1,m1                                                       emro-068
    9 s3=s3*x3*x2*dsqrt(dfloat(m1+i)/dfloat(i))                         emro-069
      kx=2                                                              emro-070
      if (i1.gt.i2.and.(2*(m2/2).ne.m2)) s3=-s3                         emro-071
      x4=0.d0                                                           emro-072
   10 if (ja.le.nj) go to 13                                            emro-073
c recurrence.                                                           emro-074
      nj=nj+2                                                           emro-075
      s2=s3                                                             emro-076
      mj=mj+1                                                           emro-077
      x4=x4+1.d0                                                        emro-078
      y2=dsqrt(x4*dfloat(mj))                                           emro-079
      s3=(dfloat(nj-1)*x1*s2-s1)/y2                                     emro-080
      s1=y2*s2                                                          emro-081
      go to 10                                                          emro-082
c the magnetic quantum numbers are both zeros.                          emro-083
   11 kx=3                                                              emro-084
   12 if (ja.le.nj) go to 13                                            emro-085
c recurrence.                                                           emro-086
      nj=nj+2                                                           emro-087
      sj=dfloat(nj/2)                                                   emro-088
      s2=s3                                                             emro-089
      s3=((2.d0*sj-1.d0)*x1*s2-s1)/sj                                   emro-090
      s1=s2*sj                                                          emro-091
      go to 12                                                          emro-092
c storage.                                                              emro-093
   13 res(nr)=s3                                                        emro-094
      nr=nr+1                                                           emro-095
      if (nr.gt.nx) return                                              emro-096
      ja=ja+2                                                           emro-097
      go to ( 7 , 10 , 12 ),kx                                          emro-098
      end                                                               emro-099
c 02/06/07                                                      ecis06  vari-000
      subroutine vari(kf,nw,dw,lo)                                      vari-001
c assigns the values of the variable parameters and prints the output   vari-002
c during the search.                                                    vari-003
c input:     kf:      1 before the call to the search subroutines:      vari-004
c                     at the first call(ke=0) defines the variables     vari-005
c                     in search,                                        vari-006
c                     at any call, print chi2 and variables.            vari-007
c                     0 after the call to the search subroutines:       vari-008
c                     at any call sets parameters to their value for    vari-009
c                     next evaluation,                                  vari-010
c                     at the last call and if ke is not 1, print        vari-011
c                     errors and parameters.                            vari-012
c            nw:      working area for integers.                        vari-013
c            dw:      working area for double precision in equivalence  vari-014
c                     by call with nw.                                  vari-015
c            lo:      logical controls:                                 vari-016
c               lo(1)  =.true. rotational model-(.f.:vibrational model).vari-017
c               lo(3)  =.true. anharmonic vibrational or asymmetric     vari-018
c                              rotational model.                        vari-019
c               lo(4)  =.true. parametrised spin-orbit deformation.     vari-020
c               lo(6)  =.true. use deformation lengths.                 vari-021
c               lo(7)  =.true. matrix element and form factors read.    vari-022
c               lo(16) =.true. heavy-ion definition of reduced radii andvari-023
c                              deformations.                            vari-024
c               lo(17) =.true. folding model.                           vari-025
c               lo(41) =.true. factorisation of 1/(1-cos(theta)).       vari-026
c               lo(53) =.true. output of the number of iterations.      vari-027
c               lo(55) =.true. output of c-matrix elements and of       vari-028
c                              compound nucleus intermediate results.   vari-029
c               lo(56) =.true. output of s-matrix elements.             vari-030
c               lo(57) =.true. output phase-shifts at each iteration.   vari-031
c               lo(58) =.true. output of the coefficients of each form  vari-032
c                              factor for all sets of equations.        vari-033
c               lo(60) =.true. s-matrix elements written on file 60.    vari-034
c               lo(62) =.true. potentials written on file 62.           vari-035
c               lo(64) =.true. print results on files 64 and 66.        vari-036
c               lo(76) =.true. lo(51) to lo(65) are always used.        vari-037
c               lo(78) =.true. output of differences between            vari-038
c                              experimental and calculated values.      vari-039
c               lo(81) =.true. hauser-feshbach corrections.             vari-040
c               lo(82) =.true. old simplified compound nucleus.         vari-041
c               lo(87) =.true. no width fluctuations.                   vari-042
c               lo(86) =.true. gamma emission in compound nucleus.      vari-043
c               lo(111)=.true. nuclear parameters are changed in search.vari-044
c               lo(112)=.true. spin-orbit or compound nucleus parametersvari-045
c                              are changed in search.                   vari-046
c               lo(113)=.true. dispersion relation is changed in search.vari-047
c               lo(114)=.true. compound nucleus continuum is changed in vari-048
c                              search.                                  vari-049
c               lo(116)=.true. no output.                               vari-050
c               lo(118)=.true. for last results.                        vari-051
c               lo(119)=.true. results with the last calculation.       vari-052
c               lo(120)=.true. output and last calculation best one.    vari-053
c                                                                       vari-054
c for the commons /addre/ and /integ/ see calc.                         vari-055
c for the commons /coupl/, /dchi2/ and /ncomp/ see calx.                vari-056
c                                                                       vari-057
c significance of the quantities in common /addre/:                     vari-058
c  nwv:       non integer values for the channels.                      vari-059
c  nipp:      dispersion parameters.                                    vari-060
c  npaa:      values of nuclear parameters.                             vari-061
c  nscn:      level density description.                                vari-062
c  nfis:      fission data for compound nucleus.                        vari-063
c  ngam:      gamma data for compound nucleus.                          vari-064
c  npot:      optical potential parameters.                             vari-065
c  nbeta:     deformation parameters.                                   vari-066
c  ntgx:      beginning of chi2 and normalisation of data.              vari-067
c  nise:      indexes of the variable parameters in search.             vari-068
c  nrc:       permanent working field for the search.                   vari-069
c  niw:       integer working field for the search.                     vari-070
c  nres:      functions for the search.                                 vari-071
c  nxx:       variables for the search.                                 vari-072
c  nt:        table of reduced nuclear matrix elements.                 vari-073
c  nivq:      table of multipoles.                                      vari-074
c  nivy:      table of form factor identification ivy (for computation).vari-075
c   used:     nwv,nipp,npaa,nscn,nfis,ngam,npot,nbeta,ntgx,nise,nrc,niw,vari-076
c             nres,nxx,nt,nivq,nivy.                                    vari-077
c                                                                       vari-078
c significance of the quantities in common /coupl/:                     vari-079
c  npp:       number of optical potentials.                             vari-080
c  nva:       number of nuclear parameters.                             vari-081
c   used:     npp,nva.                                                  vari-082
c                                                                       vari-083
c significance of the quantities in common /dchi2/:                     vari-084
c  chi2:      chi-square computed in subroutine resu.                   vari-085
c  chi2m:     minimum chi-square in the search.                         vari-086
c  yy(1):     step size in the search.                                  vari-087
c  yy(2):     half of the success multiplicative factor of the step.    vari-088
c  yy(3):     various meanings.  see fite.                              vari-089
c   used:     chi2,chi2m,yy.                                            vari-090
c                                                                       vari-091
c significance of the quantities in common /integ/:                     vari-092
c  nbet:      number of different deformations (vibrations+rotations).  vari-093
c  ncolr:     number of experimental angular distributions.             vari-094
c  nrec:      number of variables in search.                            vari-095
c  ntot:      number of experimental data.                              vari-096
c  ke:        control of search (see fite).                             vari-097
c   used:     nbet,ncolr,nrec,ntot,ke.                                  vari-098
c                                                                       vari-099
c significance of the quantities in common /ncomp/:                     vari-100
c  nfiss:     number of fission transmission coefficients.              vari-101
c  nrd:       number of gamma transmission coefficients.                vari-102
c  ncont:     number of continuum for compound nucleus.                 vari-103
c  ncons:     number of level densities needed.                         vari-104
c  az(i):     spin-orbit parametrisation for i-1 to 6,                  vari-105
c             hauser feshbach parameters for j=7 to 11,                 vari-106
c             giant dipole resonance for i=12 to 16.                    vari-107
c   defined:  az.                                                       vari-108
c   used:     nfiss,nrd,ncont,ncons,az.                                 vari-109
c                                                                       vari-110
c parameters in search are given by nw(2-mod(i,2),nise+i/2)=index(i)    vari-111
c starting at nw(1,nise) for i=1 to nrec:                               vari-112
c   positive value: parameter defined by index(i)                       vari-113
c   negative value -l: parameters defined by index(j) for j=l+1 to      vari-114
c     j=l+index(l) are defined as the same variable.                    vari-115
c      1-1000      optical model,folding parameters.                    vari-116
c   1001-2000      deformations for a given potential:  - lx(1)=.true.  vari-117
c   2001-3000      deformations for a given multipole:  - lx(1)=.true.  vari-118
c   3001-4000      individual deformation:              - lx(1)=.true.  vari-119
c   4001-5000      nuclear model parameter:             - lo(111)=.true.vari-120
c   5001-6000      nuclear matrix element:              - lx(2)=.true.  vari-121
c   6001-7000      spin-orbit and compound nucleus parametrisation:     vari-122
c    6001-6006     spin-orbit parametrisation:          - lx(3)=.true.  vari-123
c    6007-6011     bz1, bz2, bz3, bz4, bz5:     - lo(112)=lx(4)=.true.  vari-124
c    6012-6016     tgo, bn, fnug, egd, ggd:     - lo(112)=lx(5)=.true.  vari-125
c    6017-6...     see description of input.                            vari-126
c   for gamma      sa, ux, tau, sg, e0, ex:     - lo(112)=lx(6)=.true.  vari-127
c   for continuum  sa, ux, tau, sg, e0, ex:     - lo(114)=lx(7)=.true.  vari-128
c                  gamma transmission factors:          - lx(8)=.true.  vari-129
c                  fission transmission coefficient,                    vari-130
c                  degree of freedom:                  - lx(9)=.true.   vari-131
c   7001-8000      dispersion relations parametrisation:- lo(113)=.true.vari-132
c  10001-99999     external optical model (parameters above 1000)       vari-133
c it stops the calculation for an index of parameter out of range.      vari-134
c***********************************************************************vari-135
      implicit real*8 (a-h,o-z)                                         vari-136
      logical lo(150),lx(9)                                             vari-137
      dimension nw(2,*),dw(*),r0(8)                                     vari-138
      common /addre/ niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npvari-139
     1ot,nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,nxa,namvari-140
     21,nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,nvari-141
     3ty,nsm,ntx,nry,nrco,nrdo,nvc1,nvc2,nnc,ncx                        vari-142
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   vari-143
      common /dchi2/ chi2,chi2m,yy(3)                                   vari-144
      common /inout/ mr,mw,ms                                           vari-145
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncovari-146
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jtvari-147
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),vari-148
     3nct(6)                                                            vari-149
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqvari-150
     1,acn1,acn2,az(18)                                                 vari-151
c transfer between variables and parameters                             vari-152
      if (kf.eq.1.and.ke.ne.0) go to 36                                 vari-153
      do 1 i=111,114                                                    vari-154
    1 lo(i)=.false.                                                     vari-155
      do 2 i=1,9                                                        vari-156
    2 lx(i)=.false.                                                     vari-157
      do 35 i=1,nrec                                                    vari-158
      j=nw(2-mod(i,2),nise+(i-1)/2)                                     vari-159
      jj=iabs(j)                                                        vari-160
      if (j.ne.jj) go to 3                                              vari-161
      j1=i                                                              vari-162
      j2=i                                                              vari-163
      go to 4                                                           vari-164
    3 j1=jj+1                                                           vari-165
      j2=j1+nw(2-mod(jj,2),nise+(jj-1)/2)-1                             vari-166
    4 do 34 k=j1,j2                                                     vari-167
      j=nw(2-mod(k,2),nise+(k-1)/2)                                     vari-168
      if ((j.gt.1000).and.(j.le.10000)) go to 10                        vari-169
c optical model and folding parameters                                  vari-170
      if (j.gt.10000) j=j-9000                                          vari-171
      if (lo(7)) go to 5                                                vari-172
      nvat=42*npp                                                       vari-173
      if (j.gt.nvat) go to 67                                           vari-174
      if (mod(j,42).eq.25) go to 68                                     vari-175
      go to 8                                                           vari-176
c external optical parameters                                           vari-177
    5 if (j.ge.nw(2,npot+1)) go to 69                                   vari-178
      i1=nw(1,npot)-2                                                   vari-179
      do 6 l=1,i1                                                       vari-180
      if (j.ge.nw(1,npot+l).and.j.le.nw(2,npot+l)) go to 7              vari-181
    6 continue                                                          vari-182
      go to 70                                                          vari-183
    7 if (l.eq.1) go to 8                                               vari-184
c not a folding parameter.                                              vari-185
      m=nw(1,npot+l)                                                    vari-186
      n=nw(2,npot+m-2)                                                  vari-187
      iv=nw(2,npot+n-1)                                                 vari-188
      if (iv.ge.1.and.iv.le.6) go to 8                                  vari-189
      if ((iv.lt.0).and.(j-m.gt.1)) go to 71                            vari-190
      if ((iv.ne.7).and.(iv.ne.8)) go to 8                              vari-191
      jy=j                                                              vari-192
      if (nw(1,npot+nw(2,npot+m-2)).ne.1) jy=jy-1                       vari-193
      if (m.gt.jy) go to 72                                             vari-194
      if ((iv.eq.7).and.(mod(jy-m,3).ne.0)) go to 73                    vari-195
      if ((iv.eq.8).and.(mod(jy+10-m,11).lt.3)) go to 74                vari-196
    8 if (kf.ne.0) go to 9                                              vari-197
      if (k.eq.j1) rap=dw(nxx+i-1)/dw(npot+j-1)                         vari-198
      dw(npot+j-1)=rap*dw(npot+j-1)                                     vari-199
      go to 34                                                          vari-200
    9 dw(nxx+i-1)=dw(npot+j-1)                                          vari-201
      go to 35                                                          vari-202
   10 j=j-1000                                                          vari-203
      if (j.gt.1000) go to 15                                           vari-204
      if (j.gt.8) go to 75                                              vari-205
c  deformations for a given potential                                   vari-206
      lx(1)=.true.                                                      vari-207
      do 11 k1=1,nbet                                                   vari-208
      if (lo(1).and.lo(3).and.nw(2,nbeta+9*k1-1).ne.0) go to 11         vari-209
      if (dw(nbeta+9*k1+j-10).ne.0.d0) go to 12                         vari-210
   11 continue                                                          vari-211
      go to 76                                                          vari-212
   12 if (kf.eq.0) go to 13                                             vari-213
      dw(nxx+i-1)=dw(nbeta+9*k1+j-10)                                   vari-214
      go to 35                                                          vari-215
   13 if (k.eq.j1) rap=dw(nxx+i-1)/dw(nbeta+9*k1+j-10)                  vari-216
      do 14 l=k1,nbet                                                   vari-217
      if (lo(1).and.lo(3).and.nw(2,nbeta+9*k1-1).ne.0) go to 14         vari-218
      dw(nbeta+9*l+j-10)=dw(nbeta+9*l+j-10)*rap                         vari-219
   14 continue                                                          vari-220
      go to 34                                                          vari-221
   15 j=j-1000                                                          vari-222
      if (j.gt.1000) go to 20                                           vari-223
c deformations for a given multipole                                    vari-224
      if (j.gt.nbet) go to 77                                           vari-225
      lx(1)=.true.                                                      vari-226
      do 16 k1=1,8                                                      vari-227
      if (dw(nbeta+9*j+k1-10).ne.0.d0) go to 17                         vari-228
   16 continue                                                          vari-229
      go to 78                                                          vari-230
   17 if (kf.eq.0) go to 18                                             vari-231
      dw(nxx+i-1)=dw(nbeta+9*j+k1-10)                                   vari-232
      go to 35                                                          vari-233
   18 if (k.eq.j1) rap=dw(nxx+i-1)/dw(nbeta+9*j+k1-10)                  vari-234
      do 19 l=k1,8                                                      vari-235
   19 dw(nbeta+9*j+l-10)=dw(nbeta+9*j+l-10)*rap                         vari-236
      go to 34                                                          vari-237
   20 j=j-1000                                                          vari-238
      if (j.gt.1000) go to 21                                           vari-239
c individual deformations                                               vari-240
      nbt=10*nbet                                                       vari-241
      if (j.gt.nbt) go to 79                                            vari-242
      k1=1+(j-1)/10                                                     vari-243
      k2=1+mod(j-1,10)                                                  vari-244
      if (k2.gt.8) go to 80                                             vari-245
      lx(1)=.true.                                                      vari-246
      jk=nbeta+j-1-(j-10)/10                                            vari-247
      go to 32                                                          vari-248
   21 j=j-1000                                                          vari-249
      if (j.gt.1000) go to 22                                           vari-250
c  nuclear parameters                                                   vari-251
      if (j.gt.nva) go to 81                                            vari-252
      lo(111)=.true.                                                    vari-253
      jk=npaa+j-1                                                       vari-254
      go to 32                                                          vari-255
   22 j=j-1000                                                          vari-256
      if (j.gt.1000) go to 23                                           vari-257
c  nuclear matrix elements                                              vari-258
      nme=(nivq-nt)/3                                                   vari-259
      if (j.gt.nme) go to 82                                            vari-260
      lx(2)=.true.                                                      vari-261
      jk=nt+3*j-1                                                       vari-262
      go to 32                                                          vari-263
   23 j=j-1000                                                          vari-264
      if (j.gt.1000) go to 30                                           vari-265
c  spin-orbit and h. f. parametrisation                                 vari-266
      if ((.not.lo(81)).and.(j.gt.6)) go to 83                          vari-267
      if (j.gt.16) go to 27                                             vari-268
      if (j.le.6) go to 24                                              vari-269
      lx(4)=lx(4).or.(j.le.11)                                          vari-270
      lx(5)=lx(5).or.(j.gt.11)                                          vari-271
      if (lo(82).and.j.gt.9) go to 84                                   vari-272
      if ((.not.lo(86)).and.(j.gt.11)) go to 85                         vari-273
      if (lo(82)) go to 25                                              vari-274
      if ((j.ne.9).and.(j.le.11).and.lo(87)) go to 86                   vari-275
      if (lo(87)) go to 25                                              vari-276
      if (j.eq.7) go to 87                                              vari-277
      if ((az(8).ne.0.d0).and.(j.gt.8).and.(j.le.11)) go to 87          vari-278
      if ((az(8).eq.0.d0).and.(j.eq.8)) go to 87                        vari-279
      go to 25                                                          vari-280
   24 if (.not.lo(4)) go to 88                                          vari-281
      lx(3)=.true.                                                      vari-282
   25 if (kf.ne.0) go to 26                                             vari-283
      if (k.eq.j1) rap=dw(nxx+i-1)/az(j)                                vari-284
      az(j)=rap*az(j)                                                   vari-285
      go to 34                                                          vari-286
   26 dw(nxx+i-1)=az(j)                                                 vari-287
      go to 35                                                          vari-288
c level density parameters.                                             vari-289
   27 j3=j-16                                                           vari-290
      if (j3.gt.6*ncons) go to 28                                       vari-291
      if (j3.le.6*(ncons-ncont)) lx(6)=.true.                           vari-292
      if (j3.gt.6*(ncons-ncont)) lx(7)=.true.                           vari-293
      jk=nscn+j3-(j3-7)/6                                               vari-294
      go to 32                                                          vari-295
   28 j3=j3-7*ncons                                                     vari-296
      if (j3.gt.nrd) go to 29                                           vari-297
      lx(8)=.true.                                                      vari-298
      jk=ngam+j3-1                                                      vari-299
      go to 32                                                          vari-300
   29 j3=j3-nrd                                                         vari-301
      if (j3.gt.nfiss) go to 89                                         vari-302
      lx(9)=.true.                                                      vari-303
      jk=nfis+j-1                                                       vari-304
      go to 32                                                          vari-305
c dispersion parameters.                                                vari-306
   30 j=j-1000                                                          vari-307
      jn=(j-1)/13                                                       vari-308
      jj=j-13*jn                                                        vari-309
      if (jj.gt.npp-1) go to 90                                         vari-310
      if (nw(2,nipp+17*jn+2).ne.0) go to 91                             vari-311
      if ((jj.lt.6).or.(jj.ge.12)) go to 31                             vari-312
      if ((nw(1,nipp+17*jn+1).eq.0).and.(j.le.8)) go to 92              vari-313
      if ((nw(2,nipp+17*jn+1).eq.0).and.(j.gt.8)) go to 92              vari-314
   31 jk=nipp+2+jj+3*jn                                                 vari-315
      lo(113)=.true.                                                    vari-316
   32 if (kf.eq.0) go to 33                                             vari-317
      dw(nxx+i-1)=dw(jk)                                                vari-318
      go to 35                                                          vari-319
   33 if (k.eq.j1) rap=dw(nxx+i-1)/dw(jk)                               vari-320
      dw(jk)=rap*dw(jk)                                                 vari-321
   34 continue                                                          vari-322
   35 continue                                                          vari-323
      lo(112)=lx(4).or.lx(5).or.lx(6)                                   vari-324
      lo(114)=lx(7)                                                     vari-325
   36 if (kf.eq.0) go to 38                                             vari-326
      write (mw,1000) nw(1,niw+1),nw(2,niw),chi2,(yy(i),i=1,3)          vari-327
      write (mw,1001)                                                   vari-328
      do 37 i=1,ncolr                                                   vari-329
      if (dw(ntgx+7*i-1).ne.0.d0) write (mw,1002) i,(dw(ntgx+7*i+j-8),j=vari-330
     13,7)                                                              vari-331
   37 continue                                                          vari-332
      write (mw,1003) (i,dw(nxx+i-1),i=1,nrec)                          vari-333
      if (lo(78)) write (mw,1004) (i,dw(nres+i-1),i=1,ntot)             vari-334
      return                                                            vari-335
   38 if (ke.eq.1) return                                               vari-336
c printing of results.                                                  vari-337
      write (mw,1005) nw(1,niw+1),nw(2,niw),chi2,ke,yy(1)               vari-338
      if (ke*(ke-3).ne.0.or.dw(nrc).le.0.d0) go to 40                   vari-339
      write (mw,1006) nw(2,niw+1),yy(3),(dw(nrc+i-1),i=1,nrec)          vari-340
      write (mw,1007) (dw(nrc+nrec+i-1),i=1,nrec)                       vari-341
      write (mw,1008)                                                   vari-342
      l=2*nrec+nrc-1                                                    vari-343
      do 39 i=1,nrec                                                    vari-344
      k=l+1                                                             vari-345
      l=l+i                                                             vari-346
   39 write (mw,1009) (dw(j),j=k,l)                                     vari-347
      go to 41                                                          vari-348
   40 write (mw,1010)                                                   vari-349
   41 if (ke.eq.0) write (mw,1011)                                      vari-350
      if (ke.eq.2) write (mw,1012)                                      vari-351
      if (ke.eq.3) write (mw,1013)                                      vari-352
      if (ke.eq.4) write (mw,1014)                                      vari-353
      if (ke.eq.5) write (mw,1015) nw(2,niw+1)                          vari-354
      if (ke.eq.6) write (mw,1016) nw(1,niw+1),nw(2,niw+1)              vari-355
      if (ke.eq.7) write (mw,1017) ntot,nrec                            vari-356
c end of the search                                                     vari-357
      lo(116)=.false.                                                   vari-358
      lo(118)=.true.                                                    vari-359
      if (lo(76)) go to 43                                              vari-360
      do 42 i=51,65                                                     vari-361
   42 lo(i)=lo(i+85)                                                    vari-362
   43 lo(120)=.not.(lo(53).or.lo(55).or.lo(56).or.lo(57).or.lo(58).or.lovari-363
     1(60).or.lo(62).or.lo(64))                                         vari-364
      if (lo(41)) lo(120)=lo(120).and.(.not.lo(65))                     vari-365
      lo(119)=lo(120).and.(.not.(lo(51).or.lo(64).or.lo(65)))           vari-366
      lo(120)=chi2.eq.chi2m.and.lo(120)                                 vari-367
c output of final parameters                                            vari-368
      write (mw,1018) (lo(j),j=1,100)                                   vari-369
      if (lo(7)) go to 46                                               vari-370
      npo=npot-1                                                        vari-371
c output of usual potentials.                                           vari-372
      do 45 j=1,npp                                                     vari-373
      ij=iabs(nw(1,nipp+15*j-15))                                       vari-374
      am3=dw(nwv+18*ij-17)**.33333333333333d0                           vari-375
      if (lo(16)) am3=am3+dw(nwv+18*ij-18)**.33333333333333d0           vari-376
      write (mw,1019) j,am3                                             vari-377
      do 44 i=1,8                                                       vari-378
   44 r0(i)=dw(npo+4*i-2)/am3                                           vari-379
      write (mw,1020) (dw(npo+4*i-3),dw(npo+4*i-2),r0(i),dw(npo+4*i-1),dvari-380
     1w(npo+4*i),i=1,8),dw(npo+33)                                      vari-381
      if (lo(17)) write (mw,1021) (dw(npo+i),i=34,42)                   vari-382
   45 npo=npo+1                                                         vari-383
      go to 58                                                          vari-384
c output of external potentials.                                        vari-385
   46 nvma=nw(1,npot)                                                   vari-386
      write (mw,1022)                                                   vari-387
   47 if (nvma.ge.nw(1,npot+1)) go to 57                                vari-388
      i1=nw(1,nvma+npot-1)                                              vari-389
      iv=nw(2,nvma+npot-1)                                              vari-390
      if (iv.eq.16) go to 56                                            vari-391
      it1=mod(i1-1,8)+1                                                 vari-392
      j1=(i1-1)/8                                                       vari-393
      i2=nw(1,npot+i1-7)                                                vari-394
      i3=nw(2,npot+i1-7)                                                vari-395
      if (iv.ge.0) go to 48                                             vari-396
      write (mw,1023) it1,j1,i2,i3,dw(npot+i2-1),dw(npot+i2)            vari-397
      go to 56                                                          vari-398
   48 if (iv.lt.9) go to 49                                             vari-399
      write (mw,1024) it1,j1,iv,i2,i3,(dw(npot+i-1),i=i2,i3)            vari-400
      go to 56                                                          vari-401
   49 if (iv.gt.6) go to 55                                             vari-402
      write (mw,1025) it1,j1,iv,i2,i3,(dw(npot+i-1),i=i2,i3)            vari-403
      nst=nw(1,npot+nvma+1)                                             vari-404
      if (nst.gt.0) go to 52                                            vari-405
      k=iabs(nst)                                                       vari-406
      ex=dw(nwv+18*k-17)**.33333333333333d0                             vari-407
      ey=ex                                                             vari-408
      if (lo(16)) ex=ex+dw(nwv+18*k-18)**.33333333333333d0              vari-409
      ey=ey/ex                                                          vari-410
      ex=dw(npot+i2)/ex                                                 vari-411
      ez=dw(npot+i2-1)                                                  vari-412
      if ((.not.lo(16)).or.j1.le.npp) go to 51                          vari-413
      ityz=iv                                                           vari-414
      if (ityz.ge.5) ityz=ityz-4                                        vari-415
      ityw=1                                                            vari-416
      if (it1.le.6) go to 50                                            vari-417
      iti=7*(j1-npp)                                                    vari-418
      ityw=ityw*nw(2-mod(iti,2),nivy+(iti-1)/2)                         vari-419
   50 if (lo(6)) ityw=ityw-1                                            vari-420
      if (ityz.gt.1) ez=ez/ey**((ityz-1)*ityw)                          vari-421
   51 write (mw,1026) ez,ex                                             vari-422
   52 if ((iv.ne.5).and.(iv.ne.6)) go to 56                             vari-423
      write (mw,1027) i2,i3,(dw(npot+i-1),i=i2,i3)                      vari-424
      if (nst.gt.0) go to 56                                            vari-425
      write (mw,1028)                                                   vari-426
      nmb=0                                                             vari-427
   53 nma=i2                                                            vari-428
      i4=i2+7                                                           vari-429
      do 54 i=i2,i4                                                     vari-430
      nmb=nmb+1                                                         vari-431
      j=i-nma                                                           vari-432
      if (it1.lt.7) j=0                                                 vari-433
      if (.not.lo(6)) j=j+1                                             vari-434
   54 r0(nmb)=dw(npot+i-1)/ey**j                                        vari-435
      write (mw,1009) (r0(i),i=1,nmb)                                   vari-436
      i2=i2+8                                                           vari-437
      if (i2.le.i3) go to 53                                            vari-438
      go to 56                                                          vari-439
   55 write (mw,1025) it1,j1,iv,i2,i3,(dw(npot+i-1),i=i2,i3)            vari-440
   56 nvma=i3+1                                                         vari-441
      go to 47                                                          vari-442
   57 nvmb=nw(2,npot+1)                                                 vari-443
      if (nvma.lt.nvmb) write (mw,1029) (dw(npot+i-1),i=nvma,nvmb)      vari-444
   58 if (.not.lx(1)) go to 66                                          vari-445
c output of deformations.                                               vari-446
      write (mw,1030) (i,nw(1,nbeta+9*i-1),nw(2,nbeta+9*i-1),(dw(nbeta+9vari-447
     1*i+j-10),j=1,8),i=1,nbet)                                         vari-448
      if (.not.lo(16)) go to 66                                         vari-449
      dm=dw(nwv+1)**.33333333333333d0/(dw(nwv)**.33333333333333d0+dw(nwvvari-450
     1+1)**.33333333333333d0)                                           vari-451
      write (mw,1031)                                                   vari-452
      do 65 i=1,nbet                                                    vari-453
      k1=0                                                              vari-454
      k2=0                                                              vari-455
      if (lo(3)) go to 60                                               vari-456
   59 k1=1                                                              vari-457
      k2=nw(1,nbeta+9*i-1)                                              vari-458
      go to 62                                                          vari-459
   60 if (lo(1)) go to 61                                               vari-460
      k1=i-1                                                            vari-461
      k2=k1*nw(1,nbeta+9*i-1)                                           vari-462
      go to 62                                                          vari-463
   61 if (nw(2,nbeta+9*i-1).eq.0) go to 59                              vari-464
   62 if (.not.lo(6)) go to 63                                          vari-465
      k2=k2-k1                                                          vari-466
      k1=0                                                              vari-467
   63 do 64 j=1,6                                                       vari-468
   64 r0(j)=dw(nbeta+9*i+j-10)/dm**k1                                   vari-469
      r0(7)=dw(nbeta+9*i-3)/dm**k2                                      vari-470
      r0(8)=dw(nbeta+9*i-2)/dm**k2                                      vari-471
   65 write (mw,1032) i,nw(1,nbeta+9*i-1),nw(2,nbeta+9*i-1),r0          vari-472
c output of other parameters in search                                  vari-473
   66 if (lo(111)) write (mw,1033) (dw(npaa+j-1),i=1,nva)               vari-474
      if (lx(2)) write (mw,1034) (dw(i+2),i=nt,nivq,3)                  vari-475
      if (lx(3)) write (mw,1035) (az(i),i=1,6)                          vari-476
      if (lx(4)) write (mw,1036) (az(i),i=7,11)                         vari-477
      if (lx(5)) write (mw,1037) (az(i),i=12,16)                        vari-478
      if (lx(6)) write (mw,1038) (i,(dw(nscn+7*i+j-8),j=1,7),i=1,1)     vari-479
      if (lx(7)) write (mw,1038) (i,(dw(nscn+7*i+j-8),j=1,7),i=1+ncons-nvari-480
     1cont,ncons)                                                       vari-481
      if (lx(8)) write (mw,1039) (i,dw(ngam+i-1),i=1,nrd)               vari-482
      if (lx(9)) write (mw,1040) (i,(dw(nfis+2*i+j-3),j=1,2),i=1,nfiss) vari-483
      if (lo(113)) write (mw,1041) (i,(dw(nipp+15*i+j-16),j=4,16),i=1,npvari-484
     1p)                                                                vari-485
      return                                                            vari-486
   67 write (mw,1042) nvat                                              vari-487
      go to 93                                                          vari-488
   68 write (mw,1043)                                                   vari-489
      go to 93                                                          vari-490
   69 write (mw,1044) nw(2,npot+1)                                      vari-491
      go to 93                                                          vari-492
   70 write (mw,1045) i,j,(nw(1,npot+l),nw(2,npot+l),l=1,i1)            vari-493
      go to 93                                                          vari-494
   71 write (mw,1046)                                                   vari-495
      go to 93                                                          vari-496
   72 write (mw,1047)                                                   vari-497
      go to 93                                                          vari-498
   73 write (mw,1048)                                                   vari-499
      go to 93                                                          vari-500
   74 write (mw,1049)                                                   vari-501
      go to 93                                                          vari-502
   75 write (mw,1050)                                                   vari-503
      go to 93                                                          vari-504
   76 write (mw,1051) i,nw(2-mod(k,2),nise+(k-1)/2),j                   vari-505
      go to 93                                                          vari-506
   77 write (mw,1052) nbet                                              vari-507
      go to 93                                                          vari-508
   78 write (mw,1053) i,nw(2-mod(k,2),nise+(k-1)/2),j                   vari-509
      go to 93                                                          vari-510
   79 write (mw,1054) nbt                                               vari-511
      go to 93                                                          vari-512
   80 write (mw,1055)                                                   vari-513
      go to 93                                                          vari-514
   81 write (mw,1056) nva                                               vari-515
      go to 93                                                          vari-516
   82 write (mw,1057) nme                                               vari-517
      go to 93                                                          vari-518
   83 write (mw,1058)                                                   vari-519
      go to 93                                                          vari-520
   84 write (mw,1059)                                                   vari-521
      go to 93                                                          vari-522
   85 write (mw,1060)                                                   vari-523
      go to 93                                                          vari-524
   86 write (mw,1061)                                                   vari-525
      go to 93                                                          vari-526
   87 write (mw,1062)                                                   vari-527
      go to 93                                                          vari-528
   88 write (mw,1063)                                                   vari-529
      go to 93                                                          vari-530
   89 write (mw,1064)                                                   vari-531
      go to 93                                                          vari-532
   90 write (mw,1065) npp                                               vari-533
      go to 93                                                          vari-534
   91 write (mw,1066)                                                   vari-535
      go to 93                                                          vari-536
   92 write (mw,1067)                                                   vari-537
   93 write (mw,1068) i,nw(2-mod(k,2),nise+(k-1)/2),j                   vari-538
      stop                                                              vari-539
 1000 format (/' run',i4,'   max =',i4,'   ***** chi2 =',d18.10,' *****'vari-540
     1,5x,'w(1) =',f10.2,5x,'w(2) =',f5.2,5x,'w(3) =',f10.5)            vari-541
 1001 format (/21x,'weight',12x,'exp. norm.',10x,'err. norm.',10x,'calc.vari-542
     1 norm.',12x,'chi2')                                               vari-543
 1002 format (5x,i5,1p,5d20.6)                                          vari-544
 1003 format (/' *** variables'//(6(1x,i3,1p,d16.6)))                   vari-545
 1004 format (/' *** functions'//(6(1x,i3,1p,d16.6)))                   vari-546
 1005 format (/' run',i4,'   max =',i4,'   ***** chi2 =',d18.10,' *****'vari-547
     1,5x,'ke =',i2,5x,'w(1) =',f12.4)                                  vari-548
 1006 format (//' standard errors (variance at best fit equal to degree vari-549
     1of freedom:',i6,'.renormalisation factor',d15.6,' )'/(1p,8d15.6)) vari-550
 1007 format (/' error enhancements (multi/single variable error)'/(1p,8vari-551
     1d15.6))                                                           vari-552
 1008 format (/' error correlation matrix:')                            vari-553
 1009 format (1p,8d15.6)                                                vari-554
 1010 format (//' no information on errors.')                           vari-555
 1011 format (//' search ended without errors.')                        vari-556
 1012 format (//' search interrupted by user.')                         vari-557
 1013 format (//' search ended by number of evaluations.')              vari-558
 1014 format (//' search ended for rounding errors.')                   vari-559
 1015 format (//' search ended because the functions do not depend on thvari-560
     1e variable',i6)                                                   vari-561
 1016 format (//' search ended because variables',2i6,' are useless in pvari-562
     1reparatory calls.')                                               vari-563
 1017 format (//' search ended because the number of parameters',i4,' isvari-564
     1 larger than the number of data',i4)                              vari-565
 1018 format ('1'/' ******* final results *******'//' **** first controlvari-566
     1 card ****',2x,'1 ',9(' 1'),' 2 ',9(' 2'),' 3 ',9(' 3'),' 4 ',9(' vari-567
     24'),' 5'/11x,5('  1 2 3 4 5 6 7 8 9 0')/11x,5(1x,10l2)//' *** secovari-568
     3nd control card ****',2x,'1 ',9(' 1'),' 2 ',9(' 2'),' 3 ',9(' 3'),vari-569
     4' 4 ',9(' 4'),' 5'/11x,5('  1 2 3 4 5 6 7 8 9 0')/11x,5(1x,10l2)/)vari-570
 1019 format (/' optical potentials  **',i3,' **     reduced radius multvari-571
     1iplied by  ',d15.6/)                                              vari-572
 1020 format (' volume/scalar real potential'/' depth',f12.6,' mev   radvari-573
     1ius',f10.6,' fermi (reduced value',f9.6,')   diffuseness',f9.6,' fvari-574
     2ermi at the power (1+',f9.6,')'/' volume/scalar imaginary potentiavari-575
     3l'/' depth',f12.6,' mev   radius',f10.6,' fermi (reduced value',f9vari-576
     4.6,')   diffuseness',f9.6,' fermi at the power (1+',f9.6,')'/' survari-577
     5face/vector real potential'/' depth',f12.6,' mev   radius',f10.6,'vari-578
     6 fermi (reduced value',f9.6,')   diffuseness',f9.6,' fermi at the vari-579
     7power (1+',f9.6,')'/' surface/vector imaginary potential'/' depth'vari-580
     8,f12.6,' mev   radius',f10.6,' fermi (reduced value',f9.6,')   difvari-581
     9fuseness',f9.6,' fermi at the power (1+',f9.6,')'/' real spin-orbivari-582
     at/tensor potential'/' depth',f12.6,' mev   radius',f10.6,' fermi (vari-583
     breduced value',f9.6,')   diffuseness',f9.6,' fermi at the power (1vari-584
     c+',f9.6,')'/' imaginary spin-orbit/tensor potential'/' depth',f12.vari-585
     d6,' mev   radius',f10.6,' fermi (reduced value',f9.6,')   diffusenvari-586
     eess',f9.6,' fermi at the power (1+',f9.6,')'/' coulomb potential'/vari-587
     f'  charge product',f7.0,'  radius',f10.6,' fermi (reduced value',fvari-588
     g9.6,')   diffuseness',f9.6,' fermi at the power (1+',f9.6,')'/' spvari-589
     hin-orbit coulomb potential'/' depth',f12.6,' mev   radius',f10.6,'vari-590
     i fermi (reduced value',f9.6,')   diffuseness',f9.6,' fermi at the vari-591
     jpower (1+',f9.6,')'/14x,'third charge parameter',f9.6)            vari-592
 1021 format (/' *** folding model ***'/' real part',10x,'v =',f10.4,6x,vari-593
     1'r =',f10.4,6x,'a =',f10.4/' imaginary part',6x,'v =', f10.4,6x,'rvari-594
     2 =',f10.4,6x,'a =',f10.4/' coulomb part',7x,'v =',f10.4,6x,'r =',fvari-595
     310.4,6x,'a =',f10.4)                                              vari-596
 1022 format (/' **** external potential parameters ****'/)             vari-597
 1023 format (' (',i1,',',i2,') given by points with the parameters fromvari-598
     1',i4,' to',i4/' strength =',1p,d15.6,19x,'scale =',d15.6)         vari-599
 1024 format (' (',i1,',',i2,') type',i3,' from',i4,' to',i4/1p,2d15.6/(vari-600
     11p,8d15.6))                                                       vari-601
 1025 format (' (',i1,',',i2,') type',i3,' from',i4,' to',i4,4x,6d14.6/(vari-602
     17x,8d14.6))                                                       vari-603
 1026 format (' values read:',f12.6,3x,f9.6)                            vari-604
 1027 format (' deformations: parameters from',i4,' to ',i4,10x,4d18.6/(vari-605
     152x,4d18.6))                                                      vari-606
 1028 format (' deformations read:')                                    vari-607
 1029 format (' folding parameters:',3f10.5/(20x,3f10.5))               vari-608
 1030 format (/' beta(i,j) for  l   k',9x,'v',9x,'w',8x,'vs',8x,'ws',7x,vari-609
     1'vso',7x,'wso',6x,'coul s.o. coul'/(5x,i5,5x,i2,2x,i2,2x,8f10.5)) vari-610
 1031 format (/10x,'without heavy ion correction:'/)                    vari-611
 1032 format (5x,i5,5x,i2,2x,i2,2x,8f10.5)                              vari-612
 1033 format (/' *** nuclear variables ***'//(1x,6f20.6))               vari-613
 1034 format (/' *** nuclear matrix elements ***'//(1x,6f20.6))         vari-614
 1035 format (/' *** spin-orbit parametrisation ***'//1x,6f20.6/)       vari-615
 1036 format (/' *** hauser-feshbach corrections ***'//1x,5f20.6/)      vari-616
 1037 format (/' *** giant dipole resonance param. ***'//1x,5f20.6/)    vari-617
 1038 format (/' *** density of states ***'//(1x,i3,'  sa:',d13.6,6x,'uxvari-618
     1:',d13.6,5x,'tau:',d13.6,6x,'sg:',d13.6/28x,'e0:',d13.6,6x,'ex:',dvari-619
     213.6,7x,'z:',f5.0))                                               vari-620
 1039 format (/' *** gamma transmission coefficients ***'//(1x,4(i5,f20.vari-621
     16)))                                                              vari-622
 1040 format (/' *** fission data ***'//(1x,2(i5,2f20.6)))              vari-623
 1041 format (/' *** dispersion relation parameters ***'//(' potential',vari-624
     1i5/1x,6f20.6/1x,6f20.6/1x,f20.6))                                 vari-625
 1042 format (' no optical parameter index larger than',i3)             vari-626
 1043 format (' no change of coulomb charges.')                         vari-627
 1044 format (' no external optical parameter larger than',i5)          vari-628
 1045 format (' variable',i3,' defined by',i5,' cannot be used.'/' the pvari-629
     1arameter which can be searched are between:'/(4(5x,i6,' to',i6))) vari-630
 1046 format (' for a form factor given by points, the two multiplicativvari-631
     1e factor only can be changed.')                                   vari-632
 1047 format (' the coupling of two particle states cannot be changed.')vari-633
 1048 format (' only the oscillator parameter can be changed for a laguevari-634
     1rre polynomial.')                                                 vari-635
 1049 format (' masses and product of charges cannot be changed for a sivari-636
     1ngle particle state.')                                            vari-637
 1050 format (' no index for deformation of a given potential larger thavari-638
     1n 8.')                                                            vari-639
 1051 format (' the variable',i3,' cannot be used because ',i5,'  is a vvari-640
     1ariation of the deformations of potential',i3,' which are zero.') vari-641
 1052 format (' no index for multipole larger than',i3)                 vari-642
 1053 format (' the variable',i3,' cannot be used because ',i5,'  is a vvari-643
     1ariation for a given multipole',i3,' and they are zero.')         vari-644
 1054 format (' no index for individual multipole larger than',i3)      vari-645
 1055 format (' no index for individual multipole equal to 0 or 9 modulovari-646
     1 10.')                                                            vari-647
 1056 format (' no index for nuclear parameter larger than',i3)         vari-648
 1057 format (' no index for nuclear matrix element larger than',i3)    vari-649
 1058 format (' no hauser-feshbach corrections.')                       vari-650
 1059 format (' parameter not used for simplified compound nucleus.')   vari-651
 1060 format (' no gamma emission in compound nucleus.')                vari-652
 1061 format (' no width fluctuation in compound nucleus.')             vari-653
 1062 format (' parameter not used in this kind of compound nucleus.')  vari-654
 1063 format (' no parametrisation of soin-orbit deformation.')         vari-655
 1064 format (' this level density parameter is not used.')             vari-656
 1065 format (' there are only',i3,' sets of dispersion parameters.')   vari-657
 1066 format (' the coefficients of this dispersion relation should be rvari-658
     1ead each time and cannot be in search.')                          vari-659
 1067 format (' this coefficient of dispersion relation is not used.')  vari-660
 1068 format (' variable',i3,' defined by',i5,i4,' cannot be used.'///' vari-661
     1in vari  ...  stop  ...')                                         vari-662
      end                                                               vari-663
c 02/06/07                                                      ecis06  eval-000
      subroutine eval(nw,dw,cm,lo)                                      eval-001
c this subroutine changes some parameters to do a new calculation.      eval-002
c the values read here are absolute changes ( nex=0 ),                  eval-003
c relative changes ( nex>0 ) or percentages ( nex<0 ).                  eval-004
c if the laboratory energy is changed, coulomb functions and reduced    eval-005
c nuclear matrix elements are recalculated even if they are not modifiedeval-006
c if nuclear parameters are changed, reduced nuclear matrix elements areeval-007
c calculated again. in all the others cases, the computation restarts   eval-008
c with the computation of potentials.                                   eval-009
c indexes for parameters are the ones used in search (see vari).        eval-010
c however 0 means energy in the laboratory system.                      eval-011
c input:     nw:      working area for integers.                        eval-012
c            dw:      working area for double precision in equivalence  eval-013
c                     by call with nw.                                  eval-014
c            cm:      nuclear mass.                                     eval-015
c            lo:      logical controls:                                 eval-016
c               lo(1)  =.true. rotational model-(.f.:vibrational model).eval-017
c               lo(3)  =.true. anharmonic vibrational or asymmetric     eval-018
c                              rotational model.                        eval-019
c               lo(4)  =.true. parametrised spin-orbit deformation.     eval-020
c               lo(6)  =.true. use deformation lengths.                 eval-021
c               lo(7)  =.true. matrix element and form factors read.    eval-022
c               lo(8)  =.true. relativistic kinematics.                 eval-023
c               lo(16) =.true. heavy-ion definition of reduced radii andeval-024
c                              deformations.                            eval-025
c               lo(32) =.true. automatic search on some parameters.     eval-026
c               lo(34) =.true. next calculation changing energy and/or  eval-027
c                              some parameters.                         eval-028
c               lo(75) =.true. no complete output at the first run of a eval-029
c                              search.                                  eval-030
c               lo(76) =.true. lo(51) to lo(65) are always used.        eval-031
c               lo(81) =.true. hauser-feshbach corrections.             eval-032
c               lo(82) =.true. old simplified compound nucleus.         eval-033
c               lo(86) =.true. gamma emission in compound nucleus.      eval-034
c               lo(87) =.true. no width fluctuations.                   eval-035
c               lo(111)=.true. nuclear parameters are changed in search.eval-036
c               lo(112)=.true. spin-orbit or compound nucleus parameterseval-037
c                              are changed in search.                   eval-038
c               lo(113)=.true. dispersion relation is changed in search.eval-039
c               lo(114)=.true. compound nucleus continuum is changed in eval-040
c                              search.                                  eval-041
c               lo(115)=.true. first computation for this energy.       eval-042
c               lo(116)=.true. no output.                               eval-043
c                                                                       eval-044
c for the commons /addre/, /integ/ and /titre/ see calc.                eval-045
c for the commons /coupl/, /dchi2/, and /ncomp/ see calx.               eval-046
c                                                                       eval-047
c significance of the quantities in common /addre/:                     eval-048
c  nwv:       non integer values for the channels.                      eval-049
c  nipp:      dispersion parameters.                                    eval-050
c  nscn:      level density description.                                eval-051
c  npot:      optical potential parameters.                             eval-052
c  nbeta:     deformation parameters.                                   eval-053
c  niw:       integer working field for the search.                     eval-054
c  nt:        table of reduced nuclear matrix elements.                 eval-055
c  nivq:      table of multipoles.                                      eval-056
c  nivy:      table of form factor identification ivy (for computation).eval-057
c  ncx:       first free address for computation of potentials.         eval-058
c             here, first free address for input.                       eval-059
c   used:     nwv,nipp,nscn,npot,nbeta,niw,nt,nivq,nivy,ncx.            eval-060
c                                                                       eval-061
c significance of the quantities in common /coupl/:                     eval-062
c  npp:       number of optical potentials.                             eval-063
c  nva:       number of nuclear parameters.                             eval-064
c   used:     npp,nva.                                                  eval-065
c                                                                       eval-066
c significance of the quantities in common /dchi2/:                     eval-067
c  chi2m:     minimum chi-square in the search.                         eval-068
c  yy(1):     step size in the search.                                  eval-069
c  yy(3):     various meanings.  see fite.                              eval-070
c   defined:  chi2m,yy.                                                 eval-071
c                                                                       eval-072
c significance of the quantities in common /integ/:                     eval-073
c  idmt:      total working field length as single precision.           eval-074
c  nbet:      number of different deformations (vibrations+rotations).  eval-075
c   used:     idmt,nbet.                                                eval-076
c                                                                       eval-077
c significance of the quantities in common /ncomp/:                     eval-078
c  nfiss:     number of fission transmission coefficients.              eval-079
c  nrd:       number of gamma transmission coefficients.                eval-080
c  ncont:     number of continuum for compound nucleus.                 eval-081
c  ncons:     number of level densities needed.                         eval-082
c  ncolx:     total number of levels without discretisation.            eval-083
c  az(i):     spin-orbit parametrisation for i-1 to 6,                  eval-084
c             hauser feshbach parameters for j=7 to 11,                 eval-085
c             giant dipole resonance for i=12 to 16.                    eval-086
c   defined:  az.                                                       eval-087
c   used:     nfiss,nrd,ncont,ncons,ncolx,az.                           eval-088
c                                                                       eval-089
c significance of the quantities in common /titre/:                     eval-090
c  title(18): title of the run printed as heading of results.           eval-091
c   defined:  title.                                                    eval-092
c                                                                       eval-093
c meaning of index and logical returned:                                eval-094
c      1-1000      optical model,folding parameters.                    eval-095
c   1001-2000      deformations for a given potential.                  eval-096
c   2001-3000      deformations for a given multipole.                  eval-097
c   3001-4000      individual deformation.                              eval-098
c   4001-5000      nuclear model parameter.             - lo(111)=.true.eval-099
c   5001-6000      nuclear matrix element.                              eval-100
c   6001-7000      spin-orbit and compound nucleus parametrisation.     eval-101
c                  spin-orbit parametrisation:                          eval-102
c                  bz1, bz2, bz3, bz4, bz5              - lo(112)=.true.eval-103
c                  tgo, bn, fnug, egd, ggd              - lo(112)=.true.eval-104
c                  sa, ux, tau, sg, e0, ex for gamma    - lo(112)=.true.eval-105
c                  sa, ux, tau, sg, e0, ex for continuum- lo(114)=.true.eval-106
c                  gamma transmission factors                           eval-107
c                  fission transmission coefficient, degree of freedom  eval-108
c   7001-8000      dispersion relations parametrisation - lo(113)=.true.eval-109
c  10001-99999     external optical model (parameters above 1000)       eval-110
c it stops the calculation for an index of parameter out of range       eval-111
c                                                                       eval-112
c***********************************************************************eval-113
      implicit real*8 (a-h,o-z)                                         eval-114
      logical lo(150),lx                                                eval-115
      dimension nw(2,*),dw(*)                                           eval-116
      character*4 aa(2),title                                           eval-117
      character*8 bb(2,2)                                               eval-118
      common /addre/ niph,njit,nwv,nipp,npar,npaa,nscn,nfis,ngam,nniv,npeval-119
     1ot,nbeta,nfm,ntgx,ndonn,nnvi,nde,nise,nrc,niw,nnwi,ncc,mcc,nxa,nameval-120
     21,nfac,nfg,nxg,nres,nxx,nt,nivq,nivy,nivz,ncoi,mipi,nxd,mwv,nixt,neval-121
     3ty,nsm,ntx,nry,nrco,nrdo,nvc1,nvc2,nnc,ncx                        eval-122
      common /coupl/ iqm,iqmax,nbt1,nfa,npp,nspin,nva                   eval-123
      common /dchi2/ chi2,chi2m,yy(3)                                   eval-124
      common /inout/ mr,mw,ms                                           eval-125
      common /integ/ idmt,nplace,ncoll,njmax,iterm,jdm,jit,kmin,kmax,ncoeval-126
     1ls,ncolt,nbet,lmx,lmax1,nlt,ism,njc,jtx,kcc,ms1,ms2,kba,kab,kbc,jteval-127
     2h,ncolr,nrec,ntot,lmax2,ke,itemm,kxt,lmax3,nrz,ntz,ipm,ipk,mcm(2),eval-128
     3nct(6)                                                            eval-129
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,ncons,nie,ncolx,ndp,ndqeval-130
     1,acn1,acn2,az(18)                                                 eval-131
      common /titre/ title(18)                                          eval-132
      data aa /' new','last'/                                           eval-133
      data bb /'increase','s )     ','new valu','es )    '/             eval-134
      nvat=42*npp                                                       eval-135
      lo(34)=.false.                                                    eval-136
      lx=.false.                                                        eval-137
      read (mr,1000) lo(34),lx,nin,nex,yy(1)                            eval-138
      if (lx) read (mr,1001) title                                      eval-139
      nx=min0(1,max0(nex,-1))+2                                         eval-140
      i1=1                                                              eval-141
      i2=1                                                              eval-142
      if (.not.lo(34)) i1=2                                             eval-143
      if (nx.eq.2) i2=2                                                 eval-144
      write (mw,1002) aa(i1),nin,bb(1,i2),bb(2,i2)                      eval-145
      if (nx.eq.1) write (mw,1003)                                      eval-146
      do 1 i=111,120                                                    eval-147
    1 lo(i)=.false.                                                     eval-148
      if (ncx+2*nin.gt.idmt) call memo('eval',idmt,ncx+2*nin)           eval-149
      read (mr,1004) (nw(1,2*i+ncx-2),i=1,nin)                          eval-150
      read (mr,1005) (dw(2*i+ncx-1),i=1,nin)                            eval-151
      do 50 i=1,nin                                                     eval-152
      nw(1,2*i+ncx-2)=max0(0,nw(1,2*i+ncx-2))                           eval-153
      j=mod(nw(1,2*i+ncx-2),1000)                                       eval-154
      ik=(nw(1,2*i+ncx-2)+999)/1000                                     eval-155
      ey=dw(2*i+ncx-1)                                                  eval-156
      if (ik.ne.0) go to 7                                              eval-157
c energy in the laboratory system.                                      eval-158
      lo(115)=.true.                                                    eval-159
      dw(nwv+12)=ey                                                     eval-160
      ex=dw(nwv+2)                                                      eval-161
      if (nx.eq.1) ey=.01d0*ey*ex                                       eval-162
      if (nx.ne.2) ey=ex+ey                                             eval-163
      if (lo(8)) go to 2                                                eval-164
      dw(nwv+2)=ey*dw(nwv+1)/(dw(nwv)+dw(nwv+1))                        eval-165
      go to 3                                                           eval-166
c relativistic c.-m. energy ecm=sqrt((m1+m2)**2+2*m2*elab))-m1-m2.      eval-167
    2 dw(nwv+2)=cm*(dsqrt((dw(nwv)+dw(nwv+1))**2+2.d0*dw(nwv+1)*ey/cm)-deval-168
     1w(nwv)-dw(nwv+1))                                                 eval-169
    3 write (mw,1006) i,j,ey,dw(2*i+ncx-1),dw(nwv+2),ex                 eval-170
      if (ncolx.eq.1) go to 50                                          eval-171
      do 5 j=2,ncolx                                                    eval-172
      dw(nwv+22*j-20)=dw(nwv+22*j-20)+dw(nwv+2)-ex                      eval-173
      if (lo(8)) go to 4                                                eval-174
      dw(nwv+22*j-10)=dw(nwv+22*j-20)*(dw(nwv+22*j-22)+dw(nwv+22*j-21))/eval-175
     1dw(nwv+22*j-21)                                                   eval-176
      go to 5                                                           eval-177
    4 dw(nwv+22*j-10)=dw(nwv+22*j-20)*(dw(nwv+22*j-20)/(2.d0*cm)+dw(nwv+eval-178
     122*j-22)+dw(nwv+22*j-21))/dw(nwv+22*j-21)                         eval-179
    5 continue                                                          eval-180
      go to 50                                                          eval-181
    6 if (nex.lt.0) ey=.01d0*ey*ex                                      eval-182
      ey=ex+ey                                                          eval-183
      go to ( 18 , 23 , 29 , 34 , 36 , 38 , 40 , 49 ),ik                eval-184
    7 if (ik.gt.10) go to 8                                             eval-185
      if (ik.gt.8) go to 52                                             eval-186
      go to ( 9 , 19 , 25 , 31 , 35 , 37 , 39 , 48 ),ik                 eval-187
    8 ik=1                                                              eval-188
      j=nw(1,2*i+ncx-2)-9000                                            eval-189
    9 if (lo(7)) go to 11                                               eval-190
c optical model and folding parameters.                                 eval-191
      n=1+mod(j-1,42)                                                   eval-192
      m=1+(j-1)/42                                                      eval-193
      k=iabs(nw(1,nipp+17*m-17))                                        eval-194
      if (j.gt.nvat.or.n.eq.25) go to 53                                eval-195
      if (mod(n,4).ne.2.or.n.gt.32) go to 10                            eval-196
      ex=dw(nwv+22*k-21)**.33333333333333d0                             eval-197
      if (lo(16)) ex=ex+dw(nwv+22*k-22)**.33333333333333d0              eval-198
      ey=ey*ex                                                          eval-199
   10 ex=dw(npot+j-1)                                                   eval-200
      if (nx.ne.2) go to 6                                              eval-201
      go to 18                                                          eval-202
c external optical parameters.                                          eval-203
   11 if (j.ge.nw(2,npot+1)) go to 54                                   eval-204
      i1=nw(1,npot)-2                                                   eval-205
      do 12 l=1,i1                                                      eval-206
      if (j.ge.nw(1,npot+l).and.j.le.nw(2,npot+l)) go to 13             eval-207
   12 continue                                                          eval-208
      go to 55                                                          eval-209
   13 ex=dw(npot+j-1)                                                   eval-210
      if (l.eq.1) go to 17                                              eval-211
c not a folding parameter.                                              eval-212
      m=nw(1,npot+l)                                                    eval-213
      n=nw(2,npot+m-2)                                                  eval-214
      iv=nw(2,npot+n-1)                                                 eval-215
      if (iv.lt.1.or.iv.gt.6) go to 16                                  eval-216
      nst=nw(1,npot+n+1)                                                eval-217
      if (nst.gt.0) go to 18                                            eval-218
      it1=mod(nw(1,npot+n-1)-1,8)+1                                     eval-219
      j1=(nw(1,npot+n-1)-1)/8                                           eval-220
      j2=4                                                              eval-221
      if (it1.gt.6) j2=5                                                eval-222
      if (j-m.gt.1.and.j-m.lt.j2) go to 17                              eval-223
      k=iabs(nst)                                                       eval-224
      fx=dw(nwv+22*k-21)**.33333333333333d0                             eval-225
      fy=fx                                                             eval-226
      if (lo(16)) fx=fx+dw(nwv+22*k-22)**.33333333333333d0              eval-227
c transformation of depth and radius.                                   eval-228
      if (j-m.eq.1) ey=ey*fx                                            eval-229
      fy=fy/fx                                                          eval-230
      if (j.gt.m+2) go to 15                                            eval-231
      if ((.not.lo(16)).or.j1.le.npp.or.j.ne.m) go to 17                eval-232
      ityz=iv                                                           eval-233
      if (ityz.ge.5) ityz=ityz-4                                        eval-234
      ityw=1                                                            eval-235
      if (it1.le.6) go to 14                                            eval-236
      iti=7*(j1-npp)                                                    eval-237
      ityw=ityw*nw(2-mod(iti,2),nivy+(iti-1)/2)                         eval-238
   14 if (lo(6)) ityw=ityw-1                                            eval-239
      if (ityz.gt.1) ey=ey*fy**((ityz-1)*ityw)                          eval-240
      go to 17                                                          eval-241
c transformation of deformations.                                       eval-242
   15 j3=j-m-j2                                                         eval-243
      if (it1.lt.7) j3=0                                                eval-244
      if (.not.lo(6)) j3=j3+1                                           eval-245
      ey=ey*fy**j3                                                      eval-246
      go to 17                                                          eval-247
   16 if ((iv.lt.0).and.(j-m.gt.1)) go to 56                            eval-248
      if ((iv.ne.7).and.(iv.ne.8)) go to 17                             eval-249
      jy=j                                                              eval-250
      if (nw(1,npot+nw(2,npot+m-2)).ne.1) jy=jy-1                       eval-251
      if (m.gt.jy) go to 57                                             eval-252
      if ((iv.eq.7).and.(mod(jy-m,3).ne.0)) go to 58                    eval-253
      if ((iv.eq.8).and.(mod(jy+10-m,11).lt.3)) go to 59                eval-254
   17 if (nx.ne.2) go to 6                                              eval-255
   18 if (.not.lo(7)) write (mw,1007) i,j,n,m,ey,dw(2*i+ncx-1),dw(npot+jeval-256
     1-1)                                                               eval-257
      if (lo(7)) write (mw,1008) i,j,ey,dw(2*i+ncx-1),dw(npot+j-1)      eval-258
      dw(npot+j-1)=ey                                                   eval-259
      go to 50                                                          eval-260
   19 if (j.gt.8) go to 60                                              eval-261
c deformations for a given potential.                                   eval-262
      k2=j                                                              eval-263
      do 20 k1=1,nbet                                                   eval-264
      if (lo(1).and.lo(3).and.nw(2,nbeta+9*k1-1).ne.0) go to 20         eval-265
      if (dw(nbeta+k2+9*k1-10).ne.0.d0) go to 21                        eval-266
   20 continue                                                          eval-267
      go to 61                                                          eval-268
   21 ey=ey/dw(nbeta+k2+9*k1-10)                                        eval-269
      k3=1                                                              eval-270
      if ((nx.ne.1).and.lo(16)) go to 32                                eval-271
   22 ex=1                                                              eval-272
      if (nx.ne.2) go to 6                                              eval-273
   23 write (mw,1009) i,nw(1,2*i+ncx-2),k2,k1,ey,dw(2*i+ncx-1)          eval-274
      do 24 l=k1,nbet                                                   eval-275
      if (lo(1).and.lo(3).and.nw(2,nbeta+9*k1-1).ne.0) go to 24         eval-276
      ex=dw(nbeta+k2+9*l-10)*ey                                         eval-277
      write (mw,1010) k2,l,ex,dw(nbeta+k2+9*l-10)                       eval-278
      dw(nbeta+k2+9*l-10)=ex                                            eval-279
   24 continue                                                          eval-280
      go to 50                                                          eval-281
c deformations for a given multipole.                                   eval-282
   25 k1=j                                                              eval-283
      if (j.gt.nbet) go to 62                                           eval-284
      do 26 k2=1,8                                                      eval-285
      if (dw(nbeta+k2+9*k1-10).ne.0.d0) go to 27                        eval-286
   26 continue                                                          eval-287
      go to 63                                                          eval-288
   27 ey=ey/dw(nbeta+k2+9*k1-10)                                        eval-289
      k3=2                                                              eval-290
      if ((nx.ne.1).and.lo(16)) go to 22                                eval-291
   28 ex=1                                                              eval-292
      if (nx.ne.2) go to 6                                              eval-293
   29 write (mw,1009) i,nw(1,2*i+ncx-2),k2,k1,ey,dw(2*i+ncx-1)          eval-294
      do 30 l=k2,8                                                      eval-295
      ex=dw(nbeta+l+9*k1-10)*ey                                         eval-296
      write (mw,1010) l,k1,ex,dw(nbeta+l+9*k1-10)                       eval-297
   30 dw(nbeta+l+9*k1-10)=ex                                            eval-298
      go to 50                                                          eval-299
c individual deformations.                                              eval-300
   31 nbt=10*nbet                                                       eval-301
      if (j.gt.nbt) go to 64                                            eval-302
      k1=1+(j-1)/10                                                     eval-303
      k2=1+mod(j-1,10)                                                  eval-304
      if (k2.gt.8) go to 65                                             eval-305
      k3=3                                                              eval-306
      if (.not.lo(16)) go to 33                                         eval-307
c search of the corrections for heavy ions.                             eval-308
   32 ex=dw(nwv+1)**.33333333333333d0/(dw(nwv+1)**.33333333333333d0+dw(neval-309
     1wv)**.33333333333333d0)                                           eval-310
      jk=1                                                              eval-311
      if (.not.lo(1).and.lo(3)) jk=k1-1                                 eval-312
      k=jk                                                              eval-313
      if (k2.gt.6) k=k*nw(1,nbeta+9*k1-1)                               eval-314
      if (lo(6)) k=k-jk                                                 eval-315
      ey=ey*ex**k                                                       eval-316
      if (k3-2) 22 , 28 , 33                                            eval-317
   33 ex=dw(nbeta+k2+9*k1-10)                                           eval-318
      if (nx.ne.2) go to 6                                              eval-319
   34 write (mw,1011) i,nw(1,2*i+ncx-2),k2,k1,ey,dw(2*i+ncx-1),dw(nbeta+eval-320
     1k2+9*k1-10)                                                       eval-321
      dw(nbeta+k2+9*k1-10)=ey                                           eval-322
      go to 50                                                          eval-323
   35 if (j.gt.nva) go to 66                                            eval-324
      ex=dw(npaa+j-1)                                                   eval-325
      if (nx.ne.2) go to 6                                              eval-326
   36 write (mw,1012) i,nw(1,2*i+ncx-2),j,ey,dw(2*i+ncx-1),dw(npaa+j-1) eval-327
      dw(npaa+j-1)=ey                                                   eval-328
      go to 50                                                          eval-329
c  nuclear matrix elements.                                             eval-330
   37 i3=(nivq-nt)/3                                                    eval-331
      if (j.gt.i3) go to 67                                             eval-332
      ex=dw(nt+3*j-3)                                                   eval-333
      lo(111)=.true.                                                    eval-334
      if (nx.ne.2) go to 6                                              eval-335
   38 write (mw,1013) i,nw(1,2*i+ncx-2),j,ey,dw(2*i+ncx-1),dw(nt+3*j-3) eval-336
      dw(nt+3*j-3)=ey                                                   eval-337
      go to 50                                                          eval-338
c spin-orbit parametrisation.                                           eval-339
   39 if (j.gt.6) go to 41                                              eval-340
      if (.not.lo(4)) go to 68                                          eval-341
      ex=az(j)                                                          eval-342
      if (nx.ne.2) go to 6                                              eval-343
   40 if (j.gt.6) go to 43                                              eval-344
      write (mw,1014) i,nw(1,2*i+ncx-2),j,ey,dw(2*i+ncx-1),az(j)        eval-345
      go to 45                                                          eval-346
c hauser-fesbach correction.                                            eval-347
   41 if (.not.lo(81)) go to 69                                         eval-348
      if (j.gt.16) go to 46                                             eval-349
      if (lo(82).and.j.gt.9) go to 70                                   eval-350
      if ((.not.lo(86)).and.j.gt.11) go to 70                           eval-351
      if (lo(82)) go to 42                                              eval-352
      if (j.ne.9.and.j.le.11.and.lo(87)) go to 70                       eval-353
      if (lo(87)) go to 42                                              eval-354
      if (j.eq.7) go to 70                                              eval-355
      if (az(8).ne.0.d0.and.j.gt.8.and.j.le.11) go to 70                eval-356
      if (az(8).eq.0.d0.and.j.eq.8) go to 70                            eval-357
   42 ex=az(j)                                                          eval-358
      if (nx.ne.2) go to 6                                              eval-359
   43 if (j.gt.16) go to 47                                             eval-360
      lo(112)=.true.                                                    eval-361
      k=j-6                                                             eval-362
      if (k.gt.6) go to 44                                              eval-363
      write (mw,1015) i,nw(1,2*i+ncx-2),k,ey,dw(2*i+ncx-1),az(j)        eval-364
      go to 45                                                          eval-365
   44 k=j-5                                                             eval-366
      write (mw,1016) i,nw(1,2*i+ncx-2),k,ey,dw(2*i+ncx-1),az(j)        eval-367
   45 az(j)=ey                                                          eval-368
      go to 50                                                          eval-369
   46 jj=j-16+(j-16)/6                                                  eval-370
      ex=dw(nscn+jj-1)                                                  eval-371
      if (nx.ne.2) go to 6                                              eval-372
   47 k=1+(j-17)/ncons                                                  eval-373
      l=1+mod(j-17,ncons)                                               eval-374
      if (k.eq.ncons-ncont) lo(112)=.true.                              eval-375
      if (k.gt.ncons-ncont) lo(114)=.true.                              eval-376
      write (mw,1017) i,nw(1,2*i+ncx-2),l,k,ey,dw(2*i+ncx-1),dw(nscn+jj-eval-377
     11)                                                                eval-378
      dw(nscn+jj-1)=ey                                                  eval-379
      go to 50                                                          eval-380
c dispersion parameters.                                                eval-381
   48 if (.not.lo(10)) go to 71                                         eval-382
      k=(j-1)/13+1                                                      eval-383
      if (k.gt.npp) go to 72                                            eval-384
      if (nw(2,nipp+17*k-14).ne.0) go to 73                             eval-385
      l=j-13*k+17                                                       eval-386
      lo(113)=.true.                                                    eval-387
      ex=dw(nipp+17*k+l-17)                                             eval-388
      if ((ex.eq.0.d0).or.(ey.eq.0.d0)) write (mw,1018) ex,ey           eval-389
      if (nx.ne.2) go to 6                                              eval-390
   49 write (mw,1019) i,nw(1,2*i+ncx-2),l,k,ey,dw(2*i+ncx-1),dw(nipp+17*eval-391
     1k+l-17)                                                           eval-392
      dw(nipp+17*k+l-17)=ey                                             eval-393
   50 continue                                                          eval-394
      if (.not.lo(32)) return                                           eval-395
      chi2m=1.d35                                                       eval-396
      if (yy(1).eq.0.d0) yy(1)=20.d0                                    eval-397
      yy(3)=0.d0                                                        eval-398
      nw(2,niw)=nw(2,niw)-nw(1,niw+1)                                   eval-399
      nw(1,niw+1)=1                                                     eval-400
      write (mw,1020) nw(2,niw),yy(1)                                   eval-401
      if (nw(2,niw).le.0) go to 75                                      eval-402
      ii=51                                                             eval-403
      if (lo(76).or.(.not.lo(75))) ii=59                                eval-404
      do 51 i=ii,65                                                     eval-405
      lo(i+85)=lo(i)                                                    eval-406
   51 lo(i)=.false.                                                     eval-407
      lo(116)=.true.                                                    eval-408
      return                                                            eval-409
   52 write (mw,1021)                                                   eval-410
      go to 74                                                          eval-411
   53 write (mw,1022) nvat                                              eval-412
      go to 74                                                          eval-413
   54 write (mw,1023) nw(2,npot+1)                                      eval-414
      go to 74                                                          eval-415
   55 write (mw,1024) i,ey,j,(nw(1,npot+l),nw(2,npot+l),l=1,i1)         eval-416
      go to 74                                                          eval-417
   56 write (mw,1025)                                                   eval-418
      go to 74                                                          eval-419
   57 write (mw,1026)                                                   eval-420
      go to 74                                                          eval-421
   58 write (mw,1027)                                                   eval-422
      go to 74                                                          eval-423
   59 write (mw,1028)                                                   eval-424
      go to 74                                                          eval-425
   60 write (mw,1029)                                                   eval-426
      go to 74                                                          eval-427
   61 write (mw,1030) i,nw(1,2*i+ncx-2),k2                              eval-428
      go to 74                                                          eval-429
   62 write (mw,1031) nbet                                              eval-430
      go to 74                                                          eval-431
   63 write (mw,1032) i,nw(1,2*i+ncx-2),k1                              eval-432
      go to 74                                                          eval-433
   64 write (mw,1033) nbt                                               eval-434
      go to 74                                                          eval-435
   65 write (mw,1034)                                                   eval-436
      go to 74                                                          eval-437
   66 write (mw,1035) nva                                               eval-438
      go to 74                                                          eval-439
   67 write (mw,1036) i3                                                eval-440
      go to 74                                                          eval-441
   68 write (mw,1037)                                                   eval-442
      go to 74                                                          eval-443
   69 write (mw,1038)                                                   eval-444
      go to 74                                                          eval-445
   70 write (mw,1039)                                                   eval-446
      go to 74                                                          eval-447
   71 write (mw,1040)                                                   eval-448
      go to 74                                                          eval-449
   72 write (mw,1041) npp                                               eval-450
      go to 74                                                          eval-451
   73 write (mw,1042)                                                   eval-452
   74 write (mw,1043) i,nw(1,2*i+ncx-2),ik,j,dw(2*i+ncx-1)              eval-453
   75 write (mw,1044)                                                   eval-454
      stop                                                              eval-455
 1000 format (2l1,i3,i5,f10.5)                                          eval-456
 1001 format (18a4)                                                     eval-457
 1002 format ('1',a4,' computation with',i4,'  new parameters',10x,'( ineval-458
     1put of ',2a8)                                                     eval-459
 1003 format (20x,'*** values given as percentages ***')                eval-460
 1004 format (14i5)                                                     eval-461
 1005 format (7f10.5)                                                   eval-462
 1006 format (2x,i2,' param.',i5,3x,'new lab. energy',1p,d15.8,' (',d15.eval-463
     18,')',3x,'centre of mass energy',d15.6,5x,'old value',d15.6)      eval-464
 1007 format (2x,i2,' param.',i5,3x,'value of v-optical(',i2,',',i2,') =eval-465
     1',1p,d15.6,' (',d15.6,')',3x,'old value',d15.6)                   eval-466
 1008 format (2x,i2,' param.',i5,'th value of external potential =',1p,deval-467
     115.6,' (',d15.6,')',3x,'old value',d15.6)                         eval-468
 1009 format (2x,i2,' param.',i5,3x,'proportional to beta(',i2,',',i2,')eval-469
     1  with ratio',1p,d15.6,' (',d15.6,')')                            eval-470
 1010 format (15x,'beta(',i2,',',i2,') =',1p,d15.6,5x,'old value',d15.6)eval-471
 1011 format (2x,i2,' param.',i5,3x,'beta(',i2,',',i2,') =',1p,d15.6,' (eval-472
     1',e15.6,')',3x,'old value',d15.6)                                 eval-473
 1012 format (2x,i2,' param.',i5,3x,'var(',i2,') =',1p,d15.6,' (',d15.6,eval-474
     1')',3x,'old value',d15.6)                                         eval-475
 1013 format (2x,i2,' param.',i5,3x,'t(4,',i3,') =',1p,d15.6,' (',d15.6,eval-476
     1')',3x,'old value',d15.6)                                         eval-477
 1014 format (2x,i2,' param.',i5,3x,'az(',i1,') =',1p,d15.6,' (',d15.6,'eval-478
     1)',3x,'old value',d15.6)                                          eval-479
 1015 format (2x,i2,' param.',i5,3x,'bz(',i1,') =',1p,d15.6,' (',d15.6,'eval-480
     1)',3x,'old value',d15.6)                                          eval-481
 1016 format (2x,i2,' param.',i5,3x,'giant resonance(',i1,') =',1p,d15.6eval-482
     1,' (',d15.6,')',3x,'old value',d15.6)                             eval-483
 1017 format (2x,i2,' param.',i5,3x,'scn(',i3,',',i3,') =',1p,d15.6,' ('eval-484
     1,d15.6,')',3x,'old value',d15.6)                                  eval-485
 1018 format (' no verification of validity for the dispersion parametereval-486
     1',1p,d15.6,' changed into',d15.6)                                 eval-487
 1019 format (2x,i2,' param.',i5,3x,'pip(',i3,',',i3,') =',1p,d15.6,' ('eval-488
     1,d15.6,')',3x,'old value',d15.6)                                  eval-489
 1020 format (' new maximum number of runs:',i6,10x,'starting scale',f10eval-490
     1.2)                                                               eval-491
 1021 format (' no variable is defined by index between 8001 and 10000.'eval-492
     1)                                                                 eval-493
 1022 format (' no optical parameter index larger than',i3,' and no chaneval-494
     1ge of coulomb charges.')                                          eval-495
 1023 format (' no external optical parameter larger than',i5)          eval-496
 1024 format (' variable',i3,1p,d15.6,' defined by',i5,' cannot be used'eval-497
     1/' the parameter which can be searched are between:'/(4(5x,i6,' toeval-498
     2',i6)))                                                           eval-499
 1025 format (' for a form factor given by points, the two multiplicativeval-500
     1e factor only can be changed.')                                   eval-501
 1026 format (' the coupling of two particle states cannot be changed.')eval-502
 1027 format (' only the oscillator parameter can be changed for a lagueeval-503
     1rre polynomial.')                                                 eval-504
 1028 format (' masses and product of charges cannot be changed for a sieval-505
     1ngle particle state.')                                            eval-506
 1029 format (' not an index for deformation of a given potential.')    eval-507
 1030 format (' the variable',i3,' cannot be used because ',i5,'  is a veval-508
     1ariation of the deformations of potential',i3,' which are zero.') eval-509
 1031 format (' no index for multipole larger than',i3)                 eval-510
 1032 format (' the variable',i3,' cannot be used because ',i5,'  is a veval-511
     1ariation for a given multipole',i3,' and they are zero.')         eval-512
 1033 format (' no index for individual multipole larger than',i3)      eval-513
 1034 format (' no index for individual multipole equal to 0 or 9 moduloeval-514
     1 10')                                                             eval-515
 1035 format (' no index for nuclear level parameter larger than',i3)   eval-516
 1036 format (' no index for nuclear matrix element larger than',i3)    eval-517
 1037 format (' the spin-orbit is not parametrised.')                   eval-518
 1038 format (' no hauser-fesbach correction to cross-sections.')       eval-519
 1039 format (' parameter not used for these hauser-fesbach correction teval-520
     1o cross-sections.')                                               eval-521
 1040 format (' dispersion relations were not used in previous computatieval-522
     1on.')                                                             eval-523
 1041 format (' there are only',i3,' different potentials.')            eval-524
 1042 format (' the coefficients of this dispersion relation should be reval-525
     1ead each time.')                                                  eval-526
 1043 format (' variable',i3,' defined by',i5,' (',i2,i5,')',' with valueval-527
     1e ',d15.6,' cannot be used.')                                     eval-528
 1044 format (//' in eval  ...  stop ...')                              eval-529
      end                                                               eval-530
c 02/06/07                                                      ecis06  rest-000
      subroutine rest(kf,nw,dw,idmx,lo)                                 rest-001
c if kf=0                                                               rest-002
c it saves on tape ms all the data needed to re-start a search stopped  rest-003
c by the number of evaluations if lo(35)=.true.                         rest-004
c if kf.ne.0                                                            rest-005
c it reads on tape ms to re-start the search                            rest-006
c it is called only if lo(36)=.true.                                    rest-007
c ******** unless the main subroutine is changed, ms = 8 ***************rest-008
c input:     ke:      0 to write on ms, any value to read on ms.        rest-009
c            nw,dw:   working array.                                    rest-010
c            idmx:    size of the working array.                        rest-011
c            lo(i):   logical controls:                                 rest-012
c               lo(35) =.true. search saved on tape 8 if correctly endedrest-013
c                              or stopped by the number of evaluations. rest-014
c                                                                       rest-015
c the common /addre/ is used in calc, calx, cal1, vari, eval and rest.  rest-016
c the common /angul/ is used in calx, lect, sche, lcsp, resu and rest.  rest-017
c the common /conve/ is used in calc, calx, lect, cal1, stdp, fold,     rest-018
c                               inti, insh, insi, inrh, inri and rest.  rest-019
c the common /coupl/ is used in calx, lecl, lect, redm, vibm, rotm,     rest-020
c                               roam, extp, ldis, cal1, pote, rotp,     rest-021
c                               vari, eval and rest.                    rest-022
c the common /dchi2/ is used in calc, calx, resu, vari, eval, rest      rest-023
c                               and fite.                               rest-024
c the common /dcons/ is used in ecis, calc, lecl, lect, colf, khco,     rest-025
c                               conu, cal1, pote, rotp, rotz, stdp,     rest-026
c                               stbf, mtch, scam, sche, lscp, resu,     rest-027
c                               scat and rest.                          rest-028
c the common /integ/ is used in calc, calx, cal1, vari, eval and rest.  rest-029
c the common /ncomp/ is used in calc, calx, lect, conu, ggdr, cal1,     rest-030
c                               quan, scam, sche, resu, vari, eval,     rest-031
c                               and rest.                               rest-032
c the common /pote1/ is used in calc, redm, extp, pote, rotp, stdp,     rest-033
c                               fold and rest.                          rest-034
c the common /pote2/ is used in calc, lecl, redm, cal1, pote, quan,     rest-035
c                               mtch and rest.                          rest-036
c the common /titre/ is used in calc, calx, resu, eval and rest.        rest-037
c                                                                       rest-038
c significance of the quantities in common /titre/:                     rest-039
c  title(18): title of the run printed as heading of results.           rest-040
c   defined:  title.                                                    rest-041
c   used:     title.                                                    rest-042
c                                                                       rest-043
c***********************************************************************rest-044
      implicit real*8 (a-h,o-z)                                         rest-045
      logical lo(150)                                                   rest-046
      dimension nw(2,*),dw(*),t(18)                                     rest-047
      character*4 t,title                                               rest-048
      common /addre/ n1(49)                                             rest-049
      common /angul/ n2(14)                                             rest-050
      common /conve/ a3(6)                                              rest-051
      common /coupl/ n3(7)                                              rest-052
      common /dchi2/ a4(5)                                              rest-053
      common /dcons/ a5(7)                                              rest-054
      common /inout/ mr,mw,ms                                           rest-055
      common /integ/ n7(45)                                             rest-056
      common /ncomp/ n8(52)                                             rest-057
      common /pote1/ n9(22)                                             rest-058
      common /pote2/ na(16)                                             rest-059
      common /titre/ title(18)                                          rest-060
      idmy=idmx                                                         rest-061
      rewind ms                                                         rest-062
      if (kf.ne.0) go to 1                                              rest-063
c writes commons first and w after                                      rest-064
      write (ms) idmx,lo,n1,n2,a3,n3,a4,a5,n7,n8,n9,na,title            rest-065
c n1(46) is nrco,n7(2) is nplace,n7(1) is idmt                          rest-066
      i1=n1(46)                                                         rest-067
      write (mw,1000) ms,i1                                             rest-068
      write (ms) (dw(i),i=1,i1)                                         rest-069
      rewind ms                                                         rest-070
      return                                                            rest-071
c read commons,computes limits of w and read w                          rest-072
    1 read (ms) i,lo,n1,n2,a3,n3,a4,a5,n7,n8,n9,na,t                    rest-073
      i1=n1(46)                                                         rest-074
      n7(1)=idmy                                                        rest-075
      write (mw,1001) title,t,n7(1)                                     rest-076
      if (n7(2).gt.n7(1)) call memo('rest',n7(1),n7(2))                 rest-077
      read (ms) (dw(i),i=1,i1)                                          rest-078
      rewind ms                                                         rest-079
c reads on 5 if save has to be done again and the new number of eval.   rest-080
c any modification of the search can be read at this place if they      rest-081
c do not spoil the search                                               rest-082
      lo(35)=.false.                                                    rest-083
      read (mr,1002) lo(35),n,ech,rap                                   rest-084
c n1(20) is niw, n7(27) is nrec                                         rest-085
      if (n.eq.0) n=n7(34)+2                                            rest-086
      m=n1(20)                                                          rest-087
      nw(2,m)=nw(2,m)+n                                                 rest-088
      write (mw,1003) ms,i1                                             rest-089
      write (mw,1004) n,nw(2,m)                                         rest-090
      if (lo(35)) write (mw,1005) ms                                    rest-091
      if (.not.lo(35)) write (mw,1006) ms                               rest-092
      if (ech.lt.1.d0) go to 2                                          rest-093
      write (mw,1008) a4(3),ech                                         rest-094
      a4(3)=ech                                                         rest-095
    2 if (rap.lt.1.d0) go to 3                                          rest-096
      write (mw,1009) a4(4),rap                                         rest-097
      a4(4)=rap                                                         rest-098
    3 return                                                            rest-099
 1000 format (///15h output on tape,i3,24h of dw from dw(1) to dw(,i6,1hrest-100
     1)///)                                                             rest-101
 1001 format ('1'//1x,18a4//' restart of computation'//' last title : ''rest-102
     1''',18a4,''''''//' available working space',i8/)                  rest-103
 1002 format (l1,i4,5x,2f10.5)                                          rest-104
 1003 format (' input from tape',i3,' of dw from dw(1) to dw(',i6,')'//)rest-105
 1004 format (/' maximum number of evaluations increased by',i4,5x,'new rest-106
     1value',i6)                                                        rest-107
 1005 format (' save on tape',i3,' if necessary.')                      rest-108
 1006 format (' no save on tape',i3)                                    rest-109
 1008 format (' change of ech from',f10.5,' to',f10.5)                  rest-110
 1009 format (' change of rap from',f10.5,' to',f10.5)                  rest-111
      end                                                               rest-112
c 28/06/06                                                      ecis06  fite-000
      subroutine fite(ke,m,n,f,x,e,w,nw,iz,wa)                          fite-001
c chi-square minimising subroutine written by g. schweimer in karlsruhe.fite-002
c simplified for the use of ecis (no gradient).                         fite-003
c solves the nonlinear least squares problem,                           fite-004
c using a least squares interpolation between variables and functions.  fite-005
c called subroutines: fit2 /.true./ (linear least squares problem).     fite-006
c                     fit2 /.false./(inversion of a(transposed)*a).     fite-007
c                     fit1(one dimensional minimum search).             fite-008
c input:     ke:      0 for the first call, 1 for the following ones.   fite-009
c            m:       number of functions, m ge n.                      fite-010
c            n:       number of variables, n ge 1.                      fite-011
c            f:       function values at the point x.                   fite-012
c            x:       starting values of the variables.                 fite-013
c            e:       absolute search accuracies for the variables.     fite-014
c            iz(i)    number of points to be remembered for i=1         fite-015
c                     (at least n+1).                                   fite-016
c                     maximum number of function evaluations for i=2.   fite-017
c output:    ke:      error code:                                       fite-018
c                     ke=0: without errors.                             fite-019
c                     ke=2: user interrupt.                             fite-020
c                     ke=3: maximum number of function evaluations.     fite-021
c                     ke=4: rounding errors.                            fite-022
c                     ke=5: the functions do not depend on x(iz(4)).    fite-023
c                     ke=6: useless variables in the preparatory calls, fite-024
c                           the labels of the variables are iz(3),iz(4).fite-025
c                     ke=7: m lt n.                                     fite-026
c            w(i):    for i<n, standard error of the variable i (for a  fite-027
c                     variance at best fit equal to degree of freedom). fite-028
c                     for i+n, error enhancement (many/single variable  fite-029
c                     result).                                          fite-030
c                     for n+n+i+(j*(j-1))/2, error correlation between  fite-031
c                     x(i) and x(j), i<j.                               fite-032
c            iz(i)    number of function evaluations for i=3.           fite-033
c                     for i=4, number of degrees of freedom if ke=0,2,3 fite-034
c                     or 4.  place of useless variable if ke=5 or 6.    fite-035
c                     eventually indications for one dimensional search fite-036
c                     if ke=1.                                          fite-037
c working areas:                                                        fite-038
c            iz(i):   for i=5 to 4+iz(1), labels of the quadratic sums. fite-039
c            w(i):    of length max(14+n+k*(m+n+1),(n*(n+5))/2)         fite-040
c                     eventually, indications for one dimensional       fite-041
c                     search. from max(15,n+1),k sets of (functions +   fite-042
c                     variables + chi2). see above the addresses in w   fite-043
c                     after the search                                  fite-044
c            nw:      equivalent by call with w.                        fite-045
c            wa(i):   of length (m+1)*(n+1)+(n*(n+1))/2. from i=1,      fite-046
c                     gradient or matrix a followed by central functionsfite-047
c                     from i=1+m*(n+1), central variables,              fite-048
c                     from i=(n+1)*(m+1), matrix d.                     fite-049
c                                                                       fite-050
c the working fields iz and w contain all information to continue       fite-051
c the search. this allows a search within another search just changing  fite-052
c the working fields.                                                   fite-053
c                                                                       fite-054
c for the common  /dchi2/  see calx.                                    fite-055
c                                                                       fite-056
c significance of the quantities in common /dchi2/:                     fite-057
c  chi2:      chi-square computed in subroutine resu.                   fite-058
c  yy(1):     step size in the search.                                  fite-059
c  yy(2):     half of the success multiplicative factor of the step.    fite-060
c             the step size is divided by 4 times its square after      fite-061
c             unsuccess.                                                fite-062
c  yy(3):     changed x value in preparatory calls,                     fite-063
c             ratio step/distance of minimum after preparatory calls    fite-064
c             or 0. for random prediction,                              fite-065
c             error renormalisation factor when ke=0,2 or 3.(square rootfite-066
c             of variance at best fit divided by degree of freedom).    fite-067
c   defined:  chi2,yy.                                                  fite-068
c   used:     chi2,yy.                                                  fite-069
c                                                                       fite-070
c***********************************************************************fite-071
      implicit real*8 (a-h,o-z)                                         fite-072
      dimension f(*),x(*),e(*),w(*),nw(*),iz(*),wa(*)                   fite-073
      common /dchi2/ chi2,chi2m,yy(3)                                   fite-074
      data eps /1.d-5/                                                  fite-075
      jd=(m+1)*(n+1)-1                                                  fite-076
      js=14+n                                                           fite-077
      lm=m+n+1                                                          fite-078
      k=iz(1)                                                           fite-079
      if (ke.ne.0) go to 2                                              fite-080
      if (m.lt.n) go to 39                                              fite-081
      iz(3)=1                                                           fite-082
      iz(4)=0                                                           fite-083
      do 1 l=1,k                                                        fite-084
      iz(l+4)=1+k-l                                                     fite-085
    1 w(js+lm*l)=7.d35                                                  fite-086
      if (yy(2).lt.1.d0) yy(2)=1.d0                                     fite-087
      ke=1                                                              fite-088
    2 jm=js+lm*iz(5)-lm                                                 fite-089
      j3=m*n                                                            fite-090
      kv=k                                                              fite-091
      if (chi2.le.0.d0) go to 38                                        fite-092
c row of matrix s to be replaced by new values                          fite-093
      l=iz(k+4)                                                         fite-094
      if (w(js+lm*l).eq.7.d35) kv=l-1                                   fite-095
      do 3 i=1,k                                                        fite-096
      j1=js+lm*iz(i+4)                                                  fite-097
      if (chi2.lt.w(j1)) go to 4                                        fite-098
    3 continue                                                          fite-099
c one dimensional search is necessary                                   fite-100
      go to 30                                                          fite-101
    4 if (i.gt.max0(n+1,kv)) go to 30                                   fite-102
c vector of labels of the quadratic sums                                fite-103
      if (kv.lt.k) kv=kv+1                                              fite-104
      i1=k+4                                                            fite-105
      i2=k-i                                                            fite-106
      if ((iz(3).gt.n+1).and.(i.ne.1)) yy(1)=yy(1)/(4.d0*yy(2)**3)      fite-107
      if (i2.eq.0) go to 6                                              fite-108
      do 5 j=1,i2                                                       fite-109
      i1=i1-1                                                           fite-110
    5 iz(i1+1)=iz(i1)                                                   fite-111
      iz(i1)=l                                                          fite-112
      jm=js+lm*iz(5)-lm                                                 fite-113
c new row                                                               fite-114
    6 j1=js+lm*(l-1)                                                    fite-115
      do 7 i=1,m                                                        fite-116
      j1=j1+1                                                           fite-117
    7 w(j1)=f(i)                                                        fite-118
      do 8 i=1,n                                                        fite-119
      j1=j1+1                                                           fite-120
    8 w(j1)=x(i)                                                        fite-121
      w(j1+1)=chi2                                                      fite-122
      if (iz(3).ge.iz(2)) go to 43                                      fite-123
      if (n.eq.1) go to 35                                              fite-124
      if (iz(3).gt.n+1) go to 13                                        fite-125
c preparatory function evaluations                                      fite-126
      mf=iz(3)                                                          fite-127
      if (mf.eq.1) go to 12                                             fite-128
c significance of the new variable                                      fite-129
      x(mf-1)=yy(3)                                                     fite-130
      s=0.d0                                                            fite-131
      do 9 i=1,m                                                        fite-132
      t=f(i)-w(js+i)                                                    fite-133
    9 s=s+t*t                                                           fite-134
      j=2                                                               fite-135
      if (s.lt.eps*eps*w(js+lm)) go to 41                               fite-136
      yy(3)=s                                                           fite-137
      w(mf-1)=dsqrt(yy(3))                                              fite-138
      if (mf.le.2) go to 12                                             fite-139
c independence of the new variable                                      fite-140
      do 11 j=3,mf                                                      fite-141
      i2=js+lm*(j-2)                                                    fite-142
      s=0.d0                                                            fite-143
      do 10 i=1,m                                                       fite-144
   10 s=s+(w(i2+i)-w(js+i))*(f(i)-w(js+i))                              fite-145
      if (dabs(w(mf-1)*w(j-2)-dabs(s)).lt.eps*dabs(s)) go to 40         fite-146
   11 continue                                                          fite-147
   12 if (mf.eq.n+1) go to 13                                           fite-148
      yy(3)=x(mf)                                                       fite-149
      x(mf)=x(mf)+yy(1)*e(mf)                                           fite-150
      go to 64                                                          fite-151
c end of preparatory function evaluations                               fite-152
c sum of inverses of the quadratic sums                                 fite-153
   13 s=0.d0                                                            fite-154
      do 14 l=1,kv                                                      fite-155
      t=w(js+lm*l)                                                      fite-156
   14 s=s+1.d0/(t*t)                                                    fite-157
      wja=1.d0/s                                                        fite-158
c centre of the variables and functions                                 fite-159
      i1=m+n                                                            fite-160
      do 16 i=1,i1                                                      fite-161
      j1=js                                                             fite-162
      s=0.d0                                                            fite-163
      do 15 l=1,kv                                                      fite-164
      t=w(j1+lm)                                                        fite-165
      s=s+w(j1+i)/(t*t)                                                 fite-166
   15 j1=j1+lm                                                          fite-167
   16 wa(j3+i)=s*wja                                                    fite-168
      if (ke.ne.1) go to 47                                             fite-169
c the linear approximation means that the difference with central value fite-170
c f(i,k)-f(i) = sum f(i,j)*(x(j,k)-x(j)) where f(i),x(j) are mean valuesfite-171
c and f(i,j) is the first derivative with respect to x(j).              fite-172
c using the matrix d(i,j) = weighted sum on (x(i,k)-x(i))*(x(j,k)-x(j)) fite-173
c and writing the change dx = d*y, the best fit is obtained for         fite-174
c ||f-a*y||=min(y) with a(i,j)=weighted sum(f(i,k)-f(i)*(x(j,k)-x(j))   fite-175
c matrix a                                                              fite-176
   17 j1=0                                                              fite-177
      do 19 i=1,n                                                       fite-178
      u=wa(j3+m+i)                                                      fite-179
      do 19 j=1,m                                                       fite-180
      j1=j1+1                                                           fite-181
      j2=js                                                             fite-182
      s=0.d0                                                            fite-183
      t=wa(j3+j)                                                        fite-184
      do 18 l=1,kv                                                      fite-185
      v=w(j2+lm)                                                        fite-186
      s=s+(w(j2+j)-t)*(w(j2+m+i)-u)/(v*v)                               fite-187
   18 j2=j2+lm                                                          fite-188
   19 wa(j1)=s*wja                                                      fite-189
      if (ke.ne.1) go to 50                                             fite-190
c linear least squares problem                                          fite-191
      call fit2(m,n,wa,x,nw,ir,.true.)                                  fite-192
      if (ir) 42 , 20 , 28                                              fite-193
c matrix d                                                              fite-194
   20 j1=jd                                                             fite-195
      ja=j3+m                                                           fite-196
      do 23 i=1,n                                                       fite-197
      t=wa(ja+i)                                                        fite-198
      do 22 j=1,i                                                       fite-199
      j1=j1+1                                                           fite-200
      j2=js+m                                                           fite-201
      s=0.d0                                                            fite-202
      u=wa(ja+j)                                                        fite-203
      do 21 l=1,kv                                                      fite-204
      v=w(j2+n+1)                                                       fite-205
      s=s+(w(j2+i)-t)*(w(j2+j)-u)/(v*v)                                 fite-206
   21 j2=j2+lm                                                          fite-207
   22 wa(j1)=s*wja                                                      fite-208
   23 continue                                                          fite-209
c new variables                                                         fite-210
      do 25 i=1,n                                                       fite-211
      i2=1                                                              fite-212
      j1=jd+(i*i-i)/2                                                   fite-213
      s=0.d0                                                            fite-214
      do 24 j=1,n                                                       fite-215
      j1=j1+i2                                                          fite-216
      if (j.ge.i) i2=j                                                  fite-217
   24 s=s+wa(j1)*x(j)                                                   fite-218
   25 wa(i)=wa(ja+i)-s                                                  fite-219
c test of convergence                                                   fite-220
      a=0.d0                                                            fite-221
      do 26 i=1,n                                                       fite-222
      w(i)=wa(i)-w(jm+m+i)                                              fite-223
   26 a=dmax1(a,dabs(w(i)/e(i)))                                        fite-224
      yy(1)=yy(1)*yy(2)                                                 fite-225
      if (a.lt.1.d0.or.yy(1).lt.1.d0) go to 38                          fite-226
      yy(3)=1.d0                                                        fite-227
c step size limitation                                                  fite-228
      if (a.gt.2.d0*yy(1)) yy(3)=2.d0*yy(1)/a                           fite-229
      do 27 i=1,n                                                       fite-230
   27 x(i)=w(jm+m+i)+yy(3)*w(i)                                         fite-231
      iz(4)=0                                                           fite-232
      yy(1)=a*yy(3)                                                     fite-233
      go to 64                                                          fite-234
c random prediction                                                     fite-235
   28 do 29 i=1,n                                                       fite-236
   29 x(i)=w(jm+m+i)+yy(1)*e(i)*dfloat(mod(iabs(nw(jm+i)),200)-100)/100.fite-237
     1d0                                                                fite-238
      yy(3)=0.d0                                                        fite-239
      go to 64                                                          fite-240
c one dimensional search                                                fite-241
   30 if (n.eq.1) go to 36                                              fite-242
      if (iz(3).ge.iz(2)) go to 43                                      fite-243
      if (iz(4).eq.2) go to 32                                          fite-244
      iz(4)=2                                                           fite-245
      do 31 i=1,n                                                       fite-246
   31 w(i+14)=x(i)-w(jm+m+i)                                            fite-247
      nw(1)=3                                                           fite-248
      nw(2)=20                                                          fite-249
      w(4)=0.5d0                                                        fite-250
      w(7)=0.d0                                                         fite-251
      w(8)=0.d0                                                         fite-252
      w(9)=0.d0                                                         fite-253
      w(10)=1.d0                                                        fite-254
      w(12)=w(jm+lm)                                                    fite-255
      w(13)=chi2                                                        fite-256
      go to 33                                                          fite-257
   32 w(5)=chi2                                                         fite-258
      call fit1(ke,nw,w(4))                                             fite-259
   33 do 34 i=1,n                                                       fite-260
   34 x(i)=w(jm+m+i)+w(4)*w(i+14)                                       fite-261
      if (ke.eq.3) ke=2                                                 fite-262
      if (ke.eq.2) go to 43                                             fite-263
      ke=1                                                              fite-264
      yy(3)=w(4)                                                        fite-265
      go to 64                                                          fite-266
c only one variable x                                                   fite-267
   35 if (iz(3).gt.1) go to 36                                          fite-268
      ke=0                                                              fite-269
      w(6)=yy(1)*e(1)                                                   fite-270
      w(7)=e(1)                                                         fite-271
      w(8)=0.d0                                                         fite-272
   36 nw(2)=iz(2)                                                       fite-273
      w(4)=x(1)                                                         fite-274
      w(5)=chi2                                                         fite-275
      call fit1(ke,nw,w(4))                                             fite-276
      iz(4)=2                                                           fite-277
      x(1)=w(4)                                                         fite-278
      if (ke.eq.1) go to 64                                             fite-279
      if (ke.gt.0) ke=ke+1                                              fite-280
      yy(3)=0.d0                                                        fite-281
      w(1)=0.d0                                                         fite-282
      do 37 j=1,m                                                       fite-283
   37 f(j)=w(jm+i)                                                      fite-284
      chi2=w(jm+lm)                                                     fite-285
      x(1)=w(jm+lm-1)                                                   fite-286
      if (nw(2).ne.0) go to 63                                          fite-287
      w(1)=dsqrt(dabs((w(9)-w(11))/((w(12)-w(13))/(w(9)-w(10))-(w(13)-w(fite-288
     114))/(w(10)-w(11)))))                                             fite-289
      w(2)=1.d0                                                         fite-290
      w(3)=1.d0                                                         fite-291
      go to 60                                                          fite-292
c end of search                                                         fite-293
   38 ke=0                                                              fite-294
      if (chi2.eq.0.d0.or.iz(2).lt.0) go to 64                          fite-295
      go to 44                                                          fite-296
c error code definition                                                 fite-297
   39 ke=ke+1                                                           fite-298
   40 ke=ke+1                                                           fite-299
   41 ke=ke+1                                                           fite-300
   42 ke=ke+1                                                           fite-301
   43 ke=ke+1                                                           fite-302
      ke=ke+1                                                           fite-303
c restore optimum values to x and f                                     fite-304
   44 do 45 i=1,m                                                       fite-305
   45 f(i)=w(jm+i)                                                      fite-306
      do 46 i=1,n                                                       fite-307
      x(i)=w(jm+m+i)                                                    fite-308
   46 w(i)=0.d0                                                         fite-309
      yy(3)=0.d0                                                        fite-310
      chi2=w(jm+lm)                                                     fite-311
      if (ke*(ke-3).ne.0.or.(ke.eq.3.and.((yy(3).eq.0.d0.and.iz(3).le.n)fite-312
     1))) go to 63                                                      fite-313
c computation of the errors of the variables - restore matrix g         fite-314
      kv=min0(k,iz(3))                                                  fite-315
      go to 13                                                          fite-316
c inverse of matrix d                                                   fite-317
   47 t=dsqrt(wja)                                                      fite-318
      j1=0                                                              fite-319
      do 49 i=1,n                                                       fite-320
      s=wa(j3+m+i)                                                      fite-321
      j2=js+i-lm+m                                                      fite-322
      do 48 l=1,kv                                                      fite-323
      j1=j1+1                                                           fite-324
   48 wa(j1)=t*(w(j2+l*lm)-s)/w(js+l*lm)                                fite-325
   49 continue                                                          fite-326
      call fit2(kv,n,wa,wa(jd+1),nw,ir,.false.)                         fite-327
      if (ir) 63 , 17 , 63                                              fite-328
c matrix g = a*inverse of d                                             fite-329
   50 do 54 l=1,m                                                       fite-330
      j1=l-m                                                            fite-331
      do 52 i=1,n                                                       fite-332
      i1=jd+(i*i-i)/2                                                   fite-333
      i2=1                                                              fite-334
      s=0.d0                                                            fite-335
      do 51 j=1,n                                                       fite-336
      i1=i1+i2                                                          fite-337
      if (j.ge.i) i2=j                                                  fite-338
   51 s=s+wa(i1)*wa(j1+j*m)                                             fite-339
   52 w(i)=s                                                            fite-340
      do 53 j=1,n                                                       fite-341
   53 wa(j1+j*m)=w(j)                                                   fite-342
   54 continue                                                          fite-343
c diagonal elements of g(t)*g                                           fite-344
      j1=0                                                              fite-345
      do 56 i=1,n                                                       fite-346
      s=0.d0                                                            fite-347
      do 55 l=1,m                                                       fite-348
      j1=j1+1                                                           fite-349
   55 s=s+wa(j1)*wa(j1)                                                 fite-350
   56 w(n+i)=dsqrt(s)                                                   fite-351
c standard errors and error correlations                                fite-352
      call fit2(m,n,wa,w(2*n+1),nw,ir,.false.)                          fite-353
      if (ir.ne.0) go to 63                                             fite-354
      do 57 i=1,n                                                       fite-355
      jdi=2*n+(i*i+i)/2                                                 fite-356
      w(i)=dsqrt(w(jdi))                                                fite-357
   57 w(n+i)=w(i)*w(n+i)                                                fite-358
      j1=2*n                                                            fite-359
      do 59 i=1,n                                                       fite-360
      do 58 j=1,i                                                       fite-361
      j1=j1+1                                                           fite-362
   58 w(j1)=w(j1)/(w(i)*w(j))                                           fite-363
   59 continue                                                          fite-364
c error renormalisation factor                                          fite-365
   60 s=0.d0                                                            fite-366
      do 61 i=1,m                                                       fite-367
   61 s=s+f(i)                                                          fite-368
      yy(3)=dsqrt(dabs(chi2-s*s/m)/max0(m-n-1,1))                       fite-369
      do 62 i=1,n                                                       fite-370
   62 w(i)=w(i)*yy(3)                                                   fite-371
   63 iz(4)=m-n-1                                                       fite-372
      if ((ke-5)*(ke-6).ne.0) go to 64                                  fite-373
      iz(3)=j-2                                                         fite-374
      iz(4)=mf-1                                                        fite-375
   64 if (ke.eq.1) iz(3)=iz(3)+1                                        fite-376
      return                                                            fite-377
      end                                                               fite-378
c 08/04/06                                                      ecis06  fit1-000
      subroutine fit1(ke,i,w)                                           fit1-001
c minimisation of a function f(x) of one variable x.                    fit1-002
c input:     am:      tables of multipoles.                             fit1-003
c calling sequence                                                      fit1-004
c    ke=0                                                               fit1-005
c    i(2)=maximum number of function evaluations                        fit1-006
c    w(1)=start value of x                                              fit1-007
c    w(3)=first step size                                               fit1-008
c    w(4)=absolute search accuracy                                      fit1-009
c    w(5)=relative search accuracy                                      fit1-010
c  1 w(2)=function value f(x) at x=w(1)                                 fit1-011
c    call fit1(ke,i,w)                                                  fit1-012
c    if(ke.eq.1) go to 1                                                fit1-013
c    xmin=w(1)                                                          fit1-014
c    fmin=w(2)                                                          fit1-015
c ke = error code: ke=0 no errors, ke=                                  fit1-016
c  2 maximum number of function evaluations                             fit1-017
c  3 rounding errors, probably because both w(4) and w(5) are too small fit1-018
c the working fields i and w have the length 3 and 11 respectively      fit1-019
c they contain all information for the continuation of the search       fit1-020
c therefore a search within another search can be done just changing    fit1-021
c the working fields                                                    fit1-022
c if 2 function values f1 and f2 are known for x = x1 and x2 respective fit1-023
c ly with x1 ne x2 enter the calling sequence after defining :          fit1-024
c ke = 1; i(1) = 3; w(6) = x1; w(7) = x2; w(9) = f1; w(10) = f2 and     fit1-025
c w(1) = users choice                                                   fit1-026
c working field variables:                                              fit1-027
c i(1): current number of function evaluations                          fit1-028
c i(2): maximum number of function evaluations                          fit1-029
c i(3): minimum pointer, the minimum function value is at w(7+i(3))     fit1-030
c w(1): current value of x                                              fit1-031
c w(2): user supplied function value                                    fit1-032
c w(3): first step size                                                 fit1-033
c w(4 and 5): search accuracies                                         fit1-034
c w(6, 7 and 8): x1, x2 and x3 with x1 < x2 < x3                        fit1-035
c w(9, 10 and 11): function values at x1, x2 and x3 respectively        fit1-036
c***********************************************************************fit1-037
      implicit real*8 (a-h,o-z)                                         fit1-038
      dimension i(3),w(11)                                              fit1-039
      if (ke.eq.1) go to 2                                              fit1-040
      ke=1                                                              fit1-041
      i(1)=1                                                            fit1-042
      i(3)=-1                                                           fit1-043
      w(6)=w(1)                                                         fit1-044
      w(9)=w(2)                                                         fit1-045
    1 w(1)=w(1)+w(3)                                                    fit1-046
      go to 11                                                          fit1-047
    2 if (i(1).gt.2) go to 3                                            fit1-048
      i(3)=0                                                            fit1-049
      w(7)=w(1)                                                         fit1-050
      w(10)=w(2)                                                        fit1-051
      if (w(2).le.w(9)) go to 1                                         fit1-052
      i(3)=-1                                                           fit1-053
      w(1)=w(6)-w(3)                                                    fit1-054
      go to 11                                                          fit1-055
    3 if (i(1).gt.3) go to 5                                            fit1-056
      w(8)=w(1)                                                         fit1-057
      w(11)=w(2)                                                        fit1-058
c ordering of the 3 first values of x: w(6) < w(7) < w(8).              fit1-059
      do 4 j=1,3                                                        fit1-060
      k=7-mod(j,2)                                                      fit1-061
      if (w(k).le.w(k+1)) go to 4                                       fit1-062
      w(1)=w(k)                                                         fit1-063
      w(k)=w(k+1)                                                       fit1-064
      w(k+1)=w(1)                                                       fit1-065
      k=k+3                                                             fit1-066
      w(1)=w(k)                                                         fit1-067
      w(k)=w(k+1)                                                       fit1-068
      w(k+1)=w(1)                                                       fit1-069
    4 continue                                                          fit1-070
      i(3)=0                                                            fit1-071
      if (w(9).lt.w(10).and.w(9).lt.w(11)) i(3)=-1                      fit1-072
      if (w(11).lt.w(10).and.w(11).lt.w(9)) i(3)=1                      fit1-073
      go to 9                                                           fit1-074
c sort in the new values of x and f.                                    fit1-075
    5 if (i(3).eq.0) go to 6                                            fit1-076
      j=i(3)                                                            fit1-077
      w(7-j)=w(7)                                                       fit1-078
      w(10-j)=w(10)                                                     fit1-079
      if ((w(7+j)-w(1))*(w(1)-w(7)).gt.0.d0) go to 7                    fit1-080
      w(7)=w(7+j)                                                       fit1-081
      w(10)=w(10+j)                                                     fit1-082
      w(7+j)=w(1)                                                       fit1-083
      w(10+j)=w(2)                                                      fit1-084
      if (w(2).ge.w(10)) i(3)=0                                         fit1-085
      go to 9                                                           fit1-086
    6 j=-1                                                              fit1-087
      if (w(1).lt.w(7)) j=1                                             fit1-088
      if (w(2).gt.w(10)) go to 8                                        fit1-089
      w(7+j)=w(7)                                                       fit1-090
      w(10+j)=w(10)                                                     fit1-091
    7 w(7)=w(1)                                                         fit1-092
      w(10)=w(2)                                                        fit1-093
      i31=i(3)+10                                                       fit1-094
      if (w(2).le.w(i31)) i(3)=0                                        fit1-095
      go to 9                                                           fit1-096
    8 w(7-j)=w(1)                                                       fit1-097
      w(10-j)=w(2)                                                      fit1-098
    9 j=7+i(3)                                                          fit1-099
c error tests.                                                          fit1-100
      if (w(6).eq.w(7).or.w(7).eq.w(8).or.(w(9).eq.w(10).and.w(10).eq.w(fit1-101
     111))) go to 14                                                    fit1-102
      if (i(1).ge.i(2)) go to 15                                        fit1-103
      if (i(3).eq.0) go to 10                                           fit1-104
c step size limitation.                                                 fit1-105
      w(1)=w(j)+(2*i(3))*dabs(w(6)-w(8))                                fit1-106
      go to 11                                                          fit1-107
c prediction of the position of the minimum (parabolic approximation).  fit1-108
   10 w(1)=((w(9)-w(10))/(w(6)-w(7))-(w(10)-w(11))/(w(7)-w(8)))/(w(6)-w(fit1-109
     18))                                                               fit1-110
      w(1)=.5d0*(w(6)+w(8)+(w(11)-w(9))/(w(1)*(w(6)-w(8))))             fit1-111
c test of convergence.                                                  fit1-112
      w(2)=dabs(w(1)-w(j))                                              fit1-113
      if (w(2).lt.dabs(w(4)).or.w(2).lt.dabs(w(5)*w(j))) go to 12       fit1-114
   11 i(1)=i(1)+1                                                       fit1-115
      return                                                            fit1-116
   12 ke=0                                                              fit1-117
   13 i37=i(3)+7                                                        fit1-118
      w(1)=w(i37)                                                       fit1-119
      i31=i(3)+10                                                       fit1-120
      w(2)=w(i31)                                                       fit1-121
      return                                                            fit1-122
   14 ke=ke+1                                                           fit1-123
   15 ke=ke+1                                                           fit1-124
      go to 13                                                          fit1-125
      end                                                               fit1-126
c 07/03/07                                                      ecis06  fit2-000
      subroutine fit2(m,n,a,d,ip,ir,llo)                                fit2-001
c if llo=.true. ex subroutine lilesq written by schweimer..             fit2-002
c  linear least squares problem ||b-a*d||=min(d)                        fit2-003
c  solved by householder transformations.                               fit2-004
c input:     m:       number of rows of a and b.                        fit2-005
c            n:       number of columns of a and rows of d.             fit2-006
c            a:       m*n matrix followed by the vector b of m          fit2-007
c                     components (destroyed).                           fit2-008
c output:    a:       the upper part contains the transformed input a   fit2-009
c                     a(2,1) contains the square of the euclidean norm. fit2-010
c            d:       vector of variables, the redundant variables are  fit2-011
c                     set to zero. the ||d||=min is not used because thefit2-012
c                     components of d are assumed not commensurable.    fit2-013
c            ip:      permutation vector of n components, it contains   fit2-014
c                     the column labels of matrix a ordered according   fit2-015
c                     their importance in reducing the euclidean norm.  fit2-016
c            ir:      error code: ir=0 no error, ir=-1 all components   fit2-017
c                     of d are zero and may be redundant, ir>0 the      fit2-018
c                     first ir components of ip contain the labels of   fit2-019
c                     the nonzero components of d, the remaining        fit2-020
c                     components of d are zero and may be redundant.    fit2-021
c  note: all arithmetic operations are performed in double precision,   fit2-022
c  an iterative improvement is impossible without saving a and b.       fit2-023
c  the round off error of ||b-a*d||**2 is approximately given by        fit2-024
c  ||b(initial)||**2 - ||b(transformed)||**2                            fit2-025
c                                                                       fit2-026
c if llo=.false. ex subroutine invata written by schweimer.             fit2-027
c  inversion of the product matrix a(transposed)*a                      fit2-028
c  the matrix a is reduced to an upper triangular matrix r by           fit2-029
c  householder transformations. the remaining computation is straight   fit2-030
c  forward.                                                             fit2-031
c input:     m:       number of columns of matrix a.                    fit2-032
c            n:       number of rows of matrix a, m >= n > 0.           fit2-033
c            a:       input matrix (destroyed).                         fit2-034
c output:    a:       triangular matrix r, r=a(i,j) i<=j=1,n.           fit2-035
c            d:       vector of length (n*(n+1))/2, it contains the     fit2-036
c                     upper triangular part of the inverse of a(t)*a.   fit2-037
c            ip:      permutation vector of length n, its first ir      fit2-038
c                     components contain the labels of the useful       fit2-039
c                     columns of a, the last components contain the     fit2-040
c                     labels of the columns which are linear            fit2-041
c                     combinations of the first.                        fit2-042
c            ir:      error code: ir=0 no error (rank of matrix a is n),fit2-043
c                     ir=-1 rank of matrix a is zero, ir>0 rank of      fit2-044
c                     matrix a is ir, the inverse of a(t)*a is computed fit2-045
c                     considering the ir columns of a indicated by the  fit2-046
c                     first ir components of ip.                        fit2-047
c***********************************************************************fit2-048
      implicit real*8 (a-h,o-z)                                         fit2-049
      logical llo                                                       fit2-050
      dimension a(m,*),d(*),ip(n)                                       fit2-051
      ir=0                                                              fit2-052
      n1=n                                                              fit2-053
      if (llo) n1=n+1                                                   fit2-054
      do 1 j=1,n                                                        fit2-055
    1 ip(j)=j                                                           fit2-056
c rotation loop.                                                        fit2-057
      do 13 k=1,n                                                       fit2-058
c pivot element    column j which generates the largest new a(*,m) and  fit2-059
c and line i of the largest element of column j if llo=.true.           fit2-060
c column and line of largest element if llo=.false.                     fit2-061
      u=0.d0                                                            fit2-062
      do 7 j=k,n                                                        fit2-063
      c=0.d0                                                            fit2-064
      do 2 i=k,m                                                        fit2-065
      if (dabs(a(i,j)).le.dabs(c)) go to 2                              fit2-066
      l2=i                                                              fit2-067
      c=a(i,j)                                                          fit2-068
    2 continue                                                          fit2-069
      if (c.eq.0.d0) go to 7                                            fit2-070
      s=0.d0                                                            fit2-071
      if (llo) go to 4                                                  fit2-072
      if (dabs(c).lt.u) go to 7                                         fit2-073
      u=dabs(c)                                                         fit2-074
      do 3 i=k,m                                                        fit2-075
      v=a(i,j)/c                                                        fit2-076
    3 s=s+v*v                                                           fit2-077
      go to 6                                                           fit2-078
    4 t=0.d0                                                            fit2-079
      do 5 i=k,m                                                        fit2-080
      v=a(i,j)/c                                                        fit2-081
      s=s+v*v                                                           fit2-082
    5 t=t+v*a(i,n1)                                                     fit2-083
      if (u.ge.t*(t/s)) go to 7                                         fit2-084
      u=t*(t/s)                                                         fit2-085
    6 sig=c*dsqrt(s)                                                    fit2-086
      l=j                                                               fit2-087
      l1=l2                                                             fit2-088
    7 continue                                                          fit2-089
      if (u.eq.0.d0) go to 14                                           fit2-090
c permute columns of a(k).                                              fit2-091
      i=ip(l)                                                           fit2-092
      ip(l)=ip(k)                                                       fit2-093
      ip(k)=i                                                           fit2-094
      do 8 i=1,m                                                        fit2-095
      c=a(i,l)                                                          fit2-096
      a(i,l)=a(i,k)                                                     fit2-097
    8 a(i,k)=c                                                          fit2-098
c permute lines of a(k).                                                fit2-099
      do 9 j=k,n1                                                       fit2-100
      c=a(k,j)                                                          fit2-101
      a(k,j)=a(l1,j)                                                    fit2-102
    9 a(l1,j)=c                                                         fit2-103
c rotation of the lower column fragment of a(k) and b(k).               fit2-104
      u=sig+a(k,k)                                                      fit2-105
      v=a(k,k)/sig                                                      fit2-106
      a(k,k)=-sig                                                       fit2-107
      l=k+1                                                             fit2-108
      if (l.gt.m) a(k,l)=-a(k,l)                                        fit2-109
      if (l.gt.n1.or.l.gt.m) go to 13                                   fit2-110
      do 12 j=l,n1                                                      fit2-111
      s=v*a(k,j)                                                        fit2-112
      do 10 i=l,m                                                       fit2-113
      t=a(i,k)/sig                                                      fit2-114
   10 s=s+t*a(i,j)                                                      fit2-115
      t=(a(k,j)+s)/u                                                    fit2-116
      a(k,j)=-s                                                         fit2-117
      do 11 i=l,m                                                       fit2-118
   11 a(i,j)=a(i,j)-t*a(i,k)                                            fit2-119
   12 continue                                                          fit2-120
   13 continue                                                          fit2-121
c end of rotation loop.                                                 fit2-122
      k=n                                                               fit2-123
      go to 15                                                          fit2-124
   14 k=k-1                                                             fit2-125
      ir=k                                                              fit2-126
   15 if (llo) go to 22                                                 fit2-127
      if (k.eq.0) go to 29                                              fit2-128
c inverse of the triangular matrix r stored in d.                       fit2-129
      do 18 j=1,k                                                       fit2-130
      d(j)=a(j,j)                                                       fit2-131
      a(j,j)=1.d0/d(j)                                                  fit2-132
      if (j.eq.1) go to 18                                              fit2-133
      i=j                                                               fit2-134
      do 17 l=2,j                                                       fit2-135
      i1=i                                                              fit2-136
      i=i-1                                                             fit2-137
      s=0.d0                                                            fit2-138
      do 16 l1=i1,j                                                     fit2-139
   16 s=s+a(i,l1)*a(j,l1)                                               fit2-140
   17 a(j,i)=-s/d(i)                                                    fit2-141
   18 continue                                                          fit2-142
c inverse of the product matrix.                                        fit2-143
      do 21 j=1,k                                                       fit2-144
      do 20 i=1,j                                                       fit2-145
      l=max0(ip(j),ip(i))                                               fit2-146
      ij=ip(i)+ip(j)+(l*(l-3))/2                                        fit2-147
      s=0.d0                                                            fit2-148
      do 19 l1=j,k                                                      fit2-149
   19 s=s+a(l1,i)*a(l1,j)                                               fit2-150
   20 d(ij)=s                                                           fit2-151
   21 continue                                                          fit2-152
      go to 30                                                          fit2-153
c square of the euclidean norm.                                         fit2-154
   22 s=0.d0                                                            fit2-155
      l=k+1                                                             fit2-156
      if (k.eq.m) go to 24                                              fit2-157
      do 23 i=l,m                                                       fit2-158
   23 s=s+a(i,n1)*a(i,n1)                                               fit2-159
   24 a(2,1)=s                                                          fit2-160
      if (k.eq.n) go to 26                                              fit2-161
c components of d which do not reduce the euclidean norm.               fit2-162
      do 25 j=l,n                                                       fit2-163
      ij=ip(j)                                                          fit2-164
   25 d(ij)=0.d0                                                        fit2-165
      if (k.eq.0) go to 29                                              fit2-166
c computation of d.                                                     fit2-167
   26 ij=ip(k)                                                          fit2-168
      d(ij)=a(k,n1)/a(k,k)                                              fit2-169
      if (k.eq.1) go to 30                                              fit2-170
      do 28 j=2,k                                                       fit2-171
      l=k+2-j                                                           fit2-172
      s=a(l-1,n1)                                                       fit2-173
      do 27 i=l,k                                                       fit2-174
      ij=ip(i)                                                          fit2-175
   27 s=s-a(l-1,i)*d(ij)                                                fit2-176
      ij=ip(l-1)                                                        fit2-177
   28 d(ij)=s/a(l-1,l-1)                                                fit2-178
      go to 30                                                          fit2-179
c error code.                                                           fit2-180
   29 ir=-1                                                             fit2-181
   30 return                                                            fit2-182
      end                                                               fit2-183
